
LoRa_Sender_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a670  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800a780  0800a780  0001a780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ada4  0800ada4  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ada4  0800ada4  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ada4  0800ada4  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ada4  0800ada4  0001ada4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ada8  0800ada8  0001ada8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800adac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000200  0800afa8  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  0800afa8  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e60  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000278d  00000000  00000000  000320c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  00034858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e91  00000000  00000000  00035ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001971f  00000000  00000000  00036969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000154eb  00000000  00000000  00050088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090b53  00000000  00000000  00065573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063fc  00000000  00000000  000f60c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000fc4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a768 	.word	0x0800a768

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800a768 	.word	0x0800a768

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	4605      	mov	r5, r0
 8000b80:	460c      	mov	r4, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	2300      	movs	r3, #0
 8000b86:	4628      	mov	r0, r5
 8000b88:	4621      	mov	r1, r4
 8000b8a:	f7ff ff21 	bl	80009d0 <__aeabi_dcmplt>
 8000b8e:	b928      	cbnz	r0, 8000b9c <__aeabi_d2lz+0x20>
 8000b90:	4628      	mov	r0, r5
 8000b92:	4621      	mov	r1, r4
 8000b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b98:	f000 b80a 	b.w	8000bb0 <__aeabi_d2ulz>
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ba2:	f000 f805 	bl	8000bb0 <__aeabi_d2ulz>
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bac:	bd38      	pop	{r3, r4, r5, pc}
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2ulz>:
 8000bb0:	b5d0      	push	{r4, r6, r7, lr}
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <__aeabi_d2ulz+0x34>)
 8000bb6:	4606      	mov	r6, r0
 8000bb8:	460f      	mov	r7, r1
 8000bba:	f7ff fc97 	bl	80004ec <__aeabi_dmul>
 8000bbe:	f7ff ff6d 	bl	8000a9c <__aeabi_d2uiz>
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	f7ff fc18 	bl	80003f8 <__aeabi_ui2d>
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <__aeabi_d2ulz+0x38>)
 8000bcc:	f7ff fc8e 	bl	80004ec <__aeabi_dmul>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	4639      	mov	r1, r7
 8000bd8:	f7ff fad0 	bl	800017c <__aeabi_dsub>
 8000bdc:	f7ff ff5e 	bl	8000a9c <__aeabi_d2uiz>
 8000be0:	4621      	mov	r1, r4
 8000be2:	bdd0      	pop	{r4, r6, r7, pc}
 8000be4:	3df00000 	.word	0x3df00000
 8000be8:	41f00000 	.word	0x41f00000

08000bec <DHT22_Start>:
#include "stdio.h"
#include "stdint.h"
#include "DHT22.h"

// Function implementations
void DHT22_Start(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	Set_Pin_Output(GPIOA, GPIO_PIN_5); // set the pin as output
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <DHT22_Start+0x3c>)
 8000bf4:	f000 f892 	bl	8000d1c <Set_Pin_Output>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // pull the pin low
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2120      	movs	r1, #32
 8000bfc:	480a      	ldr	r0, [pc, #40]	; (8000c28 <DHT22_Start+0x3c>)
 8000bfe:	f002 fdd8 	bl	80037b2 <HAL_GPIO_WritePin>
	Delay_Us(1200);
 8000c02:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000c06:	f001 f941 	bl	8001e8c <Delay_Us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // pull the pin high
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <DHT22_Start+0x3c>)
 8000c10:	f002 fdcf 	bl	80037b2 <HAL_GPIO_WritePin>
	Delay_Us(20);
 8000c14:	2014      	movs	r0, #20
 8000c16:	f001 f939 	bl	8001e8c <Delay_Us>
	Set_Pin_Input(GPIOA, GPIO_PIN_5); // set the pin as input
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <DHT22_Start+0x3c>)
 8000c1e:	f000 f8a2 	bl	8000d66 <Set_Pin_Input>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40010800 	.word	0x40010800

08000c2c <DHT22_Check_Response>:

uint8_t DHT22_Check_Response(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	uint8_t resposne = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]
	Delay_Us(40);
 8000c36:	2028      	movs	r0, #40	; 0x28
 8000c38:	f001 f928 	bl	8001e8c <Delay_Us>
	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) {
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <DHT22_Check_Response+0x5c>)
 8000c40:	f002 fda0 	bl	8003784 <HAL_GPIO_ReadPin>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10f      	bne.n	8000c6a <DHT22_Check_Response+0x3e>
		Delay_Us(80); // wait 80 us for response from DHT22
 8000c4a:	2050      	movs	r0, #80	; 0x50
 8000c4c:	f001 f91e 	bl	8001e8c <Delay_Us>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8000c50:	2120      	movs	r1, #32
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <DHT22_Check_Response+0x5c>)
 8000c54:	f002 fd96 	bl	8003784 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <DHT22_Check_Response+0x38>
			resposne = 1; // successfully receive the response
 8000c5e:	2301      	movs	r3, #1
 8000c60:	71fb      	strb	r3, [r7, #7]
 8000c62:	e004      	b.n	8000c6e <DHT22_Check_Response+0x42>
		else
			resposne = -1; // fail to receive the response
 8000c64:	23ff      	movs	r3, #255	; 0xff
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	e001      	b.n	8000c6e <DHT22_Check_Response+0x42>
	} else
		return -1;
 8000c6a:	23ff      	movs	r3, #255	; 0xff
 8000c6c:	e008      	b.n	8000c80 <DHT22_Check_Response+0x54>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8000c6e:	bf00      	nop
 8000c70:	2120      	movs	r1, #32
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <DHT22_Check_Response+0x5c>)
 8000c74:	f002 fd86 	bl	8003784 <HAL_GPIO_ReadPin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f8      	bne.n	8000c70 <DHT22_Check_Response+0x44>
		; // wait for the pin to go low
	return resposne;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40010800 	.word	0x40010800

08000c8c <DHT22_Read_Data>:

uint8_t DHT22_Read_Data(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
	uint8_t data;
	for (uint8_t i = 0; i < 8; i++) {
 8000c92:	2300      	movs	r3, #0
 8000c94:	71bb      	strb	r3, [r7, #6]
 8000c96:	e037      	b.n	8000d08 <DHT22_Read_Data+0x7c>
//		Delay_Us(50);
		while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)))
 8000c98:	bf00      	nop
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	481e      	ldr	r0, [pc, #120]	; (8000d18 <DHT22_Read_Data+0x8c>)
 8000c9e:	f002 fd71 	bl	8003784 <HAL_GPIO_ReadPin>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f8      	beq.n	8000c9a <DHT22_Read_Data+0xe>
			; // wait for the pin to to go high
		Delay_Us(30);
 8000ca8:	201e      	movs	r0, #30
 8000caa:	f001 f8ef 	bl	8001e8c <Delay_Us>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) // if the pin is high
 8000cae:	2120      	movs	r1, #32
 8000cb0:	4819      	ldr	r0, [pc, #100]	; (8000d18 <DHT22_Read_Data+0x8c>)
 8000cb2:	f002 fd67 	bl	8003784 <HAL_GPIO_ReadPin>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d00c      	beq.n	8000cd6 <DHT22_Read_Data+0x4a>
			data |= 1 << (7 - i); // write 1 bit
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	b25a      	sxtb	r2, r3
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	e00d      	b.n	8000cf2 <DHT22_Read_Data+0x66>
		else
			// if the pin is low
			data &= ~(1 << (7 - i)); // write 0 bit
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	f1c3 0307 	rsb	r3, r3, #7
 8000cdc:	2201      	movs	r2, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	b25a      	sxtb	r2, r3
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	4013      	ands	r3, r2
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	71fb      	strb	r3, [r7, #7]
		while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8000cf2:	bf00      	nop
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	4808      	ldr	r0, [pc, #32]	; (8000d18 <DHT22_Read_Data+0x8c>)
 8000cf8:	f002 fd44 	bl	8003784 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f8      	bne.n	8000cf4 <DHT22_Read_Data+0x68>
	for (uint8_t i = 0; i < 8; i++) {
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	3301      	adds	r3, #1
 8000d06:	71bb      	strb	r3, [r7, #6]
 8000d08:	79bb      	ldrb	r3, [r7, #6]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	d9c4      	bls.n	8000c98 <DHT22_Read_Data+0xc>
			; // wait for the pin to go low
	}
	return data;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40010800 	.word	0x40010800

08000d1c <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000d36:	887b      	ldrh	r3, [r7, #2]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f002 fd38 	bl	80037b2 <HAL_GPIO_WritePin>
	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	4619      	mov	r1, r3
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f002 fb8f 	bl	800347c <HAL_GPIO_Init>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	2200      	movs	r2, #0
 8000d84:	4619      	mov	r1, r3
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f002 fd13 	bl	80037b2 <HAL_GPIO_WritePin>
	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	4619      	mov	r1, r3
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f002 fb6a 	bl	800347c <HAL_GPIO_Init>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <DHT22_Get_Data>:

uint8_t DHT22_Get_Data(DHT22_Data *data) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	uint8_t status, tempByte1, tempByte2, humidByte1, humidByte2, rcv_checksum, checksum = 0xFF;
 8000db8:	23ff      	movs	r3, #255	; 0xff
 8000dba:	72bb      	strb	r3, [r7, #10]
	DHT22_Start();
 8000dbc:	f7ff ff16 	bl	8000bec <DHT22_Start>
	status = DHT22_Check_Response();
 8000dc0:	f7ff ff34 	bl	8000c2c <DHT22_Check_Response>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	727b      	strb	r3, [r7, #9]
	if (status) {
 8000dc8:	7a7b      	ldrb	r3, [r7, #9]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d013      	beq.n	8000df6 <DHT22_Get_Data+0x46>
		humidByte1 = DHT22_Read_Data();
 8000dce:	f7ff ff5d 	bl	8000c8c <DHT22_Read_Data>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	737b      	strb	r3, [r7, #13]
		humidByte2 = DHT22_Read_Data();
 8000dd6:	f7ff ff59 	bl	8000c8c <DHT22_Read_Data>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	733b      	strb	r3, [r7, #12]
		tempByte1 = DHT22_Read_Data();
 8000dde:	f7ff ff55 	bl	8000c8c <DHT22_Read_Data>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
		tempByte2 = DHT22_Read_Data();
 8000de6:	f7ff ff51 	bl	8000c8c <DHT22_Read_Data>
 8000dea:	4603      	mov	r3, r0
 8000dec:	73bb      	strb	r3, [r7, #14]
		rcv_checksum = DHT22_Read_Data();
 8000dee:	f7ff ff4d 	bl	8000c8c <DHT22_Read_Data>
 8000df2:	4603      	mov	r3, r0
 8000df4:	72fb      	strb	r3, [r7, #11]
	}
	checksum = humidByte1 + humidByte2 + tempByte1 + tempByte2;
 8000df6:	7b7a      	ldrb	r2, [r7, #13]
 8000df8:	7b3b      	ldrb	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	4413      	add	r3, r2
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	7bbb      	ldrb	r3, [r7, #14]
 8000e06:	4413      	add	r3, r2
 8000e08:	72bb      	strb	r3, [r7, #10]

	if (checksum == rcv_checksum) {
 8000e0a:	7aba      	ldrb	r2, [r7, #10]
 8000e0c:	7afb      	ldrb	r3, [r7, #11]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d123      	bne.n	8000e5a <DHT22_Get_Data+0xaa>
		data->temperature = (double) (((tempByte1 << 8) | tempByte2)) / 10.00;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	021a      	lsls	r2, r3, #8
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fafc 	bl	8000418 <__aeabi_i2d>
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <DHT22_Get_Data+0xb4>)
 8000e26:	f7ff fc8b 	bl	8000740 <__aeabi_ddiv>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	e9c1 2300 	strd	r2, r3, [r1]
		data->humidity = (double) (((humidByte1 << 8) | humidByte2)) / 10.00;
 8000e34:	7b7b      	ldrb	r3, [r7, #13]
 8000e36:	021a      	lsls	r2, r3, #8
 8000e38:	7b3b      	ldrb	r3, [r7, #12]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff faeb 	bl	8000418 <__aeabi_i2d>
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <DHT22_Get_Data+0xb4>)
 8000e48:	f7ff fc7a 	bl	8000740 <__aeabi_ddiv>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <DHT22_Get_Data+0xac>
	}
	else
		return 0;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40240000 	.word	0x40240000

08000e68 <lcd_send_cmd>:
// External variables
extern I2C_HandleTypeDef hi2c1;

// Function implementation
void lcd_send_cmd (char cmd)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f023 030f 	bic.w	r3, r3, #15
 8000e78:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f043 030c 	orr.w	r3, r3, #12
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	f043 030c 	orr.w	r3, r3, #12
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ea8:	f107 0208 	add.w	r2, r7, #8
 8000eac:	2364      	movs	r3, #100	; 0x64
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	214e      	movs	r1, #78	; 0x4e
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <lcd_send_cmd+0x5c>)
 8000eb6:	f002 fe09 	bl	8003acc <HAL_I2C_Master_Transmit>
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000021c 	.word	0x2000021c

08000ec8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f023 030f 	bic.w	r3, r3, #15
 8000ed8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	f043 030d 	orr.w	r3, r3, #13
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	f043 0309 	orr.w	r3, r3, #9
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	f043 030d 	orr.w	r3, r3, #13
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	f043 0309 	orr.w	r3, r3, #9
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f08:	f107 0208 	add.w	r2, r7, #8
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2304      	movs	r3, #4
 8000f12:	214e      	movs	r1, #78	; 0x4e
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <lcd_send_data+0x5c>)
 8000f16:	f002 fdd9 	bl	8003acc <HAL_I2C_Master_Transmit>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000021c 	.word	0x2000021c

08000f28 <lcd_init>:

void lcd_init (void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000f2c:	2032      	movs	r0, #50	; 0x32
 8000f2e:	f002 f973 	bl	8003218 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f32:	2030      	movs	r0, #48	; 0x30
 8000f34:	f7ff ff98 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000f38:	2005      	movs	r0, #5
 8000f3a:	f002 f96d 	bl	8003218 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f3e:	2030      	movs	r0, #48	; 0x30
 8000f40:	f7ff ff92 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000f44:	2001      	movs	r0, #1
 8000f46:	f002 f967 	bl	8003218 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f4a:	2030      	movs	r0, #48	; 0x30
 8000f4c:	f7ff ff8c 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(10);
 8000f50:	200a      	movs	r0, #10
 8000f52:	f002 f961 	bl	8003218 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000f56:	2020      	movs	r0, #32
 8000f58:	f7ff ff86 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f002 f95b 	bl	8003218 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f62:	2028      	movs	r0, #40	; 0x28
 8000f64:	f7ff ff80 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f002 f955 	bl	8003218 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f6e:	2008      	movs	r0, #8
 8000f70:	f7ff ff7a 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f002 f94f 	bl	8003218 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff ff74 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f002 f949 	bl	8003218 <HAL_Delay>
	HAL_Delay(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f002 f946 	bl	8003218 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f8c:	2006      	movs	r0, #6
 8000f8e:	f7ff ff6b 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f002 f940 	bl	8003218 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f98:	200c      	movs	r0, #12
 8000f9a:	f7ff ff65 	bl	8000e68 <lcd_send_cmd>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000faa:	e006      	b.n	8000fba <lcd_send_string+0x18>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff87 	bl	8000ec8 <lcd_send_data>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f4      	bne.n	8000fac <lcd_send_string+0xa>
}
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <lcd_clear>:

void lcd_clear(void){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 8000fd2:	2080      	movs	r0, #128	; 0x80
 8000fd4:	f7ff ff48 	bl	8000e68 <lcd_send_cmd>
	for (int i = 0; i < 70; i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	e005      	b.n	8000fea <lcd_clear+0x1e>
		lcd_send_data(' ');
 8000fde:	2020      	movs	r0, #32
 8000fe0:	f7ff ff72 	bl	8000ec8 <lcd_send_data>
	for (int i = 0; i < 70; i++)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b45      	cmp	r3, #69	; 0x45
 8000fee:	ddf6      	ble.n	8000fde <lcd_clear+0x12>
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <lcd_put_cursor>:

void lcd_put_cursor(int row, int col){
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
	switch (row) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <lcd_put_cursor+0x18>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <lcd_put_cursor+0x22>
			break;
		case 1:
			col |= 0xC0;
			break;
		default:
			break;
 8001010:	e009      	b.n	8001026 <lcd_put_cursor+0x2c>
			col |= 0x80;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001018:	603b      	str	r3, [r7, #0]
			break;
 800101a:	e004      	b.n	8001026 <lcd_put_cursor+0x2c>
			col |= 0xC0;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001022:	603b      	str	r3, [r7, #0]
			break;
 8001024:	bf00      	nop
	}
	lcd_send_cmd(col);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff1c 	bl	8000e68 <lcd_send_cmd>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001038:	b4b0      	push	{r4, r5, r7}
 800103a:	b08f      	sub	sp, #60	; 0x3c
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001040:	f240 13b1 	movw	r3, #433	; 0x1b1
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001046:	2307      	movs	r3, #7
 8001048:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 800104c:	2307      	movs	r3, #7
 800104e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8001052:	2301      	movs	r3, #1
 8001054:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8001058:	23ff      	movs	r3, #255	; 0xff
 800105a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8001064:	2308      	movs	r3, #8
 8001066:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	461d      	mov	r5, r3
 800106c:	f107 040c 	add.w	r4, r7, #12
 8001070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001078:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800107c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	373c      	adds	r7, #60	; 0x3c
 8001084:	46bd      	mov	sp, r7
 8001086:	bcb0      	pop	{r4, r5, r7}
 8001088:	4770      	bx	lr

0800108a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001094:	2101      	movs	r1, #1
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f99f 	bl	80013da <LoRa_read>
 800109c:	4603      	mov	r3, r0
 800109e:	73bb      	strb	r3, [r7, #14]
	data = read;
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d107      	bne.n	80010ba <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	f023 0307 	bic.w	r3, r3, #7
 80010b0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
 80010b8:	e03e      	b.n	8001138 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10c      	bne.n	80010da <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80010c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010c4:	f023 0307 	bic.w	r3, r3, #7
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	61da      	str	r2, [r3, #28]
 80010d8:	e02e      	b.n	8001138 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d10c      	bne.n	80010fa <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80010e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010e4:	f023 0307 	bic.w	r3, r3, #7
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	f043 0303 	orr.w	r3, r3, #3
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	61da      	str	r2, [r3, #28]
 80010f8:	e01e      	b.n	8001138 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d10c      	bne.n	800111a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001104:	f023 0307 	bic.w	r3, r3, #7
 8001108:	b25b      	sxtb	r3, r3
 800110a:	f043 0305 	orr.w	r3, r3, #5
 800110e:	b25b      	sxtb	r3, r3
 8001110:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2205      	movs	r2, #5
 8001116:	61da      	str	r2, [r3, #28]
 8001118:	e00e      	b.n	8001138 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b06      	cmp	r3, #6
 800111e:	d10b      	bne.n	8001138 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001124:	f023 0307 	bic.w	r3, r3, #7
 8001128:	b25b      	sxtb	r3, r3
 800112a:	f043 0306 	orr.w	r3, r3, #6
 800112e:	b25b      	sxtb	r3, r3
 8001130:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2206      	movs	r2, #6
 8001136:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	461a      	mov	r2, r3
 800113c:	2101      	movs	r1, #1
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f965 	bl	800140e <LoRa_write>
	//HAL_Delay(10);
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	4613      	mov	r3, r2
 800115a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	889b      	ldrh	r3, [r3, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	f002 fb23 	bl	80037b2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6998      	ldr	r0, [r3, #24]
 8001170:	88fa      	ldrh	r2, [r7, #6]
 8001172:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	f003 fc94 	bl	8004aa4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800117c:	bf00      	nop
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4618      	mov	r0, r3
 8001184:	f004 f899 	bl	80052ba <HAL_SPI_GetState>
 8001188:	4603      	mov	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d1f7      	bne.n	800117e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6998      	ldr	r0, [r3, #24]
 8001192:	8b3a      	ldrh	r2, [r7, #24]
 8001194:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001198:	6839      	ldr	r1, [r7, #0]
 800119a:	f003 fdc6 	bl	8004d2a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800119e:	bf00      	nop
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 f888 	bl	80052ba <HAL_SPI_GetState>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d1f7      	bne.n	80011a0 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	889b      	ldrh	r3, [r3, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	f002 faf9 	bl	80037b2 <HAL_GPIO_WritePin>
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	4613      	mov	r3, r2
 80011d6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	889b      	ldrh	r3, [r3, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f002 fae5 	bl	80037b2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6998      	ldr	r0, [r3, #24]
 80011ec:	88fa      	ldrh	r2, [r7, #6]
 80011ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	f003 fc56 	bl	8004aa4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011f8:	bf00      	nop
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 f85b 	bl	80052ba <HAL_SPI_GetState>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d1f7      	bne.n	80011fa <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6998      	ldr	r0, [r3, #24]
 800120e:	8b3a      	ldrh	r2, [r7, #24]
 8001210:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001214:	6839      	ldr	r1, [r7, #0]
 8001216:	f003 fc45 	bl	8004aa4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800121a:	bf00      	nop
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4618      	mov	r0, r3
 8001222:	f004 f84a 	bl	80052ba <HAL_SPI_GetState>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d1f7      	bne.n	800121c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	889b      	ldrh	r3, [r3, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	4619      	mov	r1, r3
 8001238:	f002 fabb 	bl	80037b2 <HAL_GPIO_WritePin>
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	04db      	lsls	r3, r3, #19
 8001252:	115b      	asrs	r3, r3, #5
 8001254:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	0c1b      	lsrs	r3, r3, #16
 800125a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	461a      	mov	r2, r3
 8001260:	2106      	movs	r1, #6
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f8d3 	bl	800140e <LoRa_write>
	HAL_Delay(5);
 8001268:	2005      	movs	r0, #5
 800126a:	f001 ffd5 	bl	8003218 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001274:	7afb      	ldrb	r3, [r7, #11]
 8001276:	461a      	mov	r2, r3
 8001278:	2107      	movs	r1, #7
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f8c7 	bl	800140e <LoRa_write>
	HAL_Delay(5);
 8001280:	2005      	movs	r0, #5
 8001282:	f001 ffc9 	bl	8003218 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800128a:	7afb      	ldrb	r3, [r7, #11]
 800128c:	461a      	mov	r2, r3
 800128e:	2108      	movs	r1, #8
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f8bc 	bl	800140e <LoRa_write>
	HAL_Delay(5);
 8001296:	2005      	movs	r0, #5
 8001298:	f001 ffbe 	bl	8003218 <HAL_Delay>
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	dd01      	ble.n	80012b8 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80012b4:	230c      	movs	r3, #12
 80012b6:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	dc01      	bgt.n	80012c2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80012be:	2307      	movs	r3, #7
 80012c0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80012c2:	211e      	movs	r1, #30
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f888 	bl	80013da <LoRa_read>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80012ce:	200a      	movs	r0, #10
 80012d0:	f001 ffa2 	bl	8003218 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80012e8:	7bbb      	ldrb	r3, [r7, #14]
 80012ea:	461a      	mov	r2, r3
 80012ec:	211e      	movs	r1, #30
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f88d 	bl	800140e <LoRa_write>
	HAL_Delay(10);
 80012f4:	200a      	movs	r0, #10
 80012f6:	f001 ff8f 	bl	8003218 <HAL_Delay>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	461a      	mov	r2, r3
 8001312:	2109      	movs	r1, #9
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f87a 	bl	800140e <LoRa_write>
	HAL_Delay(10);
 800131a:	200a      	movs	r0, #10
 800131c:	f001 ff7c 	bl	8003218 <HAL_Delay>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	2b2c      	cmp	r3, #44	; 0x2c
 800133c:	d801      	bhi.n	8001342 <LoRa_setOCP+0x1a>
		current = 45;
 800133e:	232d      	movs	r3, #45	; 0x2d
 8001340:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	2bf0      	cmp	r3, #240	; 0xf0
 8001346:	d901      	bls.n	800134c <LoRa_setOCP+0x24>
		current = 240;
 8001348:	23f0      	movs	r3, #240	; 0xf0
 800134a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	2b78      	cmp	r3, #120	; 0x78
 8001350:	d809      	bhi.n	8001366 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	3b2d      	subs	r3, #45	; 0x2d
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <LoRa_setOCP+0x78>)
 8001358:	fb82 1203 	smull	r1, r2, r2, r3
 800135c:	1052      	asrs	r2, r2, #1
 800135e:	17db      	asrs	r3, r3, #31
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e00b      	b.n	800137e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	2bf0      	cmp	r3, #240	; 0xf0
 800136a:	d808      	bhi.n	800137e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	331e      	adds	r3, #30
 8001370:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <LoRa_setOCP+0x78>)
 8001372:	fb82 1203 	smull	r1, r2, r2, r3
 8001376:	1092      	asrs	r2, r2, #2
 8001378:	17db      	asrs	r3, r3, #31
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	3320      	adds	r3, #32
 8001382:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	461a      	mov	r2, r3
 8001388:	210b      	movs	r1, #11
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f83f 	bl	800140e <LoRa_write>
	HAL_Delay(10);
 8001390:	200a      	movs	r0, #10
 8001392:	f001 ff41 	bl	8003218 <HAL_Delay>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	66666667 	.word	0x66666667

080013a4 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80013ac:	211e      	movs	r1, #30
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f813 	bl	80013da <LoRa_read>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	f043 0307 	orr.w	r3, r3, #7
 80013be:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	461a      	mov	r2, r3
 80013c4:	211e      	movs	r1, #30
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f821 	bl	800140e <LoRa_write>
	HAL_Delay(10);
 80013cc:	200a      	movs	r0, #10
 80013ce:	f001 ff23 	bl	8003218 <HAL_Delay>
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af02      	add	r7, sp, #8
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80013f0:	f107 030f 	add.w	r3, r7, #15
 80013f4:	f107 010e 	add.w	r1, r7, #14
 80013f8:	2201      	movs	r2, #1
 80013fa:	9200      	str	r2, [sp, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fea4 	bl	800114c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af02      	add	r7, sp, #8
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	460b      	mov	r3, r1
 8001418:	70fb      	strb	r3, [r7, #3]
 800141a:	4613      	mov	r3, r2
 800141c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001424:	b2db      	uxtb	r3, r3
 8001426:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001428:	78bb      	ldrb	r3, [r7, #2]
 800142a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800142c:	f107 030f 	add.w	r3, r7, #15
 8001430:	f107 010e 	add.w	r1, r7, #14
 8001434:	2201      	movs	r2, #1
 8001436:	9200      	str	r2, [sp, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fec4 	bl	80011c8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	461a      	mov	r2, r3
 8001454:	460b      	mov	r3, r1
 8001456:	72fb      	strb	r3, [r7, #11]
 8001458:	4613      	mov	r3, r2
 800145a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800145c:	7afb      	ldrb	r3, [r7, #11]
 800145e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001462:	b2db      	uxtb	r3, r3
 8001464:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	889b      	ldrh	r3, [r3, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	f002 f99e 	bl	80037b2 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6998      	ldr	r0, [r3, #24]
 800147a:	f107 0117 	add.w	r1, r7, #23
 800147e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001482:	2201      	movs	r2, #1
 8001484:	f003 fb0e 	bl	8004aa4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001488:	bf00      	nop
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4618      	mov	r0, r3
 8001490:	f003 ff13 	bl	80052ba <HAL_SPI_GetState>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d1f7      	bne.n	800148a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6998      	ldr	r0, [r3, #24]
 800149e:	7abb      	ldrb	r3, [r7, #10]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f003 fafc 	bl	8004aa4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80014ac:	bf00      	nop
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 ff01 	bl	80052ba <HAL_SPI_GetState>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d1f7      	bne.n	80014ae <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	889b      	ldrh	r3, [r3, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	4619      	mov	r1, r3
 80014ca:	f002 f972 	bl	80037b2 <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]

	return 1;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	4611      	mov	r1, r2
 80014f6:	461a      	mov	r2, r3
 80014f8:	460b      	mov	r3, r1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4613      	mov	r3, r2
 80014fe:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001506:	2101      	movs	r1, #1
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff fdbe 	bl	800108a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800150e:	210e      	movs	r1, #14
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff ff62 	bl	80013da <LoRa_read>
 8001516:	4603      	mov	r3, r0
 8001518:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800151a:	7cfb      	ldrb	r3, [r7, #19]
 800151c:	461a      	mov	r2, r3
 800151e:	210d      	movs	r1, #13
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f7ff ff74 	bl	800140e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	461a      	mov	r2, r3
 800152a:	2122      	movs	r1, #34	; 0x22
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff ff6e 	bl	800140e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	2100      	movs	r1, #0
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff ff85 	bl	8001448 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800153e:	2103      	movs	r1, #3
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f7ff fda2 	bl	800108a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001546:	2112      	movs	r1, #18
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff ff46 	bl	80013da <LoRa_read>
 800154e:	4603      	mov	r3, r0
 8001550:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001552:	7cfb      	ldrb	r3, [r7, #19]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00a      	beq.n	8001572 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800155c:	22ff      	movs	r2, #255	; 0xff
 800155e:	2112      	movs	r1, #18
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff ff54 	bl	800140e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001566:	6979      	ldr	r1, [r7, #20]
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff fd8e 	bl	800108a <LoRa_gotoMode>
			return 1;
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001572:	88bb      	ldrh	r3, [r7, #4]
 8001574:	3b01      	subs	r3, #1
 8001576:	80bb      	strh	r3, [r7, #4]
 8001578:	88bb      	ldrh	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d105      	bne.n	800158a <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800157e:	6979      	ldr	r1, [r7, #20]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff fd82 	bl	800108a <LoRa_gotoMode>
				return 0;
 8001586:	2300      	movs	r3, #0
 8001588:	e003      	b.n	8001592 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800158a:	2001      	movs	r0, #1
 800158c:	f001 fe44 	bl	8003218 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001590:	e7d9      	b.n	8001546 <LoRa_transmit+0x5c>
	}
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80015a2:	2105      	movs	r1, #5
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fd70 	bl	800108a <LoRa_gotoMode>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80015b2:	b590      	push	{r4, r7, lr}
 80015b4:	b089      	sub	sp, #36	; 0x24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	4613      	mov	r3, r2
 80015be:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	e007      	b.n	80015da <LoRa_receive+0x28>
		data[i]=0;
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	4413      	add	r3, r2
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	3301      	adds	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	429a      	cmp	r2, r3
 80015e0:	dbf3      	blt.n	80015ca <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80015e2:	2101      	movs	r1, #1
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fd50 	bl	800108a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80015ea:	2112      	movs	r1, #18
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f7ff fef4 	bl	80013da <LoRa_read>
 80015f2:	4603      	mov	r3, r0
 80015f4:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80015f6:	7cfb      	ldrb	r3, [r7, #19]
 80015f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d02f      	beq.n	8001660 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001600:	22ff      	movs	r2, #255	; 0xff
 8001602:	2112      	movs	r1, #18
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff ff02 	bl	800140e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800160a:	2113      	movs	r1, #19
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff fee4 	bl	80013da <LoRa_read>
 8001612:	4603      	mov	r3, r0
 8001614:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001616:	2110      	movs	r1, #16
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff fede 	bl	80013da <LoRa_read>
 800161e:	4603      	mov	r3, r0
 8001620:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001622:	7cfb      	ldrb	r3, [r7, #19]
 8001624:	461a      	mov	r2, r3
 8001626:	210d      	movs	r1, #13
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fef0 	bl	800140e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800162e:	7cba      	ldrb	r2, [r7, #18]
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	4293      	cmp	r3, r2
 8001634:	bf28      	it	cs
 8001636:	4613      	movcs	r3, r2
 8001638:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e00b      	b.n	8001658 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	18d4      	adds	r4, r2, r3
 8001646:	2100      	movs	r1, #0
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff fec6 	bl	80013da <LoRa_read>
 800164e:	4603      	mov	r3, r0
 8001650:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	429a      	cmp	r2, r3
 800165e:	dbef      	blt.n	8001640 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001660:	2105      	movs	r1, #5
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff fd11 	bl	800108a <LoRa_gotoMode>
    return min;
 8001668:	7ffb      	ldrb	r3, [r7, #31]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}

08001672 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff2b 	bl	80014d6 <LoRa_isvalid>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8093 	beq.w	80017ae <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001688:	2100      	movs	r1, #0
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fcfd 	bl	800108a <LoRa_gotoMode>
			HAL_Delay(10);
 8001690:	200a      	movs	r0, #10
 8001692:	f001 fdc1 	bl	8003218 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001696:	2101      	movs	r1, #1
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fe9e 	bl	80013da <LoRa_read>
 800169e:	4603      	mov	r3, r0
 80016a0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80016a2:	200a      	movs	r0, #10
 80016a4:	f001 fdb8 	bl	8003218 <HAL_Delay>
			data = read | 0x80;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016ae:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80016b0:	7bbb      	ldrb	r3, [r7, #14]
 80016b2:	461a      	mov	r2, r3
 80016b4:	2101      	movs	r1, #1
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fea9 	bl	800140e <LoRa_write>
			HAL_Delay(100);
 80016bc:	2064      	movs	r0, #100	; 0x64
 80016be:	f001 fdab 	bl	8003218 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fdbb 	bl	8001244 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fe13 	bl	8001302 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fe1f 	bl	8001328 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80016ea:	2223      	movs	r2, #35	; 0x23
 80016ec:	210c      	movs	r1, #12
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fe8d 	bl	800140e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fe55 	bl	80013a4 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fdce 	bl	80012a4 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001708:	22ff      	movs	r2, #255	; 0xff
 800170a:	211f      	movs	r1, #31
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fe7e 	bl	800140e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	b2da      	uxtb	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4413      	add	r3, r2
 800172c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	461a      	mov	r2, r3
 8001732:	211d      	movs	r1, #29
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fe6a 	bl	800140e <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	b29b      	uxth	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	2120      	movs	r1, #32
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fe60 	bl	800140e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	b2db      	uxtb	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	2121      	movs	r1, #33	; 0x21
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fe58 	bl	800140e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800175e:	2140      	movs	r1, #64	; 0x40
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fe3a 	bl	80013da <LoRa_read>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001770:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001772:	7bbb      	ldrb	r3, [r7, #14]
 8001774:	461a      	mov	r2, r3
 8001776:	2140      	movs	r1, #64	; 0x40
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fe48 	bl	800140e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800177e:	2101      	movs	r1, #1
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fc82 	bl	800108a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800178c:	200a      	movs	r0, #10
 800178e:	f001 fd43 	bl	8003218 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001792:	2142      	movs	r1, #66	; 0x42
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fe20 	bl	80013da <LoRa_read>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	2b12      	cmp	r3, #18
 80017a2:	d101      	bne.n	80017a8 <LoRa_init+0x136>
				return LORA_OK;
 80017a4:	23c8      	movs	r3, #200	; 0xc8
 80017a6:	e004      	b.n	80017b2 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80017a8:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80017ac:	e001      	b.n	80017b2 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80017ae:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b092      	sub	sp, #72	; 0x48
 80017c0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c2:	f001 fcc7 	bl	8003154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c6:	f000 f8ed 	bl	80019a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ca:	f000 faa3 	bl	8001d14 <MX_GPIO_Init>
  MX_SPI2_Init();
 80017ce:	f000 f959 	bl	8001a84 <MX_SPI2_Init>
  MX_TIM2_Init();
 80017d2:	f000 f98d 	bl	8001af0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017d6:	f000 f9d7 	bl	8001b88 <MX_TIM3_Init>
  MX_I2C1_Init();
 80017da:	f000 f925 	bl	8001a28 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80017de:	f000 fa6f 	bl	8001cc0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80017e2:	f000 fa1f 	bl	8001c24 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	// Initialize Timer 2 / Timer 3
	HAL_TIM_Base_Start(&htim2);
 80017e6:	485e      	ldr	r0, [pc, #376]	; (8001960 <main+0x1a4>)
 80017e8:	f003 febc 	bl	8005564 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 80017ec:	485d      	ldr	r0, [pc, #372]	; (8001964 <main+0x1a8>)
 80017ee:	f003 feb9 	bl	8005564 <HAL_TIM_Base_Start>

	// Initialize DHT22
	while(!DHT22_Get_Data(&dht22Data))
 80017f2:	e003      	b.n	80017fc <main+0x40>
	{
		// DHT22 doesn't response
		// Re-Initilize again
		Delay_Ms(1000);
 80017f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f8:	f000 fb60 	bl	8001ebc <Delay_Ms>
	while(!DHT22_Get_Data(&dht22Data))
 80017fc:	485a      	ldr	r0, [pc, #360]	; (8001968 <main+0x1ac>)
 80017fe:	f7ff fad7 	bl	8000db0 <DHT22_Get_Data>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f5      	beq.n	80017f4 <main+0x38>
	}

	// Turn off the Alarm
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180e:	4857      	ldr	r0, [pc, #348]	; (800196c <main+0x1b0>)
 8001810:	f001 ffcf 	bl	80037b2 <HAL_GPIO_WritePin>

	// Initialize LCD
	lcd_init();
 8001814:	f7ff fb88 	bl	8000f28 <lcd_init>

	// Initialize LoRa
	myLoRa = newLoRa();
 8001818:	4c55      	ldr	r4, [pc, #340]	; (8001970 <main+0x1b4>)
 800181a:	463b      	mov	r3, r7
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fc0b 	bl	8001038 <newLoRa>
 8001822:	4625      	mov	r5, r4
 8001824:	463c      	mov	r4, r7
 8001826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001832:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myLoRa.CS_port = NSS_GPIO_Port;
 8001836:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <main+0x1b4>)
 8001838:	4a4e      	ldr	r2, [pc, #312]	; (8001974 <main+0x1b8>)
 800183a:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_Pin;
 800183c:	4b4c      	ldr	r3, [pc, #304]	; (8001970 <main+0x1b4>)
 800183e:	2201      	movs	r2, #1
 8001840:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = RST_GPIO_Port;
 8001842:	4b4b      	ldr	r3, [pc, #300]	; (8001970 <main+0x1b4>)
 8001844:	4a4b      	ldr	r2, [pc, #300]	; (8001974 <main+0x1b8>)
 8001846:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_Pin;
 8001848:	4b49      	ldr	r3, [pc, #292]	; (8001970 <main+0x1b4>)
 800184a:	2202      	movs	r2, #2
 800184c:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_GPIO_Port;
 800184e:	4b48      	ldr	r3, [pc, #288]	; (8001970 <main+0x1b4>)
 8001850:	4a48      	ldr	r2, [pc, #288]	; (8001974 <main+0x1b8>)
 8001852:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_Pin;
 8001854:	4b46      	ldr	r3, [pc, #280]	; (8001970 <main+0x1b4>)
 8001856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185a:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi2;
 800185c:	4b44      	ldr	r3, [pc, #272]	; (8001970 <main+0x1b4>)
 800185e:	4a46      	ldr	r2, [pc, #280]	; (8001978 <main+0x1bc>)
 8001860:	619a      	str	r2, [r3, #24]
	if (LoRa_init(&myLoRa) == 200) {
 8001862:	4843      	ldr	r0, [pc, #268]	; (8001970 <main+0x1b4>)
 8001864:	f7ff ff05 	bl	8001672 <LoRa_init>
 8001868:	4603      	mov	r3, r0
 800186a:	2bc8      	cmp	r3, #200	; 0xc8
 800186c:	d116      	bne.n	800189c <main+0xe0>
		lcd_clear();
 800186e:	f7ff fbad 	bl	8000fcc <lcd_clear>
		lcd_put_cursor(0, 5);
 8001872:	2105      	movs	r1, #5
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fbc0 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("Hello");
 800187a:	4840      	ldr	r0, [pc, #256]	; (800197c <main+0x1c0>)
 800187c:	f7ff fb91 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 2);
 8001880:	2102      	movs	r1, #2
 8001882:	2001      	movs	r0, #1
 8001884:	f7ff fbb9 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("LoRa started");
 8001888:	483d      	ldr	r0, [pc, #244]	; (8001980 <main+0x1c4>)
 800188a:	f7ff fb8a 	bl	8000fa2 <lcd_send_string>
		HAL_Delay(2000);
 800188e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001892:	f001 fcc1 	bl	8003218 <HAL_Delay>
		lcd_clear();
 8001896:	f7ff fb99 	bl	8000fcc <lcd_clear>
 800189a:	e013      	b.n	80018c4 <main+0x108>
	} else {
		lcd_put_cursor(0, 0);
 800189c:	2100      	movs	r1, #0
 800189e:	2000      	movs	r0, #0
 80018a0:	f7ff fbab 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("Fail to initialize LoRa");
 80018a4:	4837      	ldr	r0, [pc, #220]	; (8001984 <main+0x1c8>)
 80018a6:	f7ff fb7c 	bl	8000fa2 <lcd_send_string>
		HAL_Delay(3000);
 80018aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018ae:	f001 fcb3 	bl	8003218 <HAL_Delay>
		lcd_clear();
 80018b2:	f7ff fb8b 	bl	8000fcc <lcd_clear>
		lcd_put_cursor(0, 0);
 80018b6:	2100      	movs	r1, #0
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff fb9e 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("Please try again!");
 80018be:	4832      	ldr	r0, [pc, #200]	; (8001988 <main+0x1cc>)
 80018c0:	f7ff fb6f 	bl	8000fa2 <lcd_send_string>
	}
	LoRa_startReceiving(&myLoRa); // initialize LoRa receive
 80018c4:	482a      	ldr	r0, [pc, #168]	; (8001970 <main+0x1b4>)
 80018c6:	f7ff fe68 	bl	800159a <LoRa_startReceiving>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/* DHT22 get data */
		dht22Status = DHT22_Get_Data(&dht22Data);
 80018ca:	4827      	ldr	r0, [pc, #156]	; (8001968 <main+0x1ac>)
 80018cc:	f7ff fa70 	bl	8000db0 <DHT22_Get_Data>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b2d      	ldr	r3, [pc, #180]	; (800198c <main+0x1d0>)
 80018d6:	701a      	strb	r2, [r3, #0]
		/* LoRa sending */
		Packet_Encapsulation(lora_data, 10, 20, dht22Data.temperature, dht22Data.humidity, cmdStatus);
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <main+0x1ac>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	4922      	ldr	r1, [pc, #136]	; (8001968 <main+0x1ac>)
 80018e0:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80018e4:	4c2a      	ldr	r4, [pc, #168]	; (8001990 <main+0x1d4>)
 80018e6:	6824      	ldr	r4, [r4, #0]
 80018e8:	9404      	str	r4, [sp, #16]
 80018ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80018ee:	e9cd 2300 	strd	r2, r3, [sp]
 80018f2:	2214      	movs	r2, #20
 80018f4:	210a      	movs	r1, #10
 80018f6:	4827      	ldr	r0, [pc, #156]	; (8001994 <main+0x1d8>)
 80018f8:	f000 fc16 	bl	8002128 <Packet_Encapsulation>
		// Stop Timer 4
		HAL_TIM_Base_Stop_IT(&htim4);
 80018fc:	4826      	ldr	r0, [pc, #152]	; (8001998 <main+0x1dc>)
 80018fe:	f003 fecd 	bl	800569c <HAL_TIM_Base_Stop_IT>
		// LoRa sending data
		loraStatus = LoRa_transmit(&myLoRa, (uint8_t*) lora_data, strlen(lora_data), 100);
 8001902:	4824      	ldr	r0, [pc, #144]	; (8001994 <main+0x1d8>)
 8001904:	f7fe fc2e 	bl	8000164 <strlen>
 8001908:	4603      	mov	r3, r0
 800190a:	b2da      	uxtb	r2, r3
 800190c:	2364      	movs	r3, #100	; 0x64
 800190e:	4921      	ldr	r1, [pc, #132]	; (8001994 <main+0x1d8>)
 8001910:	4817      	ldr	r0, [pc, #92]	; (8001970 <main+0x1b4>)
 8001912:	f7ff fdea 	bl	80014ea <LoRa_transmit>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <main+0x1e0>)
 800191c:	701a      	strb	r2, [r3, #0]
		Delay_Ms(50);
 800191e:	2032      	movs	r0, #50	; 0x32
 8001920:	f000 facc 	bl	8001ebc <Delay_Ms>
		cmdStatus = 0;
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <main+0x1d4>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
		// Start Timer 4
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <main+0x1dc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim4);
 8001932:	4819      	ldr	r0, [pc, #100]	; (8001998 <main+0x1dc>)
 8001934:	f003 fe60 	bl	80055f8 <HAL_TIM_Base_Start_IT>
		/* Check the temperature and humidity level */
		Alarm_Check(dht22Data.temperature, dht22Data.humidity);
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <main+0x1ac>)
 800193a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <main+0x1ac>)
 8001940:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001944:	f001 f822 	bl	800298c <Alarm_Check>

		/* Print DHT22 data onto LCD */
		Lcd_Sytem_State_Print(mode);
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <main+0x1e4>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fc07 	bl	8002160 <Lcd_Sytem_State_Print>

		/* Handle when the increase/decrease button is pressed a long time */
		Long_Pressed_Button();
 8001952:	f000 fe9d 	bl	8002690 <Long_Pressed_Button>

		Delay_Ms(300);
 8001956:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800195a:	f000 faaf 	bl	8001ebc <Delay_Ms>
		dht22Status = DHT22_Get_Data(&dht22Data);
 800195e:	e7b4      	b.n	80018ca <main+0x10e>
 8001960:	200002c8 	.word	0x200002c8
 8001964:	20000310 	.word	0x20000310
 8001968:	200004a0 	.word	0x200004a0
 800196c:	40011000 	.word	0x40011000
 8001970:	200003e8 	.word	0x200003e8
 8001974:	40010c00 	.word	0x40010c00
 8001978:	20000270 	.word	0x20000270
 800197c:	0800a788 	.word	0x0800a788
 8001980:	0800a790 	.word	0x0800a790
 8001984:	0800a7a0 	.word	0x0800a7a0
 8001988:	0800a7b8 	.word	0x0800a7b8
 800198c:	200004b0 	.word	0x200004b0
 8001990:	200004b4 	.word	0x200004b4
 8001994:	20000414 	.word	0x20000414
 8001998:	20000358 	.word	0x20000358
 800199c:	200004b1 	.word	0x200004b1
 80019a0:	2000049c 	.word	0x2000049c

080019a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b090      	sub	sp, #64	; 0x40
 80019a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019aa:	f107 0318 	add.w	r3, r7, #24
 80019ae:	2228      	movs	r2, #40	; 0x28
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f005 fa59 	bl	8006e6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ca:	2301      	movs	r3, #1
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ce:	2310      	movs	r3, #16
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d2:	2302      	movs	r3, #2
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80019d6:	2300      	movs	r3, #0
 80019d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80019da:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 fbc9 	bl	800417c <HAL_RCC_OscConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80019f0:	f001 f8e4 	bl	8002bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
 80019f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f8:	2302      	movs	r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fe36 	bl	8004680 <HAL_RCC_ClockConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001a1a:	f001 f8cf 	bl	8002bbc <Error_Handler>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3740      	adds	r7, #64	; 0x40
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <MX_I2C1_Init+0x54>)
 8001a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <MX_I2C1_Init+0x58>)
 8001a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a66:	f001 feed 	bl	8003844 <HAL_I2C_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a70:	f001 f8a4 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000021c 	.word	0x2000021c
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	000186a0 	.word	0x000186a0

08001a84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001a8a:	4a18      	ldr	r2, [pc, #96]	; (8001aec <MX_SPI2_Init+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001ab8:	2208      	movs	r2, #8
 8001aba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001ad0:	220a      	movs	r2, #10
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001ad6:	f002 ff61 	bl	800499c <HAL_SPI_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ae0:	f001 f86c 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000270 	.word	0x20000270
 8001aec:	40003800 	.word	0x40003800

08001af0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b04:	463b      	mov	r3, r7
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <MX_TIM2_Init+0x94>)
 8001b0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <MX_TIM2_Init+0x94>)
 8001b16:	223f      	movs	r2, #63	; 0x3f
 8001b18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <MX_TIM2_Init+0x94>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MX_TIM2_Init+0x94>)
 8001b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <MX_TIM2_Init+0x94>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <MX_TIM2_Init+0x94>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b34:	4813      	ldr	r0, [pc, #76]	; (8001b84 <MX_TIM2_Init+0x94>)
 8001b36:	f003 fcc5 	bl	80054c4 <HAL_TIM_Base_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b40:	f001 f83c 	bl	8002bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <MX_TIM2_Init+0x94>)
 8001b52:	f003 fed9 	bl	8005908 <HAL_TIM_ConfigClockSource>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b5c:	f001 f82e 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b68:	463b      	mov	r3, r7
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_TIM2_Init+0x94>)
 8001b6e:	f004 f8af 	bl	8005cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b78:	f001 f820 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200002c8 	.word	0x200002c8

08001b88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <MX_TIM3_Init+0x94>)
 8001ba6:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <MX_TIM3_Init+0x98>)
 8001ba8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000-1;
 8001baa:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <MX_TIM3_Init+0x94>)
 8001bac:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001bb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <MX_TIM3_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <MX_TIM3_Init+0x94>)
 8001bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <MX_TIM3_Init+0x94>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <MX_TIM3_Init+0x94>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bcc:	4813      	ldr	r0, [pc, #76]	; (8001c1c <MX_TIM3_Init+0x94>)
 8001bce:	f003 fc79 	bl	80054c4 <HAL_TIM_Base_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001bd8:	f000 fff0 	bl	8002bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001be2:	f107 0308 	add.w	r3, r7, #8
 8001be6:	4619      	mov	r1, r3
 8001be8:	480c      	ldr	r0, [pc, #48]	; (8001c1c <MX_TIM3_Init+0x94>)
 8001bea:	f003 fe8d 	bl	8005908 <HAL_TIM_ConfigClockSource>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001bf4:	f000 ffe2 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c00:	463b      	mov	r3, r7
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <MX_TIM3_Init+0x94>)
 8001c06:	f004 f863 	bl	8005cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001c10:	f000 ffd4 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000310 	.word	0x20000310
 8001c20:	40000400 	.word	0x40000400

08001c24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2a:	f107 0308 	add.w	r3, r7, #8
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c38:	463b      	mov	r3, r7
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <MX_TIM4_Init+0x94>)
 8001c42:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <MX_TIM4_Init+0x98>)
 8001c44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64000-1;
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <MX_TIM4_Init+0x94>)
 8001c48:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001c4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <MX_TIM4_Init+0x94>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 150-1;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <MX_TIM4_Init+0x94>)
 8001c56:	2295      	movs	r2, #149	; 0x95
 8001c58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <MX_TIM4_Init+0x94>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_TIM4_Init+0x94>)
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c66:	4814      	ldr	r0, [pc, #80]	; (8001cb8 <MX_TIM4_Init+0x94>)
 8001c68:	f003 fc2c 	bl	80054c4 <HAL_TIM_Base_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001c72:	f000 ffa3 	bl	8002bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	4619      	mov	r1, r3
 8001c82:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <MX_TIM4_Init+0x94>)
 8001c84:	f003 fe40 	bl	8005908 <HAL_TIM_ConfigClockSource>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001c8e:	f000 ff95 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <MX_TIM4_Init+0x94>)
 8001ca0:	f004 f816 	bl	8005cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001caa:	f000 ff87 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000358 	.word	0x20000358
 8001cbc:	40000800 	.word	0x40000800

08001cc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <MX_USART1_UART_Init+0x50>)
 8001cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cf8:	f004 f85a 	bl	8005db0 <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d02:	f000 ff5b 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200003a0 	.word	0x200003a0
 8001d10:	40013800 	.word	0x40013800

08001d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d28:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <MX_GPIO_Init+0x164>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a52      	ldr	r2, [pc, #328]	; (8001e78 <MX_GPIO_Init+0x164>)
 8001d2e:	f043 0310 	orr.w	r3, r3, #16
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b50      	ldr	r3, [pc, #320]	; (8001e78 <MX_GPIO_Init+0x164>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d40:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <MX_GPIO_Init+0x164>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a4c      	ldr	r2, [pc, #304]	; (8001e78 <MX_GPIO_Init+0x164>)
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <MX_GPIO_Init+0x164>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d58:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <MX_GPIO_Init+0x164>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a46      	ldr	r2, [pc, #280]	; (8001e78 <MX_GPIO_Init+0x164>)
 8001d5e:	f043 0308 	orr.w	r3, r3, #8
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b44      	ldr	r3, [pc, #272]	; (8001e78 <MX_GPIO_Init+0x164>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d76:	4841      	ldr	r0, [pc, #260]	; (8001e7c <MX_GPIO_Init+0x168>)
 8001d78:	f001 fd1b 	bl	80037b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT22_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001d82:	483f      	ldr	r0, [pc, #252]	; (8001e80 <MX_GPIO_Init+0x16c>)
 8001d84:	f001 fd15 	bl	80037b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2103      	movs	r1, #3
 8001d8c:	483d      	ldr	r0, [pc, #244]	; (8001e84 <MX_GPIO_Init+0x170>)
 8001d8e:	f001 fd10 	bl	80037b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	4619      	mov	r1, r3
 8001daa:	4834      	ldr	r0, [pc, #208]	; (8001e7c <MX_GPIO_Init+0x168>)
 8001dac:	f001 fb66 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_BUTTON_Pin INC_BUTTON_Pin DES_BUTTON_Pin MODE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BUZZER_BUTTON_Pin|INC_BUTTON_Pin|DES_BUTTON_Pin|MODE_BUTTON_Pin;
 8001db0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001db6:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <MX_GPIO_Init+0x174>)
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	482e      	ldr	r0, [pc, #184]	; (8001e80 <MX_GPIO_Init+0x16c>)
 8001dc6:	f001 fb59 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin|BUZZER_Pin;
 8001dca:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	4619      	mov	r1, r3
 8001de2:	4827      	ldr	r0, [pc, #156]	; (8001e80 <MX_GPIO_Init+0x16c>)
 8001de4:	f001 fb4a 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8001de8:	2303      	movs	r3, #3
 8001dea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4821      	ldr	r0, [pc, #132]	; (8001e84 <MX_GPIO_Init+0x170>)
 8001e00:	f001 fb3c 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <MX_GPIO_Init+0x174>)
 8001e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f107 0310 	add.w	r3, r7, #16
 8001e16:	4619      	mov	r1, r3
 8001e18:	481a      	ldr	r0, [pc, #104]	; (8001e84 <MX_GPIO_Init+0x170>)
 8001e1a:	f001 fb2f 	bl	800347c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 15, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	210f      	movs	r1, #15
 8001e22:	2007      	movs	r0, #7
 8001e24:	f001 faf3 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e28:	2007      	movs	r0, #7
 8001e2a:	f001 fb0c 	bl	8003446 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	210f      	movs	r1, #15
 8001e32:	2008      	movs	r0, #8
 8001e34:	f001 faeb 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001e38:	2008      	movs	r0, #8
 8001e3a:	f001 fb04 	bl	8003446 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	210f      	movs	r1, #15
 8001e42:	2009      	movs	r0, #9
 8001e44:	f001 fae3 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e48:	2009      	movs	r0, #9
 8001e4a:	f001 fafc 	bl	8003446 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	210f      	movs	r1, #15
 8001e52:	2017      	movs	r0, #23
 8001e54:	f001 fadb 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e58:	2017      	movs	r0, #23
 8001e5a:	f001 faf4 	bl	8003446 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2028      	movs	r0, #40	; 0x28
 8001e64:	f001 fad3 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e68:	2028      	movs	r0, #40	; 0x28
 8001e6a:	f001 faec 	bl	8003446 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e6e:	bf00      	nop
 8001e70:	3720      	adds	r7, #32
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40011000 	.word	0x40011000
 8001e80:	40010800 	.word	0x40010800
 8001e84:	40010c00 	.word	0x40010c00
 8001e88:	10110000 	.word	0x10110000

08001e8c <Delay_Us>:

/* USER CODE BEGIN 4 */

// Delay micro-second function
void Delay_Us(uint32_t us)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0); // set counter value to 0
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <Delay_Us+0x2c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8001e9c:	bf00      	nop
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <Delay_Us+0x2c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d8f9      	bhi.n	8001e9e <Delay_Us+0x12>
		; // wait for the counter to reach the us input in the parameter
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	200002c8 	.word	0x200002c8

08001ebc <Delay_Ms>:

// Delay mili-second function
void Delay_Ms(uint32_t ms)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3, 0); // set counter value to 0
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <Delay_Ms+0x2c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < ms)
 8001ecc:	bf00      	nop
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <Delay_Ms+0x2c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d8f9      	bhi.n	8001ece <Delay_Ms+0x12>
		; // wait for the counter to reach the us input in the parameter
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000310 	.word	0x20000310

08001eec <Buzzer_Trigger>:

// Trigger Buzzer function
void Buzzer_Trigger(void) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef6:	4807      	ldr	r0, [pc, #28]	; (8001f14 <Buzzer_Trigger+0x28>)
 8001ef8:	f001 fc5b 	bl	80037b2 <HAL_GPIO_WritePin>
	Delay_Ms(130);
 8001efc:	2082      	movs	r0, #130	; 0x82
 8001efe:	f7ff ffdd 	bl	8001ebc <Delay_Ms>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <Buzzer_Trigger+0x28>)
 8001f0a:	f001 fc52 	bl	80037b2 <HAL_GPIO_WritePin>
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40010800 	.word	0x40010800

08001f18 <HAL_GPIO_EXTI_Callback>:

// Buzzer button callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
	Buzzer_Trigger();
 8001f22:	f7ff ffe3 	bl	8001eec <Buzzer_Trigger>
	switch (GPIO_Pin) {
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f2c:	d00e      	beq.n	8001f4c <HAL_GPIO_EXTI_Callback+0x34>
 8001f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f32:	f300 80e2 	bgt.w	80020fa <HAL_GPIO_EXTI_Callback+0x1e2>
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	f000 8093 	beq.w	8002062 <HAL_GPIO_EXTI_Callback+0x14a>
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	f300 80dc 	bgt.w	80020fa <HAL_GPIO_EXTI_Callback+0x1e2>
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d030      	beq.n	8001fa8 <HAL_GPIO_EXTI_Callback+0x90>
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d03f      	beq.n	8001fca <HAL_GPIO_EXTI_Callback+0xb2>
 8001f4a:	e0d6      	b.n	80020fa <HAL_GPIO_EXTI_Callback+0x1e2>

		// MODE_BUTTON pressed
		case MODE_BUTTON_Pin:
			if(mode == NORMAL)
 8001f4c:	4b72      	ldr	r3, [pc, #456]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <HAL_GPIO_EXTI_Callback+0x48>
			{
				lcd_clear();
 8001f54:	f7ff f83a 	bl	8000fcc <lcd_clear>
				mode = TEMPERATURE_SETPOINT_LOW;
 8001f58:	4b6f      	ldr	r3, [pc, #444]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
			else
			{
				lcd_clear();
				mode = NORMAL;
			}
			break;
 8001f5e:	e0d1      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>
			else if(mode == TEMPERATURE_SETPOINT_LOW)
 8001f60:	4b6d      	ldr	r3, [pc, #436]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <HAL_GPIO_EXTI_Callback+0x5c>
				lcd_clear();
 8001f68:	f7ff f830 	bl	8000fcc <lcd_clear>
				mode = TEMPERATURE_SETPOINT_HIGH;
 8001f6c:	4b6a      	ldr	r3, [pc, #424]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8001f6e:	2202      	movs	r2, #2
 8001f70:	701a      	strb	r2, [r3, #0]
			break;
 8001f72:	e0c7      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>
			else if(mode == TEMPERATURE_SETPOINT_HIGH)
 8001f74:	4b68      	ldr	r3, [pc, #416]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d105      	bne.n	8001f88 <HAL_GPIO_EXTI_Callback+0x70>
				lcd_clear();
 8001f7c:	f7ff f826 	bl	8000fcc <lcd_clear>
				mode = HUMIDITY_SETPOINT_LOW;
 8001f80:	4b65      	ldr	r3, [pc, #404]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8001f82:	2203      	movs	r2, #3
 8001f84:	701a      	strb	r2, [r3, #0]
			break;
 8001f86:	e0bd      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>
			else if(mode == HUMIDITY_SETPOINT_LOW)
 8001f88:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d105      	bne.n	8001f9c <HAL_GPIO_EXTI_Callback+0x84>
				lcd_clear();
 8001f90:	f7ff f81c 	bl	8000fcc <lcd_clear>
				mode = HUMIDITY_SETPOINT_HIGH;
 8001f94:	4b60      	ldr	r3, [pc, #384]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8001f96:	2204      	movs	r2, #4
 8001f98:	701a      	strb	r2, [r3, #0]
			break;
 8001f9a:	e0b3      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>
				lcd_clear();
 8001f9c:	f7ff f816 	bl	8000fcc <lcd_clear>
				mode = NORMAL;
 8001fa0:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
			break;
 8001fa6:	e0ad      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>

		// BUZZER_BUTTON pressed
		case BUZZER_BUTTON_Pin:
			// Toggle the built-in LED, changing the alarm status
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fac:	485b      	ldr	r0, [pc, #364]	; (800211c <HAL_GPIO_EXTI_Callback+0x204>)
 8001fae:	f001 fc18 	bl	80037e2 <HAL_GPIO_TogglePin>
			// Check if the alarm is turned OFF
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8001fb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fb6:	4859      	ldr	r0, [pc, #356]	; (800211c <HAL_GPIO_EXTI_Callback+0x204>)
 8001fb8:	f001 fbe4 	bl	8003784 <HAL_GPIO_ReadPin>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 809f 	beq.w	8002102 <HAL_GPIO_EXTI_Callback+0x1ea>
			{
				// clear the LCD screen
				lcd_clear();
 8001fc4:	f7ff f802 	bl	8000fcc <lcd_clear>
			}
			break;
 8001fc8:	e09b      	b.n	8002102 <HAL_GPIO_EXTI_Callback+0x1ea>

		// INC_BUTTON pressed
		case INC_BUTTON_Pin:
			if(mode == TEMPERATURE_SETPOINT_LOW)
 8001fca:	4b53      	ldr	r3, [pc, #332]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10d      	bne.n	8001fee <HAL_GPIO_EXTI_Callback+0xd6>
			{
				temp_setpoint[0] = temp_setpoint[0] + 0.1;
 8001fd2:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_GPIO_EXTI_Callback+0x208>)
 8001fd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd8:	a34d      	add	r3, pc, #308	; (adr r3, 8002110 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	f7fe f8cf 	bl	8000180 <__adddf3>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	494e      	ldr	r1, [pc, #312]	; (8002120 <HAL_GPIO_EXTI_Callback+0x208>)
 8001fe8:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else
			{
				mode = NORMAL;
			}
			break;
 8001fec:	e08a      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>
			else if(mode == TEMPERATURE_SETPOINT_HIGH)
 8001fee:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d10d      	bne.n	8002012 <HAL_GPIO_EXTI_Callback+0xfa>
				temp_setpoint[1] = temp_setpoint[1] + 0.1;
 8001ff6:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <HAL_GPIO_EXTI_Callback+0x208>)
 8001ff8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ffc:	a344      	add	r3, pc, #272	; (adr r3, 8002110 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f7fe f8bd 	bl	8000180 <__adddf3>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4945      	ldr	r1, [pc, #276]	; (8002120 <HAL_GPIO_EXTI_Callback+0x208>)
 800200c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			break;
 8002010:	e078      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>
			else if(mode == HUMIDITY_SETPOINT_LOW)
 8002012:	4b41      	ldr	r3, [pc, #260]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d10d      	bne.n	8002036 <HAL_GPIO_EXTI_Callback+0x11e>
				humid_setpoint[0] = humid_setpoint[0] + 0.1;
 800201a:	4b42      	ldr	r3, [pc, #264]	; (8002124 <HAL_GPIO_EXTI_Callback+0x20c>)
 800201c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002020:	a33b      	add	r3, pc, #236	; (adr r3, 8002110 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	f7fe f8ab 	bl	8000180 <__adddf3>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	493d      	ldr	r1, [pc, #244]	; (8002124 <HAL_GPIO_EXTI_Callback+0x20c>)
 8002030:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8002034:	e066      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>
			else if(mode == HUMIDITY_SETPOINT_HIGH)
 8002036:	4b38      	ldr	r3, [pc, #224]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b04      	cmp	r3, #4
 800203c:	d10d      	bne.n	800205a <HAL_GPIO_EXTI_Callback+0x142>
				humid_setpoint[1] = humid_setpoint[1] + 0.1;
 800203e:	4b39      	ldr	r3, [pc, #228]	; (8002124 <HAL_GPIO_EXTI_Callback+0x20c>)
 8002040:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002044:	a332      	add	r3, pc, #200	; (adr r3, 8002110 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe f899 	bl	8000180 <__adddf3>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4934      	ldr	r1, [pc, #208]	; (8002124 <HAL_GPIO_EXTI_Callback+0x20c>)
 8002054:	e9c1 2302 	strd	r2, r3, [r1, #8]
			break;
 8002058:	e054      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>
				mode = NORMAL;
 800205a:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
			break;
 8002060:	e050      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>

		// DES_BUTTON pressed
		case DES_BUTTON_Pin:
			if(mode == TEMPERATURE_SETPOINT_LOW)
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d10d      	bne.n	8002086 <HAL_GPIO_EXTI_Callback+0x16e>
			{
				temp_setpoint[0] = temp_setpoint[0] - 0.1;
 800206a:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_GPIO_EXTI_Callback+0x208>)
 800206c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002070:	a327      	add	r3, pc, #156	; (adr r3, 8002110 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	f7fe f881 	bl	800017c <__aeabi_dsub>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4928      	ldr	r1, [pc, #160]	; (8002120 <HAL_GPIO_EXTI_Callback+0x208>)
 8002080:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else
			{
				mode = NORMAL;
			}
			break;
 8002084:	e03e      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>
			else if(mode == TEMPERATURE_SETPOINT_HIGH)
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d10d      	bne.n	80020aa <HAL_GPIO_EXTI_Callback+0x192>
				temp_setpoint[1] = temp_setpoint[1] - 0.1;
 800208e:	4b24      	ldr	r3, [pc, #144]	; (8002120 <HAL_GPIO_EXTI_Callback+0x208>)
 8002090:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002094:	a31e      	add	r3, pc, #120	; (adr r3, 8002110 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	f7fe f86f 	bl	800017c <__aeabi_dsub>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	491f      	ldr	r1, [pc, #124]	; (8002120 <HAL_GPIO_EXTI_Callback+0x208>)
 80020a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			break;
 80020a8:	e02c      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>
			else if(mode == HUMIDITY_SETPOINT_LOW)
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d10d      	bne.n	80020ce <HAL_GPIO_EXTI_Callback+0x1b6>
				humid_setpoint[0] = humid_setpoint[0] - 0.1;
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <HAL_GPIO_EXTI_Callback+0x20c>)
 80020b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020b8:	a315      	add	r3, pc, #84	; (adr r3, 8002110 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80020ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020be:	f7fe f85d 	bl	800017c <__aeabi_dsub>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4917      	ldr	r1, [pc, #92]	; (8002124 <HAL_GPIO_EXTI_Callback+0x20c>)
 80020c8:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 80020cc:	e01a      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>
			else if(mode == HUMIDITY_SETPOINT_HIGH)
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d10d      	bne.n	80020f2 <HAL_GPIO_EXTI_Callback+0x1da>
				humid_setpoint[1] = humid_setpoint[1] - 0.1;
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_GPIO_EXTI_Callback+0x20c>)
 80020d8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80020dc:	a30c      	add	r3, pc, #48	; (adr r3, 8002110 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80020de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e2:	f7fe f84b 	bl	800017c <__aeabi_dsub>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	490e      	ldr	r1, [pc, #56]	; (8002124 <HAL_GPIO_EXTI_Callback+0x20c>)
 80020ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
			break;
 80020f0:	e008      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>
				mode = NORMAL;
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
			break;
 80020f8:	e004      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>

		// Something went wrong, turn back to NORMAL MODE
		default:
			mode = NORMAL;
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_GPIO_EXTI_Callback+0x200>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
			break;
 8002100:	e000      	b.n	8002104 <HAL_GPIO_EXTI_Callback+0x1ec>
			break;
 8002102:	bf00      	nop
	}
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	f3af 8000 	nop.w
 8002110:	9999999a 	.word	0x9999999a
 8002114:	3fb99999 	.word	0x3fb99999
 8002118:	2000049c 	.word	0x2000049c
 800211c:	40011000 	.word	0x40011000
 8002120:	20000008 	.word	0x20000008
 8002124:	20000018 	.word	0x20000018

08002128 <Packet_Encapsulation>:

// Encapsulate the data into a packet containing the string: "source_id,destination_id,temperature,humidity"
void Packet_Encapsulation(char* buffer ,int src_id, int des_id, double temp, double humid, int cmd_status)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af06      	add	r7, sp, #24
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
	sprintf(buffer, "%d,%d,%0.1lf,%0.1lf,%d", src_id, des_id, temp, humid,cmd_status);
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	9304      	str	r3, [sp, #16]
 8002138:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800213c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002144:	e9cd 2300 	strd	r2, r3, [sp]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	4903      	ldr	r1, [pc, #12]	; (800215c <Packet_Encapsulation+0x34>)
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f004 fe28 	bl	8006da4 <siprintf>
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	0800a7cc 	.word	0x0800a7cc

08002160 <Lcd_Sytem_State_Print>:

// System state LCD print
void Lcd_Sytem_State_Print(uint8_t mode) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	2b04      	cmp	r3, #4
 800216e:	f200 826d 	bhi.w	800264c <Lcd_Sytem_State_Print+0x4ec>
 8002172:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <Lcd_Sytem_State_Print+0x18>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	0800218d 	.word	0x0800218d
 800217c:	08002269 	.word	0x08002269
 8002180:	0800232d 	.word	0x0800232d
 8002184:	0800242d 	.word	0x0800242d
 8002188:	0800253d 	.word	0x0800253d

	// NORMAL MODE LCD print
	case NORMAL:
		lcd_put_cursor(0, 0);
 800218c:	2100      	movs	r1, #0
 800218e:	2000      	movs	r0, #0
 8002190:	f7fe ff33 	bl	8000ffa <lcd_put_cursor>
		if(dht22Data.temperature <= 9.9 && dht22Data.temperature >= 0.0)
 8002194:	4b98      	ldr	r3, [pc, #608]	; (80023f8 <Lcd_Sytem_State_Print+0x298>)
 8002196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800219a:	a395      	add	r3, pc, #596	; (adr r3, 80023f0 <Lcd_Sytem_State_Print+0x290>)
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	f7fe fc20 	bl	80009e4 <__aeabi_dcmple>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d013      	beq.n	80021d2 <Lcd_Sytem_State_Print+0x72>
 80021aa:	4b93      	ldr	r3, [pc, #588]	; (80023f8 <Lcd_Sytem_State_Print+0x298>)
 80021ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	f7fe fc1e 	bl	80009f8 <__aeabi_dcmpge>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <Lcd_Sytem_State_Print+0x72>
		{
			sprintf(lcd_data, "TEMP:  %0.1lf C", dht22Data.temperature);
 80021c2:	4b8d      	ldr	r3, [pc, #564]	; (80023f8 <Lcd_Sytem_State_Print+0x298>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	498c      	ldr	r1, [pc, #560]	; (80023fc <Lcd_Sytem_State_Print+0x29c>)
 80021ca:	488d      	ldr	r0, [pc, #564]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 80021cc:	f004 fdea 	bl	8006da4 <siprintf>
 80021d0:	e006      	b.n	80021e0 <Lcd_Sytem_State_Print+0x80>
		}
		else
		{
			sprintf(lcd_data, "TEMP: %0.1lf C", dht22Data.temperature);
 80021d2:	4b89      	ldr	r3, [pc, #548]	; (80023f8 <Lcd_Sytem_State_Print+0x298>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	498a      	ldr	r1, [pc, #552]	; (8002404 <Lcd_Sytem_State_Print+0x2a4>)
 80021da:	4889      	ldr	r0, [pc, #548]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 80021dc:	f004 fde2 	bl	8006da4 <siprintf>
		}
		lcd_send_string(lcd_data);
 80021e0:	4887      	ldr	r0, [pc, #540]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 80021e2:	f7fe fede 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 80021e6:	2100      	movs	r1, #0
 80021e8:	2001      	movs	r0, #1
 80021ea:	f7fe ff06 	bl	8000ffa <lcd_put_cursor>
		if(dht22Data.humidity <= 9.9 && dht22Data.humidity >= 0)
 80021ee:	4b82      	ldr	r3, [pc, #520]	; (80023f8 <Lcd_Sytem_State_Print+0x298>)
 80021f0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021f4:	a37e      	add	r3, pc, #504	; (adr r3, 80023f0 <Lcd_Sytem_State_Print+0x290>)
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	f7fe fbf3 	bl	80009e4 <__aeabi_dcmple>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <Lcd_Sytem_State_Print+0xcc>
 8002204:	4b7c      	ldr	r3, [pc, #496]	; (80023f8 <Lcd_Sytem_State_Print+0x298>)
 8002206:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	f7fe fbf1 	bl	80009f8 <__aeabi_dcmpge>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <Lcd_Sytem_State_Print+0xcc>
		{
			sprintf(lcd_data, "HUMID:   %0.1lf %%", dht22Data.humidity);
 800221c:	4b76      	ldr	r3, [pc, #472]	; (80023f8 <Lcd_Sytem_State_Print+0x298>)
 800221e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002222:	4979      	ldr	r1, [pc, #484]	; (8002408 <Lcd_Sytem_State_Print+0x2a8>)
 8002224:	4876      	ldr	r0, [pc, #472]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 8002226:	f004 fdbd 	bl	8006da4 <siprintf>
 800222a:	e019      	b.n	8002260 <Lcd_Sytem_State_Print+0x100>
		}
		else if(dht22Data.humidity == 100.0)
 800222c:	4b72      	ldr	r3, [pc, #456]	; (80023f8 <Lcd_Sytem_State_Print+0x298>)
 800222e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	4b75      	ldr	r3, [pc, #468]	; (800240c <Lcd_Sytem_State_Print+0x2ac>)
 8002238:	f7fe fbc0 	bl	80009bc <__aeabi_dcmpeq>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <Lcd_Sytem_State_Print+0xf2>
		{
			sprintf(lcd_data, "HUMID: %0.1lf %%", dht22Data.humidity);
 8002242:	4b6d      	ldr	r3, [pc, #436]	; (80023f8 <Lcd_Sytem_State_Print+0x298>)
 8002244:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002248:	4971      	ldr	r1, [pc, #452]	; (8002410 <Lcd_Sytem_State_Print+0x2b0>)
 800224a:	486d      	ldr	r0, [pc, #436]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 800224c:	f004 fdaa 	bl	8006da4 <siprintf>
 8002250:	e006      	b.n	8002260 <Lcd_Sytem_State_Print+0x100>
		}
		else
		{
			sprintf(lcd_data, "HUMID:  %0.1lf %%", dht22Data.humidity);
 8002252:	4b69      	ldr	r3, [pc, #420]	; (80023f8 <Lcd_Sytem_State_Print+0x298>)
 8002254:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002258:	496e      	ldr	r1, [pc, #440]	; (8002414 <Lcd_Sytem_State_Print+0x2b4>)
 800225a:	4869      	ldr	r0, [pc, #420]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 800225c:	f004 fda2 	bl	8006da4 <siprintf>
		}
		lcd_send_string(lcd_data);
 8002260:	4867      	ldr	r0, [pc, #412]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 8002262:	f7fe fe9e 	bl	8000fa2 <lcd_send_string>
		break;
 8002266:	e1f4      	b.n	8002652 <Lcd_Sytem_State_Print+0x4f2>

	//  TEMPERATURE_SETPOINT_LOW MODE LCD print
	case TEMPERATURE_SETPOINT_LOW:
		lcd_put_cursor(0, 0);
 8002268:	2100      	movs	r1, #0
 800226a:	2000      	movs	r0, #0
 800226c:	f7fe fec5 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("TempSetpoint(L)");
 8002270:	4869      	ldr	r0, [pc, #420]	; (8002418 <Lcd_Sytem_State_Print+0x2b8>)
 8002272:	f7fe fe96 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 8002276:	2100      	movs	r1, #0
 8002278:	2001      	movs	r0, #1
 800227a:	f7fe febe 	bl	8000ffa <lcd_put_cursor>
		if(temp_setpoint[0] <= 9.9 && temp_setpoint[0] >= 0.0)
 800227e:	4b67      	ldr	r3, [pc, #412]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 8002280:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002284:	a35a      	add	r3, pc, #360	; (adr r3, 80023f0 <Lcd_Sytem_State_Print+0x290>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	f7fe fbab 	bl	80009e4 <__aeabi_dcmple>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <Lcd_Sytem_State_Print+0x15c>
 8002294:	4b61      	ldr	r3, [pc, #388]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 8002296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	f7fe fba9 	bl	80009f8 <__aeabi_dcmpge>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <Lcd_Sytem_State_Print+0x15c>
		{
			sprintf(lcd_data, " %0.1lf C", temp_setpoint[0]);
 80022ac:	4b5b      	ldr	r3, [pc, #364]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	495b      	ldr	r1, [pc, #364]	; (8002420 <Lcd_Sytem_State_Print+0x2c0>)
 80022b4:	4852      	ldr	r0, [pc, #328]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 80022b6:	f004 fd75 	bl	8006da4 <siprintf>
 80022ba:	e006      	b.n	80022ca <Lcd_Sytem_State_Print+0x16a>
		}
		else
		{
			sprintf(lcd_data, "%0.1lf C", temp_setpoint[0]);
 80022bc:	4b57      	ldr	r3, [pc, #348]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	4958      	ldr	r1, [pc, #352]	; (8002424 <Lcd_Sytem_State_Print+0x2c4>)
 80022c4:	484e      	ldr	r0, [pc, #312]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 80022c6:	f004 fd6d 	bl	8006da4 <siprintf>
		}
		lcd_send_string(lcd_data);
 80022ca:	484d      	ldr	r0, [pc, #308]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 80022cc:	f7fe fe69 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 9);
 80022d0:	2109      	movs	r1, #9
 80022d2:	2001      	movs	r0, #1
 80022d4:	f7fe fe91 	bl	8000ffa <lcd_put_cursor>
		if(temp_setpoint[1] <= 9.9 && temp_setpoint[1] >= 0.0)
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 80022da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80022de:	a344      	add	r3, pc, #272	; (adr r3, 80023f0 <Lcd_Sytem_State_Print+0x290>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	f7fe fb7e 	bl	80009e4 <__aeabi_dcmple>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d013      	beq.n	8002316 <Lcd_Sytem_State_Print+0x1b6>
 80022ee:	4b4b      	ldr	r3, [pc, #300]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 80022f0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	f7fe fb7c 	bl	80009f8 <__aeabi_dcmpge>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <Lcd_Sytem_State_Print+0x1b6>
		{
			sprintf(lcd_data, " %0.1lf C", temp_setpoint[1]);
 8002306:	4b45      	ldr	r3, [pc, #276]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 8002308:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800230c:	4944      	ldr	r1, [pc, #272]	; (8002420 <Lcd_Sytem_State_Print+0x2c0>)
 800230e:	483c      	ldr	r0, [pc, #240]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 8002310:	f004 fd48 	bl	8006da4 <siprintf>
 8002314:	e006      	b.n	8002324 <Lcd_Sytem_State_Print+0x1c4>
		}
		else
		{
			sprintf(lcd_data, "%0.1lf C", temp_setpoint[1]);
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 8002318:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800231c:	4941      	ldr	r1, [pc, #260]	; (8002424 <Lcd_Sytem_State_Print+0x2c4>)
 800231e:	4838      	ldr	r0, [pc, #224]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 8002320:	f004 fd40 	bl	8006da4 <siprintf>
		}
		lcd_send_string(lcd_data);
 8002324:	4836      	ldr	r0, [pc, #216]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 8002326:	f7fe fe3c 	bl	8000fa2 <lcd_send_string>
		break;
 800232a:	e192      	b.n	8002652 <Lcd_Sytem_State_Print+0x4f2>

	// TEMPERATURE_SETPOINT_HIGH MODE LCD print
	case TEMPERATURE_SETPOINT_HIGH:
		lcd_put_cursor(0, 0);
 800232c:	2100      	movs	r1, #0
 800232e:	2000      	movs	r0, #0
 8002330:	f7fe fe63 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("TempSetpoint(H)");
 8002334:	483c      	ldr	r0, [pc, #240]	; (8002428 <Lcd_Sytem_State_Print+0x2c8>)
 8002336:	f7fe fe34 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 800233a:	2100      	movs	r1, #0
 800233c:	2001      	movs	r0, #1
 800233e:	f7fe fe5c 	bl	8000ffa <lcd_put_cursor>
		if(temp_setpoint[0] <= 9.9 && temp_setpoint[0] >= 0.0)
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 8002344:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002348:	a329      	add	r3, pc, #164	; (adr r3, 80023f0 <Lcd_Sytem_State_Print+0x290>)
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	f7fe fb49 	bl	80009e4 <__aeabi_dcmple>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d013      	beq.n	8002380 <Lcd_Sytem_State_Print+0x220>
 8002358:	4b30      	ldr	r3, [pc, #192]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 800235a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	f7fe fb47 	bl	80009f8 <__aeabi_dcmpge>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <Lcd_Sytem_State_Print+0x220>
		{
			sprintf(lcd_data, " %0.1lf C", temp_setpoint[0]);
 8002370:	4b2a      	ldr	r3, [pc, #168]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	492a      	ldr	r1, [pc, #168]	; (8002420 <Lcd_Sytem_State_Print+0x2c0>)
 8002378:	4821      	ldr	r0, [pc, #132]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 800237a:	f004 fd13 	bl	8006da4 <siprintf>
 800237e:	e006      	b.n	800238e <Lcd_Sytem_State_Print+0x22e>
		}
		else
		{
			sprintf(lcd_data, "%0.1lf C", temp_setpoint[0]);
 8002380:	4b26      	ldr	r3, [pc, #152]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	4927      	ldr	r1, [pc, #156]	; (8002424 <Lcd_Sytem_State_Print+0x2c4>)
 8002388:	481d      	ldr	r0, [pc, #116]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 800238a:	f004 fd0b 	bl	8006da4 <siprintf>
		}
		lcd_send_string(lcd_data);
 800238e:	481c      	ldr	r0, [pc, #112]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 8002390:	f7fe fe07 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 9);
 8002394:	2109      	movs	r1, #9
 8002396:	2001      	movs	r0, #1
 8002398:	f7fe fe2f 	bl	8000ffa <lcd_put_cursor>
		if(temp_setpoint[1] <= 9.9 && temp_setpoint[1] >= 0.0)
 800239c:	4b1f      	ldr	r3, [pc, #124]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 800239e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80023a2:	a313      	add	r3, pc, #76	; (adr r3, 80023f0 <Lcd_Sytem_State_Print+0x290>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe fb1c 	bl	80009e4 <__aeabi_dcmple>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d013      	beq.n	80023da <Lcd_Sytem_State_Print+0x27a>
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 80023b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	f7fe fb1a 	bl	80009f8 <__aeabi_dcmpge>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <Lcd_Sytem_State_Print+0x27a>
		{
			sprintf(lcd_data, " %0.1lf C", temp_setpoint[1]);
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 80023cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023d0:	4913      	ldr	r1, [pc, #76]	; (8002420 <Lcd_Sytem_State_Print+0x2c0>)
 80023d2:	480b      	ldr	r0, [pc, #44]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 80023d4:	f004 fce6 	bl	8006da4 <siprintf>
 80023d8:	e006      	b.n	80023e8 <Lcd_Sytem_State_Print+0x288>
		}
		else
		{
			sprintf(lcd_data, "%0.1lf C", temp_setpoint[1]);
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <Lcd_Sytem_State_Print+0x2bc>)
 80023dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023e0:	4910      	ldr	r1, [pc, #64]	; (8002424 <Lcd_Sytem_State_Print+0x2c4>)
 80023e2:	4807      	ldr	r0, [pc, #28]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 80023e4:	f004 fcde 	bl	8006da4 <siprintf>
		}
		lcd_send_string(lcd_data);
 80023e8:	4805      	ldr	r0, [pc, #20]	; (8002400 <Lcd_Sytem_State_Print+0x2a0>)
 80023ea:	f7fe fdda 	bl	8000fa2 <lcd_send_string>
		break;
 80023ee:	e130      	b.n	8002652 <Lcd_Sytem_State_Print+0x4f2>
 80023f0:	cccccccd 	.word	0xcccccccd
 80023f4:	4023cccc 	.word	0x4023cccc
 80023f8:	200004a0 	.word	0x200004a0
 80023fc:	0800a7e4 	.word	0x0800a7e4
 8002400:	2000048c 	.word	0x2000048c
 8002404:	0800a7f4 	.word	0x0800a7f4
 8002408:	0800a804 	.word	0x0800a804
 800240c:	40590000 	.word	0x40590000
 8002410:	0800a818 	.word	0x0800a818
 8002414:	0800a82c 	.word	0x0800a82c
 8002418:	0800a840 	.word	0x0800a840
 800241c:	20000008 	.word	0x20000008
 8002420:	0800a850 	.word	0x0800a850
 8002424:	0800a85c 	.word	0x0800a85c
 8002428:	0800a868 	.word	0x0800a868

	// HUMIDITY_SETPOINT_LOW MODE LCD print
	case HUMIDITY_SETPOINT_LOW:
		lcd_put_cursor(0, 0);
 800242c:	2100      	movs	r1, #0
 800242e:	2000      	movs	r0, #0
 8002430:	f7fe fde3 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("HumidSetpoint(L)");
 8002434:	488c      	ldr	r0, [pc, #560]	; (8002668 <Lcd_Sytem_State_Print+0x508>)
 8002436:	f7fe fdb4 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 800243a:	2100      	movs	r1, #0
 800243c:	2001      	movs	r0, #1
 800243e:	f7fe fddc 	bl	8000ffa <lcd_put_cursor>
		if(humid_setpoint[0] <= 9.9 && humid_setpoint[0] >= 0.0)
 8002442:	4b8a      	ldr	r3, [pc, #552]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002444:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002448:	a385      	add	r3, pc, #532	; (adr r3, 8002660 <Lcd_Sytem_State_Print+0x500>)
 800244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244e:	f7fe fac9 	bl	80009e4 <__aeabi_dcmple>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d013      	beq.n	8002480 <Lcd_Sytem_State_Print+0x320>
 8002458:	4b84      	ldr	r3, [pc, #528]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 800245a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	f7fe fac7 	bl	80009f8 <__aeabi_dcmpge>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <Lcd_Sytem_State_Print+0x320>
		{
			sprintf(lcd_data, "  %0.1lf %%", humid_setpoint[0]);
 8002470:	4b7e      	ldr	r3, [pc, #504]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	497e      	ldr	r1, [pc, #504]	; (8002670 <Lcd_Sytem_State_Print+0x510>)
 8002478:	487e      	ldr	r0, [pc, #504]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 800247a:	f004 fc93 	bl	8006da4 <siprintf>
 800247e:	e019      	b.n	80024b4 <Lcd_Sytem_State_Print+0x354>
		}
		else if (humid_setpoint[0] == 100.0)
 8002480:	4b7a      	ldr	r3, [pc, #488]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002482:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	4b7b      	ldr	r3, [pc, #492]	; (8002678 <Lcd_Sytem_State_Print+0x518>)
 800248c:	f7fe fa96 	bl	80009bc <__aeabi_dcmpeq>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <Lcd_Sytem_State_Print+0x346>
		{
			sprintf(lcd_data, "%0.1lf %%", humid_setpoint[0]);
 8002496:	4b75      	ldr	r3, [pc, #468]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	4977      	ldr	r1, [pc, #476]	; (800267c <Lcd_Sytem_State_Print+0x51c>)
 800249e:	4875      	ldr	r0, [pc, #468]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 80024a0:	f004 fc80 	bl	8006da4 <siprintf>
 80024a4:	e006      	b.n	80024b4 <Lcd_Sytem_State_Print+0x354>
		}
		else
		{
			sprintf(lcd_data, " %0.1lf %%", humid_setpoint[0]);
 80024a6:	4b71      	ldr	r3, [pc, #452]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	4974      	ldr	r1, [pc, #464]	; (8002680 <Lcd_Sytem_State_Print+0x520>)
 80024ae:	4871      	ldr	r0, [pc, #452]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 80024b0:	f004 fc78 	bl	8006da4 <siprintf>
		}
		lcd_send_string(lcd_data);
 80024b4:	486f      	ldr	r0, [pc, #444]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 80024b6:	f7fe fd74 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 8);
 80024ba:	2108      	movs	r1, #8
 80024bc:	2001      	movs	r0, #1
 80024be:	f7fe fd9c 	bl	8000ffa <lcd_put_cursor>
		if(humid_setpoint[1] <= 9.9 && humid_setpoint[1] >= 0.0)
 80024c2:	4b6a      	ldr	r3, [pc, #424]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 80024c4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80024c8:	a365      	add	r3, pc, #404	; (adr r3, 8002660 <Lcd_Sytem_State_Print+0x500>)
 80024ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ce:	f7fe fa89 	bl	80009e4 <__aeabi_dcmple>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <Lcd_Sytem_State_Print+0x3a0>
 80024d8:	4b64      	ldr	r3, [pc, #400]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 80024da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	f7fe fa87 	bl	80009f8 <__aeabi_dcmpge>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <Lcd_Sytem_State_Print+0x3a0>
		{
			sprintf(lcd_data, "  %0.1lf %%", humid_setpoint[1]);
 80024f0:	4b5e      	ldr	r3, [pc, #376]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 80024f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024f6:	495e      	ldr	r1, [pc, #376]	; (8002670 <Lcd_Sytem_State_Print+0x510>)
 80024f8:	485e      	ldr	r0, [pc, #376]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 80024fa:	f004 fc53 	bl	8006da4 <siprintf>
 80024fe:	e019      	b.n	8002534 <Lcd_Sytem_State_Print+0x3d4>
		}
		else if (humid_setpoint[1] == 100.0)
 8002500:	4b5a      	ldr	r3, [pc, #360]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002502:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	4b5b      	ldr	r3, [pc, #364]	; (8002678 <Lcd_Sytem_State_Print+0x518>)
 800250c:	f7fe fa56 	bl	80009bc <__aeabi_dcmpeq>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <Lcd_Sytem_State_Print+0x3c6>
		{
			sprintf(lcd_data, "%0.1lf %%", humid_setpoint[1]);
 8002516:	4b55      	ldr	r3, [pc, #340]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002518:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800251c:	4957      	ldr	r1, [pc, #348]	; (800267c <Lcd_Sytem_State_Print+0x51c>)
 800251e:	4855      	ldr	r0, [pc, #340]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 8002520:	f004 fc40 	bl	8006da4 <siprintf>
 8002524:	e006      	b.n	8002534 <Lcd_Sytem_State_Print+0x3d4>
		}
		else
		{
			sprintf(lcd_data, " %0.1lf %%", humid_setpoint[1]);
 8002526:	4b51      	ldr	r3, [pc, #324]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002528:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800252c:	4954      	ldr	r1, [pc, #336]	; (8002680 <Lcd_Sytem_State_Print+0x520>)
 800252e:	4851      	ldr	r0, [pc, #324]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 8002530:	f004 fc38 	bl	8006da4 <siprintf>
		}
		lcd_send_string(lcd_data);
 8002534:	484f      	ldr	r0, [pc, #316]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 8002536:	f7fe fd34 	bl	8000fa2 <lcd_send_string>
		break;
 800253a:	e08a      	b.n	8002652 <Lcd_Sytem_State_Print+0x4f2>

	// HUMIDITY_SETPOINT_HIGH MODE LCD print
	case HUMIDITY_SETPOINT_HIGH:
		lcd_put_cursor(0, 0);
 800253c:	2100      	movs	r1, #0
 800253e:	2000      	movs	r0, #0
 8002540:	f7fe fd5b 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("HumidSetpoint(H)");
 8002544:	484f      	ldr	r0, [pc, #316]	; (8002684 <Lcd_Sytem_State_Print+0x524>)
 8002546:	f7fe fd2c 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 800254a:	2100      	movs	r1, #0
 800254c:	2001      	movs	r0, #1
 800254e:	f7fe fd54 	bl	8000ffa <lcd_put_cursor>
		if(humid_setpoint[0] < 10.0 && humid_setpoint[0] >= 0.0)
 8002552:	4b46      	ldr	r3, [pc, #280]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	4b4a      	ldr	r3, [pc, #296]	; (8002688 <Lcd_Sytem_State_Print+0x528>)
 800255e:	f7fe fa37 	bl	80009d0 <__aeabi_dcmplt>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <Lcd_Sytem_State_Print+0x430>
 8002568:	4b40      	ldr	r3, [pc, #256]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 800256a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	f7fe fa3f 	bl	80009f8 <__aeabi_dcmpge>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <Lcd_Sytem_State_Print+0x430>
		{
			sprintf(lcd_data, "  %0.1lf %%", humid_setpoint[0]);
 8002580:	4b3a      	ldr	r3, [pc, #232]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	493a      	ldr	r1, [pc, #232]	; (8002670 <Lcd_Sytem_State_Print+0x510>)
 8002588:	483a      	ldr	r0, [pc, #232]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 800258a:	f004 fc0b 	bl	8006da4 <siprintf>
 800258e:	e019      	b.n	80025c4 <Lcd_Sytem_State_Print+0x464>
		}
		else if (humid_setpoint[0] == 100.0)
 8002590:	4b36      	ldr	r3, [pc, #216]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <Lcd_Sytem_State_Print+0x518>)
 800259c:	f7fe fa0e 	bl	80009bc <__aeabi_dcmpeq>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <Lcd_Sytem_State_Print+0x456>
		{
			sprintf(lcd_data, "%0.1lf %%", humid_setpoint[0]);
 80025a6:	4b31      	ldr	r3, [pc, #196]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	4933      	ldr	r1, [pc, #204]	; (800267c <Lcd_Sytem_State_Print+0x51c>)
 80025ae:	4831      	ldr	r0, [pc, #196]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 80025b0:	f004 fbf8 	bl	8006da4 <siprintf>
 80025b4:	e006      	b.n	80025c4 <Lcd_Sytem_State_Print+0x464>
		}
		else
		{
			sprintf(lcd_data, " %0.1lf %%", humid_setpoint[0]);
 80025b6:	4b2d      	ldr	r3, [pc, #180]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	4930      	ldr	r1, [pc, #192]	; (8002680 <Lcd_Sytem_State_Print+0x520>)
 80025be:	482d      	ldr	r0, [pc, #180]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 80025c0:	f004 fbf0 	bl	8006da4 <siprintf>
		}
		lcd_send_string(lcd_data);
 80025c4:	482b      	ldr	r0, [pc, #172]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 80025c6:	f7fe fcec 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 8);
 80025ca:	2108      	movs	r1, #8
 80025cc:	2001      	movs	r0, #1
 80025ce:	f7fe fd14 	bl	8000ffa <lcd_put_cursor>
		if(humid_setpoint[1] < 10.0 && humid_setpoint[1] >= 0.0)
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 80025d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <Lcd_Sytem_State_Print+0x528>)
 80025de:	f7fe f9f7 	bl	80009d0 <__aeabi_dcmplt>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d013      	beq.n	8002610 <Lcd_Sytem_State_Print+0x4b0>
 80025e8:	4b20      	ldr	r3, [pc, #128]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 80025ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	f7fe f9ff 	bl	80009f8 <__aeabi_dcmpge>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <Lcd_Sytem_State_Print+0x4b0>
		{
			sprintf(lcd_data, "  %0.1lf %%", humid_setpoint[1]);
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002602:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002606:	491a      	ldr	r1, [pc, #104]	; (8002670 <Lcd_Sytem_State_Print+0x510>)
 8002608:	481a      	ldr	r0, [pc, #104]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 800260a:	f004 fbcb 	bl	8006da4 <siprintf>
 800260e:	e019      	b.n	8002644 <Lcd_Sytem_State_Print+0x4e4>
		}
		else if (humid_setpoint[1] == 100.0)
 8002610:	4b16      	ldr	r3, [pc, #88]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002612:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <Lcd_Sytem_State_Print+0x518>)
 800261c:	f7fe f9ce 	bl	80009bc <__aeabi_dcmpeq>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <Lcd_Sytem_State_Print+0x4d6>
		{
			sprintf(lcd_data, "%0.1lf %%", humid_setpoint[1]);
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002628:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800262c:	4913      	ldr	r1, [pc, #76]	; (800267c <Lcd_Sytem_State_Print+0x51c>)
 800262e:	4811      	ldr	r0, [pc, #68]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 8002630:	f004 fbb8 	bl	8006da4 <siprintf>
 8002634:	e006      	b.n	8002644 <Lcd_Sytem_State_Print+0x4e4>
		}
		else
		{
			sprintf(lcd_data, " %0.1lf %%", humid_setpoint[1]);
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <Lcd_Sytem_State_Print+0x50c>)
 8002638:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800263c:	4910      	ldr	r1, [pc, #64]	; (8002680 <Lcd_Sytem_State_Print+0x520>)
 800263e:	480d      	ldr	r0, [pc, #52]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 8002640:	f004 fbb0 	bl	8006da4 <siprintf>
		}
		lcd_send_string(lcd_data);
 8002644:	480b      	ldr	r0, [pc, #44]	; (8002674 <Lcd_Sytem_State_Print+0x514>)
 8002646:	f7fe fcac 	bl	8000fa2 <lcd_send_string>
		break;
 800264a:	e002      	b.n	8002652 <Lcd_Sytem_State_Print+0x4f2>

	// Some issues occur, back to NORMAL MODE
	default:
		mode = NORMAL;
 800264c:	2300      	movs	r3, #0
 800264e:	71fb      	strb	r3, [r7, #7]
		break;
 8002650:	bf00      	nop
	}
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	f3af 8000 	nop.w
 8002660:	cccccccd 	.word	0xcccccccd
 8002664:	4023cccc 	.word	0x4023cccc
 8002668:	0800a878 	.word	0x0800a878
 800266c:	20000018 	.word	0x20000018
 8002670:	0800a88c 	.word	0x0800a88c
 8002674:	2000048c 	.word	0x2000048c
 8002678:	40590000 	.word	0x40590000
 800267c:	0800a898 	.word	0x0800a898
 8002680:	0800a8a4 	.word	0x0800a8a4
 8002684:	0800a8b0 	.word	0x0800a8b0
 8002688:	40240000 	.word	0x40240000
 800268c:	00000000 	.word	0x00000000

08002690 <Long_Pressed_Button>:

// Long pressed button handle
void Long_Pressed_Button(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	// Temperature set point increase/decrease when the button is pressed a long time
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 8002694:	e01f      	b.n	80026d6 <Long_Pressed_Button+0x46>
	{
		Delay_Ms(150);
 8002696:	2096      	movs	r0, #150	; 0x96
 8002698:	f7ff fc10 	bl	8001ebc <Delay_Ms>
		if(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 800269c:	2108      	movs	r1, #8
 800269e:	489a      	ldr	r0, [pc, #616]	; (8002908 <Long_Pressed_Button+0x278>)
 80026a0:	f001 f870 	bl	8003784 <HAL_GPIO_ReadPin>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d115      	bne.n	80026d6 <Long_Pressed_Button+0x46>
 80026aa:	4b98      	ldr	r3, [pc, #608]	; (800290c <Long_Pressed_Button+0x27c>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d111      	bne.n	80026d6 <Long_Pressed_Button+0x46>
		{
			temp_setpoint[0] = temp_setpoint[0] - 0.1;
 80026b2:	4b97      	ldr	r3, [pc, #604]	; (8002910 <Long_Pressed_Button+0x280>)
 80026b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026b8:	a391      	add	r3, pc, #580	; (adr r3, 8002900 <Long_Pressed_Button+0x270>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	f7fd fd5d 	bl	800017c <__aeabi_dsub>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4992      	ldr	r1, [pc, #584]	; (8002910 <Long_Pressed_Button+0x280>)
 80026c8:	e9c1 2300 	strd	r2, r3, [r1]
			Lcd_Sytem_State_Print(mode);
 80026cc:	4b8f      	ldr	r3, [pc, #572]	; (800290c <Long_Pressed_Button+0x27c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fd45 	bl	8002160 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 80026d6:	2108      	movs	r1, #8
 80026d8:	488b      	ldr	r0, [pc, #556]	; (8002908 <Long_Pressed_Button+0x278>)
 80026da:	f001 f853 	bl	8003784 <HAL_GPIO_ReadPin>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d124      	bne.n	800272e <Long_Pressed_Button+0x9e>
 80026e4:	4b89      	ldr	r3, [pc, #548]	; (800290c <Long_Pressed_Button+0x27c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d0d4      	beq.n	8002696 <Long_Pressed_Button+0x6>
		}
	}
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 80026ec:	e01f      	b.n	800272e <Long_Pressed_Button+0x9e>
	{
		Delay_Ms(150);
 80026ee:	2096      	movs	r0, #150	; 0x96
 80026f0:	f7ff fbe4 	bl	8001ebc <Delay_Ms>
		if(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 80026f4:	2104      	movs	r1, #4
 80026f6:	4884      	ldr	r0, [pc, #528]	; (8002908 <Long_Pressed_Button+0x278>)
 80026f8:	f001 f844 	bl	8003784 <HAL_GPIO_ReadPin>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d115      	bne.n	800272e <Long_Pressed_Button+0x9e>
 8002702:	4b82      	ldr	r3, [pc, #520]	; (800290c <Long_Pressed_Button+0x27c>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d111      	bne.n	800272e <Long_Pressed_Button+0x9e>
		{
			temp_setpoint[0] = temp_setpoint[0] + 0.1;
 800270a:	4b81      	ldr	r3, [pc, #516]	; (8002910 <Long_Pressed_Button+0x280>)
 800270c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002710:	a37b      	add	r3, pc, #492	; (adr r3, 8002900 <Long_Pressed_Button+0x270>)
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f7fd fd33 	bl	8000180 <__adddf3>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	497c      	ldr	r1, [pc, #496]	; (8002910 <Long_Pressed_Button+0x280>)
 8002720:	e9c1 2300 	strd	r2, r3, [r1]
			Lcd_Sytem_State_Print(mode);
 8002724:	4b79      	ldr	r3, [pc, #484]	; (800290c <Long_Pressed_Button+0x27c>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fd19 	bl	8002160 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 800272e:	2104      	movs	r1, #4
 8002730:	4875      	ldr	r0, [pc, #468]	; (8002908 <Long_Pressed_Button+0x278>)
 8002732:	f001 f827 	bl	8003784 <HAL_GPIO_ReadPin>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d124      	bne.n	8002786 <Long_Pressed_Button+0xf6>
 800273c:	4b73      	ldr	r3, [pc, #460]	; (800290c <Long_Pressed_Button+0x27c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d0d4      	beq.n	80026ee <Long_Pressed_Button+0x5e>
		}
	}
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 8002744:	e01f      	b.n	8002786 <Long_Pressed_Button+0xf6>
	{
		Delay_Ms(150);
 8002746:	2096      	movs	r0, #150	; 0x96
 8002748:	f7ff fbb8 	bl	8001ebc <Delay_Ms>
		if(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 800274c:	2108      	movs	r1, #8
 800274e:	486e      	ldr	r0, [pc, #440]	; (8002908 <Long_Pressed_Button+0x278>)
 8002750:	f001 f818 	bl	8003784 <HAL_GPIO_ReadPin>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d115      	bne.n	8002786 <Long_Pressed_Button+0xf6>
 800275a:	4b6c      	ldr	r3, [pc, #432]	; (800290c <Long_Pressed_Button+0x27c>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d111      	bne.n	8002786 <Long_Pressed_Button+0xf6>
		{
			temp_setpoint[1] = temp_setpoint[1] - 0.1;
 8002762:	4b6b      	ldr	r3, [pc, #428]	; (8002910 <Long_Pressed_Button+0x280>)
 8002764:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002768:	a365      	add	r3, pc, #404	; (adr r3, 8002900 <Long_Pressed_Button+0x270>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f7fd fd05 	bl	800017c <__aeabi_dsub>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4966      	ldr	r1, [pc, #408]	; (8002910 <Long_Pressed_Button+0x280>)
 8002778:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Lcd_Sytem_State_Print(mode);
 800277c:	4b63      	ldr	r3, [pc, #396]	; (800290c <Long_Pressed_Button+0x27c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fced 	bl	8002160 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 8002786:	2108      	movs	r1, #8
 8002788:	485f      	ldr	r0, [pc, #380]	; (8002908 <Long_Pressed_Button+0x278>)
 800278a:	f000 fffb 	bl	8003784 <HAL_GPIO_ReadPin>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d124      	bne.n	80027de <Long_Pressed_Button+0x14e>
 8002794:	4b5d      	ldr	r3, [pc, #372]	; (800290c <Long_Pressed_Button+0x27c>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d0d4      	beq.n	8002746 <Long_Pressed_Button+0xb6>
		}
	}
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 800279c:	e01f      	b.n	80027de <Long_Pressed_Button+0x14e>
	{
		Delay_Ms(150);
 800279e:	2096      	movs	r0, #150	; 0x96
 80027a0:	f7ff fb8c 	bl	8001ebc <Delay_Ms>
		if(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 80027a4:	2104      	movs	r1, #4
 80027a6:	4858      	ldr	r0, [pc, #352]	; (8002908 <Long_Pressed_Button+0x278>)
 80027a8:	f000 ffec 	bl	8003784 <HAL_GPIO_ReadPin>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d115      	bne.n	80027de <Long_Pressed_Button+0x14e>
 80027b2:	4b56      	ldr	r3, [pc, #344]	; (800290c <Long_Pressed_Button+0x27c>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d111      	bne.n	80027de <Long_Pressed_Button+0x14e>
		{
			temp_setpoint[1] = temp_setpoint[1] + 0.1;
 80027ba:	4b55      	ldr	r3, [pc, #340]	; (8002910 <Long_Pressed_Button+0x280>)
 80027bc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80027c0:	a34f      	add	r3, pc, #316	; (adr r3, 8002900 <Long_Pressed_Button+0x270>)
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	f7fd fcdb 	bl	8000180 <__adddf3>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4950      	ldr	r1, [pc, #320]	; (8002910 <Long_Pressed_Button+0x280>)
 80027d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Lcd_Sytem_State_Print(mode);
 80027d4:	4b4d      	ldr	r3, [pc, #308]	; (800290c <Long_Pressed_Button+0x27c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fcc1 	bl	8002160 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 80027de:	2104      	movs	r1, #4
 80027e0:	4849      	ldr	r0, [pc, #292]	; (8002908 <Long_Pressed_Button+0x278>)
 80027e2:	f000 ffcf 	bl	8003784 <HAL_GPIO_ReadPin>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d124      	bne.n	8002836 <Long_Pressed_Button+0x1a6>
 80027ec:	4b47      	ldr	r3, [pc, #284]	; (800290c <Long_Pressed_Button+0x27c>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d0d4      	beq.n	800279e <Long_Pressed_Button+0x10e>
		}

	}

	// Humidity set point increase/decrease when the button is pressed a long time
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 80027f4:	e01f      	b.n	8002836 <Long_Pressed_Button+0x1a6>
	{
		Delay_Ms(150);
 80027f6:	2096      	movs	r0, #150	; 0x96
 80027f8:	f7ff fb60 	bl	8001ebc <Delay_Ms>
		if(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 80027fc:	2108      	movs	r1, #8
 80027fe:	4842      	ldr	r0, [pc, #264]	; (8002908 <Long_Pressed_Button+0x278>)
 8002800:	f000 ffc0 	bl	8003784 <HAL_GPIO_ReadPin>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d115      	bne.n	8002836 <Long_Pressed_Button+0x1a6>
 800280a:	4b40      	ldr	r3, [pc, #256]	; (800290c <Long_Pressed_Button+0x27c>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b03      	cmp	r3, #3
 8002810:	d111      	bne.n	8002836 <Long_Pressed_Button+0x1a6>
		{
			humid_setpoint[0] = humid_setpoint[0] - 0.1;
 8002812:	4b40      	ldr	r3, [pc, #256]	; (8002914 <Long_Pressed_Button+0x284>)
 8002814:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002818:	a339      	add	r3, pc, #228	; (adr r3, 8002900 <Long_Pressed_Button+0x270>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd fcad 	bl	800017c <__aeabi_dsub>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	493b      	ldr	r1, [pc, #236]	; (8002914 <Long_Pressed_Button+0x284>)
 8002828:	e9c1 2300 	strd	r2, r3, [r1]
			Lcd_Sytem_State_Print(mode);
 800282c:	4b37      	ldr	r3, [pc, #220]	; (800290c <Long_Pressed_Button+0x27c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fc95 	bl	8002160 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 8002836:	2108      	movs	r1, #8
 8002838:	4833      	ldr	r0, [pc, #204]	; (8002908 <Long_Pressed_Button+0x278>)
 800283a:	f000 ffa3 	bl	8003784 <HAL_GPIO_ReadPin>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d124      	bne.n	800288e <Long_Pressed_Button+0x1fe>
 8002844:	4b31      	ldr	r3, [pc, #196]	; (800290c <Long_Pressed_Button+0x27c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d0d4      	beq.n	80027f6 <Long_Pressed_Button+0x166>
		}
	}
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 800284c:	e01f      	b.n	800288e <Long_Pressed_Button+0x1fe>
	{
		Delay_Ms(150);
 800284e:	2096      	movs	r0, #150	; 0x96
 8002850:	f7ff fb34 	bl	8001ebc <Delay_Ms>
		if(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 8002854:	2104      	movs	r1, #4
 8002856:	482c      	ldr	r0, [pc, #176]	; (8002908 <Long_Pressed_Button+0x278>)
 8002858:	f000 ff94 	bl	8003784 <HAL_GPIO_ReadPin>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d115      	bne.n	800288e <Long_Pressed_Button+0x1fe>
 8002862:	4b2a      	ldr	r3, [pc, #168]	; (800290c <Long_Pressed_Button+0x27c>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d111      	bne.n	800288e <Long_Pressed_Button+0x1fe>
		{
			humid_setpoint[0] = humid_setpoint[0] + 0.1;
 800286a:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <Long_Pressed_Button+0x284>)
 800286c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002870:	a323      	add	r3, pc, #140	; (adr r3, 8002900 <Long_Pressed_Button+0x270>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f7fd fc83 	bl	8000180 <__adddf3>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4925      	ldr	r1, [pc, #148]	; (8002914 <Long_Pressed_Button+0x284>)
 8002880:	e9c1 2300 	strd	r2, r3, [r1]
			Lcd_Sytem_State_Print(mode);
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <Long_Pressed_Button+0x27c>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fc69 	bl	8002160 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 800288e:	2104      	movs	r1, #4
 8002890:	481d      	ldr	r0, [pc, #116]	; (8002908 <Long_Pressed_Button+0x278>)
 8002892:	f000 ff77 	bl	8003784 <HAL_GPIO_ReadPin>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d124      	bne.n	80028e6 <Long_Pressed_Button+0x256>
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <Long_Pressed_Button+0x27c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d0d4      	beq.n	800284e <Long_Pressed_Button+0x1be>
		}
	}
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 80028a4:	e01f      	b.n	80028e6 <Long_Pressed_Button+0x256>
	{
		Delay_Ms(150);
 80028a6:	2096      	movs	r0, #150	; 0x96
 80028a8:	f7ff fb08 	bl	8001ebc <Delay_Ms>
		if(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 80028ac:	2108      	movs	r1, #8
 80028ae:	4816      	ldr	r0, [pc, #88]	; (8002908 <Long_Pressed_Button+0x278>)
 80028b0:	f000 ff68 	bl	8003784 <HAL_GPIO_ReadPin>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d115      	bne.n	80028e6 <Long_Pressed_Button+0x256>
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <Long_Pressed_Button+0x27c>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d111      	bne.n	80028e6 <Long_Pressed_Button+0x256>
		{
			humid_setpoint[1] = humid_setpoint[1] - 0.1;
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <Long_Pressed_Button+0x284>)
 80028c4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80028c8:	a30d      	add	r3, pc, #52	; (adr r3, 8002900 <Long_Pressed_Button+0x270>)
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	f7fd fc55 	bl	800017c <__aeabi_dsub>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	490f      	ldr	r1, [pc, #60]	; (8002914 <Long_Pressed_Button+0x284>)
 80028d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Lcd_Sytem_State_Print(mode);
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <Long_Pressed_Button+0x27c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fc3d 	bl	8002160 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 80028e6:	2108      	movs	r1, #8
 80028e8:	4807      	ldr	r0, [pc, #28]	; (8002908 <Long_Pressed_Button+0x278>)
 80028ea:	f000 ff4b 	bl	8003784 <HAL_GPIO_ReadPin>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d131      	bne.n	8002958 <Long_Pressed_Button+0x2c8>
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <Long_Pressed_Button+0x27c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d0d4      	beq.n	80028a6 <Long_Pressed_Button+0x216>
		}
	}
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 80028fc:	e02c      	b.n	8002958 <Long_Pressed_Button+0x2c8>
 80028fe:	bf00      	nop
 8002900:	9999999a 	.word	0x9999999a
 8002904:	3fb99999 	.word	0x3fb99999
 8002908:	40010800 	.word	0x40010800
 800290c:	2000049c 	.word	0x2000049c
 8002910:	20000008 	.word	0x20000008
 8002914:	20000018 	.word	0x20000018
	{
		Delay_Ms(150);
 8002918:	2096      	movs	r0, #150	; 0x96
 800291a:	f7ff facf 	bl	8001ebc <Delay_Ms>
		if(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 800291e:	2104      	movs	r1, #4
 8002920:	4817      	ldr	r0, [pc, #92]	; (8002980 <Long_Pressed_Button+0x2f0>)
 8002922:	f000 ff2f 	bl	8003784 <HAL_GPIO_ReadPin>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d115      	bne.n	8002958 <Long_Pressed_Button+0x2c8>
 800292c:	4b15      	ldr	r3, [pc, #84]	; (8002984 <Long_Pressed_Button+0x2f4>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b04      	cmp	r3, #4
 8002932:	d111      	bne.n	8002958 <Long_Pressed_Button+0x2c8>
		{
			humid_setpoint[1] = humid_setpoint[1] + 0.1;
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <Long_Pressed_Button+0x2f8>)
 8002936:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800293a:	a30f      	add	r3, pc, #60	; (adr r3, 8002978 <Long_Pressed_Button+0x2e8>)
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	f7fd fc1e 	bl	8000180 <__adddf3>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	490f      	ldr	r1, [pc, #60]	; (8002988 <Long_Pressed_Button+0x2f8>)
 800294a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Lcd_Sytem_State_Print(mode);
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <Long_Pressed_Button+0x2f4>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fc04 	bl	8002160 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 8002958:	2104      	movs	r1, #4
 800295a:	4809      	ldr	r0, [pc, #36]	; (8002980 <Long_Pressed_Button+0x2f0>)
 800295c:	f000 ff12 	bl	8003784 <HAL_GPIO_ReadPin>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <Long_Pressed_Button+0x2de>
 8002966:	4b07      	ldr	r3, [pc, #28]	; (8002984 <Long_Pressed_Button+0x2f4>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b04      	cmp	r3, #4
 800296c:	d0d4      	beq.n	8002918 <Long_Pressed_Button+0x288>
		}
	}
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	f3af 8000 	nop.w
 8002978:	9999999a 	.word	0x9999999a
 800297c:	3fb99999 	.word	0x3fb99999
 8002980:	40010800 	.word	0x40010800
 8002984:	2000049c 	.word	0x2000049c
 8002988:	20000018 	.word	0x20000018

0800298c <Alarm_Check>:

// Alarm checking
void Alarm_Check(double temp, double humid)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002996:	e9c7 2300 	strd	r2, r3, [r7]
	// Check if the alarm is turned ON
	if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800299a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800299e:	4858      	ldr	r0, [pc, #352]	; (8002b00 <Alarm_Check+0x174>)
 80029a0:	f000 fef0 	bl	8003784 <HAL_GPIO_ReadPin>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 80a5 	bne.w	8002af6 <Alarm_Check+0x16a>
	{
		// Check the temperature value
		while(temp > temp_setpoint[1] && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80029ac:	e015      	b.n	80029da <Alarm_Check+0x4e>
		{
			// The temperature is too HIGH
			Buzzer_Trigger();
 80029ae:	f7ff fa9d 	bl	8001eec <Buzzer_Trigger>
			lcd_clear();
 80029b2:	f7fe fb0b 	bl	8000fcc <lcd_clear>
			lcd_put_cursor(0, 4);
 80029b6:	2104      	movs	r1, #4
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7fe fb1e 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Too high");
 80029be:	4851      	ldr	r0, [pc, #324]	; (8002b04 <Alarm_Check+0x178>)
 80029c0:	f7fe faef 	bl	8000fa2 <lcd_send_string>
			lcd_put_cursor(1, 2);
 80029c4:	2102      	movs	r1, #2
 80029c6:	2001      	movs	r0, #1
 80029c8:	f7fe fb17 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Temperature");
 80029cc:	484e      	ldr	r0, [pc, #312]	; (8002b08 <Alarm_Check+0x17c>)
 80029ce:	f7fe fae8 	bl	8000fa2 <lcd_send_string>
			Delay_Ms(500);
 80029d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029d6:	f7ff fa71 	bl	8001ebc <Delay_Ms>
		while(temp > temp_setpoint[1] && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80029da:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <Alarm_Check+0x180>)
 80029dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029e4:	f7fe f812 	bl	8000a0c <__aeabi_dcmpgt>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <Alarm_Check+0x72>
 80029ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029f2:	4843      	ldr	r0, [pc, #268]	; (8002b00 <Alarm_Check+0x174>)
 80029f4:	f000 fec6 	bl	8003784 <HAL_GPIO_ReadPin>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0d7      	beq.n	80029ae <Alarm_Check+0x22>
		}
		while(temp < temp_setpoint[0] && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80029fe:	e015      	b.n	8002a2c <Alarm_Check+0xa0>
		{
			// The temperature is too LOW
			Buzzer_Trigger();
 8002a00:	f7ff fa74 	bl	8001eec <Buzzer_Trigger>
			lcd_clear();
 8002a04:	f7fe fae2 	bl	8000fcc <lcd_clear>
			lcd_put_cursor(0, 4);
 8002a08:	2104      	movs	r1, #4
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7fe faf5 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Too low");
 8002a10:	483f      	ldr	r0, [pc, #252]	; (8002b10 <Alarm_Check+0x184>)
 8002a12:	f7fe fac6 	bl	8000fa2 <lcd_send_string>
			lcd_put_cursor(1, 2);
 8002a16:	2102      	movs	r1, #2
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f7fe faee 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Temperature");
 8002a1e:	483a      	ldr	r0, [pc, #232]	; (8002b08 <Alarm_Check+0x17c>)
 8002a20:	f7fe fabf 	bl	8000fa2 <lcd_send_string>
			Delay_Ms(500);
 8002a24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a28:	f7ff fa48 	bl	8001ebc <Delay_Ms>
		while(temp < temp_setpoint[0] && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8002a2c:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <Alarm_Check+0x180>)
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a36:	f7fd ffcb 	bl	80009d0 <__aeabi_dcmplt>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <Alarm_Check+0xc4>
 8002a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a44:	482e      	ldr	r0, [pc, #184]	; (8002b00 <Alarm_Check+0x174>)
 8002a46:	f000 fe9d 	bl	8003784 <HAL_GPIO_ReadPin>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0d7      	beq.n	8002a00 <Alarm_Check+0x74>
		}

		// Check the humidity value
		while(humid > humid_setpoint[1] && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8002a50:	e015      	b.n	8002a7e <Alarm_Check+0xf2>
		{
			// The humidity is too HIGH
			Buzzer_Trigger();
 8002a52:	f7ff fa4b 	bl	8001eec <Buzzer_Trigger>
			lcd_clear();
 8002a56:	f7fe fab9 	bl	8000fcc <lcd_clear>
			lcd_put_cursor(0, 4);
 8002a5a:	2104      	movs	r1, #4
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fe facc 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Too high");
 8002a62:	4828      	ldr	r0, [pc, #160]	; (8002b04 <Alarm_Check+0x178>)
 8002a64:	f7fe fa9d 	bl	8000fa2 <lcd_send_string>
			lcd_put_cursor(1, 4);
 8002a68:	2104      	movs	r1, #4
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f7fe fac5 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Humidity");
 8002a70:	4828      	ldr	r0, [pc, #160]	; (8002b14 <Alarm_Check+0x188>)
 8002a72:	f7fe fa96 	bl	8000fa2 <lcd_send_string>
			Delay_Ms(500);
 8002a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a7a:	f7ff fa1f 	bl	8001ebc <Delay_Ms>
		while(humid > humid_setpoint[1] && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8002a7e:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <Alarm_Check+0x18c>)
 8002a80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a88:	f7fd ffc0 	bl	8000a0c <__aeabi_dcmpgt>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <Alarm_Check+0x116>
 8002a92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a96:	481a      	ldr	r0, [pc, #104]	; (8002b00 <Alarm_Check+0x174>)
 8002a98:	f000 fe74 	bl	8003784 <HAL_GPIO_ReadPin>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0d7      	beq.n	8002a52 <Alarm_Check+0xc6>
		}
		while(humid < humid_setpoint[0] && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8002aa2:	e015      	b.n	8002ad0 <Alarm_Check+0x144>
		{
			// The humidity is too LOW
			Buzzer_Trigger();
 8002aa4:	f7ff fa22 	bl	8001eec <Buzzer_Trigger>
			lcd_clear();
 8002aa8:	f7fe fa90 	bl	8000fcc <lcd_clear>
			lcd_put_cursor(0, 4);
 8002aac:	2104      	movs	r1, #4
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fe faa3 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Too low");
 8002ab4:	4816      	ldr	r0, [pc, #88]	; (8002b10 <Alarm_Check+0x184>)
 8002ab6:	f7fe fa74 	bl	8000fa2 <lcd_send_string>
			lcd_put_cursor(1, 4);
 8002aba:	2104      	movs	r1, #4
 8002abc:	2001      	movs	r0, #1
 8002abe:	f7fe fa9c 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Humidity");
 8002ac2:	4814      	ldr	r0, [pc, #80]	; (8002b14 <Alarm_Check+0x188>)
 8002ac4:	f7fe fa6d 	bl	8000fa2 <lcd_send_string>
			Delay_Ms(500);
 8002ac8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002acc:	f7ff f9f6 	bl	8001ebc <Delay_Ms>
		while(humid < humid_setpoint[0] && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <Alarm_Check+0x18c>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ada:	f7fd ff79 	bl	80009d0 <__aeabi_dcmplt>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d100      	bne.n	8002ae6 <Alarm_Check+0x15a>
		}
	}
}
 8002ae4:	e007      	b.n	8002af6 <Alarm_Check+0x16a>
		while(humid < humid_setpoint[0] && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8002ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002aea:	4805      	ldr	r0, [pc, #20]	; (8002b00 <Alarm_Check+0x174>)
 8002aec:	f000 fe4a 	bl	8003784 <HAL_GPIO_ReadPin>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0d6      	beq.n	8002aa4 <Alarm_Check+0x118>
}
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40011000 	.word	0x40011000
 8002b04:	0800a8c4 	.word	0x0800a8c4
 8002b08:	0800a8d0 	.word	0x0800a8d0
 8002b0c:	20000008 	.word	0x20000008
 8002b10:	0800a8dc 	.word	0x0800a8dc
 8002b14:	0800a8e4 	.word	0x0800a8e4
 8002b18:	20000018 	.word	0x20000018

08002b1c <LoRa_Receive_Handle>:

// LoRa receive data handle
void LoRa_Receive_Handle()
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
	char *rcvSrcId;		// pointer to source ID
	char *rcvDesId;		// pointer to destination ID
	char *message;		// pointer to received message

	rcvSrcId = strtok(received_data, ",");                // return the pointer to the source_id
 8002b22:	4914      	ldr	r1, [pc, #80]	; (8002b74 <LoRa_Receive_Handle+0x58>)
 8002b24:	4814      	ldr	r0, [pc, #80]	; (8002b78 <LoRa_Receive_Handle+0x5c>)
 8002b26:	f004 f9a9 	bl	8006e7c <strtok>
 8002b2a:	60f8      	str	r0, [r7, #12]
	rcvDesId = strtok(NULL, ",");                         // continue to return the pointer to the destination_id
 8002b2c:	4911      	ldr	r1, [pc, #68]	; (8002b74 <LoRa_Receive_Handle+0x58>)
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f004 f9a4 	bl	8006e7c <strtok>
 8002b34:	60b8      	str	r0, [r7, #8]
	message = strtok(NULL, ","); 						  // continue to return the pointer to the received message
 8002b36:	490f      	ldr	r1, [pc, #60]	; (8002b74 <LoRa_Receive_Handle+0x58>)
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f004 f99f 	bl	8006e7c <strtok>
 8002b3e:	6078      	str	r0, [r7, #4]

	// Check if the destination ID is correct
	if(!strcmp(rcvDesId, srcId))
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <LoRa_Receive_Handle+0x60>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	68b8      	ldr	r0, [r7, #8]
 8002b48:	f7fd fb02 	bl	8000150 <strcmp>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10b      	bne.n	8002b6a <LoRa_Receive_Handle+0x4e>
	{
		if (!strcmp(message,"ON"))
 8002b52:	490b      	ldr	r1, [pc, #44]	; (8002b80 <LoRa_Receive_Handle+0x64>)
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7fd fafb 	bl	8000150 <strcmp>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d104      	bne.n	8002b6a <LoRa_Receive_Handle+0x4e>
		{
			Buzzer_Trigger();
 8002b60:	f7ff f9c4 	bl	8001eec <Buzzer_Trigger>
			cmdStatus = 1;
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <LoRa_Receive_Handle+0x68>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	0800a8f0 	.word	0x0800a8f0
 8002b78:	20000478 	.word	0x20000478
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	0800a8f4 	.word	0x0800a8f4
 8002b84:	200004b4 	.word	0x200004b4

08002b88 <HAL_TIM_PeriodElapsedCallback>:

// Timer 4 callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d106      	bne.n	8002ba6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		/* LoRa receiving */
		LoRa_receive(&myLoRa, (uint8_t*) received_data, 20);
 8002b98:	2214      	movs	r2, #20
 8002b9a:	4906      	ldr	r1, [pc, #24]	; (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002b9c:	4806      	ldr	r0, [pc, #24]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b9e:	f7fe fd08 	bl	80015b2 <LoRa_receive>
		LoRa_Receive_Handle();
 8002ba2:	f7ff ffbb 	bl	8002b1c <LoRa_Receive_Handle>
	}
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000358 	.word	0x20000358
 8002bb4:	20000478 	.word	0x20000478
 8002bb8:	200003e8 	.word	0x200003e8

08002bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc0:	b672      	cpsid	i
}
 8002bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bc4:	e7fe      	b.n	8002bc4 <Error_Handler+0x8>
	...

08002bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <HAL_MspInit+0x40>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	4a0d      	ldr	r2, [pc, #52]	; (8002c08 <HAL_MspInit+0x40>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6193      	str	r3, [r2, #24]
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_MspInit+0x40>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_MspInit+0x40>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <HAL_MspInit+0x40>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	61d3      	str	r3, [r2, #28]
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_MspInit+0x40>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	40021000 	.word	0x40021000

08002c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <HAL_I2C_MspInit+0x70>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d123      	bne.n	8002c74 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <HAL_I2C_MspInit+0x74>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <HAL_I2C_MspInit+0x74>)
 8002c32:	f043 0308 	orr.w	r3, r3, #8
 8002c36:	6193      	str	r3, [r2, #24]
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_I2C_MspInit+0x74>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c44:	23c0      	movs	r3, #192	; 0xc0
 8002c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c48:	2312      	movs	r3, #18
 8002c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	4619      	mov	r1, r3
 8002c56:	480b      	ldr	r0, [pc, #44]	; (8002c84 <HAL_I2C_MspInit+0x78>)
 8002c58:	f000 fc10 	bl	800347c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_I2C_MspInit+0x74>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <HAL_I2C_MspInit+0x74>)
 8002c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c66:	61d3      	str	r3, [r2, #28]
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_I2C_MspInit+0x74>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c74:	bf00      	nop
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40005400 	.word	0x40005400
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40010c00 	.word	0x40010c00

08002c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 0310 	add.w	r3, r7, #16
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a1c      	ldr	r2, [pc, #112]	; (8002d14 <HAL_SPI_MspInit+0x8c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d131      	bne.n	8002d0c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_SPI_MspInit+0x90>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <HAL_SPI_MspInit+0x90>)
 8002cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb2:	61d3      	str	r3, [r2, #28]
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <HAL_SPI_MspInit+0x90>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc0:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <HAL_SPI_MspInit+0x90>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <HAL_SPI_MspInit+0x90>)
 8002cc6:	f043 0308 	orr.w	r3, r3, #8
 8002cca:	6193      	str	r3, [r2, #24]
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_SPI_MspInit+0x90>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002cd8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002cdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce6:	f107 0310 	add.w	r3, r7, #16
 8002cea:	4619      	mov	r1, r3
 8002cec:	480b      	ldr	r0, [pc, #44]	; (8002d1c <HAL_SPI_MspInit+0x94>)
 8002cee:	f000 fbc5 	bl	800347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002cf2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d00:	f107 0310 	add.w	r3, r7, #16
 8002d04:	4619      	mov	r1, r3
 8002d06:	4805      	ldr	r0, [pc, #20]	; (8002d1c <HAL_SPI_MspInit+0x94>)
 8002d08:	f000 fbb8 	bl	800347c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d0c:	bf00      	nop
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40003800 	.word	0x40003800
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40010c00 	.word	0x40010c00

08002d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d30:	d10c      	bne.n	8002d4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d32:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <HAL_TIM_Base_MspInit+0x8c>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <HAL_TIM_Base_MspInit+0x8c>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	61d3      	str	r3, [r2, #28]
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_TIM_Base_MspInit+0x8c>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d4a:	e02a      	b.n	8002da2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <HAL_TIM_Base_MspInit+0x90>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d10c      	bne.n	8002d70 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_TIM_Base_MspInit+0x8c>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_TIM_Base_MspInit+0x8c>)
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	61d3      	str	r3, [r2, #28]
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_TIM_Base_MspInit+0x8c>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	693b      	ldr	r3, [r7, #16]
}
 8002d6e:	e018      	b.n	8002da2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <HAL_TIM_Base_MspInit+0x94>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d113      	bne.n	8002da2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d7a:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <HAL_TIM_Base_MspInit+0x8c>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	4a0b      	ldr	r2, [pc, #44]	; (8002dac <HAL_TIM_Base_MspInit+0x8c>)
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	61d3      	str	r3, [r2, #28]
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_TIM_Base_MspInit+0x8c>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	210f      	movs	r1, #15
 8002d96:	201e      	movs	r0, #30
 8002d98:	f000 fb39 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d9c:	201e      	movs	r0, #30
 8002d9e:	f000 fb52 	bl	8003446 <HAL_NVIC_EnableIRQ>
}
 8002da2:	bf00      	nop
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800

08002db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0310 	add.w	r3, r7, #16
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <HAL_UART_MspInit+0x8c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d131      	bne.n	8002e3c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_UART_MspInit+0x90>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	4a1a      	ldr	r2, [pc, #104]	; (8002e48 <HAL_UART_MspInit+0x90>)
 8002dde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de2:	6193      	str	r3, [r2, #24]
 8002de4:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <HAL_UART_MspInit+0x90>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df0:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <HAL_UART_MspInit+0x90>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <HAL_UART_MspInit+0x90>)
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	6193      	str	r3, [r2, #24]
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_UART_MspInit+0x90>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e16:	f107 0310 	add.w	r3, r7, #16
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	480b      	ldr	r0, [pc, #44]	; (8002e4c <HAL_UART_MspInit+0x94>)
 8002e1e:	f000 fb2d 	bl	800347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	f107 0310 	add.w	r3, r7, #16
 8002e34:	4619      	mov	r1, r3
 8002e36:	4805      	ldr	r0, [pc, #20]	; (8002e4c <HAL_UART_MspInit+0x94>)
 8002e38:	f000 fb20 	bl	800347c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e3c:	bf00      	nop
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40013800 	.word	0x40013800
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40010800 	.word	0x40010800

08002e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e54:	e7fe      	b.n	8002e54 <NMI_Handler+0x4>

08002e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e5a:	e7fe      	b.n	8002e5a <HardFault_Handler+0x4>

08002e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e60:	e7fe      	b.n	8002e60 <MemManage_Handler+0x4>

08002e62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e66:	e7fe      	b.n	8002e66 <BusFault_Handler+0x4>

08002e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e6c:	e7fe      	b.n	8002e6c <UsageFault_Handler+0x4>

08002e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr

08002e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e96:	f000 f9a3 	bl	80031e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	Delay_Us(65000);
 8002ea2:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002ea6:	f7fe fff1 	bl	8001e8c <Delay_Us>
	Delay_Us(65000);
 8002eaa:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002eae:	f7fe ffed 	bl	8001e8c <Delay_Us>
	Delay_Us(65000);
 8002eb2:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002eb6:	f7fe ffe9 	bl	8001e8c <Delay_Us>
	Delay_Us(65000);
 8002eba:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002ebe:	f7fe ffe5 	bl	8001e8c <Delay_Us>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUZZER_BUTTON_Pin);
 8002ec2:	2002      	movs	r0, #2
 8002ec4:	f000 fca6 	bl	8003814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	Delay_Us(65000);
 8002ed0:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002ed4:	f7fe ffda 	bl	8001e8c <Delay_Us>
	Delay_Us(65000);
 8002ed8:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002edc:	f7fe ffd6 	bl	8001e8c <Delay_Us>
	Delay_Us(65000);
 8002ee0:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002ee4:	f7fe ffd2 	bl	8001e8c <Delay_Us>
	Delay_Us(65000);
 8002ee8:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002eec:	f7fe ffce 	bl	8001e8c <Delay_Us>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INC_BUTTON_Pin);
 8002ef0:	2004      	movs	r0, #4
 8002ef2:	f000 fc8f 	bl	8003814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	Delay_Us(65000);
 8002efe:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002f02:	f7fe ffc3 	bl	8001e8c <Delay_Us>
	Delay_Us(65000);
 8002f06:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002f0a:	f7fe ffbf 	bl	8001e8c <Delay_Us>
	Delay_Us(65000);
 8002f0e:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002f12:	f7fe ffbb 	bl	8001e8c <Delay_Us>
	Delay_Us(65000);
 8002f16:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002f1a:	f7fe ffb7 	bl	8001e8c <Delay_Us>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DES_BUTTON_Pin);
 8002f1e:	2008      	movs	r0, #8
 8002f20:	f000 fc78 	bl	8003814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002f24:	bf00      	nop
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	Delay_Us(65000);
 8002f2c:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002f30:	f7fe ffac 	bl	8001e8c <Delay_Us>
	Delay_Us(65000);
 8002f34:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002f38:	f7fe ffa8 	bl	8001e8c <Delay_Us>
	Delay_Us(65000);
 8002f3c:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002f40:	f7fe ffa4 	bl	8001e8c <Delay_Us>
	Delay_Us(65000);
 8002f44:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002f48:	f7fe ffa0 	bl	8001e8c <Delay_Us>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_BUTTON_Pin);
 8002f4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f50:	f000 fc60 	bl	8003814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f5c:	4802      	ldr	r0, [pc, #8]	; (8002f68 <TIM4_IRQHandler+0x10>)
 8002f5e:	f002 fbcb 	bl	80056f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000358 	.word	0x20000358

08002f6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8002f70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f74:	f000 fc4e 	bl	8003814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return 1;
 8002f80:	2301      	movs	r3, #1
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <_kill>:

int _kill(int pid, int sig)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f94:	f004 f818 	bl	8006fc8 <__errno>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2216      	movs	r2, #22
 8002f9c:	601a      	str	r2, [r3, #0]
  return -1;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <_exit>:

void _exit (int status)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fb2:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ffe7 	bl	8002f8a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fbc:	e7fe      	b.n	8002fbc <_exit+0x12>

08002fbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e00a      	b.n	8002fe6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fd0:	f3af 8000 	nop.w
 8002fd4:	4601      	mov	r1, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	60ba      	str	r2, [r7, #8]
 8002fdc:	b2ca      	uxtb	r2, r1
 8002fde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	dbf0      	blt.n	8002fd0 <_read+0x12>
  }

  return len;
 8002fee:	687b      	ldr	r3, [r7, #4]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e009      	b.n	800301e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	60ba      	str	r2, [r7, #8]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3301      	adds	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	429a      	cmp	r2, r3
 8003024:	dbf1      	blt.n	800300a <_write+0x12>
  }
  return len;
 8003026:	687b      	ldr	r3, [r7, #4]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <_close>:

int _close(int file)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003056:	605a      	str	r2, [r3, #4]
  return 0;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <_isatty>:

int _isatty(int file)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800306c:	2301      	movs	r3, #1
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003098:	4a14      	ldr	r2, [pc, #80]	; (80030ec <_sbrk+0x5c>)
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <_sbrk+0x60>)
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030a4:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <_sbrk+0x64>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d102      	bne.n	80030b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030ac:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <_sbrk+0x64>)
 80030ae:	4a12      	ldr	r2, [pc, #72]	; (80030f8 <_sbrk+0x68>)
 80030b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <_sbrk+0x64>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d207      	bcs.n	80030d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030c0:	f003 ff82 	bl	8006fc8 <__errno>
 80030c4:	4603      	mov	r3, r0
 80030c6:	220c      	movs	r2, #12
 80030c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
 80030ce:	e009      	b.n	80030e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <_sbrk+0x64>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <_sbrk+0x64>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <_sbrk+0x64>)
 80030e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030e2:	68fb      	ldr	r3, [r7, #12]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20005000 	.word	0x20005000
 80030f0:	00000400 	.word	0x00000400
 80030f4:	200004b8 	.word	0x200004b8
 80030f8:	20000610 	.word	0x20000610

080030fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003108:	f7ff fff8 	bl	80030fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800310c:	480b      	ldr	r0, [pc, #44]	; (800313c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800310e:	490c      	ldr	r1, [pc, #48]	; (8003140 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003110:	4a0c      	ldr	r2, [pc, #48]	; (8003144 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003114:	e002      	b.n	800311c <LoopCopyDataInit>

08003116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800311a:	3304      	adds	r3, #4

0800311c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800311c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800311e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003120:	d3f9      	bcc.n	8003116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003122:	4a09      	ldr	r2, [pc, #36]	; (8003148 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003124:	4c09      	ldr	r4, [pc, #36]	; (800314c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003128:	e001      	b.n	800312e <LoopFillZerobss>

0800312a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800312a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800312c:	3204      	adds	r2, #4

0800312e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800312e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003130:	d3fb      	bcc.n	800312a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003132:	f003 ff4f 	bl	8006fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003136:	f7fe fb41 	bl	80017bc <main>
  bx lr
 800313a:	4770      	bx	lr
  ldr r0, =_sdata
 800313c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003140:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003144:	0800adac 	.word	0x0800adac
  ldr r2, =_sbss
 8003148:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800314c:	2000060c 	.word	0x2000060c

08003150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003150:	e7fe      	b.n	8003150 <ADC1_2_IRQHandler>
	...

08003154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <HAL_Init+0x28>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a07      	ldr	r2, [pc, #28]	; (800317c <HAL_Init+0x28>)
 800315e:	f043 0310 	orr.w	r3, r3, #16
 8003162:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003164:	2003      	movs	r0, #3
 8003166:	f000 f947 	bl	80033f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800316a:	200f      	movs	r0, #15
 800316c:	f000 f808 	bl	8003180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003170:	f7ff fd2a 	bl	8002bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40022000 	.word	0x40022000

08003180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003188:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_InitTick+0x54>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_InitTick+0x58>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	4619      	mov	r1, r3
 8003192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003196:	fbb3 f3f1 	udiv	r3, r3, r1
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f95f 	bl	8003462 <HAL_SYSTICK_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e00e      	b.n	80031cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b0f      	cmp	r3, #15
 80031b2:	d80a      	bhi.n	80031ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031b4:	2200      	movs	r2, #0
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	f000 f927 	bl	800340e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031c0:	4a06      	ldr	r2, [pc, #24]	; (80031dc <HAL_InitTick+0x5c>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000028 	.word	0x20000028
 80031d8:	20000030 	.word	0x20000030
 80031dc:	2000002c 	.word	0x2000002c

080031e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_IncTick+0x1c>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_IncTick+0x20>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	4a03      	ldr	r2, [pc, #12]	; (8003200 <HAL_IncTick+0x20>)
 80031f2:	6013      	str	r3, [r2, #0]
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	20000030 	.word	0x20000030
 8003200:	200004bc 	.word	0x200004bc

08003204 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return uwTick;
 8003208:	4b02      	ldr	r3, [pc, #8]	; (8003214 <HAL_GetTick+0x10>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	200004bc 	.word	0x200004bc

08003218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003220:	f7ff fff0 	bl	8003204 <HAL_GetTick>
 8003224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d005      	beq.n	800323e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <HAL_Delay+0x44>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800323e:	bf00      	nop
 8003240:	f7ff ffe0 	bl	8003204 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	429a      	cmp	r2, r3
 800324e:	d8f7      	bhi.n	8003240 <HAL_Delay+0x28>
  {
  }
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000030 	.word	0x20000030

08003260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800328c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003292:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	60d3      	str	r3, [r2, #12]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 0307 	and.w	r3, r3, #7
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	db0b      	blt.n	80032ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4906      	ldr	r1, [pc, #24]	; (80032f8 <__NVIC_EnableIRQ+0x34>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2001      	movs	r0, #1
 80032e6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	e000e100 	.word	0xe000e100

080032fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	6039      	str	r1, [r7, #0]
 8003306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330c:	2b00      	cmp	r3, #0
 800330e:	db0a      	blt.n	8003326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	490c      	ldr	r1, [pc, #48]	; (8003348 <__NVIC_SetPriority+0x4c>)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	0112      	lsls	r2, r2, #4
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	440b      	add	r3, r1
 8003320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003324:	e00a      	b.n	800333c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	4908      	ldr	r1, [pc, #32]	; (800334c <__NVIC_SetPriority+0x50>)
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	3b04      	subs	r3, #4
 8003334:	0112      	lsls	r2, r2, #4
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	440b      	add	r3, r1
 800333a:	761a      	strb	r2, [r3, #24]
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000e100 	.word	0xe000e100
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003350:	b480      	push	{r7}
 8003352:	b089      	sub	sp, #36	; 0x24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f1c3 0307 	rsb	r3, r3, #7
 800336a:	2b04      	cmp	r3, #4
 800336c:	bf28      	it	cs
 800336e:	2304      	movcs	r3, #4
 8003370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3304      	adds	r3, #4
 8003376:	2b06      	cmp	r3, #6
 8003378:	d902      	bls.n	8003380 <NVIC_EncodePriority+0x30>
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3b03      	subs	r3, #3
 800337e:	e000      	b.n	8003382 <NVIC_EncodePriority+0x32>
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003384:	f04f 32ff 	mov.w	r2, #4294967295
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43da      	mvns	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	401a      	ands	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003398:	f04f 31ff 	mov.w	r1, #4294967295
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	43d9      	mvns	r1, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a8:	4313      	orrs	r3, r2
         );
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3724      	adds	r7, #36	; 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033c4:	d301      	bcc.n	80033ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00f      	b.n	80033ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ca:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <SysTick_Config+0x40>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033d2:	210f      	movs	r1, #15
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f7ff ff90 	bl	80032fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <SysTick_Config+0x40>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <SysTick_Config+0x40>)
 80033e4:	2207      	movs	r2, #7
 80033e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000e010 	.word	0xe000e010

080033f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff2d 	bl	8003260 <__NVIC_SetPriorityGrouping>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	4603      	mov	r3, r0
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003420:	f7ff ff42 	bl	80032a8 <__NVIC_GetPriorityGrouping>
 8003424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f7ff ff90 	bl	8003350 <NVIC_EncodePriority>
 8003430:	4602      	mov	r2, r0
 8003432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff5f 	bl	80032fc <__NVIC_SetPriority>
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff35 	bl	80032c4 <__NVIC_EnableIRQ>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff ffa2 	bl	80033b4 <SysTick_Config>
 8003470:	4603      	mov	r3, r0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800347c:	b480      	push	{r7}
 800347e:	b08b      	sub	sp, #44	; 0x2c
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003486:	2300      	movs	r3, #0
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800348a:	2300      	movs	r3, #0
 800348c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348e:	e169      	b.n	8003764 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003490:	2201      	movs	r2, #1
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	f040 8158 	bne.w	800375e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4a9a      	ldr	r2, [pc, #616]	; (800371c <HAL_GPIO_Init+0x2a0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d05e      	beq.n	8003576 <HAL_GPIO_Init+0xfa>
 80034b8:	4a98      	ldr	r2, [pc, #608]	; (800371c <HAL_GPIO_Init+0x2a0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d875      	bhi.n	80035aa <HAL_GPIO_Init+0x12e>
 80034be:	4a98      	ldr	r2, [pc, #608]	; (8003720 <HAL_GPIO_Init+0x2a4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d058      	beq.n	8003576 <HAL_GPIO_Init+0xfa>
 80034c4:	4a96      	ldr	r2, [pc, #600]	; (8003720 <HAL_GPIO_Init+0x2a4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d86f      	bhi.n	80035aa <HAL_GPIO_Init+0x12e>
 80034ca:	4a96      	ldr	r2, [pc, #600]	; (8003724 <HAL_GPIO_Init+0x2a8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d052      	beq.n	8003576 <HAL_GPIO_Init+0xfa>
 80034d0:	4a94      	ldr	r2, [pc, #592]	; (8003724 <HAL_GPIO_Init+0x2a8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d869      	bhi.n	80035aa <HAL_GPIO_Init+0x12e>
 80034d6:	4a94      	ldr	r2, [pc, #592]	; (8003728 <HAL_GPIO_Init+0x2ac>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d04c      	beq.n	8003576 <HAL_GPIO_Init+0xfa>
 80034dc:	4a92      	ldr	r2, [pc, #584]	; (8003728 <HAL_GPIO_Init+0x2ac>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d863      	bhi.n	80035aa <HAL_GPIO_Init+0x12e>
 80034e2:	4a92      	ldr	r2, [pc, #584]	; (800372c <HAL_GPIO_Init+0x2b0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d046      	beq.n	8003576 <HAL_GPIO_Init+0xfa>
 80034e8:	4a90      	ldr	r2, [pc, #576]	; (800372c <HAL_GPIO_Init+0x2b0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d85d      	bhi.n	80035aa <HAL_GPIO_Init+0x12e>
 80034ee:	2b12      	cmp	r3, #18
 80034f0:	d82a      	bhi.n	8003548 <HAL_GPIO_Init+0xcc>
 80034f2:	2b12      	cmp	r3, #18
 80034f4:	d859      	bhi.n	80035aa <HAL_GPIO_Init+0x12e>
 80034f6:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <HAL_GPIO_Init+0x80>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	08003577 	.word	0x08003577
 8003500:	08003551 	.word	0x08003551
 8003504:	08003563 	.word	0x08003563
 8003508:	080035a5 	.word	0x080035a5
 800350c:	080035ab 	.word	0x080035ab
 8003510:	080035ab 	.word	0x080035ab
 8003514:	080035ab 	.word	0x080035ab
 8003518:	080035ab 	.word	0x080035ab
 800351c:	080035ab 	.word	0x080035ab
 8003520:	080035ab 	.word	0x080035ab
 8003524:	080035ab 	.word	0x080035ab
 8003528:	080035ab 	.word	0x080035ab
 800352c:	080035ab 	.word	0x080035ab
 8003530:	080035ab 	.word	0x080035ab
 8003534:	080035ab 	.word	0x080035ab
 8003538:	080035ab 	.word	0x080035ab
 800353c:	080035ab 	.word	0x080035ab
 8003540:	08003559 	.word	0x08003559
 8003544:	0800356d 	.word	0x0800356d
 8003548:	4a79      	ldr	r2, [pc, #484]	; (8003730 <HAL_GPIO_Init+0x2b4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800354e:	e02c      	b.n	80035aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	623b      	str	r3, [r7, #32]
          break;
 8003556:	e029      	b.n	80035ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	3304      	adds	r3, #4
 800355e:	623b      	str	r3, [r7, #32]
          break;
 8003560:	e024      	b.n	80035ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	3308      	adds	r3, #8
 8003568:	623b      	str	r3, [r7, #32]
          break;
 800356a:	e01f      	b.n	80035ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	330c      	adds	r3, #12
 8003572:	623b      	str	r3, [r7, #32]
          break;
 8003574:	e01a      	b.n	80035ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800357e:	2304      	movs	r3, #4
 8003580:	623b      	str	r3, [r7, #32]
          break;
 8003582:	e013      	b.n	80035ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800358c:	2308      	movs	r3, #8
 800358e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	611a      	str	r2, [r3, #16]
          break;
 8003596:	e009      	b.n	80035ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003598:	2308      	movs	r3, #8
 800359a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	615a      	str	r2, [r3, #20]
          break;
 80035a2:	e003      	b.n	80035ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035a4:	2300      	movs	r3, #0
 80035a6:	623b      	str	r3, [r7, #32]
          break;
 80035a8:	e000      	b.n	80035ac <HAL_GPIO_Init+0x130>
          break;
 80035aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2bff      	cmp	r3, #255	; 0xff
 80035b0:	d801      	bhi.n	80035b6 <HAL_GPIO_Init+0x13a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	e001      	b.n	80035ba <HAL_GPIO_Init+0x13e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2bff      	cmp	r3, #255	; 0xff
 80035c0:	d802      	bhi.n	80035c8 <HAL_GPIO_Init+0x14c>
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	e002      	b.n	80035ce <HAL_GPIO_Init+0x152>
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	3b08      	subs	r3, #8
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	210f      	movs	r1, #15
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	401a      	ands	r2, r3
 80035e0:	6a39      	ldr	r1, [r7, #32]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	431a      	orrs	r2, r3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 80b1 	beq.w	800375e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035fc:	4b4d      	ldr	r3, [pc, #308]	; (8003734 <HAL_GPIO_Init+0x2b8>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	4a4c      	ldr	r2, [pc, #304]	; (8003734 <HAL_GPIO_Init+0x2b8>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6193      	str	r3, [r2, #24]
 8003608:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <HAL_GPIO_Init+0x2b8>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003614:	4a48      	ldr	r2, [pc, #288]	; (8003738 <HAL_GPIO_Init+0x2bc>)
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	089b      	lsrs	r3, r3, #2
 800361a:	3302      	adds	r3, #2
 800361c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003620:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	220f      	movs	r2, #15
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4013      	ands	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a40      	ldr	r2, [pc, #256]	; (800373c <HAL_GPIO_Init+0x2c0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d013      	beq.n	8003668 <HAL_GPIO_Init+0x1ec>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a3f      	ldr	r2, [pc, #252]	; (8003740 <HAL_GPIO_Init+0x2c4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00d      	beq.n	8003664 <HAL_GPIO_Init+0x1e8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a3e      	ldr	r2, [pc, #248]	; (8003744 <HAL_GPIO_Init+0x2c8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <HAL_GPIO_Init+0x1e4>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a3d      	ldr	r2, [pc, #244]	; (8003748 <HAL_GPIO_Init+0x2cc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d101      	bne.n	800365c <HAL_GPIO_Init+0x1e0>
 8003658:	2303      	movs	r3, #3
 800365a:	e006      	b.n	800366a <HAL_GPIO_Init+0x1ee>
 800365c:	2304      	movs	r3, #4
 800365e:	e004      	b.n	800366a <HAL_GPIO_Init+0x1ee>
 8003660:	2302      	movs	r3, #2
 8003662:	e002      	b.n	800366a <HAL_GPIO_Init+0x1ee>
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <HAL_GPIO_Init+0x1ee>
 8003668:	2300      	movs	r3, #0
 800366a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366c:	f002 0203 	and.w	r2, r2, #3
 8003670:	0092      	lsls	r2, r2, #2
 8003672:	4093      	lsls	r3, r2
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800367a:	492f      	ldr	r1, [pc, #188]	; (8003738 <HAL_GPIO_Init+0x2bc>)
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	089b      	lsrs	r3, r3, #2
 8003680:	3302      	adds	r3, #2
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d006      	beq.n	80036a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003694:	4b2d      	ldr	r3, [pc, #180]	; (800374c <HAL_GPIO_Init+0x2d0>)
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	492c      	ldr	r1, [pc, #176]	; (800374c <HAL_GPIO_Init+0x2d0>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036a2:	4b2a      	ldr	r3, [pc, #168]	; (800374c <HAL_GPIO_Init+0x2d0>)
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	4928      	ldr	r1, [pc, #160]	; (800374c <HAL_GPIO_Init+0x2d0>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d006      	beq.n	80036ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036bc:	4b23      	ldr	r3, [pc, #140]	; (800374c <HAL_GPIO_Init+0x2d0>)
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	4922      	ldr	r1, [pc, #136]	; (800374c <HAL_GPIO_Init+0x2d0>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60cb      	str	r3, [r1, #12]
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_GPIO_Init+0x2d0>)
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	491e      	ldr	r1, [pc, #120]	; (800374c <HAL_GPIO_Init+0x2d0>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d006      	beq.n	80036f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <HAL_GPIO_Init+0x2d0>)
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	4918      	ldr	r1, [pc, #96]	; (800374c <HAL_GPIO_Init+0x2d0>)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
 80036f0:	e006      	b.n	8003700 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036f2:	4b16      	ldr	r3, [pc, #88]	; (800374c <HAL_GPIO_Init+0x2d0>)
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	4914      	ldr	r1, [pc, #80]	; (800374c <HAL_GPIO_Init+0x2d0>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d021      	beq.n	8003750 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <HAL_GPIO_Init+0x2d0>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	490e      	ldr	r1, [pc, #56]	; (800374c <HAL_GPIO_Init+0x2d0>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]
 8003718:	e021      	b.n	800375e <HAL_GPIO_Init+0x2e2>
 800371a:	bf00      	nop
 800371c:	10320000 	.word	0x10320000
 8003720:	10310000 	.word	0x10310000
 8003724:	10220000 	.word	0x10220000
 8003728:	10210000 	.word	0x10210000
 800372c:	10120000 	.word	0x10120000
 8003730:	10110000 	.word	0x10110000
 8003734:	40021000 	.word	0x40021000
 8003738:	40010000 	.word	0x40010000
 800373c:	40010800 	.word	0x40010800
 8003740:	40010c00 	.word	0x40010c00
 8003744:	40011000 	.word	0x40011000
 8003748:	40011400 	.word	0x40011400
 800374c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_GPIO_Init+0x304>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	43db      	mvns	r3, r3
 8003758:	4909      	ldr	r1, [pc, #36]	; (8003780 <HAL_GPIO_Init+0x304>)
 800375a:	4013      	ands	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	3301      	adds	r3, #1
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	f47f ae8e 	bne.w	8003490 <HAL_GPIO_Init+0x14>
  }
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	372c      	adds	r7, #44	; 0x2c
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	40010400 	.word	0x40010400

08003784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	887b      	ldrh	r3, [r7, #2]
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	e001      	b.n	80037a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	460b      	mov	r3, r1
 80037bc:	807b      	strh	r3, [r7, #2]
 80037be:	4613      	mov	r3, r2
 80037c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037c2:	787b      	ldrb	r3, [r7, #1]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037c8:	887a      	ldrh	r2, [r7, #2]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037ce:	e003      	b.n	80037d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037d0:	887b      	ldrh	r3, [r7, #2]
 80037d2:	041a      	lsls	r2, r3, #16
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	611a      	str	r2, [r3, #16]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	460b      	mov	r3, r1
 80037ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037f4:	887a      	ldrh	r2, [r7, #2]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4013      	ands	r3, r2
 80037fa:	041a      	lsls	r2, r3, #16
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	43d9      	mvns	r1, r3
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	400b      	ands	r3, r1
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	611a      	str	r2, [r3, #16]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800381e:	4b08      	ldr	r3, [pc, #32]	; (8003840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d006      	beq.n	8003838 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800382a:	4a05      	ldr	r2, [pc, #20]	; (8003840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe fb70 	bl	8001f18 <HAL_GPIO_EXTI_Callback>
  }
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40010400 	.word	0x40010400

08003844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e12b      	b.n	8003aae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff f9ce 	bl	8002c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2224      	movs	r2, #36	; 0x24
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038a8:	f001 f832 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 80038ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4a81      	ldr	r2, [pc, #516]	; (8003ab8 <HAL_I2C_Init+0x274>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d807      	bhi.n	80038c8 <HAL_I2C_Init+0x84>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a80      	ldr	r2, [pc, #512]	; (8003abc <HAL_I2C_Init+0x278>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	bf94      	ite	ls
 80038c0:	2301      	movls	r3, #1
 80038c2:	2300      	movhi	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e006      	b.n	80038d6 <HAL_I2C_Init+0x92>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a7d      	ldr	r2, [pc, #500]	; (8003ac0 <HAL_I2C_Init+0x27c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	bf94      	ite	ls
 80038d0:	2301      	movls	r3, #1
 80038d2:	2300      	movhi	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0e7      	b.n	8003aae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a78      	ldr	r2, [pc, #480]	; (8003ac4 <HAL_I2C_Init+0x280>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	0c9b      	lsrs	r3, r3, #18
 80038e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a6a      	ldr	r2, [pc, #424]	; (8003ab8 <HAL_I2C_Init+0x274>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d802      	bhi.n	8003918 <HAL_I2C_Init+0xd4>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	3301      	adds	r3, #1
 8003916:	e009      	b.n	800392c <HAL_I2C_Init+0xe8>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	4a69      	ldr	r2, [pc, #420]	; (8003ac8 <HAL_I2C_Init+0x284>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	099b      	lsrs	r3, r3, #6
 800392a:	3301      	adds	r3, #1
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	430b      	orrs	r3, r1
 8003932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800393e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	495c      	ldr	r1, [pc, #368]	; (8003ab8 <HAL_I2C_Init+0x274>)
 8003948:	428b      	cmp	r3, r1
 800394a:	d819      	bhi.n	8003980 <HAL_I2C_Init+0x13c>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1e59      	subs	r1, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	fbb1 f3f3 	udiv	r3, r1, r3
 800395a:	1c59      	adds	r1, r3, #1
 800395c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003960:	400b      	ands	r3, r1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_I2C_Init+0x138>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1e59      	subs	r1, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fbb1 f3f3 	udiv	r3, r1, r3
 8003974:	3301      	adds	r3, #1
 8003976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397a:	e051      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 800397c:	2304      	movs	r3, #4
 800397e:	e04f      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d111      	bne.n	80039ac <HAL_I2C_Init+0x168>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e58      	subs	r0, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	440b      	add	r3, r1
 8003996:	fbb0 f3f3 	udiv	r3, r0, r3
 800399a:	3301      	adds	r3, #1
 800399c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	e012      	b.n	80039d2 <HAL_I2C_Init+0x18e>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1e58      	subs	r0, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6859      	ldr	r1, [r3, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	0099      	lsls	r1, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_I2C_Init+0x196>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e022      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10e      	bne.n	8003a00 <HAL_I2C_Init+0x1bc>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1e58      	subs	r0, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6859      	ldr	r1, [r3, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	440b      	add	r3, r1
 80039f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039fe:	e00f      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e58      	subs	r0, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	0099      	lsls	r1, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	6809      	ldr	r1, [r1, #0]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6911      	ldr	r1, [r2, #16]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68d2      	ldr	r2, [r2, #12]
 8003a5a:	4311      	orrs	r1, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	000186a0 	.word	0x000186a0
 8003abc:	001e847f 	.word	0x001e847f
 8003ac0:	003d08ff 	.word	0x003d08ff
 8003ac4:	431bde83 	.word	0x431bde83
 8003ac8:	10624dd3 	.word	0x10624dd3

08003acc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	460b      	mov	r3, r1
 8003ada:	817b      	strh	r3, [r7, #10]
 8003adc:	4613      	mov	r3, r2
 8003ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ae0:	f7ff fb90 	bl	8003204 <HAL_GetTick>
 8003ae4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	f040 80e0 	bne.w	8003cb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2319      	movs	r3, #25
 8003afa:	2201      	movs	r2, #1
 8003afc:	4970      	ldr	r1, [pc, #448]	; (8003cc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f964 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e0d3      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_I2C_Master_Transmit+0x50>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e0cc      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d007      	beq.n	8003b42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2221      	movs	r2, #33	; 0x21
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	893a      	ldrh	r2, [r7, #8]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a50      	ldr	r2, [pc, #320]	; (8003cc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b84:	8979      	ldrh	r1, [r7, #10]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	6a3a      	ldr	r2, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f89c 	bl	8003cc8 <I2C_MasterRequestWrite>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e08d      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bb0:	e066      	b.n	8003c80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	6a39      	ldr	r1, [r7, #32]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fa22 	bl	8004000 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d107      	bne.n	8003bda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e06b      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d11b      	bne.n	8003c54 <HAL_I2C_Master_Transmit+0x188>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d017      	beq.n	8003c54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	6a39      	ldr	r1, [r7, #32]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fa19 	bl	8004090 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d107      	bne.n	8003c7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e01a      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d194      	bne.n	8003bb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	00100002 	.word	0x00100002
 8003cc4:	ffff0000 	.word	0xffff0000

08003cc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d006      	beq.n	8003cf2 <I2C_MasterRequestWrite+0x2a>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d003      	beq.n	8003cf2 <I2C_MasterRequestWrite+0x2a>
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cf0:	d108      	bne.n	8003d04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e00b      	b.n	8003d1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	2b12      	cmp	r3, #18
 8003d0a:	d107      	bne.n	8003d1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f84f 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d42:	d103      	bne.n	8003d4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e035      	b.n	8003dbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d58:	d108      	bne.n	8003d6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d5a:	897b      	ldrh	r3, [r7, #10]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d68:	611a      	str	r2, [r3, #16]
 8003d6a:	e01b      	b.n	8003da4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d6c:	897b      	ldrh	r3, [r7, #10]
 8003d6e:	11db      	asrs	r3, r3, #7
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f003 0306 	and.w	r3, r3, #6
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f063 030f 	orn	r3, r3, #15
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	490e      	ldr	r1, [pc, #56]	; (8003dc4 <I2C_MasterRequestWrite+0xfc>)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f898 	bl	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e010      	b.n	8003dbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d9a:	897b      	ldrh	r3, [r7, #10]
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4907      	ldr	r1, [pc, #28]	; (8003dc8 <I2C_MasterRequestWrite+0x100>)
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f888 	bl	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	00010008 	.word	0x00010008
 8003dc8:	00010002 	.word	0x00010002

08003dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ddc:	e048      	b.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d044      	beq.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de6:	f7ff fa0d 	bl	8003204 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d139      	bne.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	0c1b      	lsrs	r3, r3, #16
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d10d      	bne.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	43da      	mvns	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4013      	ands	r3, r2
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bf0c      	ite	eq
 8003e18:	2301      	moveq	r3, #1
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	e00c      	b.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	43da      	mvns	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d116      	bne.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e023      	b.n	8003eb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	0c1b      	lsrs	r3, r3, #16
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d10d      	bne.n	8003e96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	43da      	mvns	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4013      	ands	r3, r2
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	e00c      	b.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	43da      	mvns	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d093      	beq.n	8003dde <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ece:	e071      	b.n	8003fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ede:	d123      	bne.n	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ef8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	f043 0204 	orr.w	r2, r3, #4
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e067      	b.n	8003ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d041      	beq.n	8003fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f30:	f7ff f968 	bl	8003204 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d302      	bcc.n	8003f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d136      	bne.n	8003fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	0c1b      	lsrs	r3, r3, #16
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d10c      	bne.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	43da      	mvns	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bf14      	ite	ne
 8003f62:	2301      	movne	r3, #1
 8003f64:	2300      	moveq	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	e00b      	b.n	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	43da      	mvns	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4013      	ands	r3, r2
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf14      	ite	ne
 8003f7c:	2301      	movne	r3, #1
 8003f7e:	2300      	moveq	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e021      	b.n	8003ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	0c1b      	lsrs	r3, r3, #16
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d10c      	bne.n	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	e00b      	b.n	8003ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	43da      	mvns	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bf14      	ite	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	2300      	moveq	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f47f af6d 	bne.w	8003ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800400c:	e034      	b.n	8004078 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f886 	bl	8004120 <I2C_IsAcknowledgeFailed>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e034      	b.n	8004088 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d028      	beq.n	8004078 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004026:	f7ff f8ed 	bl	8003204 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	429a      	cmp	r2, r3
 8004034:	d302      	bcc.n	800403c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d11d      	bne.n	8004078 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b80      	cmp	r3, #128	; 0x80
 8004048:	d016      	beq.n	8004078 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e007      	b.n	8004088 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b80      	cmp	r3, #128	; 0x80
 8004084:	d1c3      	bne.n	800400e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800409c:	e034      	b.n	8004108 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f83e 	bl	8004120 <I2C_IsAcknowledgeFailed>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e034      	b.n	8004118 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d028      	beq.n	8004108 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b6:	f7ff f8a5 	bl	8003204 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d302      	bcc.n	80040cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d11d      	bne.n	8004108 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d016      	beq.n	8004108 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	f043 0220 	orr.w	r2, r3, #32
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e007      	b.n	8004118 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b04      	cmp	r3, #4
 8004114:	d1c3      	bne.n	800409e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004136:	d11b      	bne.n	8004170 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004140:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	f043 0204 	orr.w	r2, r3, #4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e272      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8087 	beq.w	80042aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800419c:	4b92      	ldr	r3, [pc, #584]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 030c 	and.w	r3, r3, #12
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d00c      	beq.n	80041c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041a8:	4b8f      	ldr	r3, [pc, #572]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d112      	bne.n	80041da <HAL_RCC_OscConfig+0x5e>
 80041b4:	4b8c      	ldr	r3, [pc, #560]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c0:	d10b      	bne.n	80041da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c2:	4b89      	ldr	r3, [pc, #548]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d06c      	beq.n	80042a8 <HAL_RCC_OscConfig+0x12c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d168      	bne.n	80042a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e24c      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_OscConfig+0x76>
 80041e4:	4b80      	ldr	r3, [pc, #512]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a7f      	ldr	r2, [pc, #508]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80041ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	e02e      	b.n	8004250 <HAL_RCC_OscConfig+0xd4>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10c      	bne.n	8004214 <HAL_RCC_OscConfig+0x98>
 80041fa:	4b7b      	ldr	r3, [pc, #492]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a7a      	ldr	r2, [pc, #488]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	4b78      	ldr	r3, [pc, #480]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a77      	ldr	r2, [pc, #476]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800420c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	e01d      	b.n	8004250 <HAL_RCC_OscConfig+0xd4>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0xbc>
 800421e:	4b72      	ldr	r3, [pc, #456]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a71      	ldr	r2, [pc, #452]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4b6f      	ldr	r3, [pc, #444]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a6e      	ldr	r2, [pc, #440]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0xd4>
 8004238:	4b6b      	ldr	r3, [pc, #428]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a6a      	ldr	r2, [pc, #424]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800423e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b68      	ldr	r3, [pc, #416]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a67      	ldr	r2, [pc, #412]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800424a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7fe ffd4 	bl	8003204 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004260:	f7fe ffd0 	bl	8003204 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e200      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	4b5d      	ldr	r3, [pc, #372]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0xe4>
 800427e:	e014      	b.n	80042aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fe ffc0 	bl	8003204 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004288:	f7fe ffbc 	bl	8003204 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e1ec      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429a:	4b53      	ldr	r3, [pc, #332]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x10c>
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d063      	beq.n	800437e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042b6:	4b4c      	ldr	r3, [pc, #304]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042c2:	4b49      	ldr	r3, [pc, #292]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d11c      	bne.n	8004308 <HAL_RCC_OscConfig+0x18c>
 80042ce:	4b46      	ldr	r3, [pc, #280]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d116      	bne.n	8004308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	4b43      	ldr	r3, [pc, #268]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_RCC_OscConfig+0x176>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e1c0      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f2:	4b3d      	ldr	r3, [pc, #244]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4939      	ldr	r1, [pc, #228]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	e03a      	b.n	800437e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004310:	4b36      	ldr	r3, [pc, #216]	; (80043ec <HAL_RCC_OscConfig+0x270>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7fe ff75 	bl	8003204 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431e:	f7fe ff71 	bl	8003204 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e1a1      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004330:	4b2d      	ldr	r3, [pc, #180]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433c:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4927      	ldr	r1, [pc, #156]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]
 8004350:	e015      	b.n	800437e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004352:	4b26      	ldr	r3, [pc, #152]	; (80043ec <HAL_RCC_OscConfig+0x270>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004358:	f7fe ff54 	bl	8003204 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004360:	f7fe ff50 	bl	8003204 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e180      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d03a      	beq.n	8004400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d019      	beq.n	80043c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004392:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <HAL_RCC_OscConfig+0x274>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004398:	f7fe ff34 	bl	8003204 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fe ff30 	bl	8003204 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e160      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b2:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043be:	2001      	movs	r0, #1
 80043c0:	f000 face 	bl	8004960 <RCC_Delay>
 80043c4:	e01c      	b.n	8004400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_RCC_OscConfig+0x274>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043cc:	f7fe ff1a 	bl	8003204 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d2:	e00f      	b.n	80043f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d4:	f7fe ff16 	bl	8003204 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d908      	bls.n	80043f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e146      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
 80043ec:	42420000 	.word	0x42420000
 80043f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f4:	4b92      	ldr	r3, [pc, #584]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e9      	bne.n	80043d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80a6 	beq.w	800455a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004412:	4b8b      	ldr	r3, [pc, #556]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	4b88      	ldr	r3, [pc, #544]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	4a87      	ldr	r2, [pc, #540]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 8004424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004428:	61d3      	str	r3, [r2, #28]
 800442a:	4b85      	ldr	r3, [pc, #532]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004436:	2301      	movs	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443a:	4b82      	ldr	r3, [pc, #520]	; (8004644 <HAL_RCC_OscConfig+0x4c8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d118      	bne.n	8004478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004446:	4b7f      	ldr	r3, [pc, #508]	; (8004644 <HAL_RCC_OscConfig+0x4c8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a7e      	ldr	r2, [pc, #504]	; (8004644 <HAL_RCC_OscConfig+0x4c8>)
 800444c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004452:	f7fe fed7 	bl	8003204 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445a:	f7fe fed3 	bl	8003204 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b64      	cmp	r3, #100	; 0x64
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e103      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	4b75      	ldr	r3, [pc, #468]	; (8004644 <HAL_RCC_OscConfig+0x4c8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d106      	bne.n	800448e <HAL_RCC_OscConfig+0x312>
 8004480:	4b6f      	ldr	r3, [pc, #444]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	4a6e      	ldr	r2, [pc, #440]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6213      	str	r3, [r2, #32]
 800448c:	e02d      	b.n	80044ea <HAL_RCC_OscConfig+0x36e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x334>
 8004496:	4b6a      	ldr	r3, [pc, #424]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	4a69      	ldr	r2, [pc, #420]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	6213      	str	r3, [r2, #32]
 80044a2:	4b67      	ldr	r3, [pc, #412]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	4a66      	ldr	r2, [pc, #408]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	6213      	str	r3, [r2, #32]
 80044ae:	e01c      	b.n	80044ea <HAL_RCC_OscConfig+0x36e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b05      	cmp	r3, #5
 80044b6:	d10c      	bne.n	80044d2 <HAL_RCC_OscConfig+0x356>
 80044b8:	4b61      	ldr	r3, [pc, #388]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	4a60      	ldr	r2, [pc, #384]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80044be:	f043 0304 	orr.w	r3, r3, #4
 80044c2:	6213      	str	r3, [r2, #32]
 80044c4:	4b5e      	ldr	r3, [pc, #376]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	4a5d      	ldr	r2, [pc, #372]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6213      	str	r3, [r2, #32]
 80044d0:	e00b      	b.n	80044ea <HAL_RCC_OscConfig+0x36e>
 80044d2:	4b5b      	ldr	r3, [pc, #364]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	4a5a      	ldr	r2, [pc, #360]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	6213      	str	r3, [r2, #32]
 80044de:	4b58      	ldr	r3, [pc, #352]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	4a57      	ldr	r2, [pc, #348]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	f023 0304 	bic.w	r3, r3, #4
 80044e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d015      	beq.n	800451e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f2:	f7fe fe87 	bl	8003204 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f8:	e00a      	b.n	8004510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fa:	f7fe fe83 	bl	8003204 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	f241 3288 	movw	r2, #5000	; 0x1388
 8004508:	4293      	cmp	r3, r2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e0b1      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004510:	4b4b      	ldr	r3, [pc, #300]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0ee      	beq.n	80044fa <HAL_RCC_OscConfig+0x37e>
 800451c:	e014      	b.n	8004548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451e:	f7fe fe71 	bl	8003204 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004524:	e00a      	b.n	800453c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fe fe6d 	bl	8003204 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f241 3288 	movw	r2, #5000	; 0x1388
 8004534:	4293      	cmp	r3, r2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e09b      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453c:	4b40      	ldr	r3, [pc, #256]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1ee      	bne.n	8004526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d105      	bne.n	800455a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454e:	4b3c      	ldr	r3, [pc, #240]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	4a3b      	ldr	r2, [pc, #236]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 8004554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8087 	beq.w	8004672 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004564:	4b36      	ldr	r3, [pc, #216]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 030c 	and.w	r3, r3, #12
 800456c:	2b08      	cmp	r3, #8
 800456e:	d061      	beq.n	8004634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d146      	bne.n	8004606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004578:	4b33      	ldr	r3, [pc, #204]	; (8004648 <HAL_RCC_OscConfig+0x4cc>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457e:	f7fe fe41 	bl	8003204 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004586:	f7fe fe3d 	bl	8003204 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e06d      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004598:	4b29      	ldr	r3, [pc, #164]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f0      	bne.n	8004586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d108      	bne.n	80045c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045ae:	4b24      	ldr	r3, [pc, #144]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	4921      	ldr	r1, [pc, #132]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c0:	4b1f      	ldr	r3, [pc, #124]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a19      	ldr	r1, [r3, #32]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	430b      	orrs	r3, r1
 80045d2:	491b      	ldr	r1, [pc, #108]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <HAL_RCC_OscConfig+0x4cc>)
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045de:	f7fe fe11 	bl	8003204 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e6:	f7fe fe0d 	bl	8003204 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e03d      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045f8:	4b11      	ldr	r3, [pc, #68]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x46a>
 8004604:	e035      	b.n	8004672 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <HAL_RCC_OscConfig+0x4cc>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fe fdfa 	bl	8003204 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004614:	f7fe fdf6 	bl	8003204 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e026      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x498>
 8004632:	e01e      	b.n	8004672 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d107      	bne.n	800464c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e019      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
 8004640:	40021000 	.word	0x40021000
 8004644:	40007000 	.word	0x40007000
 8004648:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_RCC_OscConfig+0x500>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	429a      	cmp	r2, r3
 800465e:	d106      	bne.n	800466e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466a:	429a      	cmp	r2, r3
 800466c:	d001      	beq.n	8004672 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40021000 	.word	0x40021000

08004680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0d0      	b.n	8004836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004694:	4b6a      	ldr	r3, [pc, #424]	; (8004840 <HAL_RCC_ClockConfig+0x1c0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d910      	bls.n	80046c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a2:	4b67      	ldr	r3, [pc, #412]	; (8004840 <HAL_RCC_ClockConfig+0x1c0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 0207 	bic.w	r2, r3, #7
 80046aa:	4965      	ldr	r1, [pc, #404]	; (8004840 <HAL_RCC_ClockConfig+0x1c0>)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b63      	ldr	r3, [pc, #396]	; (8004840 <HAL_RCC_ClockConfig+0x1c0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0b8      	b.n	8004836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046dc:	4b59      	ldr	r3, [pc, #356]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4a58      	ldr	r2, [pc, #352]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 80046e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f4:	4b53      	ldr	r3, [pc, #332]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4a52      	ldr	r2, [pc, #328]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 80046fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80046fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004700:	4b50      	ldr	r3, [pc, #320]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	494d      	ldr	r1, [pc, #308]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	4313      	orrs	r3, r2
 8004710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d040      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d107      	bne.n	8004736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004726:	4b47      	ldr	r3, [pc, #284]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d115      	bne.n	800475e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e07f      	b.n	8004836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d107      	bne.n	800474e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473e:	4b41      	ldr	r3, [pc, #260]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e073      	b.n	8004836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474e:	4b3d      	ldr	r3, [pc, #244]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e06b      	b.n	8004836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800475e:	4b39      	ldr	r3, [pc, #228]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f023 0203 	bic.w	r2, r3, #3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	4936      	ldr	r1, [pc, #216]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	4313      	orrs	r3, r2
 800476e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004770:	f7fe fd48 	bl	8003204 <HAL_GetTick>
 8004774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004776:	e00a      	b.n	800478e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004778:	f7fe fd44 	bl	8003204 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	; 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e053      	b.n	8004836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478e:	4b2d      	ldr	r3, [pc, #180]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 020c 	and.w	r2, r3, #12
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	429a      	cmp	r2, r3
 800479e:	d1eb      	bne.n	8004778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047a0:	4b27      	ldr	r3, [pc, #156]	; (8004840 <HAL_RCC_ClockConfig+0x1c0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d210      	bcs.n	80047d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ae:	4b24      	ldr	r3, [pc, #144]	; (8004840 <HAL_RCC_ClockConfig+0x1c0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 0207 	bic.w	r2, r3, #7
 80047b6:	4922      	ldr	r1, [pc, #136]	; (8004840 <HAL_RCC_ClockConfig+0x1c0>)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047be:	4b20      	ldr	r3, [pc, #128]	; (8004840 <HAL_RCC_ClockConfig+0x1c0>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e032      	b.n	8004836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d008      	beq.n	80047ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047dc:	4b19      	ldr	r3, [pc, #100]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4916      	ldr	r1, [pc, #88]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047fa:	4b12      	ldr	r3, [pc, #72]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	490e      	ldr	r1, [pc, #56]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800480e:	f000 f821 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8004812:	4602      	mov	r2, r0
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	490a      	ldr	r1, [pc, #40]	; (8004848 <HAL_RCC_ClockConfig+0x1c8>)
 8004820:	5ccb      	ldrb	r3, [r1, r3]
 8004822:	fa22 f303 	lsr.w	r3, r2, r3
 8004826:	4a09      	ldr	r2, [pc, #36]	; (800484c <HAL_RCC_ClockConfig+0x1cc>)
 8004828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <HAL_RCC_ClockConfig+0x1d0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe fca6 	bl	8003180 <HAL_InitTick>

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40022000 	.word	0x40022000
 8004844:	40021000 	.word	0x40021000
 8004848:	0800a8f8 	.word	0x0800a8f8
 800484c:	20000028 	.word	0x20000028
 8004850:	2000002c 	.word	0x2000002c

08004854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	2300      	movs	r3, #0
 8004868:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800486e:	4b1e      	ldr	r3, [pc, #120]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b04      	cmp	r3, #4
 800487c:	d002      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x30>
 800487e:	2b08      	cmp	r3, #8
 8004880:	d003      	beq.n	800488a <HAL_RCC_GetSysClockFreq+0x36>
 8004882:	e027      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004884:	4b19      	ldr	r3, [pc, #100]	; (80048ec <HAL_RCC_GetSysClockFreq+0x98>)
 8004886:	613b      	str	r3, [r7, #16]
      break;
 8004888:	e027      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	0c9b      	lsrs	r3, r3, #18
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004894:	5cd3      	ldrb	r3, [r2, r3]
 8004896:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d010      	beq.n	80048c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048a2:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	0c5b      	lsrs	r3, r3, #17
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	4a11      	ldr	r2, [pc, #68]	; (80048f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048ae:	5cd3      	ldrb	r3, [r2, r3]
 80048b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a0d      	ldr	r2, [pc, #52]	; (80048ec <HAL_RCC_GetSysClockFreq+0x98>)
 80048b6:	fb03 f202 	mul.w	r2, r3, r2
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e004      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a0c      	ldr	r2, [pc, #48]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048c8:	fb02 f303 	mul.w	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	613b      	str	r3, [r7, #16]
      break;
 80048d2:	e002      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <HAL_RCC_GetSysClockFreq+0x98>)
 80048d6:	613b      	str	r3, [r7, #16]
      break;
 80048d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048da:	693b      	ldr	r3, [r7, #16]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000
 80048ec:	007a1200 	.word	0x007a1200
 80048f0:	0800a910 	.word	0x0800a910
 80048f4:	0800a920 	.word	0x0800a920
 80048f8:	003d0900 	.word	0x003d0900

080048fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004900:	4b02      	ldr	r3, [pc, #8]	; (800490c <HAL_RCC_GetHCLKFreq+0x10>)
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr
 800490c:	20000028 	.word	0x20000028

08004910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004914:	f7ff fff2 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8004918:	4602      	mov	r2, r0
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	0a1b      	lsrs	r3, r3, #8
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	4903      	ldr	r1, [pc, #12]	; (8004934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004926:	5ccb      	ldrb	r3, [r1, r3]
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000
 8004934:	0800a908 	.word	0x0800a908

08004938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800493c:	f7ff ffde 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b05      	ldr	r3, [pc, #20]	; (8004958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	0adb      	lsrs	r3, r3, #11
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4903      	ldr	r1, [pc, #12]	; (800495c <HAL_RCC_GetPCLK2Freq+0x24>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004954:	4618      	mov	r0, r3
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40021000 	.word	0x40021000
 800495c:	0800a908 	.word	0x0800a908

08004960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004968:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <RCC_Delay+0x34>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a0a      	ldr	r2, [pc, #40]	; (8004998 <RCC_Delay+0x38>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	0a5b      	lsrs	r3, r3, #9
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800497c:	bf00      	nop
  }
  while (Delay --);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1e5a      	subs	r2, r3, #1
 8004982:	60fa      	str	r2, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1f9      	bne.n	800497c <RCC_Delay+0x1c>
}
 8004988:	bf00      	nop
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr
 8004994:	20000028 	.word	0x20000028
 8004998:	10624dd3 	.word	0x10624dd3

0800499c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e076      	b.n	8004a9c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d108      	bne.n	80049c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049be:	d009      	beq.n	80049d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	61da      	str	r2, [r3, #28]
 80049c6:	e005      	b.n	80049d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fe f94a 	bl	8002c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a58:	ea42 0103 	orr.w	r1, r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	0c1a      	lsrs	r2, r3, #16
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f002 0204 	and.w	r2, r2, #4
 8004a7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69da      	ldr	r2, [r3, #28]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_SPI_Transmit+0x22>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e12d      	b.n	8004d22 <HAL_SPI_Transmit+0x27e>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ace:	f7fe fb99 	bl	8003204 <HAL_GetTick>
 8004ad2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ad4:	88fb      	ldrh	r3, [r7, #6]
 8004ad6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d002      	beq.n	8004aea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ae8:	e116      	b.n	8004d18 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <HAL_SPI_Transmit+0x52>
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004afa:	e10d      	b.n	8004d18 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2203      	movs	r2, #3
 8004b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	88fa      	ldrh	r2, [r7, #6]
 8004b14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	88fa      	ldrh	r2, [r7, #6]
 8004b1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b42:	d10f      	bne.n	8004b64 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d007      	beq.n	8004b82 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8a:	d14f      	bne.n	8004c2c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_SPI_Transmit+0xf6>
 8004b94:	8afb      	ldrh	r3, [r7, #22]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d142      	bne.n	8004c20 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	881a      	ldrh	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	1c9a      	adds	r2, r3, #2
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bbe:	e02f      	b.n	8004c20 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d112      	bne.n	8004bf4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	881a      	ldrh	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	1c9a      	adds	r2, r3, #2
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bf2:	e015      	b.n	8004c20 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bf4:	f7fe fb06 	bl	8003204 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d803      	bhi.n	8004c0c <HAL_SPI_Transmit+0x168>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d102      	bne.n	8004c12 <HAL_SPI_Transmit+0x16e>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c1e:	e07b      	b.n	8004d18 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1ca      	bne.n	8004bc0 <HAL_SPI_Transmit+0x11c>
 8004c2a:	e050      	b.n	8004cce <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_SPI_Transmit+0x196>
 8004c34:	8afb      	ldrh	r3, [r7, #22]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d144      	bne.n	8004cc4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	7812      	ldrb	r2, [r2, #0]
 8004c46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c60:	e030      	b.n	8004cc4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d113      	bne.n	8004c98 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	330c      	adds	r3, #12
 8004c7a:	7812      	ldrb	r2, [r2, #0]
 8004c7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c96:	e015      	b.n	8004cc4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c98:	f7fe fab4 	bl	8003204 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d803      	bhi.n	8004cb0 <HAL_SPI_Transmit+0x20c>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cae:	d102      	bne.n	8004cb6 <HAL_SPI_Transmit+0x212>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004cc2:	e029      	b.n	8004d18 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1c9      	bne.n	8004c62 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	6839      	ldr	r1, [r7, #0]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 fbd8 	bl	8005488 <SPI_EndRxTxTransaction>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e003      	b.n	8004d18 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3720      	adds	r7, #32
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b088      	sub	sp, #32
 8004d2e:	af02      	add	r7, sp, #8
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	603b      	str	r3, [r7, #0]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d002      	beq.n	8004d50 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d4e:	e0fb      	b.n	8004f48 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d58:	d112      	bne.n	8004d80 <HAL_SPI_Receive+0x56>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10e      	bne.n	8004d80 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2204      	movs	r2, #4
 8004d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d6a:	88fa      	ldrh	r2, [r7, #6]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f8ef 	bl	8004f5a <HAL_SPI_TransmitReceive>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	e0e8      	b.n	8004f52 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_SPI_Receive+0x64>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e0e1      	b.n	8004f52 <HAL_SPI_Receive+0x228>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d96:	f7fe fa35 	bl	8003204 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_SPI_Receive+0x7e>
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dac:	e0cc      	b.n	8004f48 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2204      	movs	r2, #4
 8004db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	88fa      	ldrh	r2, [r7, #6]
 8004dc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df4:	d10f      	bne.n	8004e16 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d007      	beq.n	8004e34 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d16a      	bne.n	8004f12 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e3c:	e032      	b.n	8004ea4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d115      	bne.n	8004e78 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f103 020c 	add.w	r2, r3, #12
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	7812      	ldrb	r2, [r2, #0]
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e76:	e015      	b.n	8004ea4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e78:	f7fe f9c4 	bl	8003204 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d803      	bhi.n	8004e90 <HAL_SPI_Receive+0x166>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8e:	d102      	bne.n	8004e96 <HAL_SPI_Receive+0x16c>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004ea2:	e051      	b.n	8004f48 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1c7      	bne.n	8004e3e <HAL_SPI_Receive+0x114>
 8004eae:	e035      	b.n	8004f1c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d113      	bne.n	8004ee6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	b292      	uxth	r2, r2
 8004eca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	1c9a      	adds	r2, r3, #2
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ee4:	e015      	b.n	8004f12 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ee6:	f7fe f98d 	bl	8003204 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d803      	bhi.n	8004efe <HAL_SPI_Receive+0x1d4>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d102      	bne.n	8004f04 <HAL_SPI_Receive+0x1da>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d106      	bne.n	8004f12 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004f10:	e01a      	b.n	8004f48 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1c9      	bne.n	8004eb0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	6839      	ldr	r1, [r7, #0]
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fa5f 	bl	80053e4 <SPI_EndRxTransaction>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75fb      	strb	r3, [r7, #23]
 8004f3e:	e003      	b.n	8004f48 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b08c      	sub	sp, #48	; 0x30
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x26>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e198      	b.n	80052b2 <HAL_SPI_TransmitReceive+0x358>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f88:	f7fe f93c 	bl	8003204 <HAL_GetTick>
 8004f8c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f9e:	887b      	ldrh	r3, [r7, #2]
 8004fa0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d00f      	beq.n	8004fca <HAL_SPI_TransmitReceive+0x70>
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb0:	d107      	bne.n	8004fc2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <HAL_SPI_TransmitReceive+0x68>
 8004fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d003      	beq.n	8004fca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fc8:	e16d      	b.n	80052a6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0x82>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0x82>
 8004fd6:	887b      	ldrh	r3, [r7, #2]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d103      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fe2:	e160      	b.n	80052a6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d003      	beq.n	8004ff8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2205      	movs	r2, #5
 8004ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	887a      	ldrh	r2, [r7, #2]
 8005008:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	887a      	ldrh	r2, [r7, #2]
 800500e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	887a      	ldrh	r2, [r7, #2]
 800501a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	887a      	ldrh	r2, [r7, #2]
 8005020:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005038:	2b40      	cmp	r3, #64	; 0x40
 800503a:	d007      	beq.n	800504c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800504a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005054:	d17c      	bne.n	8005150 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_SPI_TransmitReceive+0x10a>
 800505e:	8b7b      	ldrh	r3, [r7, #26]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d16a      	bne.n	800513a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	881a      	ldrh	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	1c9a      	adds	r2, r3, #2
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005088:	e057      	b.n	800513a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b02      	cmp	r3, #2
 8005096:	d11b      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x176>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d016      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x176>
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d113      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	881a      	ldrh	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	1c9a      	adds	r2, r3, #2
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d119      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x1b8>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d014      	beq.n	8005112 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	b292      	uxth	r2, r2
 80050f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	1c9a      	adds	r2, r3, #2
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800510e:	2301      	movs	r3, #1
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005112:	f7fe f877 	bl	8003204 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800511e:	429a      	cmp	r2, r3
 8005120:	d80b      	bhi.n	800513a <HAL_SPI_TransmitReceive+0x1e0>
 8005122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d007      	beq.n	800513a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005138:	e0b5      	b.n	80052a6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1a2      	bne.n	800508a <HAL_SPI_TransmitReceive+0x130>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d19d      	bne.n	800508a <HAL_SPI_TransmitReceive+0x130>
 800514e:	e080      	b.n	8005252 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_SPI_TransmitReceive+0x204>
 8005158:	8b7b      	ldrh	r3, [r7, #26]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d16f      	bne.n	800523e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	7812      	ldrb	r2, [r2, #0]
 800516a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005184:	e05b      	b.n	800523e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b02      	cmp	r3, #2
 8005192:	d11c      	bne.n	80051ce <HAL_SPI_TransmitReceive+0x274>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d017      	beq.n	80051ce <HAL_SPI_TransmitReceive+0x274>
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d114      	bne.n	80051ce <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	330c      	adds	r3, #12
 80051ae:	7812      	ldrb	r2, [r2, #0]
 80051b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d119      	bne.n	8005210 <HAL_SPI_TransmitReceive+0x2b6>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d014      	beq.n	8005210 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800520c:	2301      	movs	r3, #1
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005210:	f7fd fff8 	bl	8003204 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800521c:	429a      	cmp	r2, r3
 800521e:	d803      	bhi.n	8005228 <HAL_SPI_TransmitReceive+0x2ce>
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005226:	d102      	bne.n	800522e <HAL_SPI_TransmitReceive+0x2d4>
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	2b00      	cmp	r3, #0
 800522c:	d107      	bne.n	800523e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800523c:	e033      	b.n	80052a6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d19e      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x22c>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d199      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005254:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f916 	bl	8005488 <SPI_EndRxTxTransaction>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d006      	beq.n	8005270 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800526e:	e01a      	b.n	80052a6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800529c:	e003      	b.n	80052a6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3730      	adds	r7, #48	; 0x30
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052c8:	b2db      	uxtb	r3, r3
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr

080052d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	4613      	mov	r3, r2
 80052e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052e4:	f7fd ff8e 	bl	8003204 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	4413      	add	r3, r2
 80052f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052f4:	f7fd ff86 	bl	8003204 <HAL_GetTick>
 80052f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052fa:	4b39      	ldr	r3, [pc, #228]	; (80053e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	015b      	lsls	r3, r3, #5
 8005300:	0d1b      	lsrs	r3, r3, #20
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	fb02 f303 	mul.w	r3, r2, r3
 8005308:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800530a:	e054      	b.n	80053b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d050      	beq.n	80053b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005314:	f7fd ff76 	bl	8003204 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	429a      	cmp	r2, r3
 8005322:	d902      	bls.n	800532a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d13d      	bne.n	80053a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005338:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005342:	d111      	bne.n	8005368 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800534c:	d004      	beq.n	8005358 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005356:	d107      	bne.n	8005368 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005366:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005370:	d10f      	bne.n	8005392 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005390:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e017      	b.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4013      	ands	r3, r2
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	bf0c      	ite	eq
 80053c6:	2301      	moveq	r3, #1
 80053c8:	2300      	movne	r3, #0
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d19b      	bne.n	800530c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3720      	adds	r7, #32
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000028 	.word	0x20000028

080053e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f8:	d111      	bne.n	800541e <SPI_EndRxTransaction+0x3a>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005402:	d004      	beq.n	800540e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540c:	d107      	bne.n	800541e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005426:	d117      	bne.n	8005458 <SPI_EndRxTransaction+0x74>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005430:	d112      	bne.n	8005458 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2200      	movs	r2, #0
 800543a:	2101      	movs	r1, #1
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f7ff ff49 	bl	80052d4 <SPI_WaitFlagStateUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01a      	beq.n	800547e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	f043 0220 	orr.w	r2, r3, #32
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e013      	b.n	8005480 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2200      	movs	r2, #0
 8005460:	2180      	movs	r1, #128	; 0x80
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff ff36 	bl	80052d4 <SPI_WaitFlagStateUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	f043 0220 	orr.w	r2, r3, #32
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e000      	b.n	8005480 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2200      	movs	r2, #0
 800549c:	2180      	movs	r1, #128	; 0x80
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff ff18 	bl	80052d4 <SPI_WaitFlagStateUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	f043 0220 	orr.w	r2, r3, #32
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e000      	b.n	80054bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e041      	b.n	800555a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fd fc18 	bl	8002d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3304      	adds	r3, #4
 8005500:	4619      	mov	r1, r3
 8005502:	4610      	mov	r0, r2
 8005504:	f000 faec 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	d001      	beq.n	800557c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e032      	b.n	80055e2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a18      	ldr	r2, [pc, #96]	; (80055ec <HAL_TIM_Base_Start+0x88>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00e      	beq.n	80055ac <HAL_TIM_Base_Start+0x48>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005596:	d009      	beq.n	80055ac <HAL_TIM_Base_Start+0x48>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a14      	ldr	r2, [pc, #80]	; (80055f0 <HAL_TIM_Base_Start+0x8c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_TIM_Base_Start+0x48>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <HAL_TIM_Base_Start+0x90>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d111      	bne.n	80055d0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b06      	cmp	r3, #6
 80055bc:	d010      	beq.n	80055e0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0201 	orr.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ce:	e007      	b.n	80055e0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40000800 	.word	0x40000800

080055f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	d001      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e03a      	b.n	8005686 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a18      	ldr	r2, [pc, #96]	; (8005690 <HAL_TIM_Base_Start_IT+0x98>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00e      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x58>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563a:	d009      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x58>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a14      	ldr	r2, [pc, #80]	; (8005694 <HAL_TIM_Base_Start_IT+0x9c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d004      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x58>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a13      	ldr	r2, [pc, #76]	; (8005698 <HAL_TIM_Base_Start_IT+0xa0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d111      	bne.n	8005674 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b06      	cmp	r3, #6
 8005660:	d010      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0201 	orr.w	r2, r2, #1
 8005670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005672:	e007      	b.n	8005684 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr
 8005690:	40012c00 	.word	0x40012c00
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800

0800569c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0201 	bic.w	r2, r2, #1
 80056b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6a1a      	ldr	r2, [r3, #32]
 80056ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10f      	bne.n	80056e4 <HAL_TIM_Base_Stop_IT+0x48>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6a1a      	ldr	r2, [r3, #32]
 80056ca:	f240 4344 	movw	r3, #1092	; 0x444
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d107      	bne.n	80056e4 <HAL_TIM_Base_Stop_IT+0x48>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0201 	bic.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b02      	cmp	r3, #2
 800570c:	d122      	bne.n	8005754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b02      	cmp	r3, #2
 800571a:	d11b      	bne.n	8005754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0202 	mvn.w	r2, #2
 8005724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f9b4 	bl	8005aa8 <HAL_TIM_IC_CaptureCallback>
 8005740:	e005      	b.n	800574e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f9a7 	bl	8005a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f9b6 	bl	8005aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b04      	cmp	r3, #4
 8005760:	d122      	bne.n	80057a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b04      	cmp	r3, #4
 800576e:	d11b      	bne.n	80057a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0204 	mvn.w	r2, #4
 8005778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f98a 	bl	8005aa8 <HAL_TIM_IC_CaptureCallback>
 8005794:	e005      	b.n	80057a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f97d 	bl	8005a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f98c 	bl	8005aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d122      	bne.n	80057fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d11b      	bne.n	80057fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0208 	mvn.w	r2, #8
 80057cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2204      	movs	r2, #4
 80057d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f960 	bl	8005aa8 <HAL_TIM_IC_CaptureCallback>
 80057e8:	e005      	b.n	80057f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f953 	bl	8005a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f962 	bl	8005aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0310 	and.w	r3, r3, #16
 8005806:	2b10      	cmp	r3, #16
 8005808:	d122      	bne.n	8005850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b10      	cmp	r3, #16
 8005816:	d11b      	bne.n	8005850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0210 	mvn.w	r2, #16
 8005820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2208      	movs	r2, #8
 8005826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f936 	bl	8005aa8 <HAL_TIM_IC_CaptureCallback>
 800583c:	e005      	b.n	800584a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f929 	bl	8005a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f938 	bl	8005aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b01      	cmp	r3, #1
 800585c:	d10e      	bne.n	800587c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b01      	cmp	r3, #1
 800586a:	d107      	bne.n	800587c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0201 	mvn.w	r2, #1
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fd f986 	bl	8002b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005886:	2b80      	cmp	r3, #128	; 0x80
 8005888:	d10e      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005894:	2b80      	cmp	r3, #128	; 0x80
 8005896:	d107      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa7b 	bl	8005d9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b2:	2b40      	cmp	r3, #64	; 0x40
 80058b4:	d10e      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d107      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f8fc 	bl	8005acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b20      	cmp	r3, #32
 80058e0:	d10e      	bne.n	8005900 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d107      	bne.n	8005900 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0220 	mvn.w	r2, #32
 80058f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa46 	bl	8005d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005900:	bf00      	nop
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_TIM_ConfigClockSource+0x1c>
 8005920:	2302      	movs	r3, #2
 8005922:	e0b4      	b.n	8005a8e <HAL_TIM_ConfigClockSource+0x186>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800594a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800595c:	d03e      	beq.n	80059dc <HAL_TIM_ConfigClockSource+0xd4>
 800595e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005962:	f200 8087 	bhi.w	8005a74 <HAL_TIM_ConfigClockSource+0x16c>
 8005966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596a:	f000 8086 	beq.w	8005a7a <HAL_TIM_ConfigClockSource+0x172>
 800596e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005972:	d87f      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x16c>
 8005974:	2b70      	cmp	r3, #112	; 0x70
 8005976:	d01a      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0xa6>
 8005978:	2b70      	cmp	r3, #112	; 0x70
 800597a:	d87b      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x16c>
 800597c:	2b60      	cmp	r3, #96	; 0x60
 800597e:	d050      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0x11a>
 8005980:	2b60      	cmp	r3, #96	; 0x60
 8005982:	d877      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x16c>
 8005984:	2b50      	cmp	r3, #80	; 0x50
 8005986:	d03c      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0xfa>
 8005988:	2b50      	cmp	r3, #80	; 0x50
 800598a:	d873      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x16c>
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d058      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x13a>
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d86f      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x16c>
 8005994:	2b30      	cmp	r3, #48	; 0x30
 8005996:	d064      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x15a>
 8005998:	2b30      	cmp	r3, #48	; 0x30
 800599a:	d86b      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x16c>
 800599c:	2b20      	cmp	r3, #32
 800599e:	d060      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x15a>
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d867      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x16c>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d05c      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x15a>
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d05a      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x15a>
 80059ac:	e062      	b.n	8005a74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059be:	f000 f968 	bl	8005c92 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	609a      	str	r2, [r3, #8]
      break;
 80059da:	e04f      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059ec:	f000 f951 	bl	8005c92 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059fe:	609a      	str	r2, [r3, #8]
      break;
 8005a00:	e03c      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f000 f8c8 	bl	8005ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2150      	movs	r1, #80	; 0x50
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f91f 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 8005a20:	e02c      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f000 f8e6 	bl	8005c00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2160      	movs	r1, #96	; 0x60
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 f90f 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 8005a40:	e01c      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f000 f8a8 	bl	8005ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2140      	movs	r1, #64	; 0x40
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 f8ff 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 8005a60:	e00c      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f000 f8f6 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 8005a72:	e003      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
      break;
 8005a78:	e000      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr

08005aba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr

08005acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr
	...

08005ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a29      	ldr	r2, [pc, #164]	; (8005b98 <TIM_Base_SetConfig+0xb8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <TIM_Base_SetConfig+0x30>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afe:	d007      	beq.n	8005b10 <TIM_Base_SetConfig+0x30>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a26      	ldr	r2, [pc, #152]	; (8005b9c <TIM_Base_SetConfig+0xbc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_Base_SetConfig+0x30>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a25      	ldr	r2, [pc, #148]	; (8005ba0 <TIM_Base_SetConfig+0xc0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d108      	bne.n	8005b22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a1c      	ldr	r2, [pc, #112]	; (8005b98 <TIM_Base_SetConfig+0xb8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00b      	beq.n	8005b42 <TIM_Base_SetConfig+0x62>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b30:	d007      	beq.n	8005b42 <TIM_Base_SetConfig+0x62>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a19      	ldr	r2, [pc, #100]	; (8005b9c <TIM_Base_SetConfig+0xbc>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d003      	beq.n	8005b42 <TIM_Base_SetConfig+0x62>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a18      	ldr	r2, [pc, #96]	; (8005ba0 <TIM_Base_SetConfig+0xc0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d108      	bne.n	8005b54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a07      	ldr	r2, [pc, #28]	; (8005b98 <TIM_Base_SetConfig+0xb8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d103      	bne.n	8005b88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	615a      	str	r2, [r3, #20]
}
 8005b8e:	bf00      	nop
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40000800 	.word	0x40000800

08005ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f023 0201 	bic.w	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f023 030a 	bic.w	r3, r3, #10
 8005be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f023 0210 	bic.w	r2, r3, #16
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	031b      	lsls	r3, r3, #12
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	621a      	str	r2, [r3, #32]
}
 8005c54:	bf00      	nop
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bc80      	pop	{r7}
 8005c5c:	4770      	bx	lr

08005c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f043 0307 	orr.w	r3, r3, #7
 8005c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	609a      	str	r2, [r3, #8]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bc80      	pop	{r7}
 8005c90:	4770      	bx	lr

08005c92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b087      	sub	sp, #28
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	021a      	lsls	r2, r3, #8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	609a      	str	r2, [r3, #8]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e046      	b.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a16      	ldr	r2, [pc, #88]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00e      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d34:	d009      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a12      	ldr	r2, [pc, #72]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d004      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a10      	ldr	r2, [pc, #64]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d10c      	bne.n	8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr
 8005d80:	40012c00 	.word	0x40012c00
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800

08005d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr

08005d9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr

08005db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e042      	b.n	8005e48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fc ffee 	bl	8002db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2224      	movs	r2, #36	; 0x24
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f82b 	bl	8005e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005e8a:	f023 030c 	bic.w	r3, r3, #12
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6812      	ldr	r2, [r2, #0]
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	430b      	orrs	r3, r1
 8005e96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699a      	ldr	r2, [r3, #24]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a2c      	ldr	r2, [pc, #176]	; (8005f64 <UART_SetConfig+0x114>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d103      	bne.n	8005ec0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005eb8:	f7fe fd3e 	bl	8004938 <HAL_RCC_GetPCLK2Freq>
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	e002      	b.n	8005ec6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ec0:	f7fe fd26 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 8005ec4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	009a      	lsls	r2, r3, #2
 8005ed0:	441a      	add	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	4a22      	ldr	r2, [pc, #136]	; (8005f68 <UART_SetConfig+0x118>)
 8005ede:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	0119      	lsls	r1, r3, #4
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009a      	lsls	r2, r3, #2
 8005ef0:	441a      	add	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005efc:	4b1a      	ldr	r3, [pc, #104]	; (8005f68 <UART_SetConfig+0x118>)
 8005efe:	fba3 0302 	umull	r0, r3, r3, r2
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	2064      	movs	r0, #100	; 0x64
 8005f06:	fb00 f303 	mul.w	r3, r0, r3
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	3332      	adds	r3, #50	; 0x32
 8005f10:	4a15      	ldr	r2, [pc, #84]	; (8005f68 <UART_SetConfig+0x118>)
 8005f12:	fba2 2303 	umull	r2, r3, r2, r3
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f1c:	4419      	add	r1, r3
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009a      	lsls	r2, r3, #2
 8005f28:	441a      	add	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f34:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <UART_SetConfig+0x118>)
 8005f36:	fba3 0302 	umull	r0, r3, r3, r2
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	2064      	movs	r0, #100	; 0x64
 8005f3e:	fb00 f303 	mul.w	r3, r0, r3
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	3332      	adds	r3, #50	; 0x32
 8005f48:	4a07      	ldr	r2, [pc, #28]	; (8005f68 <UART_SetConfig+0x118>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	f003 020f 	and.w	r2, r3, #15
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	440a      	add	r2, r1
 8005f5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f5c:	bf00      	nop
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40013800 	.word	0x40013800
 8005f68:	51eb851f 	.word	0x51eb851f

08005f6c <__cvt>:
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f72:	461f      	mov	r7, r3
 8005f74:	bfbb      	ittet	lt
 8005f76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005f7a:	461f      	movlt	r7, r3
 8005f7c:	2300      	movge	r3, #0
 8005f7e:	232d      	movlt	r3, #45	; 0x2d
 8005f80:	b088      	sub	sp, #32
 8005f82:	4614      	mov	r4, r2
 8005f84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005f88:	7013      	strb	r3, [r2, #0]
 8005f8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005f90:	f023 0820 	bic.w	r8, r3, #32
 8005f94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f98:	d005      	beq.n	8005fa6 <__cvt+0x3a>
 8005f9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f9e:	d100      	bne.n	8005fa2 <__cvt+0x36>
 8005fa0:	3501      	adds	r5, #1
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e000      	b.n	8005fa8 <__cvt+0x3c>
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	aa07      	add	r2, sp, #28
 8005faa:	9204      	str	r2, [sp, #16]
 8005fac:	aa06      	add	r2, sp, #24
 8005fae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005fb2:	e9cd 3500 	strd	r3, r5, [sp]
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	463b      	mov	r3, r7
 8005fba:	f001 f8ed 	bl	8007198 <_dtoa_r>
 8005fbe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	d102      	bne.n	8005fcc <__cvt+0x60>
 8005fc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fc8:	07db      	lsls	r3, r3, #31
 8005fca:	d522      	bpl.n	8006012 <__cvt+0xa6>
 8005fcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fd0:	eb06 0905 	add.w	r9, r6, r5
 8005fd4:	d110      	bne.n	8005ff8 <__cvt+0x8c>
 8005fd6:	7833      	ldrb	r3, [r6, #0]
 8005fd8:	2b30      	cmp	r3, #48	; 0x30
 8005fda:	d10a      	bne.n	8005ff2 <__cvt+0x86>
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2300      	movs	r3, #0
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	4639      	mov	r1, r7
 8005fe4:	f7fa fcea 	bl	80009bc <__aeabi_dcmpeq>
 8005fe8:	b918      	cbnz	r0, 8005ff2 <__cvt+0x86>
 8005fea:	f1c5 0501 	rsb	r5, r5, #1
 8005fee:	f8ca 5000 	str.w	r5, [sl]
 8005ff2:	f8da 3000 	ldr.w	r3, [sl]
 8005ff6:	4499      	add	r9, r3
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	4639      	mov	r1, r7
 8006000:	f7fa fcdc 	bl	80009bc <__aeabi_dcmpeq>
 8006004:	b108      	cbz	r0, 800600a <__cvt+0x9e>
 8006006:	f8cd 901c 	str.w	r9, [sp, #28]
 800600a:	2230      	movs	r2, #48	; 0x30
 800600c:	9b07      	ldr	r3, [sp, #28]
 800600e:	454b      	cmp	r3, r9
 8006010:	d307      	bcc.n	8006022 <__cvt+0xb6>
 8006012:	4630      	mov	r0, r6
 8006014:	9b07      	ldr	r3, [sp, #28]
 8006016:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006018:	1b9b      	subs	r3, r3, r6
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	b008      	add	sp, #32
 800601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006022:	1c59      	adds	r1, r3, #1
 8006024:	9107      	str	r1, [sp, #28]
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e7f0      	b.n	800600c <__cvt+0xa0>

0800602a <__exponent>:
 800602a:	4603      	mov	r3, r0
 800602c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800602e:	2900      	cmp	r1, #0
 8006030:	f803 2b02 	strb.w	r2, [r3], #2
 8006034:	bfb6      	itet	lt
 8006036:	222d      	movlt	r2, #45	; 0x2d
 8006038:	222b      	movge	r2, #43	; 0x2b
 800603a:	4249      	neglt	r1, r1
 800603c:	2909      	cmp	r1, #9
 800603e:	7042      	strb	r2, [r0, #1]
 8006040:	dd2a      	ble.n	8006098 <__exponent+0x6e>
 8006042:	f10d 0207 	add.w	r2, sp, #7
 8006046:	4617      	mov	r7, r2
 8006048:	260a      	movs	r6, #10
 800604a:	fb91 f5f6 	sdiv	r5, r1, r6
 800604e:	4694      	mov	ip, r2
 8006050:	fb06 1415 	mls	r4, r6, r5, r1
 8006054:	3430      	adds	r4, #48	; 0x30
 8006056:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800605a:	460c      	mov	r4, r1
 800605c:	2c63      	cmp	r4, #99	; 0x63
 800605e:	4629      	mov	r1, r5
 8006060:	f102 32ff 	add.w	r2, r2, #4294967295
 8006064:	dcf1      	bgt.n	800604a <__exponent+0x20>
 8006066:	3130      	adds	r1, #48	; 0x30
 8006068:	f1ac 0402 	sub.w	r4, ip, #2
 800606c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006070:	4622      	mov	r2, r4
 8006072:	1c41      	adds	r1, r0, #1
 8006074:	42ba      	cmp	r2, r7
 8006076:	d30a      	bcc.n	800608e <__exponent+0x64>
 8006078:	f10d 0209 	add.w	r2, sp, #9
 800607c:	eba2 020c 	sub.w	r2, r2, ip
 8006080:	42bc      	cmp	r4, r7
 8006082:	bf88      	it	hi
 8006084:	2200      	movhi	r2, #0
 8006086:	4413      	add	r3, r2
 8006088:	1a18      	subs	r0, r3, r0
 800608a:	b003      	add	sp, #12
 800608c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800608e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006092:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006096:	e7ed      	b.n	8006074 <__exponent+0x4a>
 8006098:	2330      	movs	r3, #48	; 0x30
 800609a:	3130      	adds	r1, #48	; 0x30
 800609c:	7083      	strb	r3, [r0, #2]
 800609e:	70c1      	strb	r1, [r0, #3]
 80060a0:	1d03      	adds	r3, r0, #4
 80060a2:	e7f1      	b.n	8006088 <__exponent+0x5e>

080060a4 <_printf_float>:
 80060a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a8:	b091      	sub	sp, #68	; 0x44
 80060aa:	460c      	mov	r4, r1
 80060ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80060b0:	4616      	mov	r6, r2
 80060b2:	461f      	mov	r7, r3
 80060b4:	4605      	mov	r5, r0
 80060b6:	f000 ff3d 	bl	8006f34 <_localeconv_r>
 80060ba:	6803      	ldr	r3, [r0, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	9309      	str	r3, [sp, #36]	; 0x24
 80060c0:	f7fa f850 	bl	8000164 <strlen>
 80060c4:	2300      	movs	r3, #0
 80060c6:	930e      	str	r3, [sp, #56]	; 0x38
 80060c8:	f8d8 3000 	ldr.w	r3, [r8]
 80060cc:	900a      	str	r0, [sp, #40]	; 0x28
 80060ce:	3307      	adds	r3, #7
 80060d0:	f023 0307 	bic.w	r3, r3, #7
 80060d4:	f103 0208 	add.w	r2, r3, #8
 80060d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80060dc:	f8d4 b000 	ldr.w	fp, [r4]
 80060e0:	f8c8 2000 	str.w	r2, [r8]
 80060e4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80060e8:	4652      	mov	r2, sl
 80060ea:	4643      	mov	r3, r8
 80060ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060f0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80060f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80060f6:	f04f 32ff 	mov.w	r2, #4294967295
 80060fa:	4650      	mov	r0, sl
 80060fc:	4b9c      	ldr	r3, [pc, #624]	; (8006370 <_printf_float+0x2cc>)
 80060fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006100:	f7fa fc8e 	bl	8000a20 <__aeabi_dcmpun>
 8006104:	bb70      	cbnz	r0, 8006164 <_printf_float+0xc0>
 8006106:	f04f 32ff 	mov.w	r2, #4294967295
 800610a:	4650      	mov	r0, sl
 800610c:	4b98      	ldr	r3, [pc, #608]	; (8006370 <_printf_float+0x2cc>)
 800610e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006110:	f7fa fc68 	bl	80009e4 <__aeabi_dcmple>
 8006114:	bb30      	cbnz	r0, 8006164 <_printf_float+0xc0>
 8006116:	2200      	movs	r2, #0
 8006118:	2300      	movs	r3, #0
 800611a:	4650      	mov	r0, sl
 800611c:	4641      	mov	r1, r8
 800611e:	f7fa fc57 	bl	80009d0 <__aeabi_dcmplt>
 8006122:	b110      	cbz	r0, 800612a <_printf_float+0x86>
 8006124:	232d      	movs	r3, #45	; 0x2d
 8006126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800612a:	4a92      	ldr	r2, [pc, #584]	; (8006374 <_printf_float+0x2d0>)
 800612c:	4b92      	ldr	r3, [pc, #584]	; (8006378 <_printf_float+0x2d4>)
 800612e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006132:	bf94      	ite	ls
 8006134:	4690      	movls	r8, r2
 8006136:	4698      	movhi	r8, r3
 8006138:	2303      	movs	r3, #3
 800613a:	f04f 0a00 	mov.w	sl, #0
 800613e:	6123      	str	r3, [r4, #16]
 8006140:	f02b 0304 	bic.w	r3, fp, #4
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	4633      	mov	r3, r6
 8006148:	4621      	mov	r1, r4
 800614a:	4628      	mov	r0, r5
 800614c:	9700      	str	r7, [sp, #0]
 800614e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006150:	f000 f9d6 	bl	8006500 <_printf_common>
 8006154:	3001      	adds	r0, #1
 8006156:	f040 8090 	bne.w	800627a <_printf_float+0x1d6>
 800615a:	f04f 30ff 	mov.w	r0, #4294967295
 800615e:	b011      	add	sp, #68	; 0x44
 8006160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006164:	4652      	mov	r2, sl
 8006166:	4643      	mov	r3, r8
 8006168:	4650      	mov	r0, sl
 800616a:	4641      	mov	r1, r8
 800616c:	f7fa fc58 	bl	8000a20 <__aeabi_dcmpun>
 8006170:	b148      	cbz	r0, 8006186 <_printf_float+0xe2>
 8006172:	f1b8 0f00 	cmp.w	r8, #0
 8006176:	bfb8      	it	lt
 8006178:	232d      	movlt	r3, #45	; 0x2d
 800617a:	4a80      	ldr	r2, [pc, #512]	; (800637c <_printf_float+0x2d8>)
 800617c:	bfb8      	it	lt
 800617e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006182:	4b7f      	ldr	r3, [pc, #508]	; (8006380 <_printf_float+0x2dc>)
 8006184:	e7d3      	b.n	800612e <_printf_float+0x8a>
 8006186:	6863      	ldr	r3, [r4, #4]
 8006188:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	d142      	bne.n	8006216 <_printf_float+0x172>
 8006190:	2306      	movs	r3, #6
 8006192:	6063      	str	r3, [r4, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	9206      	str	r2, [sp, #24]
 8006198:	aa0e      	add	r2, sp, #56	; 0x38
 800619a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800619e:	aa0d      	add	r2, sp, #52	; 0x34
 80061a0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80061a4:	9203      	str	r2, [sp, #12]
 80061a6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80061aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	6863      	ldr	r3, [r4, #4]
 80061b2:	4652      	mov	r2, sl
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	4628      	mov	r0, r5
 80061b8:	4643      	mov	r3, r8
 80061ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80061bc:	f7ff fed6 	bl	8005f6c <__cvt>
 80061c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061c2:	4680      	mov	r8, r0
 80061c4:	2947      	cmp	r1, #71	; 0x47
 80061c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80061c8:	d108      	bne.n	80061dc <_printf_float+0x138>
 80061ca:	1cc8      	adds	r0, r1, #3
 80061cc:	db02      	blt.n	80061d4 <_printf_float+0x130>
 80061ce:	6863      	ldr	r3, [r4, #4]
 80061d0:	4299      	cmp	r1, r3
 80061d2:	dd40      	ble.n	8006256 <_printf_float+0x1b2>
 80061d4:	f1a9 0902 	sub.w	r9, r9, #2
 80061d8:	fa5f f989 	uxtb.w	r9, r9
 80061dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80061e0:	d81f      	bhi.n	8006222 <_printf_float+0x17e>
 80061e2:	464a      	mov	r2, r9
 80061e4:	3901      	subs	r1, #1
 80061e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061ea:	910d      	str	r1, [sp, #52]	; 0x34
 80061ec:	f7ff ff1d 	bl	800602a <__exponent>
 80061f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061f2:	4682      	mov	sl, r0
 80061f4:	1813      	adds	r3, r2, r0
 80061f6:	2a01      	cmp	r2, #1
 80061f8:	6123      	str	r3, [r4, #16]
 80061fa:	dc02      	bgt.n	8006202 <_printf_float+0x15e>
 80061fc:	6822      	ldr	r2, [r4, #0]
 80061fe:	07d2      	lsls	r2, r2, #31
 8006200:	d501      	bpl.n	8006206 <_printf_float+0x162>
 8006202:	3301      	adds	r3, #1
 8006204:	6123      	str	r3, [r4, #16]
 8006206:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800620a:	2b00      	cmp	r3, #0
 800620c:	d09b      	beq.n	8006146 <_printf_float+0xa2>
 800620e:	232d      	movs	r3, #45	; 0x2d
 8006210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006214:	e797      	b.n	8006146 <_printf_float+0xa2>
 8006216:	2947      	cmp	r1, #71	; 0x47
 8006218:	d1bc      	bne.n	8006194 <_printf_float+0xf0>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1ba      	bne.n	8006194 <_printf_float+0xf0>
 800621e:	2301      	movs	r3, #1
 8006220:	e7b7      	b.n	8006192 <_printf_float+0xee>
 8006222:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006226:	d118      	bne.n	800625a <_printf_float+0x1b6>
 8006228:	2900      	cmp	r1, #0
 800622a:	6863      	ldr	r3, [r4, #4]
 800622c:	dd0b      	ble.n	8006246 <_printf_float+0x1a2>
 800622e:	6121      	str	r1, [r4, #16]
 8006230:	b913      	cbnz	r3, 8006238 <_printf_float+0x194>
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	07d0      	lsls	r0, r2, #31
 8006236:	d502      	bpl.n	800623e <_printf_float+0x19a>
 8006238:	3301      	adds	r3, #1
 800623a:	440b      	add	r3, r1
 800623c:	6123      	str	r3, [r4, #16]
 800623e:	f04f 0a00 	mov.w	sl, #0
 8006242:	65a1      	str	r1, [r4, #88]	; 0x58
 8006244:	e7df      	b.n	8006206 <_printf_float+0x162>
 8006246:	b913      	cbnz	r3, 800624e <_printf_float+0x1aa>
 8006248:	6822      	ldr	r2, [r4, #0]
 800624a:	07d2      	lsls	r2, r2, #31
 800624c:	d501      	bpl.n	8006252 <_printf_float+0x1ae>
 800624e:	3302      	adds	r3, #2
 8006250:	e7f4      	b.n	800623c <_printf_float+0x198>
 8006252:	2301      	movs	r3, #1
 8006254:	e7f2      	b.n	800623c <_printf_float+0x198>
 8006256:	f04f 0967 	mov.w	r9, #103	; 0x67
 800625a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800625c:	4299      	cmp	r1, r3
 800625e:	db05      	blt.n	800626c <_printf_float+0x1c8>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	6121      	str	r1, [r4, #16]
 8006264:	07d8      	lsls	r0, r3, #31
 8006266:	d5ea      	bpl.n	800623e <_printf_float+0x19a>
 8006268:	1c4b      	adds	r3, r1, #1
 800626a:	e7e7      	b.n	800623c <_printf_float+0x198>
 800626c:	2900      	cmp	r1, #0
 800626e:	bfcc      	ite	gt
 8006270:	2201      	movgt	r2, #1
 8006272:	f1c1 0202 	rsble	r2, r1, #2
 8006276:	4413      	add	r3, r2
 8006278:	e7e0      	b.n	800623c <_printf_float+0x198>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	055a      	lsls	r2, r3, #21
 800627e:	d407      	bmi.n	8006290 <_printf_float+0x1ec>
 8006280:	6923      	ldr	r3, [r4, #16]
 8006282:	4642      	mov	r2, r8
 8006284:	4631      	mov	r1, r6
 8006286:	4628      	mov	r0, r5
 8006288:	47b8      	blx	r7
 800628a:	3001      	adds	r0, #1
 800628c:	d12b      	bne.n	80062e6 <_printf_float+0x242>
 800628e:	e764      	b.n	800615a <_printf_float+0xb6>
 8006290:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006294:	f240 80dd 	bls.w	8006452 <_printf_float+0x3ae>
 8006298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800629c:	2200      	movs	r2, #0
 800629e:	2300      	movs	r3, #0
 80062a0:	f7fa fb8c 	bl	80009bc <__aeabi_dcmpeq>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d033      	beq.n	8006310 <_printf_float+0x26c>
 80062a8:	2301      	movs	r3, #1
 80062aa:	4631      	mov	r1, r6
 80062ac:	4628      	mov	r0, r5
 80062ae:	4a35      	ldr	r2, [pc, #212]	; (8006384 <_printf_float+0x2e0>)
 80062b0:	47b8      	blx	r7
 80062b2:	3001      	adds	r0, #1
 80062b4:	f43f af51 	beq.w	800615a <_printf_float+0xb6>
 80062b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062bc:	429a      	cmp	r2, r3
 80062be:	db02      	blt.n	80062c6 <_printf_float+0x222>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	07d8      	lsls	r0, r3, #31
 80062c4:	d50f      	bpl.n	80062e6 <_printf_float+0x242>
 80062c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062ca:	4631      	mov	r1, r6
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	f43f af42 	beq.w	800615a <_printf_float+0xb6>
 80062d6:	f04f 0800 	mov.w	r8, #0
 80062da:	f104 091a 	add.w	r9, r4, #26
 80062de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062e0:	3b01      	subs	r3, #1
 80062e2:	4543      	cmp	r3, r8
 80062e4:	dc09      	bgt.n	80062fa <_printf_float+0x256>
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	079b      	lsls	r3, r3, #30
 80062ea:	f100 8104 	bmi.w	80064f6 <_printf_float+0x452>
 80062ee:	68e0      	ldr	r0, [r4, #12]
 80062f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062f2:	4298      	cmp	r0, r3
 80062f4:	bfb8      	it	lt
 80062f6:	4618      	movlt	r0, r3
 80062f8:	e731      	b.n	800615e <_printf_float+0xba>
 80062fa:	2301      	movs	r3, #1
 80062fc:	464a      	mov	r2, r9
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	47b8      	blx	r7
 8006304:	3001      	adds	r0, #1
 8006306:	f43f af28 	beq.w	800615a <_printf_float+0xb6>
 800630a:	f108 0801 	add.w	r8, r8, #1
 800630e:	e7e6      	b.n	80062de <_printf_float+0x23a>
 8006310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006312:	2b00      	cmp	r3, #0
 8006314:	dc38      	bgt.n	8006388 <_printf_float+0x2e4>
 8006316:	2301      	movs	r3, #1
 8006318:	4631      	mov	r1, r6
 800631a:	4628      	mov	r0, r5
 800631c:	4a19      	ldr	r2, [pc, #100]	; (8006384 <_printf_float+0x2e0>)
 800631e:	47b8      	blx	r7
 8006320:	3001      	adds	r0, #1
 8006322:	f43f af1a 	beq.w	800615a <_printf_float+0xb6>
 8006326:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800632a:	4313      	orrs	r3, r2
 800632c:	d102      	bne.n	8006334 <_printf_float+0x290>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	07d9      	lsls	r1, r3, #31
 8006332:	d5d8      	bpl.n	80062e6 <_printf_float+0x242>
 8006334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006338:	4631      	mov	r1, r6
 800633a:	4628      	mov	r0, r5
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	f43f af0b 	beq.w	800615a <_printf_float+0xb6>
 8006344:	f04f 0900 	mov.w	r9, #0
 8006348:	f104 0a1a 	add.w	sl, r4, #26
 800634c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800634e:	425b      	negs	r3, r3
 8006350:	454b      	cmp	r3, r9
 8006352:	dc01      	bgt.n	8006358 <_printf_float+0x2b4>
 8006354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006356:	e794      	b.n	8006282 <_printf_float+0x1de>
 8006358:	2301      	movs	r3, #1
 800635a:	4652      	mov	r2, sl
 800635c:	4631      	mov	r1, r6
 800635e:	4628      	mov	r0, r5
 8006360:	47b8      	blx	r7
 8006362:	3001      	adds	r0, #1
 8006364:	f43f aef9 	beq.w	800615a <_printf_float+0xb6>
 8006368:	f109 0901 	add.w	r9, r9, #1
 800636c:	e7ee      	b.n	800634c <_printf_float+0x2a8>
 800636e:	bf00      	nop
 8006370:	7fefffff 	.word	0x7fefffff
 8006374:	0800a922 	.word	0x0800a922
 8006378:	0800a926 	.word	0x0800a926
 800637c:	0800a92a 	.word	0x0800a92a
 8006380:	0800a92e 	.word	0x0800a92e
 8006384:	0800a932 	.word	0x0800a932
 8006388:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800638a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800638c:	429a      	cmp	r2, r3
 800638e:	bfa8      	it	ge
 8006390:	461a      	movge	r2, r3
 8006392:	2a00      	cmp	r2, #0
 8006394:	4691      	mov	r9, r2
 8006396:	dc37      	bgt.n	8006408 <_printf_float+0x364>
 8006398:	f04f 0b00 	mov.w	fp, #0
 800639c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063a0:	f104 021a 	add.w	r2, r4, #26
 80063a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80063a8:	ebaa 0309 	sub.w	r3, sl, r9
 80063ac:	455b      	cmp	r3, fp
 80063ae:	dc33      	bgt.n	8006418 <_printf_float+0x374>
 80063b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80063b4:	429a      	cmp	r2, r3
 80063b6:	db3b      	blt.n	8006430 <_printf_float+0x38c>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	07da      	lsls	r2, r3, #31
 80063bc:	d438      	bmi.n	8006430 <_printf_float+0x38c>
 80063be:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80063c2:	eba2 0903 	sub.w	r9, r2, r3
 80063c6:	eba2 020a 	sub.w	r2, r2, sl
 80063ca:	4591      	cmp	r9, r2
 80063cc:	bfa8      	it	ge
 80063ce:	4691      	movge	r9, r2
 80063d0:	f1b9 0f00 	cmp.w	r9, #0
 80063d4:	dc34      	bgt.n	8006440 <_printf_float+0x39c>
 80063d6:	f04f 0800 	mov.w	r8, #0
 80063da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063de:	f104 0a1a 	add.w	sl, r4, #26
 80063e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80063e6:	1a9b      	subs	r3, r3, r2
 80063e8:	eba3 0309 	sub.w	r3, r3, r9
 80063ec:	4543      	cmp	r3, r8
 80063ee:	f77f af7a 	ble.w	80062e6 <_printf_float+0x242>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4652      	mov	r2, sl
 80063f6:	4631      	mov	r1, r6
 80063f8:	4628      	mov	r0, r5
 80063fa:	47b8      	blx	r7
 80063fc:	3001      	adds	r0, #1
 80063fe:	f43f aeac 	beq.w	800615a <_printf_float+0xb6>
 8006402:	f108 0801 	add.w	r8, r8, #1
 8006406:	e7ec      	b.n	80063e2 <_printf_float+0x33e>
 8006408:	4613      	mov	r3, r2
 800640a:	4631      	mov	r1, r6
 800640c:	4642      	mov	r2, r8
 800640e:	4628      	mov	r0, r5
 8006410:	47b8      	blx	r7
 8006412:	3001      	adds	r0, #1
 8006414:	d1c0      	bne.n	8006398 <_printf_float+0x2f4>
 8006416:	e6a0      	b.n	800615a <_printf_float+0xb6>
 8006418:	2301      	movs	r3, #1
 800641a:	4631      	mov	r1, r6
 800641c:	4628      	mov	r0, r5
 800641e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006420:	47b8      	blx	r7
 8006422:	3001      	adds	r0, #1
 8006424:	f43f ae99 	beq.w	800615a <_printf_float+0xb6>
 8006428:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800642a:	f10b 0b01 	add.w	fp, fp, #1
 800642e:	e7b9      	b.n	80063a4 <_printf_float+0x300>
 8006430:	4631      	mov	r1, r6
 8006432:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006436:	4628      	mov	r0, r5
 8006438:	47b8      	blx	r7
 800643a:	3001      	adds	r0, #1
 800643c:	d1bf      	bne.n	80063be <_printf_float+0x31a>
 800643e:	e68c      	b.n	800615a <_printf_float+0xb6>
 8006440:	464b      	mov	r3, r9
 8006442:	4631      	mov	r1, r6
 8006444:	4628      	mov	r0, r5
 8006446:	eb08 020a 	add.w	r2, r8, sl
 800644a:	47b8      	blx	r7
 800644c:	3001      	adds	r0, #1
 800644e:	d1c2      	bne.n	80063d6 <_printf_float+0x332>
 8006450:	e683      	b.n	800615a <_printf_float+0xb6>
 8006452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006454:	2a01      	cmp	r2, #1
 8006456:	dc01      	bgt.n	800645c <_printf_float+0x3b8>
 8006458:	07db      	lsls	r3, r3, #31
 800645a:	d539      	bpl.n	80064d0 <_printf_float+0x42c>
 800645c:	2301      	movs	r3, #1
 800645e:	4642      	mov	r2, r8
 8006460:	4631      	mov	r1, r6
 8006462:	4628      	mov	r0, r5
 8006464:	47b8      	blx	r7
 8006466:	3001      	adds	r0, #1
 8006468:	f43f ae77 	beq.w	800615a <_printf_float+0xb6>
 800646c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006470:	4631      	mov	r1, r6
 8006472:	4628      	mov	r0, r5
 8006474:	47b8      	blx	r7
 8006476:	3001      	adds	r0, #1
 8006478:	f43f ae6f 	beq.w	800615a <_printf_float+0xb6>
 800647c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006480:	2200      	movs	r2, #0
 8006482:	2300      	movs	r3, #0
 8006484:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006488:	f7fa fa98 	bl	80009bc <__aeabi_dcmpeq>
 800648c:	b9d8      	cbnz	r0, 80064c6 <_printf_float+0x422>
 800648e:	f109 33ff 	add.w	r3, r9, #4294967295
 8006492:	f108 0201 	add.w	r2, r8, #1
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	d10e      	bne.n	80064be <_printf_float+0x41a>
 80064a0:	e65b      	b.n	800615a <_printf_float+0xb6>
 80064a2:	2301      	movs	r3, #1
 80064a4:	464a      	mov	r2, r9
 80064a6:	4631      	mov	r1, r6
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b8      	blx	r7
 80064ac:	3001      	adds	r0, #1
 80064ae:	f43f ae54 	beq.w	800615a <_printf_float+0xb6>
 80064b2:	f108 0801 	add.w	r8, r8, #1
 80064b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064b8:	3b01      	subs	r3, #1
 80064ba:	4543      	cmp	r3, r8
 80064bc:	dcf1      	bgt.n	80064a2 <_printf_float+0x3fe>
 80064be:	4653      	mov	r3, sl
 80064c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064c4:	e6de      	b.n	8006284 <_printf_float+0x1e0>
 80064c6:	f04f 0800 	mov.w	r8, #0
 80064ca:	f104 091a 	add.w	r9, r4, #26
 80064ce:	e7f2      	b.n	80064b6 <_printf_float+0x412>
 80064d0:	2301      	movs	r3, #1
 80064d2:	4642      	mov	r2, r8
 80064d4:	e7df      	b.n	8006496 <_printf_float+0x3f2>
 80064d6:	2301      	movs	r3, #1
 80064d8:	464a      	mov	r2, r9
 80064da:	4631      	mov	r1, r6
 80064dc:	4628      	mov	r0, r5
 80064de:	47b8      	blx	r7
 80064e0:	3001      	adds	r0, #1
 80064e2:	f43f ae3a 	beq.w	800615a <_printf_float+0xb6>
 80064e6:	f108 0801 	add.w	r8, r8, #1
 80064ea:	68e3      	ldr	r3, [r4, #12]
 80064ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80064ee:	1a5b      	subs	r3, r3, r1
 80064f0:	4543      	cmp	r3, r8
 80064f2:	dcf0      	bgt.n	80064d6 <_printf_float+0x432>
 80064f4:	e6fb      	b.n	80062ee <_printf_float+0x24a>
 80064f6:	f04f 0800 	mov.w	r8, #0
 80064fa:	f104 0919 	add.w	r9, r4, #25
 80064fe:	e7f4      	b.n	80064ea <_printf_float+0x446>

08006500 <_printf_common>:
 8006500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	4616      	mov	r6, r2
 8006506:	4699      	mov	r9, r3
 8006508:	688a      	ldr	r2, [r1, #8]
 800650a:	690b      	ldr	r3, [r1, #16]
 800650c:	4607      	mov	r7, r0
 800650e:	4293      	cmp	r3, r2
 8006510:	bfb8      	it	lt
 8006512:	4613      	movlt	r3, r2
 8006514:	6033      	str	r3, [r6, #0]
 8006516:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800651a:	460c      	mov	r4, r1
 800651c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006520:	b10a      	cbz	r2, 8006526 <_printf_common+0x26>
 8006522:	3301      	adds	r3, #1
 8006524:	6033      	str	r3, [r6, #0]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	0699      	lsls	r1, r3, #26
 800652a:	bf42      	ittt	mi
 800652c:	6833      	ldrmi	r3, [r6, #0]
 800652e:	3302      	addmi	r3, #2
 8006530:	6033      	strmi	r3, [r6, #0]
 8006532:	6825      	ldr	r5, [r4, #0]
 8006534:	f015 0506 	ands.w	r5, r5, #6
 8006538:	d106      	bne.n	8006548 <_printf_common+0x48>
 800653a:	f104 0a19 	add.w	sl, r4, #25
 800653e:	68e3      	ldr	r3, [r4, #12]
 8006540:	6832      	ldr	r2, [r6, #0]
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	42ab      	cmp	r3, r5
 8006546:	dc2b      	bgt.n	80065a0 <_printf_common+0xa0>
 8006548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800654c:	1e13      	subs	r3, r2, #0
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	bf18      	it	ne
 8006552:	2301      	movne	r3, #1
 8006554:	0692      	lsls	r2, r2, #26
 8006556:	d430      	bmi.n	80065ba <_printf_common+0xba>
 8006558:	4649      	mov	r1, r9
 800655a:	4638      	mov	r0, r7
 800655c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006560:	47c0      	blx	r8
 8006562:	3001      	adds	r0, #1
 8006564:	d023      	beq.n	80065ae <_printf_common+0xae>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	6922      	ldr	r2, [r4, #16]
 800656a:	f003 0306 	and.w	r3, r3, #6
 800656e:	2b04      	cmp	r3, #4
 8006570:	bf14      	ite	ne
 8006572:	2500      	movne	r5, #0
 8006574:	6833      	ldreq	r3, [r6, #0]
 8006576:	f04f 0600 	mov.w	r6, #0
 800657a:	bf08      	it	eq
 800657c:	68e5      	ldreq	r5, [r4, #12]
 800657e:	f104 041a 	add.w	r4, r4, #26
 8006582:	bf08      	it	eq
 8006584:	1aed      	subeq	r5, r5, r3
 8006586:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800658a:	bf08      	it	eq
 800658c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006590:	4293      	cmp	r3, r2
 8006592:	bfc4      	itt	gt
 8006594:	1a9b      	subgt	r3, r3, r2
 8006596:	18ed      	addgt	r5, r5, r3
 8006598:	42b5      	cmp	r5, r6
 800659a:	d11a      	bne.n	80065d2 <_printf_common+0xd2>
 800659c:	2000      	movs	r0, #0
 800659e:	e008      	b.n	80065b2 <_printf_common+0xb2>
 80065a0:	2301      	movs	r3, #1
 80065a2:	4652      	mov	r2, sl
 80065a4:	4649      	mov	r1, r9
 80065a6:	4638      	mov	r0, r7
 80065a8:	47c0      	blx	r8
 80065aa:	3001      	adds	r0, #1
 80065ac:	d103      	bne.n	80065b6 <_printf_common+0xb6>
 80065ae:	f04f 30ff 	mov.w	r0, #4294967295
 80065b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b6:	3501      	adds	r5, #1
 80065b8:	e7c1      	b.n	800653e <_printf_common+0x3e>
 80065ba:	2030      	movs	r0, #48	; 0x30
 80065bc:	18e1      	adds	r1, r4, r3
 80065be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065c8:	4422      	add	r2, r4
 80065ca:	3302      	adds	r3, #2
 80065cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065d0:	e7c2      	b.n	8006558 <_printf_common+0x58>
 80065d2:	2301      	movs	r3, #1
 80065d4:	4622      	mov	r2, r4
 80065d6:	4649      	mov	r1, r9
 80065d8:	4638      	mov	r0, r7
 80065da:	47c0      	blx	r8
 80065dc:	3001      	adds	r0, #1
 80065de:	d0e6      	beq.n	80065ae <_printf_common+0xae>
 80065e0:	3601      	adds	r6, #1
 80065e2:	e7d9      	b.n	8006598 <_printf_common+0x98>

080065e4 <_printf_i>:
 80065e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e8:	7e0f      	ldrb	r7, [r1, #24]
 80065ea:	4691      	mov	r9, r2
 80065ec:	2f78      	cmp	r7, #120	; 0x78
 80065ee:	4680      	mov	r8, r0
 80065f0:	460c      	mov	r4, r1
 80065f2:	469a      	mov	sl, r3
 80065f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065fa:	d807      	bhi.n	800660c <_printf_i+0x28>
 80065fc:	2f62      	cmp	r7, #98	; 0x62
 80065fe:	d80a      	bhi.n	8006616 <_printf_i+0x32>
 8006600:	2f00      	cmp	r7, #0
 8006602:	f000 80d5 	beq.w	80067b0 <_printf_i+0x1cc>
 8006606:	2f58      	cmp	r7, #88	; 0x58
 8006608:	f000 80c1 	beq.w	800678e <_printf_i+0x1aa>
 800660c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006614:	e03a      	b.n	800668c <_printf_i+0xa8>
 8006616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800661a:	2b15      	cmp	r3, #21
 800661c:	d8f6      	bhi.n	800660c <_printf_i+0x28>
 800661e:	a101      	add	r1, pc, #4	; (adr r1, 8006624 <_printf_i+0x40>)
 8006620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006624:	0800667d 	.word	0x0800667d
 8006628:	08006691 	.word	0x08006691
 800662c:	0800660d 	.word	0x0800660d
 8006630:	0800660d 	.word	0x0800660d
 8006634:	0800660d 	.word	0x0800660d
 8006638:	0800660d 	.word	0x0800660d
 800663c:	08006691 	.word	0x08006691
 8006640:	0800660d 	.word	0x0800660d
 8006644:	0800660d 	.word	0x0800660d
 8006648:	0800660d 	.word	0x0800660d
 800664c:	0800660d 	.word	0x0800660d
 8006650:	08006797 	.word	0x08006797
 8006654:	080066bd 	.word	0x080066bd
 8006658:	08006751 	.word	0x08006751
 800665c:	0800660d 	.word	0x0800660d
 8006660:	0800660d 	.word	0x0800660d
 8006664:	080067b9 	.word	0x080067b9
 8006668:	0800660d 	.word	0x0800660d
 800666c:	080066bd 	.word	0x080066bd
 8006670:	0800660d 	.word	0x0800660d
 8006674:	0800660d 	.word	0x0800660d
 8006678:	08006759 	.word	0x08006759
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	1d1a      	adds	r2, r3, #4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	602a      	str	r2, [r5, #0]
 8006684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800668c:	2301      	movs	r3, #1
 800668e:	e0a0      	b.n	80067d2 <_printf_i+0x1ee>
 8006690:	6820      	ldr	r0, [r4, #0]
 8006692:	682b      	ldr	r3, [r5, #0]
 8006694:	0607      	lsls	r7, r0, #24
 8006696:	f103 0104 	add.w	r1, r3, #4
 800669a:	6029      	str	r1, [r5, #0]
 800669c:	d501      	bpl.n	80066a2 <_printf_i+0xbe>
 800669e:	681e      	ldr	r6, [r3, #0]
 80066a0:	e003      	b.n	80066aa <_printf_i+0xc6>
 80066a2:	0646      	lsls	r6, r0, #25
 80066a4:	d5fb      	bpl.n	800669e <_printf_i+0xba>
 80066a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	da03      	bge.n	80066b6 <_printf_i+0xd2>
 80066ae:	232d      	movs	r3, #45	; 0x2d
 80066b0:	4276      	negs	r6, r6
 80066b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b6:	230a      	movs	r3, #10
 80066b8:	4859      	ldr	r0, [pc, #356]	; (8006820 <_printf_i+0x23c>)
 80066ba:	e012      	b.n	80066e2 <_printf_i+0xfe>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	6820      	ldr	r0, [r4, #0]
 80066c0:	1d19      	adds	r1, r3, #4
 80066c2:	6029      	str	r1, [r5, #0]
 80066c4:	0605      	lsls	r5, r0, #24
 80066c6:	d501      	bpl.n	80066cc <_printf_i+0xe8>
 80066c8:	681e      	ldr	r6, [r3, #0]
 80066ca:	e002      	b.n	80066d2 <_printf_i+0xee>
 80066cc:	0641      	lsls	r1, r0, #25
 80066ce:	d5fb      	bpl.n	80066c8 <_printf_i+0xe4>
 80066d0:	881e      	ldrh	r6, [r3, #0]
 80066d2:	2f6f      	cmp	r7, #111	; 0x6f
 80066d4:	bf0c      	ite	eq
 80066d6:	2308      	moveq	r3, #8
 80066d8:	230a      	movne	r3, #10
 80066da:	4851      	ldr	r0, [pc, #324]	; (8006820 <_printf_i+0x23c>)
 80066dc:	2100      	movs	r1, #0
 80066de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066e2:	6865      	ldr	r5, [r4, #4]
 80066e4:	2d00      	cmp	r5, #0
 80066e6:	bfa8      	it	ge
 80066e8:	6821      	ldrge	r1, [r4, #0]
 80066ea:	60a5      	str	r5, [r4, #8]
 80066ec:	bfa4      	itt	ge
 80066ee:	f021 0104 	bicge.w	r1, r1, #4
 80066f2:	6021      	strge	r1, [r4, #0]
 80066f4:	b90e      	cbnz	r6, 80066fa <_printf_i+0x116>
 80066f6:	2d00      	cmp	r5, #0
 80066f8:	d04b      	beq.n	8006792 <_printf_i+0x1ae>
 80066fa:	4615      	mov	r5, r2
 80066fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006700:	fb03 6711 	mls	r7, r3, r1, r6
 8006704:	5dc7      	ldrb	r7, [r0, r7]
 8006706:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800670a:	4637      	mov	r7, r6
 800670c:	42bb      	cmp	r3, r7
 800670e:	460e      	mov	r6, r1
 8006710:	d9f4      	bls.n	80066fc <_printf_i+0x118>
 8006712:	2b08      	cmp	r3, #8
 8006714:	d10b      	bne.n	800672e <_printf_i+0x14a>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	07de      	lsls	r6, r3, #31
 800671a:	d508      	bpl.n	800672e <_printf_i+0x14a>
 800671c:	6923      	ldr	r3, [r4, #16]
 800671e:	6861      	ldr	r1, [r4, #4]
 8006720:	4299      	cmp	r1, r3
 8006722:	bfde      	ittt	le
 8006724:	2330      	movle	r3, #48	; 0x30
 8006726:	f805 3c01 	strble.w	r3, [r5, #-1]
 800672a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800672e:	1b52      	subs	r2, r2, r5
 8006730:	6122      	str	r2, [r4, #16]
 8006732:	464b      	mov	r3, r9
 8006734:	4621      	mov	r1, r4
 8006736:	4640      	mov	r0, r8
 8006738:	f8cd a000 	str.w	sl, [sp]
 800673c:	aa03      	add	r2, sp, #12
 800673e:	f7ff fedf 	bl	8006500 <_printf_common>
 8006742:	3001      	adds	r0, #1
 8006744:	d14a      	bne.n	80067dc <_printf_i+0x1f8>
 8006746:	f04f 30ff 	mov.w	r0, #4294967295
 800674a:	b004      	add	sp, #16
 800674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	f043 0320 	orr.w	r3, r3, #32
 8006756:	6023      	str	r3, [r4, #0]
 8006758:	2778      	movs	r7, #120	; 0x78
 800675a:	4832      	ldr	r0, [pc, #200]	; (8006824 <_printf_i+0x240>)
 800675c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	6829      	ldr	r1, [r5, #0]
 8006764:	061f      	lsls	r7, r3, #24
 8006766:	f851 6b04 	ldr.w	r6, [r1], #4
 800676a:	d402      	bmi.n	8006772 <_printf_i+0x18e>
 800676c:	065f      	lsls	r7, r3, #25
 800676e:	bf48      	it	mi
 8006770:	b2b6      	uxthmi	r6, r6
 8006772:	07df      	lsls	r7, r3, #31
 8006774:	bf48      	it	mi
 8006776:	f043 0320 	orrmi.w	r3, r3, #32
 800677a:	6029      	str	r1, [r5, #0]
 800677c:	bf48      	it	mi
 800677e:	6023      	strmi	r3, [r4, #0]
 8006780:	b91e      	cbnz	r6, 800678a <_printf_i+0x1a6>
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	f023 0320 	bic.w	r3, r3, #32
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	2310      	movs	r3, #16
 800678c:	e7a6      	b.n	80066dc <_printf_i+0xf8>
 800678e:	4824      	ldr	r0, [pc, #144]	; (8006820 <_printf_i+0x23c>)
 8006790:	e7e4      	b.n	800675c <_printf_i+0x178>
 8006792:	4615      	mov	r5, r2
 8006794:	e7bd      	b.n	8006712 <_printf_i+0x12e>
 8006796:	682b      	ldr	r3, [r5, #0]
 8006798:	6826      	ldr	r6, [r4, #0]
 800679a:	1d18      	adds	r0, r3, #4
 800679c:	6961      	ldr	r1, [r4, #20]
 800679e:	6028      	str	r0, [r5, #0]
 80067a0:	0635      	lsls	r5, r6, #24
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	d501      	bpl.n	80067aa <_printf_i+0x1c6>
 80067a6:	6019      	str	r1, [r3, #0]
 80067a8:	e002      	b.n	80067b0 <_printf_i+0x1cc>
 80067aa:	0670      	lsls	r0, r6, #25
 80067ac:	d5fb      	bpl.n	80067a6 <_printf_i+0x1c2>
 80067ae:	8019      	strh	r1, [r3, #0]
 80067b0:	2300      	movs	r3, #0
 80067b2:	4615      	mov	r5, r2
 80067b4:	6123      	str	r3, [r4, #16]
 80067b6:	e7bc      	b.n	8006732 <_printf_i+0x14e>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	2100      	movs	r1, #0
 80067bc:	1d1a      	adds	r2, r3, #4
 80067be:	602a      	str	r2, [r5, #0]
 80067c0:	681d      	ldr	r5, [r3, #0]
 80067c2:	6862      	ldr	r2, [r4, #4]
 80067c4:	4628      	mov	r0, r5
 80067c6:	f000 fc2b 	bl	8007020 <memchr>
 80067ca:	b108      	cbz	r0, 80067d0 <_printf_i+0x1ec>
 80067cc:	1b40      	subs	r0, r0, r5
 80067ce:	6060      	str	r0, [r4, #4]
 80067d0:	6863      	ldr	r3, [r4, #4]
 80067d2:	6123      	str	r3, [r4, #16]
 80067d4:	2300      	movs	r3, #0
 80067d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067da:	e7aa      	b.n	8006732 <_printf_i+0x14e>
 80067dc:	462a      	mov	r2, r5
 80067de:	4649      	mov	r1, r9
 80067e0:	4640      	mov	r0, r8
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	47d0      	blx	sl
 80067e6:	3001      	adds	r0, #1
 80067e8:	d0ad      	beq.n	8006746 <_printf_i+0x162>
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	079b      	lsls	r3, r3, #30
 80067ee:	d413      	bmi.n	8006818 <_printf_i+0x234>
 80067f0:	68e0      	ldr	r0, [r4, #12]
 80067f2:	9b03      	ldr	r3, [sp, #12]
 80067f4:	4298      	cmp	r0, r3
 80067f6:	bfb8      	it	lt
 80067f8:	4618      	movlt	r0, r3
 80067fa:	e7a6      	b.n	800674a <_printf_i+0x166>
 80067fc:	2301      	movs	r3, #1
 80067fe:	4632      	mov	r2, r6
 8006800:	4649      	mov	r1, r9
 8006802:	4640      	mov	r0, r8
 8006804:	47d0      	blx	sl
 8006806:	3001      	adds	r0, #1
 8006808:	d09d      	beq.n	8006746 <_printf_i+0x162>
 800680a:	3501      	adds	r5, #1
 800680c:	68e3      	ldr	r3, [r4, #12]
 800680e:	9903      	ldr	r1, [sp, #12]
 8006810:	1a5b      	subs	r3, r3, r1
 8006812:	42ab      	cmp	r3, r5
 8006814:	dcf2      	bgt.n	80067fc <_printf_i+0x218>
 8006816:	e7eb      	b.n	80067f0 <_printf_i+0x20c>
 8006818:	2500      	movs	r5, #0
 800681a:	f104 0619 	add.w	r6, r4, #25
 800681e:	e7f5      	b.n	800680c <_printf_i+0x228>
 8006820:	0800a934 	.word	0x0800a934
 8006824:	0800a945 	.word	0x0800a945

08006828 <_scanf_float>:
 8006828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682c:	b087      	sub	sp, #28
 800682e:	9303      	str	r3, [sp, #12]
 8006830:	688b      	ldr	r3, [r1, #8]
 8006832:	4617      	mov	r7, r2
 8006834:	1e5a      	subs	r2, r3, #1
 8006836:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800683a:	bf85      	ittet	hi
 800683c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006840:	195b      	addhi	r3, r3, r5
 8006842:	2300      	movls	r3, #0
 8006844:	9302      	strhi	r3, [sp, #8]
 8006846:	bf88      	it	hi
 8006848:	f240 135d 	movwhi	r3, #349	; 0x15d
 800684c:	468b      	mov	fp, r1
 800684e:	f04f 0500 	mov.w	r5, #0
 8006852:	bf8c      	ite	hi
 8006854:	608b      	strhi	r3, [r1, #8]
 8006856:	9302      	strls	r3, [sp, #8]
 8006858:	680b      	ldr	r3, [r1, #0]
 800685a:	4680      	mov	r8, r0
 800685c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006860:	f84b 3b1c 	str.w	r3, [fp], #28
 8006864:	460c      	mov	r4, r1
 8006866:	465e      	mov	r6, fp
 8006868:	46aa      	mov	sl, r5
 800686a:	46a9      	mov	r9, r5
 800686c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006870:	9501      	str	r5, [sp, #4]
 8006872:	68a2      	ldr	r2, [r4, #8]
 8006874:	b152      	cbz	r2, 800688c <_scanf_float+0x64>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b4e      	cmp	r3, #78	; 0x4e
 800687c:	d864      	bhi.n	8006948 <_scanf_float+0x120>
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d83c      	bhi.n	80068fc <_scanf_float+0xd4>
 8006882:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006886:	b2c8      	uxtb	r0, r1
 8006888:	280e      	cmp	r0, #14
 800688a:	d93a      	bls.n	8006902 <_scanf_float+0xda>
 800688c:	f1b9 0f00 	cmp.w	r9, #0
 8006890:	d003      	beq.n	800689a <_scanf_float+0x72>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800689e:	f1ba 0f01 	cmp.w	sl, #1
 80068a2:	f200 8113 	bhi.w	8006acc <_scanf_float+0x2a4>
 80068a6:	455e      	cmp	r6, fp
 80068a8:	f200 8105 	bhi.w	8006ab6 <_scanf_float+0x28e>
 80068ac:	2501      	movs	r5, #1
 80068ae:	4628      	mov	r0, r5
 80068b0:	b007      	add	sp, #28
 80068b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80068ba:	2a0d      	cmp	r2, #13
 80068bc:	d8e6      	bhi.n	800688c <_scanf_float+0x64>
 80068be:	a101      	add	r1, pc, #4	; (adr r1, 80068c4 <_scanf_float+0x9c>)
 80068c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068c4:	08006a03 	.word	0x08006a03
 80068c8:	0800688d 	.word	0x0800688d
 80068cc:	0800688d 	.word	0x0800688d
 80068d0:	0800688d 	.word	0x0800688d
 80068d4:	08006a63 	.word	0x08006a63
 80068d8:	08006a3b 	.word	0x08006a3b
 80068dc:	0800688d 	.word	0x0800688d
 80068e0:	0800688d 	.word	0x0800688d
 80068e4:	08006a11 	.word	0x08006a11
 80068e8:	0800688d 	.word	0x0800688d
 80068ec:	0800688d 	.word	0x0800688d
 80068f0:	0800688d 	.word	0x0800688d
 80068f4:	0800688d 	.word	0x0800688d
 80068f8:	080069c9 	.word	0x080069c9
 80068fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006900:	e7db      	b.n	80068ba <_scanf_float+0x92>
 8006902:	290e      	cmp	r1, #14
 8006904:	d8c2      	bhi.n	800688c <_scanf_float+0x64>
 8006906:	a001      	add	r0, pc, #4	; (adr r0, 800690c <_scanf_float+0xe4>)
 8006908:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800690c:	080069bb 	.word	0x080069bb
 8006910:	0800688d 	.word	0x0800688d
 8006914:	080069bb 	.word	0x080069bb
 8006918:	08006a4f 	.word	0x08006a4f
 800691c:	0800688d 	.word	0x0800688d
 8006920:	08006969 	.word	0x08006969
 8006924:	080069a5 	.word	0x080069a5
 8006928:	080069a5 	.word	0x080069a5
 800692c:	080069a5 	.word	0x080069a5
 8006930:	080069a5 	.word	0x080069a5
 8006934:	080069a5 	.word	0x080069a5
 8006938:	080069a5 	.word	0x080069a5
 800693c:	080069a5 	.word	0x080069a5
 8006940:	080069a5 	.word	0x080069a5
 8006944:	080069a5 	.word	0x080069a5
 8006948:	2b6e      	cmp	r3, #110	; 0x6e
 800694a:	d809      	bhi.n	8006960 <_scanf_float+0x138>
 800694c:	2b60      	cmp	r3, #96	; 0x60
 800694e:	d8b2      	bhi.n	80068b6 <_scanf_float+0x8e>
 8006950:	2b54      	cmp	r3, #84	; 0x54
 8006952:	d077      	beq.n	8006a44 <_scanf_float+0x21c>
 8006954:	2b59      	cmp	r3, #89	; 0x59
 8006956:	d199      	bne.n	800688c <_scanf_float+0x64>
 8006958:	2d07      	cmp	r5, #7
 800695a:	d197      	bne.n	800688c <_scanf_float+0x64>
 800695c:	2508      	movs	r5, #8
 800695e:	e029      	b.n	80069b4 <_scanf_float+0x18c>
 8006960:	2b74      	cmp	r3, #116	; 0x74
 8006962:	d06f      	beq.n	8006a44 <_scanf_float+0x21c>
 8006964:	2b79      	cmp	r3, #121	; 0x79
 8006966:	e7f6      	b.n	8006956 <_scanf_float+0x12e>
 8006968:	6821      	ldr	r1, [r4, #0]
 800696a:	05c8      	lsls	r0, r1, #23
 800696c:	d51a      	bpl.n	80069a4 <_scanf_float+0x17c>
 800696e:	9b02      	ldr	r3, [sp, #8]
 8006970:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006974:	6021      	str	r1, [r4, #0]
 8006976:	f109 0901 	add.w	r9, r9, #1
 800697a:	b11b      	cbz	r3, 8006984 <_scanf_float+0x15c>
 800697c:	3b01      	subs	r3, #1
 800697e:	3201      	adds	r2, #1
 8006980:	9302      	str	r3, [sp, #8]
 8006982:	60a2      	str	r2, [r4, #8]
 8006984:	68a3      	ldr	r3, [r4, #8]
 8006986:	3b01      	subs	r3, #1
 8006988:	60a3      	str	r3, [r4, #8]
 800698a:	6923      	ldr	r3, [r4, #16]
 800698c:	3301      	adds	r3, #1
 800698e:	6123      	str	r3, [r4, #16]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3b01      	subs	r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	607b      	str	r3, [r7, #4]
 8006998:	f340 8084 	ble.w	8006aa4 <_scanf_float+0x27c>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	3301      	adds	r3, #1
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	e766      	b.n	8006872 <_scanf_float+0x4a>
 80069a4:	eb1a 0f05 	cmn.w	sl, r5
 80069a8:	f47f af70 	bne.w	800688c <_scanf_float+0x64>
 80069ac:	6822      	ldr	r2, [r4, #0]
 80069ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80069b2:	6022      	str	r2, [r4, #0]
 80069b4:	f806 3b01 	strb.w	r3, [r6], #1
 80069b8:	e7e4      	b.n	8006984 <_scanf_float+0x15c>
 80069ba:	6822      	ldr	r2, [r4, #0]
 80069bc:	0610      	lsls	r0, r2, #24
 80069be:	f57f af65 	bpl.w	800688c <_scanf_float+0x64>
 80069c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069c6:	e7f4      	b.n	80069b2 <_scanf_float+0x18a>
 80069c8:	f1ba 0f00 	cmp.w	sl, #0
 80069cc:	d10e      	bne.n	80069ec <_scanf_float+0x1c4>
 80069ce:	f1b9 0f00 	cmp.w	r9, #0
 80069d2:	d10e      	bne.n	80069f2 <_scanf_float+0x1ca>
 80069d4:	6822      	ldr	r2, [r4, #0]
 80069d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80069da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80069de:	d108      	bne.n	80069f2 <_scanf_float+0x1ca>
 80069e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069e4:	f04f 0a01 	mov.w	sl, #1
 80069e8:	6022      	str	r2, [r4, #0]
 80069ea:	e7e3      	b.n	80069b4 <_scanf_float+0x18c>
 80069ec:	f1ba 0f02 	cmp.w	sl, #2
 80069f0:	d055      	beq.n	8006a9e <_scanf_float+0x276>
 80069f2:	2d01      	cmp	r5, #1
 80069f4:	d002      	beq.n	80069fc <_scanf_float+0x1d4>
 80069f6:	2d04      	cmp	r5, #4
 80069f8:	f47f af48 	bne.w	800688c <_scanf_float+0x64>
 80069fc:	3501      	adds	r5, #1
 80069fe:	b2ed      	uxtb	r5, r5
 8006a00:	e7d8      	b.n	80069b4 <_scanf_float+0x18c>
 8006a02:	f1ba 0f01 	cmp.w	sl, #1
 8006a06:	f47f af41 	bne.w	800688c <_scanf_float+0x64>
 8006a0a:	f04f 0a02 	mov.w	sl, #2
 8006a0e:	e7d1      	b.n	80069b4 <_scanf_float+0x18c>
 8006a10:	b97d      	cbnz	r5, 8006a32 <_scanf_float+0x20a>
 8006a12:	f1b9 0f00 	cmp.w	r9, #0
 8006a16:	f47f af3c 	bne.w	8006892 <_scanf_float+0x6a>
 8006a1a:	6822      	ldr	r2, [r4, #0]
 8006a1c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a20:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a24:	f47f af39 	bne.w	800689a <_scanf_float+0x72>
 8006a28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a2c:	2501      	movs	r5, #1
 8006a2e:	6022      	str	r2, [r4, #0]
 8006a30:	e7c0      	b.n	80069b4 <_scanf_float+0x18c>
 8006a32:	2d03      	cmp	r5, #3
 8006a34:	d0e2      	beq.n	80069fc <_scanf_float+0x1d4>
 8006a36:	2d05      	cmp	r5, #5
 8006a38:	e7de      	b.n	80069f8 <_scanf_float+0x1d0>
 8006a3a:	2d02      	cmp	r5, #2
 8006a3c:	f47f af26 	bne.w	800688c <_scanf_float+0x64>
 8006a40:	2503      	movs	r5, #3
 8006a42:	e7b7      	b.n	80069b4 <_scanf_float+0x18c>
 8006a44:	2d06      	cmp	r5, #6
 8006a46:	f47f af21 	bne.w	800688c <_scanf_float+0x64>
 8006a4a:	2507      	movs	r5, #7
 8006a4c:	e7b2      	b.n	80069b4 <_scanf_float+0x18c>
 8006a4e:	6822      	ldr	r2, [r4, #0]
 8006a50:	0591      	lsls	r1, r2, #22
 8006a52:	f57f af1b 	bpl.w	800688c <_scanf_float+0x64>
 8006a56:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006a5a:	6022      	str	r2, [r4, #0]
 8006a5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a60:	e7a8      	b.n	80069b4 <_scanf_float+0x18c>
 8006a62:	6822      	ldr	r2, [r4, #0]
 8006a64:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006a68:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006a6c:	d006      	beq.n	8006a7c <_scanf_float+0x254>
 8006a6e:	0550      	lsls	r0, r2, #21
 8006a70:	f57f af0c 	bpl.w	800688c <_scanf_float+0x64>
 8006a74:	f1b9 0f00 	cmp.w	r9, #0
 8006a78:	f43f af0f 	beq.w	800689a <_scanf_float+0x72>
 8006a7c:	0591      	lsls	r1, r2, #22
 8006a7e:	bf58      	it	pl
 8006a80:	9901      	ldrpl	r1, [sp, #4]
 8006a82:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a86:	bf58      	it	pl
 8006a88:	eba9 0101 	subpl.w	r1, r9, r1
 8006a8c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006a90:	f04f 0900 	mov.w	r9, #0
 8006a94:	bf58      	it	pl
 8006a96:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a9a:	6022      	str	r2, [r4, #0]
 8006a9c:	e78a      	b.n	80069b4 <_scanf_float+0x18c>
 8006a9e:	f04f 0a03 	mov.w	sl, #3
 8006aa2:	e787      	b.n	80069b4 <_scanf_float+0x18c>
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006aac:	4798      	blx	r3
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	f43f aedf 	beq.w	8006872 <_scanf_float+0x4a>
 8006ab4:	e6ea      	b.n	800688c <_scanf_float+0x64>
 8006ab6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006aba:	463a      	mov	r2, r7
 8006abc:	4640      	mov	r0, r8
 8006abe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ac2:	4798      	blx	r3
 8006ac4:	6923      	ldr	r3, [r4, #16]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	6123      	str	r3, [r4, #16]
 8006aca:	e6ec      	b.n	80068a6 <_scanf_float+0x7e>
 8006acc:	1e6b      	subs	r3, r5, #1
 8006ace:	2b06      	cmp	r3, #6
 8006ad0:	d825      	bhi.n	8006b1e <_scanf_float+0x2f6>
 8006ad2:	2d02      	cmp	r5, #2
 8006ad4:	d836      	bhi.n	8006b44 <_scanf_float+0x31c>
 8006ad6:	455e      	cmp	r6, fp
 8006ad8:	f67f aee8 	bls.w	80068ac <_scanf_float+0x84>
 8006adc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ae0:	463a      	mov	r2, r7
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ae8:	4798      	blx	r3
 8006aea:	6923      	ldr	r3, [r4, #16]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	6123      	str	r3, [r4, #16]
 8006af0:	e7f1      	b.n	8006ad6 <_scanf_float+0x2ae>
 8006af2:	9802      	ldr	r0, [sp, #8]
 8006af4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006af8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006afc:	463a      	mov	r2, r7
 8006afe:	9002      	str	r0, [sp, #8]
 8006b00:	4640      	mov	r0, r8
 8006b02:	4798      	blx	r3
 8006b04:	6923      	ldr	r3, [r4, #16]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b0e:	fa5f fa8a 	uxtb.w	sl, sl
 8006b12:	f1ba 0f02 	cmp.w	sl, #2
 8006b16:	d1ec      	bne.n	8006af2 <_scanf_float+0x2ca>
 8006b18:	3d03      	subs	r5, #3
 8006b1a:	b2ed      	uxtb	r5, r5
 8006b1c:	1b76      	subs	r6, r6, r5
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	05da      	lsls	r2, r3, #23
 8006b22:	d52f      	bpl.n	8006b84 <_scanf_float+0x35c>
 8006b24:	055b      	lsls	r3, r3, #21
 8006b26:	d510      	bpl.n	8006b4a <_scanf_float+0x322>
 8006b28:	455e      	cmp	r6, fp
 8006b2a:	f67f aebf 	bls.w	80068ac <_scanf_float+0x84>
 8006b2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b32:	463a      	mov	r2, r7
 8006b34:	4640      	mov	r0, r8
 8006b36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b3a:	4798      	blx	r3
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	6123      	str	r3, [r4, #16]
 8006b42:	e7f1      	b.n	8006b28 <_scanf_float+0x300>
 8006b44:	46aa      	mov	sl, r5
 8006b46:	9602      	str	r6, [sp, #8]
 8006b48:	e7df      	b.n	8006b0a <_scanf_float+0x2e2>
 8006b4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b4e:	6923      	ldr	r3, [r4, #16]
 8006b50:	2965      	cmp	r1, #101	; 0x65
 8006b52:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b56:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b5a:	6123      	str	r3, [r4, #16]
 8006b5c:	d00c      	beq.n	8006b78 <_scanf_float+0x350>
 8006b5e:	2945      	cmp	r1, #69	; 0x45
 8006b60:	d00a      	beq.n	8006b78 <_scanf_float+0x350>
 8006b62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b66:	463a      	mov	r2, r7
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4798      	blx	r3
 8006b6c:	6923      	ldr	r3, [r4, #16]
 8006b6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	1eb5      	subs	r5, r6, #2
 8006b76:	6123      	str	r3, [r4, #16]
 8006b78:	463a      	mov	r2, r7
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b80:	4798      	blx	r3
 8006b82:	462e      	mov	r6, r5
 8006b84:	6825      	ldr	r5, [r4, #0]
 8006b86:	f015 0510 	ands.w	r5, r5, #16
 8006b8a:	d155      	bne.n	8006c38 <_scanf_float+0x410>
 8006b8c:	7035      	strb	r5, [r6, #0]
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b98:	d11d      	bne.n	8006bd6 <_scanf_float+0x3ae>
 8006b9a:	9b01      	ldr	r3, [sp, #4]
 8006b9c:	454b      	cmp	r3, r9
 8006b9e:	eba3 0209 	sub.w	r2, r3, r9
 8006ba2:	d125      	bne.n	8006bf0 <_scanf_float+0x3c8>
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4659      	mov	r1, fp
 8006ba8:	4640      	mov	r0, r8
 8006baa:	f002 fc89 	bl	80094c0 <_strtod_r>
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	f8d4 c000 	ldr.w	ip, [r4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f01c 0f02 	tst.w	ip, #2
 8006bba:	4606      	mov	r6, r0
 8006bbc:	460f      	mov	r7, r1
 8006bbe:	f103 0204 	add.w	r2, r3, #4
 8006bc2:	d020      	beq.n	8006c06 <_scanf_float+0x3de>
 8006bc4:	9903      	ldr	r1, [sp, #12]
 8006bc6:	600a      	str	r2, [r1, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	e9c3 6700 	strd	r6, r7, [r3]
 8006bce:	68e3      	ldr	r3, [r4, #12]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	60e3      	str	r3, [r4, #12]
 8006bd4:	e66b      	b.n	80068ae <_scanf_float+0x86>
 8006bd6:	9b04      	ldr	r3, [sp, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0e3      	beq.n	8006ba4 <_scanf_float+0x37c>
 8006bdc:	9905      	ldr	r1, [sp, #20]
 8006bde:	230a      	movs	r3, #10
 8006be0:	462a      	mov	r2, r5
 8006be2:	4640      	mov	r0, r8
 8006be4:	3101      	adds	r1, #1
 8006be6:	f002 fcef 	bl	80095c8 <_strtol_r>
 8006bea:	9b04      	ldr	r3, [sp, #16]
 8006bec:	9e05      	ldr	r6, [sp, #20]
 8006bee:	1ac2      	subs	r2, r0, r3
 8006bf0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006bf4:	429e      	cmp	r6, r3
 8006bf6:	bf28      	it	cs
 8006bf8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	490f      	ldr	r1, [pc, #60]	; (8006c3c <_scanf_float+0x414>)
 8006c00:	f000 f8d0 	bl	8006da4 <siprintf>
 8006c04:	e7ce      	b.n	8006ba4 <_scanf_float+0x37c>
 8006c06:	f01c 0f04 	tst.w	ip, #4
 8006c0a:	d1db      	bne.n	8006bc4 <_scanf_float+0x39c>
 8006c0c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006c10:	f8cc 2000 	str.w	r2, [ip]
 8006c14:	f8d3 8000 	ldr.w	r8, [r3]
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	f7f9 ff00 	bl	8000a20 <__aeabi_dcmpun>
 8006c20:	b128      	cbz	r0, 8006c2e <_scanf_float+0x406>
 8006c22:	4807      	ldr	r0, [pc, #28]	; (8006c40 <_scanf_float+0x418>)
 8006c24:	f000 fa0a 	bl	800703c <nanf>
 8006c28:	f8c8 0000 	str.w	r0, [r8]
 8006c2c:	e7cf      	b.n	8006bce <_scanf_float+0x3a6>
 8006c2e:	4630      	mov	r0, r6
 8006c30:	4639      	mov	r1, r7
 8006c32:	f7f9 ff53 	bl	8000adc <__aeabi_d2f>
 8006c36:	e7f7      	b.n	8006c28 <_scanf_float+0x400>
 8006c38:	2500      	movs	r5, #0
 8006c3a:	e638      	b.n	80068ae <_scanf_float+0x86>
 8006c3c:	0800a956 	.word	0x0800a956
 8006c40:	0800aa07 	.word	0x0800aa07

08006c44 <std>:
 8006c44:	2300      	movs	r3, #0
 8006c46:	b510      	push	{r4, lr}
 8006c48:	4604      	mov	r4, r0
 8006c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c52:	6083      	str	r3, [r0, #8]
 8006c54:	8181      	strh	r1, [r0, #12]
 8006c56:	6643      	str	r3, [r0, #100]	; 0x64
 8006c58:	81c2      	strh	r2, [r0, #14]
 8006c5a:	6183      	str	r3, [r0, #24]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	2208      	movs	r2, #8
 8006c60:	305c      	adds	r0, #92	; 0x5c
 8006c62:	f000 f902 	bl	8006e6a <memset>
 8006c66:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <std+0x38>)
 8006c68:	6224      	str	r4, [r4, #32]
 8006c6a:	6263      	str	r3, [r4, #36]	; 0x24
 8006c6c:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <std+0x3c>)
 8006c6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c70:	4b04      	ldr	r3, [pc, #16]	; (8006c84 <std+0x40>)
 8006c72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <std+0x44>)
 8006c76:	6323      	str	r3, [r4, #48]	; 0x30
 8006c78:	bd10      	pop	{r4, pc}
 8006c7a:	bf00      	nop
 8006c7c:	08006de5 	.word	0x08006de5
 8006c80:	08006e07 	.word	0x08006e07
 8006c84:	08006e3f 	.word	0x08006e3f
 8006c88:	08006e63 	.word	0x08006e63

08006c8c <stdio_exit_handler>:
 8006c8c:	4a02      	ldr	r2, [pc, #8]	; (8006c98 <stdio_exit_handler+0xc>)
 8006c8e:	4903      	ldr	r1, [pc, #12]	; (8006c9c <stdio_exit_handler+0x10>)
 8006c90:	4803      	ldr	r0, [pc, #12]	; (8006ca0 <stdio_exit_handler+0x14>)
 8006c92:	f000 b869 	b.w	8006d68 <_fwalk_sglue>
 8006c96:	bf00      	nop
 8006c98:	20000034 	.word	0x20000034
 8006c9c:	08009981 	.word	0x08009981
 8006ca0:	20000040 	.word	0x20000040

08006ca4 <cleanup_stdio>:
 8006ca4:	6841      	ldr	r1, [r0, #4]
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <cleanup_stdio+0x34>)
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	4299      	cmp	r1, r3
 8006cac:	4604      	mov	r4, r0
 8006cae:	d001      	beq.n	8006cb4 <cleanup_stdio+0x10>
 8006cb0:	f002 fe66 	bl	8009980 <_fflush_r>
 8006cb4:	68a1      	ldr	r1, [r4, #8]
 8006cb6:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <cleanup_stdio+0x38>)
 8006cb8:	4299      	cmp	r1, r3
 8006cba:	d002      	beq.n	8006cc2 <cleanup_stdio+0x1e>
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f002 fe5f 	bl	8009980 <_fflush_r>
 8006cc2:	68e1      	ldr	r1, [r4, #12]
 8006cc4:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <cleanup_stdio+0x3c>)
 8006cc6:	4299      	cmp	r1, r3
 8006cc8:	d004      	beq.n	8006cd4 <cleanup_stdio+0x30>
 8006cca:	4620      	mov	r0, r4
 8006ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd0:	f002 be56 	b.w	8009980 <_fflush_r>
 8006cd4:	bd10      	pop	{r4, pc}
 8006cd6:	bf00      	nop
 8006cd8:	200004c0 	.word	0x200004c0
 8006cdc:	20000528 	.word	0x20000528
 8006ce0:	20000590 	.word	0x20000590

08006ce4 <global_stdio_init.part.0>:
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <global_stdio_init.part.0+0x30>)
 8006ce8:	4c0b      	ldr	r4, [pc, #44]	; (8006d18 <global_stdio_init.part.0+0x34>)
 8006cea:	4a0c      	ldr	r2, [pc, #48]	; (8006d1c <global_stdio_init.part.0+0x38>)
 8006cec:	4620      	mov	r0, r4
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	2104      	movs	r1, #4
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f7ff ffa6 	bl	8006c44 <std>
 8006cf8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	2109      	movs	r1, #9
 8006d00:	f7ff ffa0 	bl	8006c44 <std>
 8006d04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006d08:	2202      	movs	r2, #2
 8006d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d0e:	2112      	movs	r1, #18
 8006d10:	f7ff bf98 	b.w	8006c44 <std>
 8006d14:	200005f8 	.word	0x200005f8
 8006d18:	200004c0 	.word	0x200004c0
 8006d1c:	08006c8d 	.word	0x08006c8d

08006d20 <__sfp_lock_acquire>:
 8006d20:	4801      	ldr	r0, [pc, #4]	; (8006d28 <__sfp_lock_acquire+0x8>)
 8006d22:	f000 b97b 	b.w	800701c <__retarget_lock_acquire_recursive>
 8006d26:	bf00      	nop
 8006d28:	20000601 	.word	0x20000601

08006d2c <__sfp_lock_release>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	; (8006d34 <__sfp_lock_release+0x8>)
 8006d2e:	f000 b976 	b.w	800701e <__retarget_lock_release_recursive>
 8006d32:	bf00      	nop
 8006d34:	20000601 	.word	0x20000601

08006d38 <__sinit>:
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	f7ff fff0 	bl	8006d20 <__sfp_lock_acquire>
 8006d40:	6a23      	ldr	r3, [r4, #32]
 8006d42:	b11b      	cbz	r3, 8006d4c <__sinit+0x14>
 8006d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d48:	f7ff bff0 	b.w	8006d2c <__sfp_lock_release>
 8006d4c:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <__sinit+0x28>)
 8006d4e:	6223      	str	r3, [r4, #32]
 8006d50:	4b04      	ldr	r3, [pc, #16]	; (8006d64 <__sinit+0x2c>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1f5      	bne.n	8006d44 <__sinit+0xc>
 8006d58:	f7ff ffc4 	bl	8006ce4 <global_stdio_init.part.0>
 8006d5c:	e7f2      	b.n	8006d44 <__sinit+0xc>
 8006d5e:	bf00      	nop
 8006d60:	08006ca5 	.word	0x08006ca5
 8006d64:	200005f8 	.word	0x200005f8

08006d68 <_fwalk_sglue>:
 8006d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	4688      	mov	r8, r1
 8006d70:	4614      	mov	r4, r2
 8006d72:	2600      	movs	r6, #0
 8006d74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d78:	f1b9 0901 	subs.w	r9, r9, #1
 8006d7c:	d505      	bpl.n	8006d8a <_fwalk_sglue+0x22>
 8006d7e:	6824      	ldr	r4, [r4, #0]
 8006d80:	2c00      	cmp	r4, #0
 8006d82:	d1f7      	bne.n	8006d74 <_fwalk_sglue+0xc>
 8006d84:	4630      	mov	r0, r6
 8006d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d8a:	89ab      	ldrh	r3, [r5, #12]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d907      	bls.n	8006da0 <_fwalk_sglue+0x38>
 8006d90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d94:	3301      	adds	r3, #1
 8006d96:	d003      	beq.n	8006da0 <_fwalk_sglue+0x38>
 8006d98:	4629      	mov	r1, r5
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	47c0      	blx	r8
 8006d9e:	4306      	orrs	r6, r0
 8006da0:	3568      	adds	r5, #104	; 0x68
 8006da2:	e7e9      	b.n	8006d78 <_fwalk_sglue+0x10>

08006da4 <siprintf>:
 8006da4:	b40e      	push	{r1, r2, r3}
 8006da6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006daa:	b500      	push	{lr}
 8006dac:	b09c      	sub	sp, #112	; 0x70
 8006dae:	ab1d      	add	r3, sp, #116	; 0x74
 8006db0:	9002      	str	r0, [sp, #8]
 8006db2:	9006      	str	r0, [sp, #24]
 8006db4:	9107      	str	r1, [sp, #28]
 8006db6:	9104      	str	r1, [sp, #16]
 8006db8:	4808      	ldr	r0, [pc, #32]	; (8006ddc <siprintf+0x38>)
 8006dba:	4909      	ldr	r1, [pc, #36]	; (8006de0 <siprintf+0x3c>)
 8006dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc0:	9105      	str	r1, [sp, #20]
 8006dc2:	6800      	ldr	r0, [r0, #0]
 8006dc4:	a902      	add	r1, sp, #8
 8006dc6:	9301      	str	r3, [sp, #4]
 8006dc8:	f002 fc5a 	bl	8009680 <_svfiprintf_r>
 8006dcc:	2200      	movs	r2, #0
 8006dce:	9b02      	ldr	r3, [sp, #8]
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	b01c      	add	sp, #112	; 0x70
 8006dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dd8:	b003      	add	sp, #12
 8006dda:	4770      	bx	lr
 8006ddc:	2000008c 	.word	0x2000008c
 8006de0:	ffff0208 	.word	0xffff0208

08006de4 <__sread>:
 8006de4:	b510      	push	{r4, lr}
 8006de6:	460c      	mov	r4, r1
 8006de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dec:	f000 f8c8 	bl	8006f80 <_read_r>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	bfab      	itete	ge
 8006df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006df6:	89a3      	ldrhlt	r3, [r4, #12]
 8006df8:	181b      	addge	r3, r3, r0
 8006dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006dfe:	bfac      	ite	ge
 8006e00:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e02:	81a3      	strhlt	r3, [r4, #12]
 8006e04:	bd10      	pop	{r4, pc}

08006e06 <__swrite>:
 8006e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0a:	461f      	mov	r7, r3
 8006e0c:	898b      	ldrh	r3, [r1, #12]
 8006e0e:	4605      	mov	r5, r0
 8006e10:	05db      	lsls	r3, r3, #23
 8006e12:	460c      	mov	r4, r1
 8006e14:	4616      	mov	r6, r2
 8006e16:	d505      	bpl.n	8006e24 <__swrite+0x1e>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e20:	f000 f89c 	bl	8006f5c <_lseek_r>
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	4632      	mov	r2, r6
 8006e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e2c:	81a3      	strh	r3, [r4, #12]
 8006e2e:	4628      	mov	r0, r5
 8006e30:	463b      	mov	r3, r7
 8006e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3a:	f000 b8b3 	b.w	8006fa4 <_write_r>

08006e3e <__sseek>:
 8006e3e:	b510      	push	{r4, lr}
 8006e40:	460c      	mov	r4, r1
 8006e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e46:	f000 f889 	bl	8006f5c <_lseek_r>
 8006e4a:	1c43      	adds	r3, r0, #1
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	bf15      	itete	ne
 8006e50:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e5a:	81a3      	strheq	r3, [r4, #12]
 8006e5c:	bf18      	it	ne
 8006e5e:	81a3      	strhne	r3, [r4, #12]
 8006e60:	bd10      	pop	{r4, pc}

08006e62 <__sclose>:
 8006e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e66:	f000 b869 	b.w	8006f3c <_close_r>

08006e6a <memset>:
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4402      	add	r2, r0
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d100      	bne.n	8006e74 <memset+0xa>
 8006e72:	4770      	bx	lr
 8006e74:	f803 1b01 	strb.w	r1, [r3], #1
 8006e78:	e7f9      	b.n	8006e6e <memset+0x4>
	...

08006e7c <strtok>:
 8006e7c:	4b16      	ldr	r3, [pc, #88]	; (8006ed8 <strtok+0x5c>)
 8006e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e82:	681f      	ldr	r7, [r3, #0]
 8006e84:	4605      	mov	r5, r0
 8006e86:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8006e88:	460e      	mov	r6, r1
 8006e8a:	b9ec      	cbnz	r4, 8006ec8 <strtok+0x4c>
 8006e8c:	2050      	movs	r0, #80	; 0x50
 8006e8e:	f000 ffaf 	bl	8007df0 <malloc>
 8006e92:	4602      	mov	r2, r0
 8006e94:	6478      	str	r0, [r7, #68]	; 0x44
 8006e96:	b920      	cbnz	r0, 8006ea2 <strtok+0x26>
 8006e98:	215b      	movs	r1, #91	; 0x5b
 8006e9a:	4b10      	ldr	r3, [pc, #64]	; (8006edc <strtok+0x60>)
 8006e9c:	4810      	ldr	r0, [pc, #64]	; (8006ee0 <strtok+0x64>)
 8006e9e:	f000 f8d1 	bl	8007044 <__assert_func>
 8006ea2:	e9c0 4400 	strd	r4, r4, [r0]
 8006ea6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006eaa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006eae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006eb2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006eb6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006eba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006ebe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006ec2:	6184      	str	r4, [r0, #24]
 8006ec4:	7704      	strb	r4, [r0, #28]
 8006ec6:	6244      	str	r4, [r0, #36]	; 0x24
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed4:	f000 b806 	b.w	8006ee4 <__strtok_r>
 8006ed8:	2000008c 	.word	0x2000008c
 8006edc:	0800a95b 	.word	0x0800a95b
 8006ee0:	0800a972 	.word	0x0800a972

08006ee4 <__strtok_r>:
 8006ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ee6:	b908      	cbnz	r0, 8006eec <__strtok_r+0x8>
 8006ee8:	6810      	ldr	r0, [r2, #0]
 8006eea:	b188      	cbz	r0, 8006f10 <__strtok_r+0x2c>
 8006eec:	4604      	mov	r4, r0
 8006eee:	460f      	mov	r7, r1
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006ef6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006efa:	b91e      	cbnz	r6, 8006f04 <__strtok_r+0x20>
 8006efc:	b965      	cbnz	r5, 8006f18 <__strtok_r+0x34>
 8006efe:	4628      	mov	r0, r5
 8006f00:	6015      	str	r5, [r2, #0]
 8006f02:	e005      	b.n	8006f10 <__strtok_r+0x2c>
 8006f04:	42b5      	cmp	r5, r6
 8006f06:	d1f6      	bne.n	8006ef6 <__strtok_r+0x12>
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1f0      	bne.n	8006eee <__strtok_r+0xa>
 8006f0c:	6014      	str	r4, [r2, #0]
 8006f0e:	7003      	strb	r3, [r0, #0]
 8006f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f12:	461c      	mov	r4, r3
 8006f14:	e00c      	b.n	8006f30 <__strtok_r+0x4c>
 8006f16:	b915      	cbnz	r5, 8006f1e <__strtok_r+0x3a>
 8006f18:	460e      	mov	r6, r1
 8006f1a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f1e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006f22:	42ab      	cmp	r3, r5
 8006f24:	d1f7      	bne.n	8006f16 <__strtok_r+0x32>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0f3      	beq.n	8006f12 <__strtok_r+0x2e>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006f30:	6014      	str	r4, [r2, #0]
 8006f32:	e7ed      	b.n	8006f10 <__strtok_r+0x2c>

08006f34 <_localeconv_r>:
 8006f34:	4800      	ldr	r0, [pc, #0]	; (8006f38 <_localeconv_r+0x4>)
 8006f36:	4770      	bx	lr
 8006f38:	20000180 	.word	0x20000180

08006f3c <_close_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	2300      	movs	r3, #0
 8006f40:	4d05      	ldr	r5, [pc, #20]	; (8006f58 <_close_r+0x1c>)
 8006f42:	4604      	mov	r4, r0
 8006f44:	4608      	mov	r0, r1
 8006f46:	602b      	str	r3, [r5, #0]
 8006f48:	f7fc f872 	bl	8003030 <_close>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_close_r+0x1a>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_close_r+0x1a>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	200005fc 	.word	0x200005fc

08006f5c <_lseek_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4608      	mov	r0, r1
 8006f62:	4611      	mov	r1, r2
 8006f64:	2200      	movs	r2, #0
 8006f66:	4d05      	ldr	r5, [pc, #20]	; (8006f7c <_lseek_r+0x20>)
 8006f68:	602a      	str	r2, [r5, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f7fc f884 	bl	8003078 <_lseek>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d102      	bne.n	8006f7a <_lseek_r+0x1e>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b103      	cbz	r3, 8006f7a <_lseek_r+0x1e>
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	200005fc 	.word	0x200005fc

08006f80 <_read_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4d05      	ldr	r5, [pc, #20]	; (8006fa0 <_read_r+0x20>)
 8006f8c:	602a      	str	r2, [r5, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f7fc f815 	bl	8002fbe <_read>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d102      	bne.n	8006f9e <_read_r+0x1e>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	b103      	cbz	r3, 8006f9e <_read_r+0x1e>
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	200005fc 	.word	0x200005fc

08006fa4 <_write_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	4608      	mov	r0, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	2200      	movs	r2, #0
 8006fae:	4d05      	ldr	r5, [pc, #20]	; (8006fc4 <_write_r+0x20>)
 8006fb0:	602a      	str	r2, [r5, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f7fc f820 	bl	8002ff8 <_write>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_write_r+0x1e>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_write_r+0x1e>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	200005fc 	.word	0x200005fc

08006fc8 <__errno>:
 8006fc8:	4b01      	ldr	r3, [pc, #4]	; (8006fd0 <__errno+0x8>)
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	2000008c 	.word	0x2000008c

08006fd4 <__libc_init_array>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	2600      	movs	r6, #0
 8006fd8:	4d0c      	ldr	r5, [pc, #48]	; (800700c <__libc_init_array+0x38>)
 8006fda:	4c0d      	ldr	r4, [pc, #52]	; (8007010 <__libc_init_array+0x3c>)
 8006fdc:	1b64      	subs	r4, r4, r5
 8006fde:	10a4      	asrs	r4, r4, #2
 8006fe0:	42a6      	cmp	r6, r4
 8006fe2:	d109      	bne.n	8006ff8 <__libc_init_array+0x24>
 8006fe4:	f003 fbc0 	bl	800a768 <_init>
 8006fe8:	2600      	movs	r6, #0
 8006fea:	4d0a      	ldr	r5, [pc, #40]	; (8007014 <__libc_init_array+0x40>)
 8006fec:	4c0a      	ldr	r4, [pc, #40]	; (8007018 <__libc_init_array+0x44>)
 8006fee:	1b64      	subs	r4, r4, r5
 8006ff0:	10a4      	asrs	r4, r4, #2
 8006ff2:	42a6      	cmp	r6, r4
 8006ff4:	d105      	bne.n	8007002 <__libc_init_array+0x2e>
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ffc:	4798      	blx	r3
 8006ffe:	3601      	adds	r6, #1
 8007000:	e7ee      	b.n	8006fe0 <__libc_init_array+0xc>
 8007002:	f855 3b04 	ldr.w	r3, [r5], #4
 8007006:	4798      	blx	r3
 8007008:	3601      	adds	r6, #1
 800700a:	e7f2      	b.n	8006ff2 <__libc_init_array+0x1e>
 800700c:	0800ada4 	.word	0x0800ada4
 8007010:	0800ada4 	.word	0x0800ada4
 8007014:	0800ada4 	.word	0x0800ada4
 8007018:	0800ada8 	.word	0x0800ada8

0800701c <__retarget_lock_acquire_recursive>:
 800701c:	4770      	bx	lr

0800701e <__retarget_lock_release_recursive>:
 800701e:	4770      	bx	lr

08007020 <memchr>:
 8007020:	4603      	mov	r3, r0
 8007022:	b510      	push	{r4, lr}
 8007024:	b2c9      	uxtb	r1, r1
 8007026:	4402      	add	r2, r0
 8007028:	4293      	cmp	r3, r2
 800702a:	4618      	mov	r0, r3
 800702c:	d101      	bne.n	8007032 <memchr+0x12>
 800702e:	2000      	movs	r0, #0
 8007030:	e003      	b.n	800703a <memchr+0x1a>
 8007032:	7804      	ldrb	r4, [r0, #0]
 8007034:	3301      	adds	r3, #1
 8007036:	428c      	cmp	r4, r1
 8007038:	d1f6      	bne.n	8007028 <memchr+0x8>
 800703a:	bd10      	pop	{r4, pc}

0800703c <nanf>:
 800703c:	4800      	ldr	r0, [pc, #0]	; (8007040 <nanf+0x4>)
 800703e:	4770      	bx	lr
 8007040:	7fc00000 	.word	0x7fc00000

08007044 <__assert_func>:
 8007044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007046:	4614      	mov	r4, r2
 8007048:	461a      	mov	r2, r3
 800704a:	4b09      	ldr	r3, [pc, #36]	; (8007070 <__assert_func+0x2c>)
 800704c:	4605      	mov	r5, r0
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68d8      	ldr	r0, [r3, #12]
 8007052:	b14c      	cbz	r4, 8007068 <__assert_func+0x24>
 8007054:	4b07      	ldr	r3, [pc, #28]	; (8007074 <__assert_func+0x30>)
 8007056:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800705a:	9100      	str	r1, [sp, #0]
 800705c:	462b      	mov	r3, r5
 800705e:	4906      	ldr	r1, [pc, #24]	; (8007078 <__assert_func+0x34>)
 8007060:	f002 fcb6 	bl	80099d0 <fiprintf>
 8007064:	f002 fd16 	bl	8009a94 <abort>
 8007068:	4b04      	ldr	r3, [pc, #16]	; (800707c <__assert_func+0x38>)
 800706a:	461c      	mov	r4, r3
 800706c:	e7f3      	b.n	8007056 <__assert_func+0x12>
 800706e:	bf00      	nop
 8007070:	2000008c 	.word	0x2000008c
 8007074:	0800a9cc 	.word	0x0800a9cc
 8007078:	0800a9d9 	.word	0x0800a9d9
 800707c:	0800aa07 	.word	0x0800aa07

08007080 <quorem>:
 8007080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	6903      	ldr	r3, [r0, #16]
 8007086:	690c      	ldr	r4, [r1, #16]
 8007088:	4607      	mov	r7, r0
 800708a:	42a3      	cmp	r3, r4
 800708c:	db7f      	blt.n	800718e <quorem+0x10e>
 800708e:	3c01      	subs	r4, #1
 8007090:	f100 0514 	add.w	r5, r0, #20
 8007094:	f101 0814 	add.w	r8, r1, #20
 8007098:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070a6:	3301      	adds	r3, #1
 80070a8:	429a      	cmp	r2, r3
 80070aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80070ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070b6:	d331      	bcc.n	800711c <quorem+0x9c>
 80070b8:	f04f 0e00 	mov.w	lr, #0
 80070bc:	4640      	mov	r0, r8
 80070be:	46ac      	mov	ip, r5
 80070c0:	46f2      	mov	sl, lr
 80070c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80070c6:	b293      	uxth	r3, r2
 80070c8:	fb06 e303 	mla	r3, r6, r3, lr
 80070cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070d0:	0c1a      	lsrs	r2, r3, #16
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	fb06 220e 	mla	r2, r6, lr, r2
 80070d8:	ebaa 0303 	sub.w	r3, sl, r3
 80070dc:	f8dc a000 	ldr.w	sl, [ip]
 80070e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070e4:	fa1f fa8a 	uxth.w	sl, sl
 80070e8:	4453      	add	r3, sl
 80070ea:	f8dc a000 	ldr.w	sl, [ip]
 80070ee:	b292      	uxth	r2, r2
 80070f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80070f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070fe:	4581      	cmp	r9, r0
 8007100:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007104:	f84c 3b04 	str.w	r3, [ip], #4
 8007108:	d2db      	bcs.n	80070c2 <quorem+0x42>
 800710a:	f855 300b 	ldr.w	r3, [r5, fp]
 800710e:	b92b      	cbnz	r3, 800711c <quorem+0x9c>
 8007110:	9b01      	ldr	r3, [sp, #4]
 8007112:	3b04      	subs	r3, #4
 8007114:	429d      	cmp	r5, r3
 8007116:	461a      	mov	r2, r3
 8007118:	d32d      	bcc.n	8007176 <quorem+0xf6>
 800711a:	613c      	str	r4, [r7, #16]
 800711c:	4638      	mov	r0, r7
 800711e:	f001 f9df 	bl	80084e0 <__mcmp>
 8007122:	2800      	cmp	r0, #0
 8007124:	db23      	blt.n	800716e <quorem+0xee>
 8007126:	4629      	mov	r1, r5
 8007128:	2000      	movs	r0, #0
 800712a:	3601      	adds	r6, #1
 800712c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007130:	f8d1 c000 	ldr.w	ip, [r1]
 8007134:	b293      	uxth	r3, r2
 8007136:	1ac3      	subs	r3, r0, r3
 8007138:	0c12      	lsrs	r2, r2, #16
 800713a:	fa1f f08c 	uxth.w	r0, ip
 800713e:	4403      	add	r3, r0
 8007140:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007144:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007148:	b29b      	uxth	r3, r3
 800714a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800714e:	45c1      	cmp	r9, r8
 8007150:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007154:	f841 3b04 	str.w	r3, [r1], #4
 8007158:	d2e8      	bcs.n	800712c <quorem+0xac>
 800715a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800715e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007162:	b922      	cbnz	r2, 800716e <quorem+0xee>
 8007164:	3b04      	subs	r3, #4
 8007166:	429d      	cmp	r5, r3
 8007168:	461a      	mov	r2, r3
 800716a:	d30a      	bcc.n	8007182 <quorem+0x102>
 800716c:	613c      	str	r4, [r7, #16]
 800716e:	4630      	mov	r0, r6
 8007170:	b003      	add	sp, #12
 8007172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007176:	6812      	ldr	r2, [r2, #0]
 8007178:	3b04      	subs	r3, #4
 800717a:	2a00      	cmp	r2, #0
 800717c:	d1cd      	bne.n	800711a <quorem+0x9a>
 800717e:	3c01      	subs	r4, #1
 8007180:	e7c8      	b.n	8007114 <quorem+0x94>
 8007182:	6812      	ldr	r2, [r2, #0]
 8007184:	3b04      	subs	r3, #4
 8007186:	2a00      	cmp	r2, #0
 8007188:	d1f0      	bne.n	800716c <quorem+0xec>
 800718a:	3c01      	subs	r4, #1
 800718c:	e7eb      	b.n	8007166 <quorem+0xe6>
 800718e:	2000      	movs	r0, #0
 8007190:	e7ee      	b.n	8007170 <quorem+0xf0>
 8007192:	0000      	movs	r0, r0
 8007194:	0000      	movs	r0, r0
	...

08007198 <_dtoa_r>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	4616      	mov	r6, r2
 800719e:	461f      	mov	r7, r3
 80071a0:	69c4      	ldr	r4, [r0, #28]
 80071a2:	b099      	sub	sp, #100	; 0x64
 80071a4:	4605      	mov	r5, r0
 80071a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80071aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80071ae:	b974      	cbnz	r4, 80071ce <_dtoa_r+0x36>
 80071b0:	2010      	movs	r0, #16
 80071b2:	f000 fe1d 	bl	8007df0 <malloc>
 80071b6:	4602      	mov	r2, r0
 80071b8:	61e8      	str	r0, [r5, #28]
 80071ba:	b920      	cbnz	r0, 80071c6 <_dtoa_r+0x2e>
 80071bc:	21ef      	movs	r1, #239	; 0xef
 80071be:	4bac      	ldr	r3, [pc, #688]	; (8007470 <_dtoa_r+0x2d8>)
 80071c0:	48ac      	ldr	r0, [pc, #688]	; (8007474 <_dtoa_r+0x2dc>)
 80071c2:	f7ff ff3f 	bl	8007044 <__assert_func>
 80071c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071ca:	6004      	str	r4, [r0, #0]
 80071cc:	60c4      	str	r4, [r0, #12]
 80071ce:	69eb      	ldr	r3, [r5, #28]
 80071d0:	6819      	ldr	r1, [r3, #0]
 80071d2:	b151      	cbz	r1, 80071ea <_dtoa_r+0x52>
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	2301      	movs	r3, #1
 80071d8:	4093      	lsls	r3, r2
 80071da:	604a      	str	r2, [r1, #4]
 80071dc:	608b      	str	r3, [r1, #8]
 80071de:	4628      	mov	r0, r5
 80071e0:	f000 fefa 	bl	8007fd8 <_Bfree>
 80071e4:	2200      	movs	r2, #0
 80071e6:	69eb      	ldr	r3, [r5, #28]
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	1e3b      	subs	r3, r7, #0
 80071ec:	bfaf      	iteee	ge
 80071ee:	2300      	movge	r3, #0
 80071f0:	2201      	movlt	r2, #1
 80071f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80071f6:	9305      	strlt	r3, [sp, #20]
 80071f8:	bfa8      	it	ge
 80071fa:	f8c8 3000 	strge.w	r3, [r8]
 80071fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007202:	4b9d      	ldr	r3, [pc, #628]	; (8007478 <_dtoa_r+0x2e0>)
 8007204:	bfb8      	it	lt
 8007206:	f8c8 2000 	strlt.w	r2, [r8]
 800720a:	ea33 0309 	bics.w	r3, r3, r9
 800720e:	d119      	bne.n	8007244 <_dtoa_r+0xac>
 8007210:	f242 730f 	movw	r3, #9999	; 0x270f
 8007214:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007216:	6013      	str	r3, [r2, #0]
 8007218:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800721c:	4333      	orrs	r3, r6
 800721e:	f000 8589 	beq.w	8007d34 <_dtoa_r+0xb9c>
 8007222:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007224:	b953      	cbnz	r3, 800723c <_dtoa_r+0xa4>
 8007226:	4b95      	ldr	r3, [pc, #596]	; (800747c <_dtoa_r+0x2e4>)
 8007228:	e023      	b.n	8007272 <_dtoa_r+0xda>
 800722a:	4b95      	ldr	r3, [pc, #596]	; (8007480 <_dtoa_r+0x2e8>)
 800722c:	9303      	str	r3, [sp, #12]
 800722e:	3308      	adds	r3, #8
 8007230:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	9803      	ldr	r0, [sp, #12]
 8007236:	b019      	add	sp, #100	; 0x64
 8007238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723c:	4b8f      	ldr	r3, [pc, #572]	; (800747c <_dtoa_r+0x2e4>)
 800723e:	9303      	str	r3, [sp, #12]
 8007240:	3303      	adds	r3, #3
 8007242:	e7f5      	b.n	8007230 <_dtoa_r+0x98>
 8007244:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007248:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800724c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007250:	2200      	movs	r2, #0
 8007252:	2300      	movs	r3, #0
 8007254:	f7f9 fbb2 	bl	80009bc <__aeabi_dcmpeq>
 8007258:	4680      	mov	r8, r0
 800725a:	b160      	cbz	r0, 8007276 <_dtoa_r+0xde>
 800725c:	2301      	movs	r3, #1
 800725e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 8562 	beq.w	8007d2e <_dtoa_r+0xb96>
 800726a:	4b86      	ldr	r3, [pc, #536]	; (8007484 <_dtoa_r+0x2ec>)
 800726c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	3b01      	subs	r3, #1
 8007272:	9303      	str	r3, [sp, #12]
 8007274:	e7de      	b.n	8007234 <_dtoa_r+0x9c>
 8007276:	ab16      	add	r3, sp, #88	; 0x58
 8007278:	9301      	str	r3, [sp, #4]
 800727a:	ab17      	add	r3, sp, #92	; 0x5c
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	4628      	mov	r0, r5
 8007280:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007284:	f001 fa3c 	bl	8008700 <__d2b>
 8007288:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800728c:	4682      	mov	sl, r0
 800728e:	2c00      	cmp	r4, #0
 8007290:	d07e      	beq.n	8007390 <_dtoa_r+0x1f8>
 8007292:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007298:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800729c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072a0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80072a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80072a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80072ac:	4619      	mov	r1, r3
 80072ae:	2200      	movs	r2, #0
 80072b0:	4b75      	ldr	r3, [pc, #468]	; (8007488 <_dtoa_r+0x2f0>)
 80072b2:	f7f8 ff63 	bl	800017c <__aeabi_dsub>
 80072b6:	a368      	add	r3, pc, #416	; (adr r3, 8007458 <_dtoa_r+0x2c0>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	f7f9 f916 	bl	80004ec <__aeabi_dmul>
 80072c0:	a367      	add	r3, pc, #412	; (adr r3, 8007460 <_dtoa_r+0x2c8>)
 80072c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c6:	f7f8 ff5b 	bl	8000180 <__adddf3>
 80072ca:	4606      	mov	r6, r0
 80072cc:	4620      	mov	r0, r4
 80072ce:	460f      	mov	r7, r1
 80072d0:	f7f9 f8a2 	bl	8000418 <__aeabi_i2d>
 80072d4:	a364      	add	r3, pc, #400	; (adr r3, 8007468 <_dtoa_r+0x2d0>)
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	f7f9 f907 	bl	80004ec <__aeabi_dmul>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4630      	mov	r0, r6
 80072e4:	4639      	mov	r1, r7
 80072e6:	f7f8 ff4b 	bl	8000180 <__adddf3>
 80072ea:	4606      	mov	r6, r0
 80072ec:	460f      	mov	r7, r1
 80072ee:	f7f9 fbad 	bl	8000a4c <__aeabi_d2iz>
 80072f2:	2200      	movs	r2, #0
 80072f4:	4683      	mov	fp, r0
 80072f6:	2300      	movs	r3, #0
 80072f8:	4630      	mov	r0, r6
 80072fa:	4639      	mov	r1, r7
 80072fc:	f7f9 fb68 	bl	80009d0 <__aeabi_dcmplt>
 8007300:	b148      	cbz	r0, 8007316 <_dtoa_r+0x17e>
 8007302:	4658      	mov	r0, fp
 8007304:	f7f9 f888 	bl	8000418 <__aeabi_i2d>
 8007308:	4632      	mov	r2, r6
 800730a:	463b      	mov	r3, r7
 800730c:	f7f9 fb56 	bl	80009bc <__aeabi_dcmpeq>
 8007310:	b908      	cbnz	r0, 8007316 <_dtoa_r+0x17e>
 8007312:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007316:	f1bb 0f16 	cmp.w	fp, #22
 800731a:	d857      	bhi.n	80073cc <_dtoa_r+0x234>
 800731c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007320:	4b5a      	ldr	r3, [pc, #360]	; (800748c <_dtoa_r+0x2f4>)
 8007322:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732a:	f7f9 fb51 	bl	80009d0 <__aeabi_dcmplt>
 800732e:	2800      	cmp	r0, #0
 8007330:	d04e      	beq.n	80073d0 <_dtoa_r+0x238>
 8007332:	2300      	movs	r3, #0
 8007334:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007338:	930f      	str	r3, [sp, #60]	; 0x3c
 800733a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800733c:	1b1b      	subs	r3, r3, r4
 800733e:	1e5a      	subs	r2, r3, #1
 8007340:	bf46      	itte	mi
 8007342:	f1c3 0901 	rsbmi	r9, r3, #1
 8007346:	2300      	movmi	r3, #0
 8007348:	f04f 0900 	movpl.w	r9, #0
 800734c:	9209      	str	r2, [sp, #36]	; 0x24
 800734e:	bf48      	it	mi
 8007350:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007352:	f1bb 0f00 	cmp.w	fp, #0
 8007356:	db3d      	blt.n	80073d4 <_dtoa_r+0x23c>
 8007358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800735e:	445b      	add	r3, fp
 8007360:	9309      	str	r3, [sp, #36]	; 0x24
 8007362:	2300      	movs	r3, #0
 8007364:	930a      	str	r3, [sp, #40]	; 0x28
 8007366:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007368:	2b09      	cmp	r3, #9
 800736a:	d867      	bhi.n	800743c <_dtoa_r+0x2a4>
 800736c:	2b05      	cmp	r3, #5
 800736e:	bfc4      	itt	gt
 8007370:	3b04      	subgt	r3, #4
 8007372:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007374:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007376:	bfc8      	it	gt
 8007378:	2400      	movgt	r4, #0
 800737a:	f1a3 0302 	sub.w	r3, r3, #2
 800737e:	bfd8      	it	le
 8007380:	2401      	movle	r4, #1
 8007382:	2b03      	cmp	r3, #3
 8007384:	f200 8086 	bhi.w	8007494 <_dtoa_r+0x2fc>
 8007388:	e8df f003 	tbb	[pc, r3]
 800738c:	5637392c 	.word	0x5637392c
 8007390:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007394:	441c      	add	r4, r3
 8007396:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800739a:	2b20      	cmp	r3, #32
 800739c:	bfc1      	itttt	gt
 800739e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073a2:	fa09 f903 	lslgt.w	r9, r9, r3
 80073a6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80073aa:	fa26 f303 	lsrgt.w	r3, r6, r3
 80073ae:	bfd6      	itet	le
 80073b0:	f1c3 0320 	rsble	r3, r3, #32
 80073b4:	ea49 0003 	orrgt.w	r0, r9, r3
 80073b8:	fa06 f003 	lslle.w	r0, r6, r3
 80073bc:	f7f9 f81c 	bl	80003f8 <__aeabi_ui2d>
 80073c0:	2201      	movs	r2, #1
 80073c2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80073c6:	3c01      	subs	r4, #1
 80073c8:	9213      	str	r2, [sp, #76]	; 0x4c
 80073ca:	e76f      	b.n	80072ac <_dtoa_r+0x114>
 80073cc:	2301      	movs	r3, #1
 80073ce:	e7b3      	b.n	8007338 <_dtoa_r+0x1a0>
 80073d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80073d2:	e7b2      	b.n	800733a <_dtoa_r+0x1a2>
 80073d4:	f1cb 0300 	rsb	r3, fp, #0
 80073d8:	930a      	str	r3, [sp, #40]	; 0x28
 80073da:	2300      	movs	r3, #0
 80073dc:	eba9 090b 	sub.w	r9, r9, fp
 80073e0:	930e      	str	r3, [sp, #56]	; 0x38
 80073e2:	e7c0      	b.n	8007366 <_dtoa_r+0x1ce>
 80073e4:	2300      	movs	r3, #0
 80073e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	dc55      	bgt.n	800749a <_dtoa_r+0x302>
 80073ee:	2301      	movs	r3, #1
 80073f0:	461a      	mov	r2, r3
 80073f2:	9306      	str	r3, [sp, #24]
 80073f4:	9308      	str	r3, [sp, #32]
 80073f6:	9223      	str	r2, [sp, #140]	; 0x8c
 80073f8:	e00b      	b.n	8007412 <_dtoa_r+0x27a>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e7f3      	b.n	80073e6 <_dtoa_r+0x24e>
 80073fe:	2300      	movs	r3, #0
 8007400:	930b      	str	r3, [sp, #44]	; 0x2c
 8007402:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007404:	445b      	add	r3, fp
 8007406:	9306      	str	r3, [sp, #24]
 8007408:	3301      	adds	r3, #1
 800740a:	2b01      	cmp	r3, #1
 800740c:	9308      	str	r3, [sp, #32]
 800740e:	bfb8      	it	lt
 8007410:	2301      	movlt	r3, #1
 8007412:	2100      	movs	r1, #0
 8007414:	2204      	movs	r2, #4
 8007416:	69e8      	ldr	r0, [r5, #28]
 8007418:	f102 0614 	add.w	r6, r2, #20
 800741c:	429e      	cmp	r6, r3
 800741e:	d940      	bls.n	80074a2 <_dtoa_r+0x30a>
 8007420:	6041      	str	r1, [r0, #4]
 8007422:	4628      	mov	r0, r5
 8007424:	f000 fd98 	bl	8007f58 <_Balloc>
 8007428:	9003      	str	r0, [sp, #12]
 800742a:	2800      	cmp	r0, #0
 800742c:	d13c      	bne.n	80074a8 <_dtoa_r+0x310>
 800742e:	4602      	mov	r2, r0
 8007430:	f240 11af 	movw	r1, #431	; 0x1af
 8007434:	4b16      	ldr	r3, [pc, #88]	; (8007490 <_dtoa_r+0x2f8>)
 8007436:	e6c3      	b.n	80071c0 <_dtoa_r+0x28>
 8007438:	2301      	movs	r3, #1
 800743a:	e7e1      	b.n	8007400 <_dtoa_r+0x268>
 800743c:	2401      	movs	r4, #1
 800743e:	2300      	movs	r3, #0
 8007440:	940b      	str	r4, [sp, #44]	; 0x2c
 8007442:	9322      	str	r3, [sp, #136]	; 0x88
 8007444:	f04f 33ff 	mov.w	r3, #4294967295
 8007448:	2200      	movs	r2, #0
 800744a:	9306      	str	r3, [sp, #24]
 800744c:	9308      	str	r3, [sp, #32]
 800744e:	2312      	movs	r3, #18
 8007450:	e7d1      	b.n	80073f6 <_dtoa_r+0x25e>
 8007452:	bf00      	nop
 8007454:	f3af 8000 	nop.w
 8007458:	636f4361 	.word	0x636f4361
 800745c:	3fd287a7 	.word	0x3fd287a7
 8007460:	8b60c8b3 	.word	0x8b60c8b3
 8007464:	3fc68a28 	.word	0x3fc68a28
 8007468:	509f79fb 	.word	0x509f79fb
 800746c:	3fd34413 	.word	0x3fd34413
 8007470:	0800a95b 	.word	0x0800a95b
 8007474:	0800aa15 	.word	0x0800aa15
 8007478:	7ff00000 	.word	0x7ff00000
 800747c:	0800aa11 	.word	0x0800aa11
 8007480:	0800aa08 	.word	0x0800aa08
 8007484:	0800a933 	.word	0x0800a933
 8007488:	3ff80000 	.word	0x3ff80000
 800748c:	0800ab00 	.word	0x0800ab00
 8007490:	0800aa6d 	.word	0x0800aa6d
 8007494:	2301      	movs	r3, #1
 8007496:	930b      	str	r3, [sp, #44]	; 0x2c
 8007498:	e7d4      	b.n	8007444 <_dtoa_r+0x2ac>
 800749a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800749c:	9306      	str	r3, [sp, #24]
 800749e:	9308      	str	r3, [sp, #32]
 80074a0:	e7b7      	b.n	8007412 <_dtoa_r+0x27a>
 80074a2:	3101      	adds	r1, #1
 80074a4:	0052      	lsls	r2, r2, #1
 80074a6:	e7b7      	b.n	8007418 <_dtoa_r+0x280>
 80074a8:	69eb      	ldr	r3, [r5, #28]
 80074aa:	9a03      	ldr	r2, [sp, #12]
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	9b08      	ldr	r3, [sp, #32]
 80074b0:	2b0e      	cmp	r3, #14
 80074b2:	f200 80a8 	bhi.w	8007606 <_dtoa_r+0x46e>
 80074b6:	2c00      	cmp	r4, #0
 80074b8:	f000 80a5 	beq.w	8007606 <_dtoa_r+0x46e>
 80074bc:	f1bb 0f00 	cmp.w	fp, #0
 80074c0:	dd34      	ble.n	800752c <_dtoa_r+0x394>
 80074c2:	4b9a      	ldr	r3, [pc, #616]	; (800772c <_dtoa_r+0x594>)
 80074c4:	f00b 020f 	and.w	r2, fp, #15
 80074c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80074d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80074d8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80074dc:	d016      	beq.n	800750c <_dtoa_r+0x374>
 80074de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074e2:	4b93      	ldr	r3, [pc, #588]	; (8007730 <_dtoa_r+0x598>)
 80074e4:	2703      	movs	r7, #3
 80074e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074ea:	f7f9 f929 	bl	8000740 <__aeabi_ddiv>
 80074ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074f2:	f004 040f 	and.w	r4, r4, #15
 80074f6:	4e8e      	ldr	r6, [pc, #568]	; (8007730 <_dtoa_r+0x598>)
 80074f8:	b954      	cbnz	r4, 8007510 <_dtoa_r+0x378>
 80074fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80074fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007502:	f7f9 f91d 	bl	8000740 <__aeabi_ddiv>
 8007506:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800750a:	e029      	b.n	8007560 <_dtoa_r+0x3c8>
 800750c:	2702      	movs	r7, #2
 800750e:	e7f2      	b.n	80074f6 <_dtoa_r+0x35e>
 8007510:	07e1      	lsls	r1, r4, #31
 8007512:	d508      	bpl.n	8007526 <_dtoa_r+0x38e>
 8007514:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007518:	e9d6 2300 	ldrd	r2, r3, [r6]
 800751c:	f7f8 ffe6 	bl	80004ec <__aeabi_dmul>
 8007520:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007524:	3701      	adds	r7, #1
 8007526:	1064      	asrs	r4, r4, #1
 8007528:	3608      	adds	r6, #8
 800752a:	e7e5      	b.n	80074f8 <_dtoa_r+0x360>
 800752c:	f000 80a5 	beq.w	800767a <_dtoa_r+0x4e2>
 8007530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007534:	f1cb 0400 	rsb	r4, fp, #0
 8007538:	4b7c      	ldr	r3, [pc, #496]	; (800772c <_dtoa_r+0x594>)
 800753a:	f004 020f 	and.w	r2, r4, #15
 800753e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	f7f8 ffd1 	bl	80004ec <__aeabi_dmul>
 800754a:	2702      	movs	r7, #2
 800754c:	2300      	movs	r3, #0
 800754e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007552:	4e77      	ldr	r6, [pc, #476]	; (8007730 <_dtoa_r+0x598>)
 8007554:	1124      	asrs	r4, r4, #4
 8007556:	2c00      	cmp	r4, #0
 8007558:	f040 8084 	bne.w	8007664 <_dtoa_r+0x4cc>
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1d2      	bne.n	8007506 <_dtoa_r+0x36e>
 8007560:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007564:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 8087 	beq.w	800767e <_dtoa_r+0x4e6>
 8007570:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007574:	2200      	movs	r2, #0
 8007576:	4b6f      	ldr	r3, [pc, #444]	; (8007734 <_dtoa_r+0x59c>)
 8007578:	f7f9 fa2a 	bl	80009d0 <__aeabi_dcmplt>
 800757c:	2800      	cmp	r0, #0
 800757e:	d07e      	beq.n	800767e <_dtoa_r+0x4e6>
 8007580:	9b08      	ldr	r3, [sp, #32]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d07b      	beq.n	800767e <_dtoa_r+0x4e6>
 8007586:	9b06      	ldr	r3, [sp, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	dd38      	ble.n	80075fe <_dtoa_r+0x466>
 800758c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007590:	2200      	movs	r2, #0
 8007592:	4b69      	ldr	r3, [pc, #420]	; (8007738 <_dtoa_r+0x5a0>)
 8007594:	f7f8 ffaa 	bl	80004ec <__aeabi_dmul>
 8007598:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800759c:	9c06      	ldr	r4, [sp, #24]
 800759e:	f10b 38ff 	add.w	r8, fp, #4294967295
 80075a2:	3701      	adds	r7, #1
 80075a4:	4638      	mov	r0, r7
 80075a6:	f7f8 ff37 	bl	8000418 <__aeabi_i2d>
 80075aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ae:	f7f8 ff9d 	bl	80004ec <__aeabi_dmul>
 80075b2:	2200      	movs	r2, #0
 80075b4:	4b61      	ldr	r3, [pc, #388]	; (800773c <_dtoa_r+0x5a4>)
 80075b6:	f7f8 fde3 	bl	8000180 <__adddf3>
 80075ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80075be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075c2:	9611      	str	r6, [sp, #68]	; 0x44
 80075c4:	2c00      	cmp	r4, #0
 80075c6:	d15d      	bne.n	8007684 <_dtoa_r+0x4ec>
 80075c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075cc:	2200      	movs	r2, #0
 80075ce:	4b5c      	ldr	r3, [pc, #368]	; (8007740 <_dtoa_r+0x5a8>)
 80075d0:	f7f8 fdd4 	bl	800017c <__aeabi_dsub>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075dc:	4633      	mov	r3, r6
 80075de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075e0:	f7f9 fa14 	bl	8000a0c <__aeabi_dcmpgt>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	f040 8295 	bne.w	8007b14 <_dtoa_r+0x97c>
 80075ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80075f4:	f7f9 f9ec 	bl	80009d0 <__aeabi_dcmplt>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	f040 8289 	bne.w	8007b10 <_dtoa_r+0x978>
 80075fe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007602:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007606:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007608:	2b00      	cmp	r3, #0
 800760a:	f2c0 8151 	blt.w	80078b0 <_dtoa_r+0x718>
 800760e:	f1bb 0f0e 	cmp.w	fp, #14
 8007612:	f300 814d 	bgt.w	80078b0 <_dtoa_r+0x718>
 8007616:	4b45      	ldr	r3, [pc, #276]	; (800772c <_dtoa_r+0x594>)
 8007618:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800761c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007620:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007624:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007626:	2b00      	cmp	r3, #0
 8007628:	f280 80da 	bge.w	80077e0 <_dtoa_r+0x648>
 800762c:	9b08      	ldr	r3, [sp, #32]
 800762e:	2b00      	cmp	r3, #0
 8007630:	f300 80d6 	bgt.w	80077e0 <_dtoa_r+0x648>
 8007634:	f040 826b 	bne.w	8007b0e <_dtoa_r+0x976>
 8007638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800763c:	2200      	movs	r2, #0
 800763e:	4b40      	ldr	r3, [pc, #256]	; (8007740 <_dtoa_r+0x5a8>)
 8007640:	f7f8 ff54 	bl	80004ec <__aeabi_dmul>
 8007644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007648:	f7f9 f9d6 	bl	80009f8 <__aeabi_dcmpge>
 800764c:	9c08      	ldr	r4, [sp, #32]
 800764e:	4626      	mov	r6, r4
 8007650:	2800      	cmp	r0, #0
 8007652:	f040 8241 	bne.w	8007ad8 <_dtoa_r+0x940>
 8007656:	2331      	movs	r3, #49	; 0x31
 8007658:	9f03      	ldr	r7, [sp, #12]
 800765a:	f10b 0b01 	add.w	fp, fp, #1
 800765e:	f807 3b01 	strb.w	r3, [r7], #1
 8007662:	e23d      	b.n	8007ae0 <_dtoa_r+0x948>
 8007664:	07e2      	lsls	r2, r4, #31
 8007666:	d505      	bpl.n	8007674 <_dtoa_r+0x4dc>
 8007668:	e9d6 2300 	ldrd	r2, r3, [r6]
 800766c:	f7f8 ff3e 	bl	80004ec <__aeabi_dmul>
 8007670:	2301      	movs	r3, #1
 8007672:	3701      	adds	r7, #1
 8007674:	1064      	asrs	r4, r4, #1
 8007676:	3608      	adds	r6, #8
 8007678:	e76d      	b.n	8007556 <_dtoa_r+0x3be>
 800767a:	2702      	movs	r7, #2
 800767c:	e770      	b.n	8007560 <_dtoa_r+0x3c8>
 800767e:	46d8      	mov	r8, fp
 8007680:	9c08      	ldr	r4, [sp, #32]
 8007682:	e78f      	b.n	80075a4 <_dtoa_r+0x40c>
 8007684:	9903      	ldr	r1, [sp, #12]
 8007686:	4b29      	ldr	r3, [pc, #164]	; (800772c <_dtoa_r+0x594>)
 8007688:	4421      	add	r1, r4
 800768a:	9112      	str	r1, [sp, #72]	; 0x48
 800768c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800768e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007692:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007696:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800769a:	2900      	cmp	r1, #0
 800769c:	d054      	beq.n	8007748 <_dtoa_r+0x5b0>
 800769e:	2000      	movs	r0, #0
 80076a0:	4928      	ldr	r1, [pc, #160]	; (8007744 <_dtoa_r+0x5ac>)
 80076a2:	f7f9 f84d 	bl	8000740 <__aeabi_ddiv>
 80076a6:	463b      	mov	r3, r7
 80076a8:	4632      	mov	r2, r6
 80076aa:	f7f8 fd67 	bl	800017c <__aeabi_dsub>
 80076ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076b2:	9f03      	ldr	r7, [sp, #12]
 80076b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076b8:	f7f9 f9c8 	bl	8000a4c <__aeabi_d2iz>
 80076bc:	4604      	mov	r4, r0
 80076be:	f7f8 feab 	bl	8000418 <__aeabi_i2d>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ca:	f7f8 fd57 	bl	800017c <__aeabi_dsub>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	3430      	adds	r4, #48	; 0x30
 80076d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076dc:	f807 4b01 	strb.w	r4, [r7], #1
 80076e0:	f7f9 f976 	bl	80009d0 <__aeabi_dcmplt>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d173      	bne.n	80077d0 <_dtoa_r+0x638>
 80076e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076ec:	2000      	movs	r0, #0
 80076ee:	4911      	ldr	r1, [pc, #68]	; (8007734 <_dtoa_r+0x59c>)
 80076f0:	f7f8 fd44 	bl	800017c <__aeabi_dsub>
 80076f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076f8:	f7f9 f96a 	bl	80009d0 <__aeabi_dcmplt>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	f040 80b6 	bne.w	800786e <_dtoa_r+0x6d6>
 8007702:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007704:	429f      	cmp	r7, r3
 8007706:	f43f af7a 	beq.w	80075fe <_dtoa_r+0x466>
 800770a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800770e:	2200      	movs	r2, #0
 8007710:	4b09      	ldr	r3, [pc, #36]	; (8007738 <_dtoa_r+0x5a0>)
 8007712:	f7f8 feeb 	bl	80004ec <__aeabi_dmul>
 8007716:	2200      	movs	r2, #0
 8007718:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800771c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007720:	4b05      	ldr	r3, [pc, #20]	; (8007738 <_dtoa_r+0x5a0>)
 8007722:	f7f8 fee3 	bl	80004ec <__aeabi_dmul>
 8007726:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800772a:	e7c3      	b.n	80076b4 <_dtoa_r+0x51c>
 800772c:	0800ab00 	.word	0x0800ab00
 8007730:	0800aad8 	.word	0x0800aad8
 8007734:	3ff00000 	.word	0x3ff00000
 8007738:	40240000 	.word	0x40240000
 800773c:	401c0000 	.word	0x401c0000
 8007740:	40140000 	.word	0x40140000
 8007744:	3fe00000 	.word	0x3fe00000
 8007748:	4630      	mov	r0, r6
 800774a:	4639      	mov	r1, r7
 800774c:	f7f8 fece 	bl	80004ec <__aeabi_dmul>
 8007750:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007752:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007756:	9c03      	ldr	r4, [sp, #12]
 8007758:	9314      	str	r3, [sp, #80]	; 0x50
 800775a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800775e:	f7f9 f975 	bl	8000a4c <__aeabi_d2iz>
 8007762:	9015      	str	r0, [sp, #84]	; 0x54
 8007764:	f7f8 fe58 	bl	8000418 <__aeabi_i2d>
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007770:	f7f8 fd04 	bl	800017c <__aeabi_dsub>
 8007774:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007776:	4606      	mov	r6, r0
 8007778:	3330      	adds	r3, #48	; 0x30
 800777a:	f804 3b01 	strb.w	r3, [r4], #1
 800777e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007780:	460f      	mov	r7, r1
 8007782:	429c      	cmp	r4, r3
 8007784:	f04f 0200 	mov.w	r2, #0
 8007788:	d124      	bne.n	80077d4 <_dtoa_r+0x63c>
 800778a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800778e:	4baf      	ldr	r3, [pc, #700]	; (8007a4c <_dtoa_r+0x8b4>)
 8007790:	f7f8 fcf6 	bl	8000180 <__adddf3>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	4630      	mov	r0, r6
 800779a:	4639      	mov	r1, r7
 800779c:	f7f9 f936 	bl	8000a0c <__aeabi_dcmpgt>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d163      	bne.n	800786c <_dtoa_r+0x6d4>
 80077a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077a8:	2000      	movs	r0, #0
 80077aa:	49a8      	ldr	r1, [pc, #672]	; (8007a4c <_dtoa_r+0x8b4>)
 80077ac:	f7f8 fce6 	bl	800017c <__aeabi_dsub>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4630      	mov	r0, r6
 80077b6:	4639      	mov	r1, r7
 80077b8:	f7f9 f90a 	bl	80009d0 <__aeabi_dcmplt>
 80077bc:	2800      	cmp	r0, #0
 80077be:	f43f af1e 	beq.w	80075fe <_dtoa_r+0x466>
 80077c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80077c4:	1e7b      	subs	r3, r7, #1
 80077c6:	9314      	str	r3, [sp, #80]	; 0x50
 80077c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80077cc:	2b30      	cmp	r3, #48	; 0x30
 80077ce:	d0f8      	beq.n	80077c2 <_dtoa_r+0x62a>
 80077d0:	46c3      	mov	fp, r8
 80077d2:	e03b      	b.n	800784c <_dtoa_r+0x6b4>
 80077d4:	4b9e      	ldr	r3, [pc, #632]	; (8007a50 <_dtoa_r+0x8b8>)
 80077d6:	f7f8 fe89 	bl	80004ec <__aeabi_dmul>
 80077da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077de:	e7bc      	b.n	800775a <_dtoa_r+0x5c2>
 80077e0:	9f03      	ldr	r7, [sp, #12]
 80077e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80077e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077ea:	4640      	mov	r0, r8
 80077ec:	4649      	mov	r1, r9
 80077ee:	f7f8 ffa7 	bl	8000740 <__aeabi_ddiv>
 80077f2:	f7f9 f92b 	bl	8000a4c <__aeabi_d2iz>
 80077f6:	4604      	mov	r4, r0
 80077f8:	f7f8 fe0e 	bl	8000418 <__aeabi_i2d>
 80077fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007800:	f7f8 fe74 	bl	80004ec <__aeabi_dmul>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4640      	mov	r0, r8
 800780a:	4649      	mov	r1, r9
 800780c:	f7f8 fcb6 	bl	800017c <__aeabi_dsub>
 8007810:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007814:	f807 6b01 	strb.w	r6, [r7], #1
 8007818:	9e03      	ldr	r6, [sp, #12]
 800781a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800781e:	1bbe      	subs	r6, r7, r6
 8007820:	45b4      	cmp	ip, r6
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	d136      	bne.n	8007896 <_dtoa_r+0x6fe>
 8007828:	f7f8 fcaa 	bl	8000180 <__adddf3>
 800782c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007830:	4680      	mov	r8, r0
 8007832:	4689      	mov	r9, r1
 8007834:	f7f9 f8ea 	bl	8000a0c <__aeabi_dcmpgt>
 8007838:	bb58      	cbnz	r0, 8007892 <_dtoa_r+0x6fa>
 800783a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800783e:	4640      	mov	r0, r8
 8007840:	4649      	mov	r1, r9
 8007842:	f7f9 f8bb 	bl	80009bc <__aeabi_dcmpeq>
 8007846:	b108      	cbz	r0, 800784c <_dtoa_r+0x6b4>
 8007848:	07e3      	lsls	r3, r4, #31
 800784a:	d422      	bmi.n	8007892 <_dtoa_r+0x6fa>
 800784c:	4651      	mov	r1, sl
 800784e:	4628      	mov	r0, r5
 8007850:	f000 fbc2 	bl	8007fd8 <_Bfree>
 8007854:	2300      	movs	r3, #0
 8007856:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007858:	703b      	strb	r3, [r7, #0]
 800785a:	f10b 0301 	add.w	r3, fp, #1
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007862:	2b00      	cmp	r3, #0
 8007864:	f43f ace6 	beq.w	8007234 <_dtoa_r+0x9c>
 8007868:	601f      	str	r7, [r3, #0]
 800786a:	e4e3      	b.n	8007234 <_dtoa_r+0x9c>
 800786c:	4627      	mov	r7, r4
 800786e:	463b      	mov	r3, r7
 8007870:	461f      	mov	r7, r3
 8007872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007876:	2a39      	cmp	r2, #57	; 0x39
 8007878:	d107      	bne.n	800788a <_dtoa_r+0x6f2>
 800787a:	9a03      	ldr	r2, [sp, #12]
 800787c:	429a      	cmp	r2, r3
 800787e:	d1f7      	bne.n	8007870 <_dtoa_r+0x6d8>
 8007880:	2230      	movs	r2, #48	; 0x30
 8007882:	9903      	ldr	r1, [sp, #12]
 8007884:	f108 0801 	add.w	r8, r8, #1
 8007888:	700a      	strb	r2, [r1, #0]
 800788a:	781a      	ldrb	r2, [r3, #0]
 800788c:	3201      	adds	r2, #1
 800788e:	701a      	strb	r2, [r3, #0]
 8007890:	e79e      	b.n	80077d0 <_dtoa_r+0x638>
 8007892:	46d8      	mov	r8, fp
 8007894:	e7eb      	b.n	800786e <_dtoa_r+0x6d6>
 8007896:	2200      	movs	r2, #0
 8007898:	4b6d      	ldr	r3, [pc, #436]	; (8007a50 <_dtoa_r+0x8b8>)
 800789a:	f7f8 fe27 	bl	80004ec <__aeabi_dmul>
 800789e:	2200      	movs	r2, #0
 80078a0:	2300      	movs	r3, #0
 80078a2:	4680      	mov	r8, r0
 80078a4:	4689      	mov	r9, r1
 80078a6:	f7f9 f889 	bl	80009bc <__aeabi_dcmpeq>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d09b      	beq.n	80077e6 <_dtoa_r+0x64e>
 80078ae:	e7cd      	b.n	800784c <_dtoa_r+0x6b4>
 80078b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078b2:	2a00      	cmp	r2, #0
 80078b4:	f000 80c4 	beq.w	8007a40 <_dtoa_r+0x8a8>
 80078b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80078ba:	2a01      	cmp	r2, #1
 80078bc:	f300 80a8 	bgt.w	8007a10 <_dtoa_r+0x878>
 80078c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078c2:	2a00      	cmp	r2, #0
 80078c4:	f000 80a0 	beq.w	8007a08 <_dtoa_r+0x870>
 80078c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078cc:	464f      	mov	r7, r9
 80078ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078d2:	2101      	movs	r1, #1
 80078d4:	441a      	add	r2, r3
 80078d6:	4628      	mov	r0, r5
 80078d8:	4499      	add	r9, r3
 80078da:	9209      	str	r2, [sp, #36]	; 0x24
 80078dc:	f000 fc7c 	bl	80081d8 <__i2b>
 80078e0:	4606      	mov	r6, r0
 80078e2:	b15f      	cbz	r7, 80078fc <_dtoa_r+0x764>
 80078e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	dd08      	ble.n	80078fc <_dtoa_r+0x764>
 80078ea:	42bb      	cmp	r3, r7
 80078ec:	bfa8      	it	ge
 80078ee:	463b      	movge	r3, r7
 80078f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078f2:	eba9 0903 	sub.w	r9, r9, r3
 80078f6:	1aff      	subs	r7, r7, r3
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	9309      	str	r3, [sp, #36]	; 0x24
 80078fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078fe:	b1f3      	cbz	r3, 800793e <_dtoa_r+0x7a6>
 8007900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80a0 	beq.w	8007a48 <_dtoa_r+0x8b0>
 8007908:	2c00      	cmp	r4, #0
 800790a:	dd10      	ble.n	800792e <_dtoa_r+0x796>
 800790c:	4631      	mov	r1, r6
 800790e:	4622      	mov	r2, r4
 8007910:	4628      	mov	r0, r5
 8007912:	f000 fd1f 	bl	8008354 <__pow5mult>
 8007916:	4652      	mov	r2, sl
 8007918:	4601      	mov	r1, r0
 800791a:	4606      	mov	r6, r0
 800791c:	4628      	mov	r0, r5
 800791e:	f000 fc71 	bl	8008204 <__multiply>
 8007922:	4680      	mov	r8, r0
 8007924:	4651      	mov	r1, sl
 8007926:	4628      	mov	r0, r5
 8007928:	f000 fb56 	bl	8007fd8 <_Bfree>
 800792c:	46c2      	mov	sl, r8
 800792e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007930:	1b1a      	subs	r2, r3, r4
 8007932:	d004      	beq.n	800793e <_dtoa_r+0x7a6>
 8007934:	4651      	mov	r1, sl
 8007936:	4628      	mov	r0, r5
 8007938:	f000 fd0c 	bl	8008354 <__pow5mult>
 800793c:	4682      	mov	sl, r0
 800793e:	2101      	movs	r1, #1
 8007940:	4628      	mov	r0, r5
 8007942:	f000 fc49 	bl	80081d8 <__i2b>
 8007946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007948:	4604      	mov	r4, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	f340 8082 	ble.w	8007a54 <_dtoa_r+0x8bc>
 8007950:	461a      	mov	r2, r3
 8007952:	4601      	mov	r1, r0
 8007954:	4628      	mov	r0, r5
 8007956:	f000 fcfd 	bl	8008354 <__pow5mult>
 800795a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800795c:	4604      	mov	r4, r0
 800795e:	2b01      	cmp	r3, #1
 8007960:	dd7b      	ble.n	8007a5a <_dtoa_r+0x8c2>
 8007962:	f04f 0800 	mov.w	r8, #0
 8007966:	6923      	ldr	r3, [r4, #16]
 8007968:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800796c:	6918      	ldr	r0, [r3, #16]
 800796e:	f000 fbe5 	bl	800813c <__hi0bits>
 8007972:	f1c0 0020 	rsb	r0, r0, #32
 8007976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007978:	4418      	add	r0, r3
 800797a:	f010 001f 	ands.w	r0, r0, #31
 800797e:	f000 8092 	beq.w	8007aa6 <_dtoa_r+0x90e>
 8007982:	f1c0 0320 	rsb	r3, r0, #32
 8007986:	2b04      	cmp	r3, #4
 8007988:	f340 8085 	ble.w	8007a96 <_dtoa_r+0x8fe>
 800798c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800798e:	f1c0 001c 	rsb	r0, r0, #28
 8007992:	4403      	add	r3, r0
 8007994:	4481      	add	r9, r0
 8007996:	4407      	add	r7, r0
 8007998:	9309      	str	r3, [sp, #36]	; 0x24
 800799a:	f1b9 0f00 	cmp.w	r9, #0
 800799e:	dd05      	ble.n	80079ac <_dtoa_r+0x814>
 80079a0:	4651      	mov	r1, sl
 80079a2:	464a      	mov	r2, r9
 80079a4:	4628      	mov	r0, r5
 80079a6:	f000 fd2f 	bl	8008408 <__lshift>
 80079aa:	4682      	mov	sl, r0
 80079ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	dd05      	ble.n	80079be <_dtoa_r+0x826>
 80079b2:	4621      	mov	r1, r4
 80079b4:	461a      	mov	r2, r3
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 fd26 	bl	8008408 <__lshift>
 80079bc:	4604      	mov	r4, r0
 80079be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d072      	beq.n	8007aaa <_dtoa_r+0x912>
 80079c4:	4621      	mov	r1, r4
 80079c6:	4650      	mov	r0, sl
 80079c8:	f000 fd8a 	bl	80084e0 <__mcmp>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	da6c      	bge.n	8007aaa <_dtoa_r+0x912>
 80079d0:	2300      	movs	r3, #0
 80079d2:	4651      	mov	r1, sl
 80079d4:	220a      	movs	r2, #10
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 fb20 	bl	800801c <__multadd>
 80079dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079de:	4682      	mov	sl, r0
 80079e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 81ac 	beq.w	8007d42 <_dtoa_r+0xbaa>
 80079ea:	2300      	movs	r3, #0
 80079ec:	4631      	mov	r1, r6
 80079ee:	220a      	movs	r2, #10
 80079f0:	4628      	mov	r0, r5
 80079f2:	f000 fb13 	bl	800801c <__multadd>
 80079f6:	9b06      	ldr	r3, [sp, #24]
 80079f8:	4606      	mov	r6, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f300 8093 	bgt.w	8007b26 <_dtoa_r+0x98e>
 8007a00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	dc59      	bgt.n	8007aba <_dtoa_r+0x922>
 8007a06:	e08e      	b.n	8007b26 <_dtoa_r+0x98e>
 8007a08:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a0e:	e75d      	b.n	80078cc <_dtoa_r+0x734>
 8007a10:	9b08      	ldr	r3, [sp, #32]
 8007a12:	1e5c      	subs	r4, r3, #1
 8007a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a16:	42a3      	cmp	r3, r4
 8007a18:	bfbf      	itttt	lt
 8007a1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a1c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007a1e:	1ae3      	sublt	r3, r4, r3
 8007a20:	18d2      	addlt	r2, r2, r3
 8007a22:	bfa8      	it	ge
 8007a24:	1b1c      	subge	r4, r3, r4
 8007a26:	9b08      	ldr	r3, [sp, #32]
 8007a28:	bfbe      	ittt	lt
 8007a2a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007a2c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007a2e:	2400      	movlt	r4, #0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bfb5      	itete	lt
 8007a34:	eba9 0703 	sublt.w	r7, r9, r3
 8007a38:	464f      	movge	r7, r9
 8007a3a:	2300      	movlt	r3, #0
 8007a3c:	9b08      	ldrge	r3, [sp, #32]
 8007a3e:	e747      	b.n	80078d0 <_dtoa_r+0x738>
 8007a40:	464f      	mov	r7, r9
 8007a42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007a46:	e74c      	b.n	80078e2 <_dtoa_r+0x74a>
 8007a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a4a:	e773      	b.n	8007934 <_dtoa_r+0x79c>
 8007a4c:	3fe00000 	.word	0x3fe00000
 8007a50:	40240000 	.word	0x40240000
 8007a54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	dc18      	bgt.n	8007a8c <_dtoa_r+0x8f4>
 8007a5a:	9b04      	ldr	r3, [sp, #16]
 8007a5c:	b9b3      	cbnz	r3, 8007a8c <_dtoa_r+0x8f4>
 8007a5e:	9b05      	ldr	r3, [sp, #20]
 8007a60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a64:	b993      	cbnz	r3, 8007a8c <_dtoa_r+0x8f4>
 8007a66:	9b05      	ldr	r3, [sp, #20]
 8007a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a6c:	0d1b      	lsrs	r3, r3, #20
 8007a6e:	051b      	lsls	r3, r3, #20
 8007a70:	b17b      	cbz	r3, 8007a92 <_dtoa_r+0x8fa>
 8007a72:	f04f 0801 	mov.w	r8, #1
 8007a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a78:	f109 0901 	add.w	r9, r9, #1
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f47f af6f 	bne.w	8007966 <_dtoa_r+0x7ce>
 8007a88:	2001      	movs	r0, #1
 8007a8a:	e774      	b.n	8007976 <_dtoa_r+0x7de>
 8007a8c:	f04f 0800 	mov.w	r8, #0
 8007a90:	e7f6      	b.n	8007a80 <_dtoa_r+0x8e8>
 8007a92:	4698      	mov	r8, r3
 8007a94:	e7f4      	b.n	8007a80 <_dtoa_r+0x8e8>
 8007a96:	d080      	beq.n	800799a <_dtoa_r+0x802>
 8007a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a9a:	331c      	adds	r3, #28
 8007a9c:	441a      	add	r2, r3
 8007a9e:	4499      	add	r9, r3
 8007aa0:	441f      	add	r7, r3
 8007aa2:	9209      	str	r2, [sp, #36]	; 0x24
 8007aa4:	e779      	b.n	800799a <_dtoa_r+0x802>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	e7f6      	b.n	8007a98 <_dtoa_r+0x900>
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dc34      	bgt.n	8007b1a <_dtoa_r+0x982>
 8007ab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	dd31      	ble.n	8007b1a <_dtoa_r+0x982>
 8007ab6:	9b08      	ldr	r3, [sp, #32]
 8007ab8:	9306      	str	r3, [sp, #24]
 8007aba:	9b06      	ldr	r3, [sp, #24]
 8007abc:	b963      	cbnz	r3, 8007ad8 <_dtoa_r+0x940>
 8007abe:	4621      	mov	r1, r4
 8007ac0:	2205      	movs	r2, #5
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f000 faaa 	bl	800801c <__multadd>
 8007ac8:	4601      	mov	r1, r0
 8007aca:	4604      	mov	r4, r0
 8007acc:	4650      	mov	r0, sl
 8007ace:	f000 fd07 	bl	80084e0 <__mcmp>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	f73f adbf 	bgt.w	8007656 <_dtoa_r+0x4be>
 8007ad8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ada:	9f03      	ldr	r7, [sp, #12]
 8007adc:	ea6f 0b03 	mvn.w	fp, r3
 8007ae0:	f04f 0800 	mov.w	r8, #0
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f000 fa76 	bl	8007fd8 <_Bfree>
 8007aec:	2e00      	cmp	r6, #0
 8007aee:	f43f aead 	beq.w	800784c <_dtoa_r+0x6b4>
 8007af2:	f1b8 0f00 	cmp.w	r8, #0
 8007af6:	d005      	beq.n	8007b04 <_dtoa_r+0x96c>
 8007af8:	45b0      	cmp	r8, r6
 8007afa:	d003      	beq.n	8007b04 <_dtoa_r+0x96c>
 8007afc:	4641      	mov	r1, r8
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 fa6a 	bl	8007fd8 <_Bfree>
 8007b04:	4631      	mov	r1, r6
 8007b06:	4628      	mov	r0, r5
 8007b08:	f000 fa66 	bl	8007fd8 <_Bfree>
 8007b0c:	e69e      	b.n	800784c <_dtoa_r+0x6b4>
 8007b0e:	2400      	movs	r4, #0
 8007b10:	4626      	mov	r6, r4
 8007b12:	e7e1      	b.n	8007ad8 <_dtoa_r+0x940>
 8007b14:	46c3      	mov	fp, r8
 8007b16:	4626      	mov	r6, r4
 8007b18:	e59d      	b.n	8007656 <_dtoa_r+0x4be>
 8007b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 80c8 	beq.w	8007cb2 <_dtoa_r+0xb1a>
 8007b22:	9b08      	ldr	r3, [sp, #32]
 8007b24:	9306      	str	r3, [sp, #24]
 8007b26:	2f00      	cmp	r7, #0
 8007b28:	dd05      	ble.n	8007b36 <_dtoa_r+0x99e>
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	463a      	mov	r2, r7
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f000 fc6a 	bl	8008408 <__lshift>
 8007b34:	4606      	mov	r6, r0
 8007b36:	f1b8 0f00 	cmp.w	r8, #0
 8007b3a:	d05b      	beq.n	8007bf4 <_dtoa_r+0xa5c>
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	6871      	ldr	r1, [r6, #4]
 8007b40:	f000 fa0a 	bl	8007f58 <_Balloc>
 8007b44:	4607      	mov	r7, r0
 8007b46:	b928      	cbnz	r0, 8007b54 <_dtoa_r+0x9bc>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007b4e:	4b81      	ldr	r3, [pc, #516]	; (8007d54 <_dtoa_r+0xbbc>)
 8007b50:	f7ff bb36 	b.w	80071c0 <_dtoa_r+0x28>
 8007b54:	6932      	ldr	r2, [r6, #16]
 8007b56:	f106 010c 	add.w	r1, r6, #12
 8007b5a:	3202      	adds	r2, #2
 8007b5c:	0092      	lsls	r2, r2, #2
 8007b5e:	300c      	adds	r0, #12
 8007b60:	f001 ff84 	bl	8009a6c <memcpy>
 8007b64:	2201      	movs	r2, #1
 8007b66:	4639      	mov	r1, r7
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f000 fc4d 	bl	8008408 <__lshift>
 8007b6e:	46b0      	mov	r8, r6
 8007b70:	4606      	mov	r6, r0
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	9a03      	ldr	r2, [sp, #12]
 8007b76:	3301      	adds	r3, #1
 8007b78:	9308      	str	r3, [sp, #32]
 8007b7a:	9b06      	ldr	r3, [sp, #24]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b80:	9b04      	ldr	r3, [sp, #16]
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	930a      	str	r3, [sp, #40]	; 0x28
 8007b88:	9b08      	ldr	r3, [sp, #32]
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	4650      	mov	r0, sl
 8007b90:	9304      	str	r3, [sp, #16]
 8007b92:	f7ff fa75 	bl	8007080 <quorem>
 8007b96:	4641      	mov	r1, r8
 8007b98:	9006      	str	r0, [sp, #24]
 8007b9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b9e:	4650      	mov	r0, sl
 8007ba0:	f000 fc9e 	bl	80084e0 <__mcmp>
 8007ba4:	4632      	mov	r2, r6
 8007ba6:	9009      	str	r0, [sp, #36]	; 0x24
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4628      	mov	r0, r5
 8007bac:	f000 fcb4 	bl	8008518 <__mdiff>
 8007bb0:	68c2      	ldr	r2, [r0, #12]
 8007bb2:	4607      	mov	r7, r0
 8007bb4:	bb02      	cbnz	r2, 8007bf8 <_dtoa_r+0xa60>
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	4650      	mov	r0, sl
 8007bba:	f000 fc91 	bl	80084e0 <__mcmp>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	920c      	str	r2, [sp, #48]	; 0x30
 8007bc6:	f000 fa07 	bl	8007fd8 <_Bfree>
 8007bca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bce:	9f08      	ldr	r7, [sp, #32]
 8007bd0:	ea43 0102 	orr.w	r1, r3, r2
 8007bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd6:	4319      	orrs	r1, r3
 8007bd8:	d110      	bne.n	8007bfc <_dtoa_r+0xa64>
 8007bda:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bde:	d029      	beq.n	8007c34 <_dtoa_r+0xa9c>
 8007be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	dd02      	ble.n	8007bec <_dtoa_r+0xa54>
 8007be6:	9b06      	ldr	r3, [sp, #24]
 8007be8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	f883 9000 	strb.w	r9, [r3]
 8007bf2:	e777      	b.n	8007ae4 <_dtoa_r+0x94c>
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	e7ba      	b.n	8007b6e <_dtoa_r+0x9d6>
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	e7e1      	b.n	8007bc0 <_dtoa_r+0xa28>
 8007bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	db04      	blt.n	8007c0c <_dtoa_r+0xa74>
 8007c02:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007c04:	430b      	orrs	r3, r1
 8007c06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	d120      	bne.n	8007c4e <_dtoa_r+0xab6>
 8007c0c:	2a00      	cmp	r2, #0
 8007c0e:	dded      	ble.n	8007bec <_dtoa_r+0xa54>
 8007c10:	4651      	mov	r1, sl
 8007c12:	2201      	movs	r2, #1
 8007c14:	4628      	mov	r0, r5
 8007c16:	f000 fbf7 	bl	8008408 <__lshift>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4682      	mov	sl, r0
 8007c1e:	f000 fc5f 	bl	80084e0 <__mcmp>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	dc03      	bgt.n	8007c2e <_dtoa_r+0xa96>
 8007c26:	d1e1      	bne.n	8007bec <_dtoa_r+0xa54>
 8007c28:	f019 0f01 	tst.w	r9, #1
 8007c2c:	d0de      	beq.n	8007bec <_dtoa_r+0xa54>
 8007c2e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c32:	d1d8      	bne.n	8007be6 <_dtoa_r+0xa4e>
 8007c34:	2339      	movs	r3, #57	; 0x39
 8007c36:	9a04      	ldr	r2, [sp, #16]
 8007c38:	7013      	strb	r3, [r2, #0]
 8007c3a:	463b      	mov	r3, r7
 8007c3c:	461f      	mov	r7, r3
 8007c3e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	2a39      	cmp	r2, #57	; 0x39
 8007c46:	d06b      	beq.n	8007d20 <_dtoa_r+0xb88>
 8007c48:	3201      	adds	r2, #1
 8007c4a:	701a      	strb	r2, [r3, #0]
 8007c4c:	e74a      	b.n	8007ae4 <_dtoa_r+0x94c>
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	dd07      	ble.n	8007c62 <_dtoa_r+0xaca>
 8007c52:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c56:	d0ed      	beq.n	8007c34 <_dtoa_r+0xa9c>
 8007c58:	9a04      	ldr	r2, [sp, #16]
 8007c5a:	f109 0301 	add.w	r3, r9, #1
 8007c5e:	7013      	strb	r3, [r2, #0]
 8007c60:	e740      	b.n	8007ae4 <_dtoa_r+0x94c>
 8007c62:	9b08      	ldr	r3, [sp, #32]
 8007c64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c66:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d042      	beq.n	8007cf4 <_dtoa_r+0xb5c>
 8007c6e:	4651      	mov	r1, sl
 8007c70:	2300      	movs	r3, #0
 8007c72:	220a      	movs	r2, #10
 8007c74:	4628      	mov	r0, r5
 8007c76:	f000 f9d1 	bl	800801c <__multadd>
 8007c7a:	45b0      	cmp	r8, r6
 8007c7c:	4682      	mov	sl, r0
 8007c7e:	f04f 0300 	mov.w	r3, #0
 8007c82:	f04f 020a 	mov.w	r2, #10
 8007c86:	4641      	mov	r1, r8
 8007c88:	4628      	mov	r0, r5
 8007c8a:	d107      	bne.n	8007c9c <_dtoa_r+0xb04>
 8007c8c:	f000 f9c6 	bl	800801c <__multadd>
 8007c90:	4680      	mov	r8, r0
 8007c92:	4606      	mov	r6, r0
 8007c94:	9b08      	ldr	r3, [sp, #32]
 8007c96:	3301      	adds	r3, #1
 8007c98:	9308      	str	r3, [sp, #32]
 8007c9a:	e775      	b.n	8007b88 <_dtoa_r+0x9f0>
 8007c9c:	f000 f9be 	bl	800801c <__multadd>
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4680      	mov	r8, r0
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	220a      	movs	r2, #10
 8007ca8:	4628      	mov	r0, r5
 8007caa:	f000 f9b7 	bl	800801c <__multadd>
 8007cae:	4606      	mov	r6, r0
 8007cb0:	e7f0      	b.n	8007c94 <_dtoa_r+0xafc>
 8007cb2:	9b08      	ldr	r3, [sp, #32]
 8007cb4:	9306      	str	r3, [sp, #24]
 8007cb6:	9f03      	ldr	r7, [sp, #12]
 8007cb8:	4621      	mov	r1, r4
 8007cba:	4650      	mov	r0, sl
 8007cbc:	f7ff f9e0 	bl	8007080 <quorem>
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007cc6:	f807 9b01 	strb.w	r9, [r7], #1
 8007cca:	1afa      	subs	r2, r7, r3
 8007ccc:	9b06      	ldr	r3, [sp, #24]
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	dd07      	ble.n	8007ce2 <_dtoa_r+0xb4a>
 8007cd2:	4651      	mov	r1, sl
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	220a      	movs	r2, #10
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 f99f 	bl	800801c <__multadd>
 8007cde:	4682      	mov	sl, r0
 8007ce0:	e7ea      	b.n	8007cb8 <_dtoa_r+0xb20>
 8007ce2:	9b06      	ldr	r3, [sp, #24]
 8007ce4:	f04f 0800 	mov.w	r8, #0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	bfcc      	ite	gt
 8007cec:	461f      	movgt	r7, r3
 8007cee:	2701      	movle	r7, #1
 8007cf0:	9b03      	ldr	r3, [sp, #12]
 8007cf2:	441f      	add	r7, r3
 8007cf4:	4651      	mov	r1, sl
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f000 fb85 	bl	8008408 <__lshift>
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4682      	mov	sl, r0
 8007d02:	f000 fbed 	bl	80084e0 <__mcmp>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	dc97      	bgt.n	8007c3a <_dtoa_r+0xaa2>
 8007d0a:	d102      	bne.n	8007d12 <_dtoa_r+0xb7a>
 8007d0c:	f019 0f01 	tst.w	r9, #1
 8007d10:	d193      	bne.n	8007c3a <_dtoa_r+0xaa2>
 8007d12:	463b      	mov	r3, r7
 8007d14:	461f      	mov	r7, r3
 8007d16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d1a:	2a30      	cmp	r2, #48	; 0x30
 8007d1c:	d0fa      	beq.n	8007d14 <_dtoa_r+0xb7c>
 8007d1e:	e6e1      	b.n	8007ae4 <_dtoa_r+0x94c>
 8007d20:	9a03      	ldr	r2, [sp, #12]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d18a      	bne.n	8007c3c <_dtoa_r+0xaa4>
 8007d26:	2331      	movs	r3, #49	; 0x31
 8007d28:	f10b 0b01 	add.w	fp, fp, #1
 8007d2c:	e797      	b.n	8007c5e <_dtoa_r+0xac6>
 8007d2e:	4b0a      	ldr	r3, [pc, #40]	; (8007d58 <_dtoa_r+0xbc0>)
 8007d30:	f7ff ba9f 	b.w	8007272 <_dtoa_r+0xda>
 8007d34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f47f aa77 	bne.w	800722a <_dtoa_r+0x92>
 8007d3c:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <_dtoa_r+0xbc4>)
 8007d3e:	f7ff ba98 	b.w	8007272 <_dtoa_r+0xda>
 8007d42:	9b06      	ldr	r3, [sp, #24]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dcb6      	bgt.n	8007cb6 <_dtoa_r+0xb1e>
 8007d48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	f73f aeb5 	bgt.w	8007aba <_dtoa_r+0x922>
 8007d50:	e7b1      	b.n	8007cb6 <_dtoa_r+0xb1e>
 8007d52:	bf00      	nop
 8007d54:	0800aa6d 	.word	0x0800aa6d
 8007d58:	0800a932 	.word	0x0800a932
 8007d5c:	0800aa08 	.word	0x0800aa08

08007d60 <_free_r>:
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4605      	mov	r5, r0
 8007d64:	2900      	cmp	r1, #0
 8007d66:	d040      	beq.n	8007dea <_free_r+0x8a>
 8007d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d6c:	1f0c      	subs	r4, r1, #4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	bfb8      	it	lt
 8007d72:	18e4      	addlt	r4, r4, r3
 8007d74:	f000 f8e4 	bl	8007f40 <__malloc_lock>
 8007d78:	4a1c      	ldr	r2, [pc, #112]	; (8007dec <_free_r+0x8c>)
 8007d7a:	6813      	ldr	r3, [r2, #0]
 8007d7c:	b933      	cbnz	r3, 8007d8c <_free_r+0x2c>
 8007d7e:	6063      	str	r3, [r4, #4]
 8007d80:	6014      	str	r4, [r2, #0]
 8007d82:	4628      	mov	r0, r5
 8007d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d88:	f000 b8e0 	b.w	8007f4c <__malloc_unlock>
 8007d8c:	42a3      	cmp	r3, r4
 8007d8e:	d908      	bls.n	8007da2 <_free_r+0x42>
 8007d90:	6820      	ldr	r0, [r4, #0]
 8007d92:	1821      	adds	r1, r4, r0
 8007d94:	428b      	cmp	r3, r1
 8007d96:	bf01      	itttt	eq
 8007d98:	6819      	ldreq	r1, [r3, #0]
 8007d9a:	685b      	ldreq	r3, [r3, #4]
 8007d9c:	1809      	addeq	r1, r1, r0
 8007d9e:	6021      	streq	r1, [r4, #0]
 8007da0:	e7ed      	b.n	8007d7e <_free_r+0x1e>
 8007da2:	461a      	mov	r2, r3
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	b10b      	cbz	r3, 8007dac <_free_r+0x4c>
 8007da8:	42a3      	cmp	r3, r4
 8007daa:	d9fa      	bls.n	8007da2 <_free_r+0x42>
 8007dac:	6811      	ldr	r1, [r2, #0]
 8007dae:	1850      	adds	r0, r2, r1
 8007db0:	42a0      	cmp	r0, r4
 8007db2:	d10b      	bne.n	8007dcc <_free_r+0x6c>
 8007db4:	6820      	ldr	r0, [r4, #0]
 8007db6:	4401      	add	r1, r0
 8007db8:	1850      	adds	r0, r2, r1
 8007dba:	4283      	cmp	r3, r0
 8007dbc:	6011      	str	r1, [r2, #0]
 8007dbe:	d1e0      	bne.n	8007d82 <_free_r+0x22>
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	4408      	add	r0, r1
 8007dc6:	6010      	str	r0, [r2, #0]
 8007dc8:	6053      	str	r3, [r2, #4]
 8007dca:	e7da      	b.n	8007d82 <_free_r+0x22>
 8007dcc:	d902      	bls.n	8007dd4 <_free_r+0x74>
 8007dce:	230c      	movs	r3, #12
 8007dd0:	602b      	str	r3, [r5, #0]
 8007dd2:	e7d6      	b.n	8007d82 <_free_r+0x22>
 8007dd4:	6820      	ldr	r0, [r4, #0]
 8007dd6:	1821      	adds	r1, r4, r0
 8007dd8:	428b      	cmp	r3, r1
 8007dda:	bf01      	itttt	eq
 8007ddc:	6819      	ldreq	r1, [r3, #0]
 8007dde:	685b      	ldreq	r3, [r3, #4]
 8007de0:	1809      	addeq	r1, r1, r0
 8007de2:	6021      	streq	r1, [r4, #0]
 8007de4:	6063      	str	r3, [r4, #4]
 8007de6:	6054      	str	r4, [r2, #4]
 8007de8:	e7cb      	b.n	8007d82 <_free_r+0x22>
 8007dea:	bd38      	pop	{r3, r4, r5, pc}
 8007dec:	20000604 	.word	0x20000604

08007df0 <malloc>:
 8007df0:	4b02      	ldr	r3, [pc, #8]	; (8007dfc <malloc+0xc>)
 8007df2:	4601      	mov	r1, r0
 8007df4:	6818      	ldr	r0, [r3, #0]
 8007df6:	f000 b823 	b.w	8007e40 <_malloc_r>
 8007dfa:	bf00      	nop
 8007dfc:	2000008c 	.word	0x2000008c

08007e00 <sbrk_aligned>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	4e0e      	ldr	r6, [pc, #56]	; (8007e3c <sbrk_aligned+0x3c>)
 8007e04:	460c      	mov	r4, r1
 8007e06:	6831      	ldr	r1, [r6, #0]
 8007e08:	4605      	mov	r5, r0
 8007e0a:	b911      	cbnz	r1, 8007e12 <sbrk_aligned+0x12>
 8007e0c:	f001 fe1e 	bl	8009a4c <_sbrk_r>
 8007e10:	6030      	str	r0, [r6, #0]
 8007e12:	4621      	mov	r1, r4
 8007e14:	4628      	mov	r0, r5
 8007e16:	f001 fe19 	bl	8009a4c <_sbrk_r>
 8007e1a:	1c43      	adds	r3, r0, #1
 8007e1c:	d00a      	beq.n	8007e34 <sbrk_aligned+0x34>
 8007e1e:	1cc4      	adds	r4, r0, #3
 8007e20:	f024 0403 	bic.w	r4, r4, #3
 8007e24:	42a0      	cmp	r0, r4
 8007e26:	d007      	beq.n	8007e38 <sbrk_aligned+0x38>
 8007e28:	1a21      	subs	r1, r4, r0
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f001 fe0e 	bl	8009a4c <_sbrk_r>
 8007e30:	3001      	adds	r0, #1
 8007e32:	d101      	bne.n	8007e38 <sbrk_aligned+0x38>
 8007e34:	f04f 34ff 	mov.w	r4, #4294967295
 8007e38:	4620      	mov	r0, r4
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	20000608 	.word	0x20000608

08007e40 <_malloc_r>:
 8007e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e44:	1ccd      	adds	r5, r1, #3
 8007e46:	f025 0503 	bic.w	r5, r5, #3
 8007e4a:	3508      	adds	r5, #8
 8007e4c:	2d0c      	cmp	r5, #12
 8007e4e:	bf38      	it	cc
 8007e50:	250c      	movcc	r5, #12
 8007e52:	2d00      	cmp	r5, #0
 8007e54:	4607      	mov	r7, r0
 8007e56:	db01      	blt.n	8007e5c <_malloc_r+0x1c>
 8007e58:	42a9      	cmp	r1, r5
 8007e5a:	d905      	bls.n	8007e68 <_malloc_r+0x28>
 8007e5c:	230c      	movs	r3, #12
 8007e5e:	2600      	movs	r6, #0
 8007e60:	603b      	str	r3, [r7, #0]
 8007e62:	4630      	mov	r0, r6
 8007e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f3c <_malloc_r+0xfc>
 8007e6c:	f000 f868 	bl	8007f40 <__malloc_lock>
 8007e70:	f8d8 3000 	ldr.w	r3, [r8]
 8007e74:	461c      	mov	r4, r3
 8007e76:	bb5c      	cbnz	r4, 8007ed0 <_malloc_r+0x90>
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	f7ff ffc0 	bl	8007e00 <sbrk_aligned>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	4604      	mov	r4, r0
 8007e84:	d155      	bne.n	8007f32 <_malloc_r+0xf2>
 8007e86:	f8d8 4000 	ldr.w	r4, [r8]
 8007e8a:	4626      	mov	r6, r4
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	d145      	bne.n	8007f1c <_malloc_r+0xdc>
 8007e90:	2c00      	cmp	r4, #0
 8007e92:	d048      	beq.n	8007f26 <_malloc_r+0xe6>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	4631      	mov	r1, r6
 8007e98:	4638      	mov	r0, r7
 8007e9a:	eb04 0903 	add.w	r9, r4, r3
 8007e9e:	f001 fdd5 	bl	8009a4c <_sbrk_r>
 8007ea2:	4581      	cmp	r9, r0
 8007ea4:	d13f      	bne.n	8007f26 <_malloc_r+0xe6>
 8007ea6:	6821      	ldr	r1, [r4, #0]
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	1a6d      	subs	r5, r5, r1
 8007eac:	4629      	mov	r1, r5
 8007eae:	f7ff ffa7 	bl	8007e00 <sbrk_aligned>
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d037      	beq.n	8007f26 <_malloc_r+0xe6>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	442b      	add	r3, r5
 8007eba:	6023      	str	r3, [r4, #0]
 8007ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d038      	beq.n	8007f36 <_malloc_r+0xf6>
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	42a2      	cmp	r2, r4
 8007ec8:	d12b      	bne.n	8007f22 <_malloc_r+0xe2>
 8007eca:	2200      	movs	r2, #0
 8007ecc:	605a      	str	r2, [r3, #4]
 8007ece:	e00f      	b.n	8007ef0 <_malloc_r+0xb0>
 8007ed0:	6822      	ldr	r2, [r4, #0]
 8007ed2:	1b52      	subs	r2, r2, r5
 8007ed4:	d41f      	bmi.n	8007f16 <_malloc_r+0xd6>
 8007ed6:	2a0b      	cmp	r2, #11
 8007ed8:	d917      	bls.n	8007f0a <_malloc_r+0xca>
 8007eda:	1961      	adds	r1, r4, r5
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	6025      	str	r5, [r4, #0]
 8007ee0:	bf18      	it	ne
 8007ee2:	6059      	strne	r1, [r3, #4]
 8007ee4:	6863      	ldr	r3, [r4, #4]
 8007ee6:	bf08      	it	eq
 8007ee8:	f8c8 1000 	streq.w	r1, [r8]
 8007eec:	5162      	str	r2, [r4, r5]
 8007eee:	604b      	str	r3, [r1, #4]
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	f104 060b 	add.w	r6, r4, #11
 8007ef6:	f000 f829 	bl	8007f4c <__malloc_unlock>
 8007efa:	f026 0607 	bic.w	r6, r6, #7
 8007efe:	1d23      	adds	r3, r4, #4
 8007f00:	1af2      	subs	r2, r6, r3
 8007f02:	d0ae      	beq.n	8007e62 <_malloc_r+0x22>
 8007f04:	1b9b      	subs	r3, r3, r6
 8007f06:	50a3      	str	r3, [r4, r2]
 8007f08:	e7ab      	b.n	8007e62 <_malloc_r+0x22>
 8007f0a:	42a3      	cmp	r3, r4
 8007f0c:	6862      	ldr	r2, [r4, #4]
 8007f0e:	d1dd      	bne.n	8007ecc <_malloc_r+0x8c>
 8007f10:	f8c8 2000 	str.w	r2, [r8]
 8007f14:	e7ec      	b.n	8007ef0 <_malloc_r+0xb0>
 8007f16:	4623      	mov	r3, r4
 8007f18:	6864      	ldr	r4, [r4, #4]
 8007f1a:	e7ac      	b.n	8007e76 <_malloc_r+0x36>
 8007f1c:	4634      	mov	r4, r6
 8007f1e:	6876      	ldr	r6, [r6, #4]
 8007f20:	e7b4      	b.n	8007e8c <_malloc_r+0x4c>
 8007f22:	4613      	mov	r3, r2
 8007f24:	e7cc      	b.n	8007ec0 <_malloc_r+0x80>
 8007f26:	230c      	movs	r3, #12
 8007f28:	4638      	mov	r0, r7
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	f000 f80e 	bl	8007f4c <__malloc_unlock>
 8007f30:	e797      	b.n	8007e62 <_malloc_r+0x22>
 8007f32:	6025      	str	r5, [r4, #0]
 8007f34:	e7dc      	b.n	8007ef0 <_malloc_r+0xb0>
 8007f36:	605b      	str	r3, [r3, #4]
 8007f38:	deff      	udf	#255	; 0xff
 8007f3a:	bf00      	nop
 8007f3c:	20000604 	.word	0x20000604

08007f40 <__malloc_lock>:
 8007f40:	4801      	ldr	r0, [pc, #4]	; (8007f48 <__malloc_lock+0x8>)
 8007f42:	f7ff b86b 	b.w	800701c <__retarget_lock_acquire_recursive>
 8007f46:	bf00      	nop
 8007f48:	20000600 	.word	0x20000600

08007f4c <__malloc_unlock>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	; (8007f54 <__malloc_unlock+0x8>)
 8007f4e:	f7ff b866 	b.w	800701e <__retarget_lock_release_recursive>
 8007f52:	bf00      	nop
 8007f54:	20000600 	.word	0x20000600

08007f58 <_Balloc>:
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	69c6      	ldr	r6, [r0, #28]
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	460d      	mov	r5, r1
 8007f60:	b976      	cbnz	r6, 8007f80 <_Balloc+0x28>
 8007f62:	2010      	movs	r0, #16
 8007f64:	f7ff ff44 	bl	8007df0 <malloc>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	61e0      	str	r0, [r4, #28]
 8007f6c:	b920      	cbnz	r0, 8007f78 <_Balloc+0x20>
 8007f6e:	216b      	movs	r1, #107	; 0x6b
 8007f70:	4b17      	ldr	r3, [pc, #92]	; (8007fd0 <_Balloc+0x78>)
 8007f72:	4818      	ldr	r0, [pc, #96]	; (8007fd4 <_Balloc+0x7c>)
 8007f74:	f7ff f866 	bl	8007044 <__assert_func>
 8007f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f7c:	6006      	str	r6, [r0, #0]
 8007f7e:	60c6      	str	r6, [r0, #12]
 8007f80:	69e6      	ldr	r6, [r4, #28]
 8007f82:	68f3      	ldr	r3, [r6, #12]
 8007f84:	b183      	cbz	r3, 8007fa8 <_Balloc+0x50>
 8007f86:	69e3      	ldr	r3, [r4, #28]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f8e:	b9b8      	cbnz	r0, 8007fc0 <_Balloc+0x68>
 8007f90:	2101      	movs	r1, #1
 8007f92:	fa01 f605 	lsl.w	r6, r1, r5
 8007f96:	1d72      	adds	r2, r6, #5
 8007f98:	4620      	mov	r0, r4
 8007f9a:	0092      	lsls	r2, r2, #2
 8007f9c:	f001 fd81 	bl	8009aa2 <_calloc_r>
 8007fa0:	b160      	cbz	r0, 8007fbc <_Balloc+0x64>
 8007fa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fa6:	e00e      	b.n	8007fc6 <_Balloc+0x6e>
 8007fa8:	2221      	movs	r2, #33	; 0x21
 8007faa:	2104      	movs	r1, #4
 8007fac:	4620      	mov	r0, r4
 8007fae:	f001 fd78 	bl	8009aa2 <_calloc_r>
 8007fb2:	69e3      	ldr	r3, [r4, #28]
 8007fb4:	60f0      	str	r0, [r6, #12]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e4      	bne.n	8007f86 <_Balloc+0x2e>
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
 8007fc0:	6802      	ldr	r2, [r0, #0]
 8007fc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fcc:	e7f7      	b.n	8007fbe <_Balloc+0x66>
 8007fce:	bf00      	nop
 8007fd0:	0800a95b 	.word	0x0800a95b
 8007fd4:	0800aa7e 	.word	0x0800aa7e

08007fd8 <_Bfree>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	69c6      	ldr	r6, [r0, #28]
 8007fdc:	4605      	mov	r5, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	b976      	cbnz	r6, 8008000 <_Bfree+0x28>
 8007fe2:	2010      	movs	r0, #16
 8007fe4:	f7ff ff04 	bl	8007df0 <malloc>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	61e8      	str	r0, [r5, #28]
 8007fec:	b920      	cbnz	r0, 8007ff8 <_Bfree+0x20>
 8007fee:	218f      	movs	r1, #143	; 0x8f
 8007ff0:	4b08      	ldr	r3, [pc, #32]	; (8008014 <_Bfree+0x3c>)
 8007ff2:	4809      	ldr	r0, [pc, #36]	; (8008018 <_Bfree+0x40>)
 8007ff4:	f7ff f826 	bl	8007044 <__assert_func>
 8007ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ffc:	6006      	str	r6, [r0, #0]
 8007ffe:	60c6      	str	r6, [r0, #12]
 8008000:	b13c      	cbz	r4, 8008012 <_Bfree+0x3a>
 8008002:	69eb      	ldr	r3, [r5, #28]
 8008004:	6862      	ldr	r2, [r4, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800800c:	6021      	str	r1, [r4, #0]
 800800e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	0800a95b 	.word	0x0800a95b
 8008018:	0800aa7e 	.word	0x0800aa7e

0800801c <__multadd>:
 800801c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008020:	4607      	mov	r7, r0
 8008022:	460c      	mov	r4, r1
 8008024:	461e      	mov	r6, r3
 8008026:	2000      	movs	r0, #0
 8008028:	690d      	ldr	r5, [r1, #16]
 800802a:	f101 0c14 	add.w	ip, r1, #20
 800802e:	f8dc 3000 	ldr.w	r3, [ip]
 8008032:	3001      	adds	r0, #1
 8008034:	b299      	uxth	r1, r3
 8008036:	fb02 6101 	mla	r1, r2, r1, r6
 800803a:	0c1e      	lsrs	r6, r3, #16
 800803c:	0c0b      	lsrs	r3, r1, #16
 800803e:	fb02 3306 	mla	r3, r2, r6, r3
 8008042:	b289      	uxth	r1, r1
 8008044:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008048:	4285      	cmp	r5, r0
 800804a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800804e:	f84c 1b04 	str.w	r1, [ip], #4
 8008052:	dcec      	bgt.n	800802e <__multadd+0x12>
 8008054:	b30e      	cbz	r6, 800809a <__multadd+0x7e>
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	42ab      	cmp	r3, r5
 800805a:	dc19      	bgt.n	8008090 <__multadd+0x74>
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	4638      	mov	r0, r7
 8008060:	3101      	adds	r1, #1
 8008062:	f7ff ff79 	bl	8007f58 <_Balloc>
 8008066:	4680      	mov	r8, r0
 8008068:	b928      	cbnz	r0, 8008076 <__multadd+0x5a>
 800806a:	4602      	mov	r2, r0
 800806c:	21ba      	movs	r1, #186	; 0xba
 800806e:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <__multadd+0x84>)
 8008070:	480c      	ldr	r0, [pc, #48]	; (80080a4 <__multadd+0x88>)
 8008072:	f7fe ffe7 	bl	8007044 <__assert_func>
 8008076:	6922      	ldr	r2, [r4, #16]
 8008078:	f104 010c 	add.w	r1, r4, #12
 800807c:	3202      	adds	r2, #2
 800807e:	0092      	lsls	r2, r2, #2
 8008080:	300c      	adds	r0, #12
 8008082:	f001 fcf3 	bl	8009a6c <memcpy>
 8008086:	4621      	mov	r1, r4
 8008088:	4638      	mov	r0, r7
 800808a:	f7ff ffa5 	bl	8007fd8 <_Bfree>
 800808e:	4644      	mov	r4, r8
 8008090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008094:	3501      	adds	r5, #1
 8008096:	615e      	str	r6, [r3, #20]
 8008098:	6125      	str	r5, [r4, #16]
 800809a:	4620      	mov	r0, r4
 800809c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a0:	0800aa6d 	.word	0x0800aa6d
 80080a4:	0800aa7e 	.word	0x0800aa7e

080080a8 <__s2b>:
 80080a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080ac:	4615      	mov	r5, r2
 80080ae:	2209      	movs	r2, #9
 80080b0:	461f      	mov	r7, r3
 80080b2:	3308      	adds	r3, #8
 80080b4:	460c      	mov	r4, r1
 80080b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80080ba:	4606      	mov	r6, r0
 80080bc:	2201      	movs	r2, #1
 80080be:	2100      	movs	r1, #0
 80080c0:	429a      	cmp	r2, r3
 80080c2:	db09      	blt.n	80080d8 <__s2b+0x30>
 80080c4:	4630      	mov	r0, r6
 80080c6:	f7ff ff47 	bl	8007f58 <_Balloc>
 80080ca:	b940      	cbnz	r0, 80080de <__s2b+0x36>
 80080cc:	4602      	mov	r2, r0
 80080ce:	21d3      	movs	r1, #211	; 0xd3
 80080d0:	4b18      	ldr	r3, [pc, #96]	; (8008134 <__s2b+0x8c>)
 80080d2:	4819      	ldr	r0, [pc, #100]	; (8008138 <__s2b+0x90>)
 80080d4:	f7fe ffb6 	bl	8007044 <__assert_func>
 80080d8:	0052      	lsls	r2, r2, #1
 80080da:	3101      	adds	r1, #1
 80080dc:	e7f0      	b.n	80080c0 <__s2b+0x18>
 80080de:	9b08      	ldr	r3, [sp, #32]
 80080e0:	2d09      	cmp	r5, #9
 80080e2:	6143      	str	r3, [r0, #20]
 80080e4:	f04f 0301 	mov.w	r3, #1
 80080e8:	6103      	str	r3, [r0, #16]
 80080ea:	dd16      	ble.n	800811a <__s2b+0x72>
 80080ec:	f104 0909 	add.w	r9, r4, #9
 80080f0:	46c8      	mov	r8, r9
 80080f2:	442c      	add	r4, r5
 80080f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080f8:	4601      	mov	r1, r0
 80080fa:	220a      	movs	r2, #10
 80080fc:	4630      	mov	r0, r6
 80080fe:	3b30      	subs	r3, #48	; 0x30
 8008100:	f7ff ff8c 	bl	800801c <__multadd>
 8008104:	45a0      	cmp	r8, r4
 8008106:	d1f5      	bne.n	80080f4 <__s2b+0x4c>
 8008108:	f1a5 0408 	sub.w	r4, r5, #8
 800810c:	444c      	add	r4, r9
 800810e:	1b2d      	subs	r5, r5, r4
 8008110:	1963      	adds	r3, r4, r5
 8008112:	42bb      	cmp	r3, r7
 8008114:	db04      	blt.n	8008120 <__s2b+0x78>
 8008116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800811a:	2509      	movs	r5, #9
 800811c:	340a      	adds	r4, #10
 800811e:	e7f6      	b.n	800810e <__s2b+0x66>
 8008120:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008124:	4601      	mov	r1, r0
 8008126:	220a      	movs	r2, #10
 8008128:	4630      	mov	r0, r6
 800812a:	3b30      	subs	r3, #48	; 0x30
 800812c:	f7ff ff76 	bl	800801c <__multadd>
 8008130:	e7ee      	b.n	8008110 <__s2b+0x68>
 8008132:	bf00      	nop
 8008134:	0800aa6d 	.word	0x0800aa6d
 8008138:	0800aa7e 	.word	0x0800aa7e

0800813c <__hi0bits>:
 800813c:	0c02      	lsrs	r2, r0, #16
 800813e:	0412      	lsls	r2, r2, #16
 8008140:	4603      	mov	r3, r0
 8008142:	b9ca      	cbnz	r2, 8008178 <__hi0bits+0x3c>
 8008144:	0403      	lsls	r3, r0, #16
 8008146:	2010      	movs	r0, #16
 8008148:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800814c:	bf04      	itt	eq
 800814e:	021b      	lsleq	r3, r3, #8
 8008150:	3008      	addeq	r0, #8
 8008152:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008156:	bf04      	itt	eq
 8008158:	011b      	lsleq	r3, r3, #4
 800815a:	3004      	addeq	r0, #4
 800815c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008160:	bf04      	itt	eq
 8008162:	009b      	lsleq	r3, r3, #2
 8008164:	3002      	addeq	r0, #2
 8008166:	2b00      	cmp	r3, #0
 8008168:	db05      	blt.n	8008176 <__hi0bits+0x3a>
 800816a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800816e:	f100 0001 	add.w	r0, r0, #1
 8008172:	bf08      	it	eq
 8008174:	2020      	moveq	r0, #32
 8008176:	4770      	bx	lr
 8008178:	2000      	movs	r0, #0
 800817a:	e7e5      	b.n	8008148 <__hi0bits+0xc>

0800817c <__lo0bits>:
 800817c:	6803      	ldr	r3, [r0, #0]
 800817e:	4602      	mov	r2, r0
 8008180:	f013 0007 	ands.w	r0, r3, #7
 8008184:	d00b      	beq.n	800819e <__lo0bits+0x22>
 8008186:	07d9      	lsls	r1, r3, #31
 8008188:	d421      	bmi.n	80081ce <__lo0bits+0x52>
 800818a:	0798      	lsls	r0, r3, #30
 800818c:	bf49      	itett	mi
 800818e:	085b      	lsrmi	r3, r3, #1
 8008190:	089b      	lsrpl	r3, r3, #2
 8008192:	2001      	movmi	r0, #1
 8008194:	6013      	strmi	r3, [r2, #0]
 8008196:	bf5c      	itt	pl
 8008198:	2002      	movpl	r0, #2
 800819a:	6013      	strpl	r3, [r2, #0]
 800819c:	4770      	bx	lr
 800819e:	b299      	uxth	r1, r3
 80081a0:	b909      	cbnz	r1, 80081a6 <__lo0bits+0x2a>
 80081a2:	2010      	movs	r0, #16
 80081a4:	0c1b      	lsrs	r3, r3, #16
 80081a6:	b2d9      	uxtb	r1, r3
 80081a8:	b909      	cbnz	r1, 80081ae <__lo0bits+0x32>
 80081aa:	3008      	adds	r0, #8
 80081ac:	0a1b      	lsrs	r3, r3, #8
 80081ae:	0719      	lsls	r1, r3, #28
 80081b0:	bf04      	itt	eq
 80081b2:	091b      	lsreq	r3, r3, #4
 80081b4:	3004      	addeq	r0, #4
 80081b6:	0799      	lsls	r1, r3, #30
 80081b8:	bf04      	itt	eq
 80081ba:	089b      	lsreq	r3, r3, #2
 80081bc:	3002      	addeq	r0, #2
 80081be:	07d9      	lsls	r1, r3, #31
 80081c0:	d403      	bmi.n	80081ca <__lo0bits+0x4e>
 80081c2:	085b      	lsrs	r3, r3, #1
 80081c4:	f100 0001 	add.w	r0, r0, #1
 80081c8:	d003      	beq.n	80081d2 <__lo0bits+0x56>
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	4770      	bx	lr
 80081ce:	2000      	movs	r0, #0
 80081d0:	4770      	bx	lr
 80081d2:	2020      	movs	r0, #32
 80081d4:	4770      	bx	lr
	...

080081d8 <__i2b>:
 80081d8:	b510      	push	{r4, lr}
 80081da:	460c      	mov	r4, r1
 80081dc:	2101      	movs	r1, #1
 80081de:	f7ff febb 	bl	8007f58 <_Balloc>
 80081e2:	4602      	mov	r2, r0
 80081e4:	b928      	cbnz	r0, 80081f2 <__i2b+0x1a>
 80081e6:	f240 1145 	movw	r1, #325	; 0x145
 80081ea:	4b04      	ldr	r3, [pc, #16]	; (80081fc <__i2b+0x24>)
 80081ec:	4804      	ldr	r0, [pc, #16]	; (8008200 <__i2b+0x28>)
 80081ee:	f7fe ff29 	bl	8007044 <__assert_func>
 80081f2:	2301      	movs	r3, #1
 80081f4:	6144      	str	r4, [r0, #20]
 80081f6:	6103      	str	r3, [r0, #16]
 80081f8:	bd10      	pop	{r4, pc}
 80081fa:	bf00      	nop
 80081fc:	0800aa6d 	.word	0x0800aa6d
 8008200:	0800aa7e 	.word	0x0800aa7e

08008204 <__multiply>:
 8008204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008208:	4691      	mov	r9, r2
 800820a:	690a      	ldr	r2, [r1, #16]
 800820c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008210:	460c      	mov	r4, r1
 8008212:	429a      	cmp	r2, r3
 8008214:	bfbe      	ittt	lt
 8008216:	460b      	movlt	r3, r1
 8008218:	464c      	movlt	r4, r9
 800821a:	4699      	movlt	r9, r3
 800821c:	6927      	ldr	r7, [r4, #16]
 800821e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008222:	68a3      	ldr	r3, [r4, #8]
 8008224:	6861      	ldr	r1, [r4, #4]
 8008226:	eb07 060a 	add.w	r6, r7, sl
 800822a:	42b3      	cmp	r3, r6
 800822c:	b085      	sub	sp, #20
 800822e:	bfb8      	it	lt
 8008230:	3101      	addlt	r1, #1
 8008232:	f7ff fe91 	bl	8007f58 <_Balloc>
 8008236:	b930      	cbnz	r0, 8008246 <__multiply+0x42>
 8008238:	4602      	mov	r2, r0
 800823a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800823e:	4b43      	ldr	r3, [pc, #268]	; (800834c <__multiply+0x148>)
 8008240:	4843      	ldr	r0, [pc, #268]	; (8008350 <__multiply+0x14c>)
 8008242:	f7fe feff 	bl	8007044 <__assert_func>
 8008246:	f100 0514 	add.w	r5, r0, #20
 800824a:	462b      	mov	r3, r5
 800824c:	2200      	movs	r2, #0
 800824e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008252:	4543      	cmp	r3, r8
 8008254:	d321      	bcc.n	800829a <__multiply+0x96>
 8008256:	f104 0314 	add.w	r3, r4, #20
 800825a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800825e:	f109 0314 	add.w	r3, r9, #20
 8008262:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008266:	9202      	str	r2, [sp, #8]
 8008268:	1b3a      	subs	r2, r7, r4
 800826a:	3a15      	subs	r2, #21
 800826c:	f022 0203 	bic.w	r2, r2, #3
 8008270:	3204      	adds	r2, #4
 8008272:	f104 0115 	add.w	r1, r4, #21
 8008276:	428f      	cmp	r7, r1
 8008278:	bf38      	it	cc
 800827a:	2204      	movcc	r2, #4
 800827c:	9201      	str	r2, [sp, #4]
 800827e:	9a02      	ldr	r2, [sp, #8]
 8008280:	9303      	str	r3, [sp, #12]
 8008282:	429a      	cmp	r2, r3
 8008284:	d80c      	bhi.n	80082a0 <__multiply+0x9c>
 8008286:	2e00      	cmp	r6, #0
 8008288:	dd03      	ble.n	8008292 <__multiply+0x8e>
 800828a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800828e:	2b00      	cmp	r3, #0
 8008290:	d05a      	beq.n	8008348 <__multiply+0x144>
 8008292:	6106      	str	r6, [r0, #16]
 8008294:	b005      	add	sp, #20
 8008296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829a:	f843 2b04 	str.w	r2, [r3], #4
 800829e:	e7d8      	b.n	8008252 <__multiply+0x4e>
 80082a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80082a4:	f1ba 0f00 	cmp.w	sl, #0
 80082a8:	d023      	beq.n	80082f2 <__multiply+0xee>
 80082aa:	46a9      	mov	r9, r5
 80082ac:	f04f 0c00 	mov.w	ip, #0
 80082b0:	f104 0e14 	add.w	lr, r4, #20
 80082b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80082b8:	f8d9 1000 	ldr.w	r1, [r9]
 80082bc:	fa1f fb82 	uxth.w	fp, r2
 80082c0:	b289      	uxth	r1, r1
 80082c2:	fb0a 110b 	mla	r1, sl, fp, r1
 80082c6:	4461      	add	r1, ip
 80082c8:	f8d9 c000 	ldr.w	ip, [r9]
 80082cc:	0c12      	lsrs	r2, r2, #16
 80082ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80082d2:	fb0a c202 	mla	r2, sl, r2, ip
 80082d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082da:	b289      	uxth	r1, r1
 80082dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082e0:	4577      	cmp	r7, lr
 80082e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082e6:	f849 1b04 	str.w	r1, [r9], #4
 80082ea:	d8e3      	bhi.n	80082b4 <__multiply+0xb0>
 80082ec:	9a01      	ldr	r2, [sp, #4]
 80082ee:	f845 c002 	str.w	ip, [r5, r2]
 80082f2:	9a03      	ldr	r2, [sp, #12]
 80082f4:	3304      	adds	r3, #4
 80082f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082fa:	f1b9 0f00 	cmp.w	r9, #0
 80082fe:	d021      	beq.n	8008344 <__multiply+0x140>
 8008300:	46ae      	mov	lr, r5
 8008302:	f04f 0a00 	mov.w	sl, #0
 8008306:	6829      	ldr	r1, [r5, #0]
 8008308:	f104 0c14 	add.w	ip, r4, #20
 800830c:	f8bc b000 	ldrh.w	fp, [ip]
 8008310:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008314:	b289      	uxth	r1, r1
 8008316:	fb09 220b 	mla	r2, r9, fp, r2
 800831a:	4452      	add	r2, sl
 800831c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008320:	f84e 1b04 	str.w	r1, [lr], #4
 8008324:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008328:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800832c:	f8be 1000 	ldrh.w	r1, [lr]
 8008330:	4567      	cmp	r7, ip
 8008332:	fb09 110a 	mla	r1, r9, sl, r1
 8008336:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800833a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800833e:	d8e5      	bhi.n	800830c <__multiply+0x108>
 8008340:	9a01      	ldr	r2, [sp, #4]
 8008342:	50a9      	str	r1, [r5, r2]
 8008344:	3504      	adds	r5, #4
 8008346:	e79a      	b.n	800827e <__multiply+0x7a>
 8008348:	3e01      	subs	r6, #1
 800834a:	e79c      	b.n	8008286 <__multiply+0x82>
 800834c:	0800aa6d 	.word	0x0800aa6d
 8008350:	0800aa7e 	.word	0x0800aa7e

08008354 <__pow5mult>:
 8008354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008358:	4615      	mov	r5, r2
 800835a:	f012 0203 	ands.w	r2, r2, #3
 800835e:	4606      	mov	r6, r0
 8008360:	460f      	mov	r7, r1
 8008362:	d007      	beq.n	8008374 <__pow5mult+0x20>
 8008364:	4c25      	ldr	r4, [pc, #148]	; (80083fc <__pow5mult+0xa8>)
 8008366:	3a01      	subs	r2, #1
 8008368:	2300      	movs	r3, #0
 800836a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800836e:	f7ff fe55 	bl	800801c <__multadd>
 8008372:	4607      	mov	r7, r0
 8008374:	10ad      	asrs	r5, r5, #2
 8008376:	d03d      	beq.n	80083f4 <__pow5mult+0xa0>
 8008378:	69f4      	ldr	r4, [r6, #28]
 800837a:	b97c      	cbnz	r4, 800839c <__pow5mult+0x48>
 800837c:	2010      	movs	r0, #16
 800837e:	f7ff fd37 	bl	8007df0 <malloc>
 8008382:	4602      	mov	r2, r0
 8008384:	61f0      	str	r0, [r6, #28]
 8008386:	b928      	cbnz	r0, 8008394 <__pow5mult+0x40>
 8008388:	f240 11b3 	movw	r1, #435	; 0x1b3
 800838c:	4b1c      	ldr	r3, [pc, #112]	; (8008400 <__pow5mult+0xac>)
 800838e:	481d      	ldr	r0, [pc, #116]	; (8008404 <__pow5mult+0xb0>)
 8008390:	f7fe fe58 	bl	8007044 <__assert_func>
 8008394:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008398:	6004      	str	r4, [r0, #0]
 800839a:	60c4      	str	r4, [r0, #12]
 800839c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80083a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083a4:	b94c      	cbnz	r4, 80083ba <__pow5mult+0x66>
 80083a6:	f240 2171 	movw	r1, #625	; 0x271
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7ff ff14 	bl	80081d8 <__i2b>
 80083b0:	2300      	movs	r3, #0
 80083b2:	4604      	mov	r4, r0
 80083b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80083b8:	6003      	str	r3, [r0, #0]
 80083ba:	f04f 0900 	mov.w	r9, #0
 80083be:	07eb      	lsls	r3, r5, #31
 80083c0:	d50a      	bpl.n	80083d8 <__pow5mult+0x84>
 80083c2:	4639      	mov	r1, r7
 80083c4:	4622      	mov	r2, r4
 80083c6:	4630      	mov	r0, r6
 80083c8:	f7ff ff1c 	bl	8008204 <__multiply>
 80083cc:	4680      	mov	r8, r0
 80083ce:	4639      	mov	r1, r7
 80083d0:	4630      	mov	r0, r6
 80083d2:	f7ff fe01 	bl	8007fd8 <_Bfree>
 80083d6:	4647      	mov	r7, r8
 80083d8:	106d      	asrs	r5, r5, #1
 80083da:	d00b      	beq.n	80083f4 <__pow5mult+0xa0>
 80083dc:	6820      	ldr	r0, [r4, #0]
 80083de:	b938      	cbnz	r0, 80083f0 <__pow5mult+0x9c>
 80083e0:	4622      	mov	r2, r4
 80083e2:	4621      	mov	r1, r4
 80083e4:	4630      	mov	r0, r6
 80083e6:	f7ff ff0d 	bl	8008204 <__multiply>
 80083ea:	6020      	str	r0, [r4, #0]
 80083ec:	f8c0 9000 	str.w	r9, [r0]
 80083f0:	4604      	mov	r4, r0
 80083f2:	e7e4      	b.n	80083be <__pow5mult+0x6a>
 80083f4:	4638      	mov	r0, r7
 80083f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083fa:	bf00      	nop
 80083fc:	0800abc8 	.word	0x0800abc8
 8008400:	0800a95b 	.word	0x0800a95b
 8008404:	0800aa7e 	.word	0x0800aa7e

08008408 <__lshift>:
 8008408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800840c:	460c      	mov	r4, r1
 800840e:	4607      	mov	r7, r0
 8008410:	4691      	mov	r9, r2
 8008412:	6923      	ldr	r3, [r4, #16]
 8008414:	6849      	ldr	r1, [r1, #4]
 8008416:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800841a:	68a3      	ldr	r3, [r4, #8]
 800841c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008420:	f108 0601 	add.w	r6, r8, #1
 8008424:	42b3      	cmp	r3, r6
 8008426:	db0b      	blt.n	8008440 <__lshift+0x38>
 8008428:	4638      	mov	r0, r7
 800842a:	f7ff fd95 	bl	8007f58 <_Balloc>
 800842e:	4605      	mov	r5, r0
 8008430:	b948      	cbnz	r0, 8008446 <__lshift+0x3e>
 8008432:	4602      	mov	r2, r0
 8008434:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008438:	4b27      	ldr	r3, [pc, #156]	; (80084d8 <__lshift+0xd0>)
 800843a:	4828      	ldr	r0, [pc, #160]	; (80084dc <__lshift+0xd4>)
 800843c:	f7fe fe02 	bl	8007044 <__assert_func>
 8008440:	3101      	adds	r1, #1
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	e7ee      	b.n	8008424 <__lshift+0x1c>
 8008446:	2300      	movs	r3, #0
 8008448:	f100 0114 	add.w	r1, r0, #20
 800844c:	f100 0210 	add.w	r2, r0, #16
 8008450:	4618      	mov	r0, r3
 8008452:	4553      	cmp	r3, sl
 8008454:	db33      	blt.n	80084be <__lshift+0xb6>
 8008456:	6920      	ldr	r0, [r4, #16]
 8008458:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800845c:	f104 0314 	add.w	r3, r4, #20
 8008460:	f019 091f 	ands.w	r9, r9, #31
 8008464:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008468:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800846c:	d02b      	beq.n	80084c6 <__lshift+0xbe>
 800846e:	468a      	mov	sl, r1
 8008470:	2200      	movs	r2, #0
 8008472:	f1c9 0e20 	rsb	lr, r9, #32
 8008476:	6818      	ldr	r0, [r3, #0]
 8008478:	fa00 f009 	lsl.w	r0, r0, r9
 800847c:	4310      	orrs	r0, r2
 800847e:	f84a 0b04 	str.w	r0, [sl], #4
 8008482:	f853 2b04 	ldr.w	r2, [r3], #4
 8008486:	459c      	cmp	ip, r3
 8008488:	fa22 f20e 	lsr.w	r2, r2, lr
 800848c:	d8f3      	bhi.n	8008476 <__lshift+0x6e>
 800848e:	ebac 0304 	sub.w	r3, ip, r4
 8008492:	3b15      	subs	r3, #21
 8008494:	f023 0303 	bic.w	r3, r3, #3
 8008498:	3304      	adds	r3, #4
 800849a:	f104 0015 	add.w	r0, r4, #21
 800849e:	4584      	cmp	ip, r0
 80084a0:	bf38      	it	cc
 80084a2:	2304      	movcc	r3, #4
 80084a4:	50ca      	str	r2, [r1, r3]
 80084a6:	b10a      	cbz	r2, 80084ac <__lshift+0xa4>
 80084a8:	f108 0602 	add.w	r6, r8, #2
 80084ac:	3e01      	subs	r6, #1
 80084ae:	4638      	mov	r0, r7
 80084b0:	4621      	mov	r1, r4
 80084b2:	612e      	str	r6, [r5, #16]
 80084b4:	f7ff fd90 	bl	8007fd8 <_Bfree>
 80084b8:	4628      	mov	r0, r5
 80084ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084be:	f842 0f04 	str.w	r0, [r2, #4]!
 80084c2:	3301      	adds	r3, #1
 80084c4:	e7c5      	b.n	8008452 <__lshift+0x4a>
 80084c6:	3904      	subs	r1, #4
 80084c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084cc:	459c      	cmp	ip, r3
 80084ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80084d2:	d8f9      	bhi.n	80084c8 <__lshift+0xc0>
 80084d4:	e7ea      	b.n	80084ac <__lshift+0xa4>
 80084d6:	bf00      	nop
 80084d8:	0800aa6d 	.word	0x0800aa6d
 80084dc:	0800aa7e 	.word	0x0800aa7e

080084e0 <__mcmp>:
 80084e0:	4603      	mov	r3, r0
 80084e2:	690a      	ldr	r2, [r1, #16]
 80084e4:	6900      	ldr	r0, [r0, #16]
 80084e6:	b530      	push	{r4, r5, lr}
 80084e8:	1a80      	subs	r0, r0, r2
 80084ea:	d10d      	bne.n	8008508 <__mcmp+0x28>
 80084ec:	3314      	adds	r3, #20
 80084ee:	3114      	adds	r1, #20
 80084f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008500:	4295      	cmp	r5, r2
 8008502:	d002      	beq.n	800850a <__mcmp+0x2a>
 8008504:	d304      	bcc.n	8008510 <__mcmp+0x30>
 8008506:	2001      	movs	r0, #1
 8008508:	bd30      	pop	{r4, r5, pc}
 800850a:	42a3      	cmp	r3, r4
 800850c:	d3f4      	bcc.n	80084f8 <__mcmp+0x18>
 800850e:	e7fb      	b.n	8008508 <__mcmp+0x28>
 8008510:	f04f 30ff 	mov.w	r0, #4294967295
 8008514:	e7f8      	b.n	8008508 <__mcmp+0x28>
	...

08008518 <__mdiff>:
 8008518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	460d      	mov	r5, r1
 800851e:	4607      	mov	r7, r0
 8008520:	4611      	mov	r1, r2
 8008522:	4628      	mov	r0, r5
 8008524:	4614      	mov	r4, r2
 8008526:	f7ff ffdb 	bl	80084e0 <__mcmp>
 800852a:	1e06      	subs	r6, r0, #0
 800852c:	d111      	bne.n	8008552 <__mdiff+0x3a>
 800852e:	4631      	mov	r1, r6
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff fd11 	bl	8007f58 <_Balloc>
 8008536:	4602      	mov	r2, r0
 8008538:	b928      	cbnz	r0, 8008546 <__mdiff+0x2e>
 800853a:	f240 2137 	movw	r1, #567	; 0x237
 800853e:	4b3a      	ldr	r3, [pc, #232]	; (8008628 <__mdiff+0x110>)
 8008540:	483a      	ldr	r0, [pc, #232]	; (800862c <__mdiff+0x114>)
 8008542:	f7fe fd7f 	bl	8007044 <__assert_func>
 8008546:	2301      	movs	r3, #1
 8008548:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800854c:	4610      	mov	r0, r2
 800854e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008552:	bfa4      	itt	ge
 8008554:	4623      	movge	r3, r4
 8008556:	462c      	movge	r4, r5
 8008558:	4638      	mov	r0, r7
 800855a:	6861      	ldr	r1, [r4, #4]
 800855c:	bfa6      	itte	ge
 800855e:	461d      	movge	r5, r3
 8008560:	2600      	movge	r6, #0
 8008562:	2601      	movlt	r6, #1
 8008564:	f7ff fcf8 	bl	8007f58 <_Balloc>
 8008568:	4602      	mov	r2, r0
 800856a:	b918      	cbnz	r0, 8008574 <__mdiff+0x5c>
 800856c:	f240 2145 	movw	r1, #581	; 0x245
 8008570:	4b2d      	ldr	r3, [pc, #180]	; (8008628 <__mdiff+0x110>)
 8008572:	e7e5      	b.n	8008540 <__mdiff+0x28>
 8008574:	f102 0814 	add.w	r8, r2, #20
 8008578:	46c2      	mov	sl, r8
 800857a:	f04f 0c00 	mov.w	ip, #0
 800857e:	6927      	ldr	r7, [r4, #16]
 8008580:	60c6      	str	r6, [r0, #12]
 8008582:	692e      	ldr	r6, [r5, #16]
 8008584:	f104 0014 	add.w	r0, r4, #20
 8008588:	f105 0914 	add.w	r9, r5, #20
 800858c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008590:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008594:	3410      	adds	r4, #16
 8008596:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800859a:	f859 3b04 	ldr.w	r3, [r9], #4
 800859e:	fa1f f18b 	uxth.w	r1, fp
 80085a2:	4461      	add	r1, ip
 80085a4:	fa1f fc83 	uxth.w	ip, r3
 80085a8:	0c1b      	lsrs	r3, r3, #16
 80085aa:	eba1 010c 	sub.w	r1, r1, ip
 80085ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085b2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80085b6:	b289      	uxth	r1, r1
 80085b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80085bc:	454e      	cmp	r6, r9
 80085be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80085c2:	f84a 1b04 	str.w	r1, [sl], #4
 80085c6:	d8e6      	bhi.n	8008596 <__mdiff+0x7e>
 80085c8:	1b73      	subs	r3, r6, r5
 80085ca:	3b15      	subs	r3, #21
 80085cc:	f023 0303 	bic.w	r3, r3, #3
 80085d0:	3515      	adds	r5, #21
 80085d2:	3304      	adds	r3, #4
 80085d4:	42ae      	cmp	r6, r5
 80085d6:	bf38      	it	cc
 80085d8:	2304      	movcc	r3, #4
 80085da:	4418      	add	r0, r3
 80085dc:	4443      	add	r3, r8
 80085de:	461e      	mov	r6, r3
 80085e0:	4605      	mov	r5, r0
 80085e2:	4575      	cmp	r5, lr
 80085e4:	d30e      	bcc.n	8008604 <__mdiff+0xec>
 80085e6:	f10e 0103 	add.w	r1, lr, #3
 80085ea:	1a09      	subs	r1, r1, r0
 80085ec:	f021 0103 	bic.w	r1, r1, #3
 80085f0:	3803      	subs	r0, #3
 80085f2:	4586      	cmp	lr, r0
 80085f4:	bf38      	it	cc
 80085f6:	2100      	movcc	r1, #0
 80085f8:	440b      	add	r3, r1
 80085fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085fe:	b189      	cbz	r1, 8008624 <__mdiff+0x10c>
 8008600:	6117      	str	r7, [r2, #16]
 8008602:	e7a3      	b.n	800854c <__mdiff+0x34>
 8008604:	f855 8b04 	ldr.w	r8, [r5], #4
 8008608:	fa1f f188 	uxth.w	r1, r8
 800860c:	4461      	add	r1, ip
 800860e:	140c      	asrs	r4, r1, #16
 8008610:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008614:	b289      	uxth	r1, r1
 8008616:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800861a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800861e:	f846 1b04 	str.w	r1, [r6], #4
 8008622:	e7de      	b.n	80085e2 <__mdiff+0xca>
 8008624:	3f01      	subs	r7, #1
 8008626:	e7e8      	b.n	80085fa <__mdiff+0xe2>
 8008628:	0800aa6d 	.word	0x0800aa6d
 800862c:	0800aa7e 	.word	0x0800aa7e

08008630 <__ulp>:
 8008630:	4b0e      	ldr	r3, [pc, #56]	; (800866c <__ulp+0x3c>)
 8008632:	400b      	ands	r3, r1
 8008634:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008638:	2b00      	cmp	r3, #0
 800863a:	dc08      	bgt.n	800864e <__ulp+0x1e>
 800863c:	425b      	negs	r3, r3
 800863e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008642:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008646:	da04      	bge.n	8008652 <__ulp+0x22>
 8008648:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800864c:	4113      	asrs	r3, r2
 800864e:	2200      	movs	r2, #0
 8008650:	e008      	b.n	8008664 <__ulp+0x34>
 8008652:	f1a2 0314 	sub.w	r3, r2, #20
 8008656:	2b1e      	cmp	r3, #30
 8008658:	bfd6      	itet	le
 800865a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800865e:	2201      	movgt	r2, #1
 8008660:	40da      	lsrle	r2, r3
 8008662:	2300      	movs	r3, #0
 8008664:	4619      	mov	r1, r3
 8008666:	4610      	mov	r0, r2
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	7ff00000 	.word	0x7ff00000

08008670 <__b2d>:
 8008670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008672:	6905      	ldr	r5, [r0, #16]
 8008674:	f100 0714 	add.w	r7, r0, #20
 8008678:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800867c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008680:	1f2e      	subs	r6, r5, #4
 8008682:	4620      	mov	r0, r4
 8008684:	f7ff fd5a 	bl	800813c <__hi0bits>
 8008688:	f1c0 0220 	rsb	r2, r0, #32
 800868c:	280a      	cmp	r0, #10
 800868e:	4603      	mov	r3, r0
 8008690:	f8df c068 	ldr.w	ip, [pc, #104]	; 80086fc <__b2d+0x8c>
 8008694:	600a      	str	r2, [r1, #0]
 8008696:	dc12      	bgt.n	80086be <__b2d+0x4e>
 8008698:	f1c0 0e0b 	rsb	lr, r0, #11
 800869c:	fa24 f20e 	lsr.w	r2, r4, lr
 80086a0:	42b7      	cmp	r7, r6
 80086a2:	ea42 010c 	orr.w	r1, r2, ip
 80086a6:	bf2c      	ite	cs
 80086a8:	2200      	movcs	r2, #0
 80086aa:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80086ae:	3315      	adds	r3, #21
 80086b0:	fa04 f303 	lsl.w	r3, r4, r3
 80086b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80086b8:	431a      	orrs	r2, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086be:	42b7      	cmp	r7, r6
 80086c0:	bf2e      	itee	cs
 80086c2:	2200      	movcs	r2, #0
 80086c4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80086c8:	f1a5 0608 	subcc.w	r6, r5, #8
 80086cc:	3b0b      	subs	r3, #11
 80086ce:	d012      	beq.n	80086f6 <__b2d+0x86>
 80086d0:	f1c3 0520 	rsb	r5, r3, #32
 80086d4:	fa22 f105 	lsr.w	r1, r2, r5
 80086d8:	409c      	lsls	r4, r3
 80086da:	430c      	orrs	r4, r1
 80086dc:	42be      	cmp	r6, r7
 80086de:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80086e2:	bf94      	ite	ls
 80086e4:	2400      	movls	r4, #0
 80086e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80086ea:	409a      	lsls	r2, r3
 80086ec:	40ec      	lsrs	r4, r5
 80086ee:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80086f2:	4322      	orrs	r2, r4
 80086f4:	e7e1      	b.n	80086ba <__b2d+0x4a>
 80086f6:	ea44 010c 	orr.w	r1, r4, ip
 80086fa:	e7de      	b.n	80086ba <__b2d+0x4a>
 80086fc:	3ff00000 	.word	0x3ff00000

08008700 <__d2b>:
 8008700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008702:	2101      	movs	r1, #1
 8008704:	4617      	mov	r7, r2
 8008706:	461c      	mov	r4, r3
 8008708:	9e08      	ldr	r6, [sp, #32]
 800870a:	f7ff fc25 	bl	8007f58 <_Balloc>
 800870e:	4605      	mov	r5, r0
 8008710:	b930      	cbnz	r0, 8008720 <__d2b+0x20>
 8008712:	4602      	mov	r2, r0
 8008714:	f240 310f 	movw	r1, #783	; 0x30f
 8008718:	4b22      	ldr	r3, [pc, #136]	; (80087a4 <__d2b+0xa4>)
 800871a:	4823      	ldr	r0, [pc, #140]	; (80087a8 <__d2b+0xa8>)
 800871c:	f7fe fc92 	bl	8007044 <__assert_func>
 8008720:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008724:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008728:	bb24      	cbnz	r4, 8008774 <__d2b+0x74>
 800872a:	2f00      	cmp	r7, #0
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	d026      	beq.n	800877e <__d2b+0x7e>
 8008730:	4668      	mov	r0, sp
 8008732:	9700      	str	r7, [sp, #0]
 8008734:	f7ff fd22 	bl	800817c <__lo0bits>
 8008738:	e9dd 1200 	ldrd	r1, r2, [sp]
 800873c:	b1e8      	cbz	r0, 800877a <__d2b+0x7a>
 800873e:	f1c0 0320 	rsb	r3, r0, #32
 8008742:	fa02 f303 	lsl.w	r3, r2, r3
 8008746:	430b      	orrs	r3, r1
 8008748:	40c2      	lsrs	r2, r0
 800874a:	616b      	str	r3, [r5, #20]
 800874c:	9201      	str	r2, [sp, #4]
 800874e:	9b01      	ldr	r3, [sp, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	bf14      	ite	ne
 8008754:	2102      	movne	r1, #2
 8008756:	2101      	moveq	r1, #1
 8008758:	61ab      	str	r3, [r5, #24]
 800875a:	6129      	str	r1, [r5, #16]
 800875c:	b1bc      	cbz	r4, 800878e <__d2b+0x8e>
 800875e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008762:	4404      	add	r4, r0
 8008764:	6034      	str	r4, [r6, #0]
 8008766:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800876a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800876c:	6018      	str	r0, [r3, #0]
 800876e:	4628      	mov	r0, r5
 8008770:	b003      	add	sp, #12
 8008772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008778:	e7d7      	b.n	800872a <__d2b+0x2a>
 800877a:	6169      	str	r1, [r5, #20]
 800877c:	e7e7      	b.n	800874e <__d2b+0x4e>
 800877e:	a801      	add	r0, sp, #4
 8008780:	f7ff fcfc 	bl	800817c <__lo0bits>
 8008784:	9b01      	ldr	r3, [sp, #4]
 8008786:	2101      	movs	r1, #1
 8008788:	616b      	str	r3, [r5, #20]
 800878a:	3020      	adds	r0, #32
 800878c:	e7e5      	b.n	800875a <__d2b+0x5a>
 800878e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008792:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008796:	6030      	str	r0, [r6, #0]
 8008798:	6918      	ldr	r0, [r3, #16]
 800879a:	f7ff fccf 	bl	800813c <__hi0bits>
 800879e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80087a2:	e7e2      	b.n	800876a <__d2b+0x6a>
 80087a4:	0800aa6d 	.word	0x0800aa6d
 80087a8:	0800aa7e 	.word	0x0800aa7e

080087ac <__ratio>:
 80087ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	4688      	mov	r8, r1
 80087b2:	4669      	mov	r1, sp
 80087b4:	4681      	mov	r9, r0
 80087b6:	f7ff ff5b 	bl	8008670 <__b2d>
 80087ba:	460f      	mov	r7, r1
 80087bc:	4604      	mov	r4, r0
 80087be:	460d      	mov	r5, r1
 80087c0:	4640      	mov	r0, r8
 80087c2:	a901      	add	r1, sp, #4
 80087c4:	f7ff ff54 	bl	8008670 <__b2d>
 80087c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80087d0:	468b      	mov	fp, r1
 80087d2:	eba3 0c02 	sub.w	ip, r3, r2
 80087d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80087da:	1a9b      	subs	r3, r3, r2
 80087dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	bfd5      	itete	le
 80087e4:	460a      	movle	r2, r1
 80087e6:	462a      	movgt	r2, r5
 80087e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087ec:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80087f0:	bfd8      	it	le
 80087f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80087f6:	465b      	mov	r3, fp
 80087f8:	4602      	mov	r2, r0
 80087fa:	4639      	mov	r1, r7
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7f7 ff9f 	bl	8000740 <__aeabi_ddiv>
 8008802:	b003      	add	sp, #12
 8008804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008808 <__copybits>:
 8008808:	3901      	subs	r1, #1
 800880a:	b570      	push	{r4, r5, r6, lr}
 800880c:	1149      	asrs	r1, r1, #5
 800880e:	6914      	ldr	r4, [r2, #16]
 8008810:	3101      	adds	r1, #1
 8008812:	f102 0314 	add.w	r3, r2, #20
 8008816:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800881a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800881e:	1f05      	subs	r5, r0, #4
 8008820:	42a3      	cmp	r3, r4
 8008822:	d30c      	bcc.n	800883e <__copybits+0x36>
 8008824:	1aa3      	subs	r3, r4, r2
 8008826:	3b11      	subs	r3, #17
 8008828:	f023 0303 	bic.w	r3, r3, #3
 800882c:	3211      	adds	r2, #17
 800882e:	42a2      	cmp	r2, r4
 8008830:	bf88      	it	hi
 8008832:	2300      	movhi	r3, #0
 8008834:	4418      	add	r0, r3
 8008836:	2300      	movs	r3, #0
 8008838:	4288      	cmp	r0, r1
 800883a:	d305      	bcc.n	8008848 <__copybits+0x40>
 800883c:	bd70      	pop	{r4, r5, r6, pc}
 800883e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008842:	f845 6f04 	str.w	r6, [r5, #4]!
 8008846:	e7eb      	b.n	8008820 <__copybits+0x18>
 8008848:	f840 3b04 	str.w	r3, [r0], #4
 800884c:	e7f4      	b.n	8008838 <__copybits+0x30>

0800884e <__any_on>:
 800884e:	f100 0214 	add.w	r2, r0, #20
 8008852:	6900      	ldr	r0, [r0, #16]
 8008854:	114b      	asrs	r3, r1, #5
 8008856:	4298      	cmp	r0, r3
 8008858:	b510      	push	{r4, lr}
 800885a:	db11      	blt.n	8008880 <__any_on+0x32>
 800885c:	dd0a      	ble.n	8008874 <__any_on+0x26>
 800885e:	f011 011f 	ands.w	r1, r1, #31
 8008862:	d007      	beq.n	8008874 <__any_on+0x26>
 8008864:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008868:	fa24 f001 	lsr.w	r0, r4, r1
 800886c:	fa00 f101 	lsl.w	r1, r0, r1
 8008870:	428c      	cmp	r4, r1
 8008872:	d10b      	bne.n	800888c <__any_on+0x3e>
 8008874:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008878:	4293      	cmp	r3, r2
 800887a:	d803      	bhi.n	8008884 <__any_on+0x36>
 800887c:	2000      	movs	r0, #0
 800887e:	bd10      	pop	{r4, pc}
 8008880:	4603      	mov	r3, r0
 8008882:	e7f7      	b.n	8008874 <__any_on+0x26>
 8008884:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008888:	2900      	cmp	r1, #0
 800888a:	d0f5      	beq.n	8008878 <__any_on+0x2a>
 800888c:	2001      	movs	r0, #1
 800888e:	e7f6      	b.n	800887e <__any_on+0x30>

08008890 <sulp>:
 8008890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008894:	460f      	mov	r7, r1
 8008896:	4690      	mov	r8, r2
 8008898:	f7ff feca 	bl	8008630 <__ulp>
 800889c:	4604      	mov	r4, r0
 800889e:	460d      	mov	r5, r1
 80088a0:	f1b8 0f00 	cmp.w	r8, #0
 80088a4:	d011      	beq.n	80088ca <sulp+0x3a>
 80088a6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80088aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	dd0b      	ble.n	80088ca <sulp+0x3a>
 80088b2:	2400      	movs	r4, #0
 80088b4:	051b      	lsls	r3, r3, #20
 80088b6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80088ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80088be:	4622      	mov	r2, r4
 80088c0:	462b      	mov	r3, r5
 80088c2:	f7f7 fe13 	bl	80004ec <__aeabi_dmul>
 80088c6:	4604      	mov	r4, r0
 80088c8:	460d      	mov	r5, r1
 80088ca:	4620      	mov	r0, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d2:	0000      	movs	r0, r0
 80088d4:	0000      	movs	r0, r0
	...

080088d8 <_strtod_l>:
 80088d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	b09f      	sub	sp, #124	; 0x7c
 80088de:	9217      	str	r2, [sp, #92]	; 0x5c
 80088e0:	2200      	movs	r2, #0
 80088e2:	4604      	mov	r4, r0
 80088e4:	921a      	str	r2, [sp, #104]	; 0x68
 80088e6:	460d      	mov	r5, r1
 80088e8:	f04f 0800 	mov.w	r8, #0
 80088ec:	f04f 0900 	mov.w	r9, #0
 80088f0:	460a      	mov	r2, r1
 80088f2:	9219      	str	r2, [sp, #100]	; 0x64
 80088f4:	7811      	ldrb	r1, [r2, #0]
 80088f6:	292b      	cmp	r1, #43	; 0x2b
 80088f8:	d04a      	beq.n	8008990 <_strtod_l+0xb8>
 80088fa:	d838      	bhi.n	800896e <_strtod_l+0x96>
 80088fc:	290d      	cmp	r1, #13
 80088fe:	d832      	bhi.n	8008966 <_strtod_l+0x8e>
 8008900:	2908      	cmp	r1, #8
 8008902:	d832      	bhi.n	800896a <_strtod_l+0x92>
 8008904:	2900      	cmp	r1, #0
 8008906:	d03b      	beq.n	8008980 <_strtod_l+0xa8>
 8008908:	2200      	movs	r2, #0
 800890a:	920e      	str	r2, [sp, #56]	; 0x38
 800890c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800890e:	7832      	ldrb	r2, [r6, #0]
 8008910:	2a30      	cmp	r2, #48	; 0x30
 8008912:	f040 80b2 	bne.w	8008a7a <_strtod_l+0x1a2>
 8008916:	7872      	ldrb	r2, [r6, #1]
 8008918:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800891c:	2a58      	cmp	r2, #88	; 0x58
 800891e:	d16e      	bne.n	80089fe <_strtod_l+0x126>
 8008920:	9302      	str	r3, [sp, #8]
 8008922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008924:	4620      	mov	r0, r4
 8008926:	9301      	str	r3, [sp, #4]
 8008928:	ab1a      	add	r3, sp, #104	; 0x68
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	4a8c      	ldr	r2, [pc, #560]	; (8008b60 <_strtod_l+0x288>)
 800892e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008930:	a919      	add	r1, sp, #100	; 0x64
 8008932:	f001 f933 	bl	8009b9c <__gethex>
 8008936:	f010 070f 	ands.w	r7, r0, #15
 800893a:	4605      	mov	r5, r0
 800893c:	d005      	beq.n	800894a <_strtod_l+0x72>
 800893e:	2f06      	cmp	r7, #6
 8008940:	d128      	bne.n	8008994 <_strtod_l+0xbc>
 8008942:	2300      	movs	r3, #0
 8008944:	3601      	adds	r6, #1
 8008946:	9619      	str	r6, [sp, #100]	; 0x64
 8008948:	930e      	str	r3, [sp, #56]	; 0x38
 800894a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800894c:	2b00      	cmp	r3, #0
 800894e:	f040 85a0 	bne.w	8009492 <_strtod_l+0xbba>
 8008952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008954:	b1cb      	cbz	r3, 800898a <_strtod_l+0xb2>
 8008956:	4642      	mov	r2, r8
 8008958:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800895c:	4610      	mov	r0, r2
 800895e:	4619      	mov	r1, r3
 8008960:	b01f      	add	sp, #124	; 0x7c
 8008962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008966:	2920      	cmp	r1, #32
 8008968:	d1ce      	bne.n	8008908 <_strtod_l+0x30>
 800896a:	3201      	adds	r2, #1
 800896c:	e7c1      	b.n	80088f2 <_strtod_l+0x1a>
 800896e:	292d      	cmp	r1, #45	; 0x2d
 8008970:	d1ca      	bne.n	8008908 <_strtod_l+0x30>
 8008972:	2101      	movs	r1, #1
 8008974:	910e      	str	r1, [sp, #56]	; 0x38
 8008976:	1c51      	adds	r1, r2, #1
 8008978:	9119      	str	r1, [sp, #100]	; 0x64
 800897a:	7852      	ldrb	r2, [r2, #1]
 800897c:	2a00      	cmp	r2, #0
 800897e:	d1c5      	bne.n	800890c <_strtod_l+0x34>
 8008980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008982:	9519      	str	r5, [sp, #100]	; 0x64
 8008984:	2b00      	cmp	r3, #0
 8008986:	f040 8582 	bne.w	800948e <_strtod_l+0xbb6>
 800898a:	4642      	mov	r2, r8
 800898c:	464b      	mov	r3, r9
 800898e:	e7e5      	b.n	800895c <_strtod_l+0x84>
 8008990:	2100      	movs	r1, #0
 8008992:	e7ef      	b.n	8008974 <_strtod_l+0x9c>
 8008994:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008996:	b13a      	cbz	r2, 80089a8 <_strtod_l+0xd0>
 8008998:	2135      	movs	r1, #53	; 0x35
 800899a:	a81c      	add	r0, sp, #112	; 0x70
 800899c:	f7ff ff34 	bl	8008808 <__copybits>
 80089a0:	4620      	mov	r0, r4
 80089a2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80089a4:	f7ff fb18 	bl	8007fd8 <_Bfree>
 80089a8:	3f01      	subs	r7, #1
 80089aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80089ac:	2f04      	cmp	r7, #4
 80089ae:	d806      	bhi.n	80089be <_strtod_l+0xe6>
 80089b0:	e8df f007 	tbb	[pc, r7]
 80089b4:	201d0314 	.word	0x201d0314
 80089b8:	14          	.byte	0x14
 80089b9:	00          	.byte	0x00
 80089ba:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80089be:	05e9      	lsls	r1, r5, #23
 80089c0:	bf48      	it	mi
 80089c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80089c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089ca:	0d1b      	lsrs	r3, r3, #20
 80089cc:	051b      	lsls	r3, r3, #20
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1bb      	bne.n	800894a <_strtod_l+0x72>
 80089d2:	f7fe faf9 	bl	8006fc8 <__errno>
 80089d6:	2322      	movs	r3, #34	; 0x22
 80089d8:	6003      	str	r3, [r0, #0]
 80089da:	e7b6      	b.n	800894a <_strtod_l+0x72>
 80089dc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80089e0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80089e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80089e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80089ec:	e7e7      	b.n	80089be <_strtod_l+0xe6>
 80089ee:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008b64 <_strtod_l+0x28c>
 80089f2:	e7e4      	b.n	80089be <_strtod_l+0xe6>
 80089f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80089f8:	f04f 38ff 	mov.w	r8, #4294967295
 80089fc:	e7df      	b.n	80089be <_strtod_l+0xe6>
 80089fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	9219      	str	r2, [sp, #100]	; 0x64
 8008a04:	785b      	ldrb	r3, [r3, #1]
 8008a06:	2b30      	cmp	r3, #48	; 0x30
 8008a08:	d0f9      	beq.n	80089fe <_strtod_l+0x126>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d09d      	beq.n	800894a <_strtod_l+0x72>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f04f 0a00 	mov.w	sl, #0
 8008a14:	220a      	movs	r2, #10
 8008a16:	46d3      	mov	fp, sl
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a1c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a22:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008a24:	7806      	ldrb	r6, [r0, #0]
 8008a26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008a2a:	b2d9      	uxtb	r1, r3
 8008a2c:	2909      	cmp	r1, #9
 8008a2e:	d926      	bls.n	8008a7e <_strtod_l+0x1a6>
 8008a30:	2201      	movs	r2, #1
 8008a32:	494d      	ldr	r1, [pc, #308]	; (8008b68 <_strtod_l+0x290>)
 8008a34:	f000 fff8 	bl	8009a28 <strncmp>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d030      	beq.n	8008a9e <_strtod_l+0x1c6>
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	4632      	mov	r2, r6
 8008a40:	4603      	mov	r3, r0
 8008a42:	465e      	mov	r6, fp
 8008a44:	9008      	str	r0, [sp, #32]
 8008a46:	2a65      	cmp	r2, #101	; 0x65
 8008a48:	d001      	beq.n	8008a4e <_strtod_l+0x176>
 8008a4a:	2a45      	cmp	r2, #69	; 0x45
 8008a4c:	d113      	bne.n	8008a76 <_strtod_l+0x19e>
 8008a4e:	b91e      	cbnz	r6, 8008a58 <_strtod_l+0x180>
 8008a50:	9a05      	ldr	r2, [sp, #20]
 8008a52:	4302      	orrs	r2, r0
 8008a54:	d094      	beq.n	8008980 <_strtod_l+0xa8>
 8008a56:	2600      	movs	r6, #0
 8008a58:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008a5a:	1c6a      	adds	r2, r5, #1
 8008a5c:	9219      	str	r2, [sp, #100]	; 0x64
 8008a5e:	786a      	ldrb	r2, [r5, #1]
 8008a60:	2a2b      	cmp	r2, #43	; 0x2b
 8008a62:	d074      	beq.n	8008b4e <_strtod_l+0x276>
 8008a64:	2a2d      	cmp	r2, #45	; 0x2d
 8008a66:	d078      	beq.n	8008b5a <_strtod_l+0x282>
 8008a68:	f04f 0c00 	mov.w	ip, #0
 8008a6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008a70:	2909      	cmp	r1, #9
 8008a72:	d97f      	bls.n	8008b74 <_strtod_l+0x29c>
 8008a74:	9519      	str	r5, [sp, #100]	; 0x64
 8008a76:	2700      	movs	r7, #0
 8008a78:	e09e      	b.n	8008bb8 <_strtod_l+0x2e0>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e7c8      	b.n	8008a10 <_strtod_l+0x138>
 8008a7e:	f1bb 0f08 	cmp.w	fp, #8
 8008a82:	bfd8      	it	le
 8008a84:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008a86:	f100 0001 	add.w	r0, r0, #1
 8008a8a:	bfd6      	itet	le
 8008a8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a90:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008a94:	930a      	strle	r3, [sp, #40]	; 0x28
 8008a96:	f10b 0b01 	add.w	fp, fp, #1
 8008a9a:	9019      	str	r0, [sp, #100]	; 0x64
 8008a9c:	e7c1      	b.n	8008a22 <_strtod_l+0x14a>
 8008a9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	9219      	str	r2, [sp, #100]	; 0x64
 8008aa4:	785a      	ldrb	r2, [r3, #1]
 8008aa6:	f1bb 0f00 	cmp.w	fp, #0
 8008aaa:	d037      	beq.n	8008b1c <_strtod_l+0x244>
 8008aac:	465e      	mov	r6, fp
 8008aae:	9008      	str	r0, [sp, #32]
 8008ab0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ab4:	2b09      	cmp	r3, #9
 8008ab6:	d912      	bls.n	8008ade <_strtod_l+0x206>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e7c4      	b.n	8008a46 <_strtod_l+0x16e>
 8008abc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008abe:	3001      	adds	r0, #1
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	9219      	str	r2, [sp, #100]	; 0x64
 8008ac4:	785a      	ldrb	r2, [r3, #1]
 8008ac6:	2a30      	cmp	r2, #48	; 0x30
 8008ac8:	d0f8      	beq.n	8008abc <_strtod_l+0x1e4>
 8008aca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ace:	2b08      	cmp	r3, #8
 8008ad0:	f200 84e4 	bhi.w	800949c <_strtod_l+0xbc4>
 8008ad4:	9008      	str	r0, [sp, #32]
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	4606      	mov	r6, r0
 8008ada:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008adc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ade:	3a30      	subs	r2, #48	; 0x30
 8008ae0:	f100 0301 	add.w	r3, r0, #1
 8008ae4:	d014      	beq.n	8008b10 <_strtod_l+0x238>
 8008ae6:	9908      	ldr	r1, [sp, #32]
 8008ae8:	eb00 0c06 	add.w	ip, r0, r6
 8008aec:	4419      	add	r1, r3
 8008aee:	9108      	str	r1, [sp, #32]
 8008af0:	4633      	mov	r3, r6
 8008af2:	210a      	movs	r1, #10
 8008af4:	4563      	cmp	r3, ip
 8008af6:	d113      	bne.n	8008b20 <_strtod_l+0x248>
 8008af8:	1833      	adds	r3, r6, r0
 8008afa:	2b08      	cmp	r3, #8
 8008afc:	f106 0601 	add.w	r6, r6, #1
 8008b00:	4406      	add	r6, r0
 8008b02:	dc1a      	bgt.n	8008b3a <_strtod_l+0x262>
 8008b04:	230a      	movs	r3, #10
 8008b06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b08:	fb03 2301 	mla	r3, r3, r1, r2
 8008b0c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b12:	4618      	mov	r0, r3
 8008b14:	1c51      	adds	r1, r2, #1
 8008b16:	9119      	str	r1, [sp, #100]	; 0x64
 8008b18:	7852      	ldrb	r2, [r2, #1]
 8008b1a:	e7c9      	b.n	8008ab0 <_strtod_l+0x1d8>
 8008b1c:	4658      	mov	r0, fp
 8008b1e:	e7d2      	b.n	8008ac6 <_strtod_l+0x1ee>
 8008b20:	2b08      	cmp	r3, #8
 8008b22:	f103 0301 	add.w	r3, r3, #1
 8008b26:	dc03      	bgt.n	8008b30 <_strtod_l+0x258>
 8008b28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008b2a:	434f      	muls	r7, r1
 8008b2c:	970a      	str	r7, [sp, #40]	; 0x28
 8008b2e:	e7e1      	b.n	8008af4 <_strtod_l+0x21c>
 8008b30:	2b10      	cmp	r3, #16
 8008b32:	bfd8      	it	le
 8008b34:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008b38:	e7dc      	b.n	8008af4 <_strtod_l+0x21c>
 8008b3a:	2e10      	cmp	r6, #16
 8008b3c:	bfdc      	itt	le
 8008b3e:	230a      	movle	r3, #10
 8008b40:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008b44:	e7e3      	b.n	8008b0e <_strtod_l+0x236>
 8008b46:	2300      	movs	r3, #0
 8008b48:	9308      	str	r3, [sp, #32]
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e780      	b.n	8008a50 <_strtod_l+0x178>
 8008b4e:	f04f 0c00 	mov.w	ip, #0
 8008b52:	1caa      	adds	r2, r5, #2
 8008b54:	9219      	str	r2, [sp, #100]	; 0x64
 8008b56:	78aa      	ldrb	r2, [r5, #2]
 8008b58:	e788      	b.n	8008a6c <_strtod_l+0x194>
 8008b5a:	f04f 0c01 	mov.w	ip, #1
 8008b5e:	e7f8      	b.n	8008b52 <_strtod_l+0x27a>
 8008b60:	0800abd8 	.word	0x0800abd8
 8008b64:	7ff00000 	.word	0x7ff00000
 8008b68:	0800abd4 	.word	0x0800abd4
 8008b6c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b6e:	1c51      	adds	r1, r2, #1
 8008b70:	9119      	str	r1, [sp, #100]	; 0x64
 8008b72:	7852      	ldrb	r2, [r2, #1]
 8008b74:	2a30      	cmp	r2, #48	; 0x30
 8008b76:	d0f9      	beq.n	8008b6c <_strtod_l+0x294>
 8008b78:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008b7c:	2908      	cmp	r1, #8
 8008b7e:	f63f af7a 	bhi.w	8008a76 <_strtod_l+0x19e>
 8008b82:	3a30      	subs	r2, #48	; 0x30
 8008b84:	9209      	str	r2, [sp, #36]	; 0x24
 8008b86:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b88:	920c      	str	r2, [sp, #48]	; 0x30
 8008b8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b8c:	1c57      	adds	r7, r2, #1
 8008b8e:	9719      	str	r7, [sp, #100]	; 0x64
 8008b90:	7852      	ldrb	r2, [r2, #1]
 8008b92:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008b96:	f1be 0f09 	cmp.w	lr, #9
 8008b9a:	d938      	bls.n	8008c0e <_strtod_l+0x336>
 8008b9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b9e:	1a7f      	subs	r7, r7, r1
 8008ba0:	2f08      	cmp	r7, #8
 8008ba2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008ba6:	dc03      	bgt.n	8008bb0 <_strtod_l+0x2d8>
 8008ba8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008baa:	428f      	cmp	r7, r1
 8008bac:	bfa8      	it	ge
 8008bae:	460f      	movge	r7, r1
 8008bb0:	f1bc 0f00 	cmp.w	ip, #0
 8008bb4:	d000      	beq.n	8008bb8 <_strtod_l+0x2e0>
 8008bb6:	427f      	negs	r7, r7
 8008bb8:	2e00      	cmp	r6, #0
 8008bba:	d14f      	bne.n	8008c5c <_strtod_l+0x384>
 8008bbc:	9905      	ldr	r1, [sp, #20]
 8008bbe:	4301      	orrs	r1, r0
 8008bc0:	f47f aec3 	bne.w	800894a <_strtod_l+0x72>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f47f aedb 	bne.w	8008980 <_strtod_l+0xa8>
 8008bca:	2a69      	cmp	r2, #105	; 0x69
 8008bcc:	d029      	beq.n	8008c22 <_strtod_l+0x34a>
 8008bce:	dc26      	bgt.n	8008c1e <_strtod_l+0x346>
 8008bd0:	2a49      	cmp	r2, #73	; 0x49
 8008bd2:	d026      	beq.n	8008c22 <_strtod_l+0x34a>
 8008bd4:	2a4e      	cmp	r2, #78	; 0x4e
 8008bd6:	f47f aed3 	bne.w	8008980 <_strtod_l+0xa8>
 8008bda:	499a      	ldr	r1, [pc, #616]	; (8008e44 <_strtod_l+0x56c>)
 8008bdc:	a819      	add	r0, sp, #100	; 0x64
 8008bde:	f001 fa1f 	bl	800a020 <__match>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	f43f aecc 	beq.w	8008980 <_strtod_l+0xa8>
 8008be8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b28      	cmp	r3, #40	; 0x28
 8008bee:	d12f      	bne.n	8008c50 <_strtod_l+0x378>
 8008bf0:	4995      	ldr	r1, [pc, #596]	; (8008e48 <_strtod_l+0x570>)
 8008bf2:	aa1c      	add	r2, sp, #112	; 0x70
 8008bf4:	a819      	add	r0, sp, #100	; 0x64
 8008bf6:	f001 fa27 	bl	800a048 <__hexnan>
 8008bfa:	2805      	cmp	r0, #5
 8008bfc:	d128      	bne.n	8008c50 <_strtod_l+0x378>
 8008bfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c00:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008c04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008c08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008c0c:	e69d      	b.n	800894a <_strtod_l+0x72>
 8008c0e:	210a      	movs	r1, #10
 8008c10:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c12:	fb01 2107 	mla	r1, r1, r7, r2
 8008c16:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008c1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c1c:	e7b5      	b.n	8008b8a <_strtod_l+0x2b2>
 8008c1e:	2a6e      	cmp	r2, #110	; 0x6e
 8008c20:	e7d9      	b.n	8008bd6 <_strtod_l+0x2fe>
 8008c22:	498a      	ldr	r1, [pc, #552]	; (8008e4c <_strtod_l+0x574>)
 8008c24:	a819      	add	r0, sp, #100	; 0x64
 8008c26:	f001 f9fb 	bl	800a020 <__match>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	f43f aea8 	beq.w	8008980 <_strtod_l+0xa8>
 8008c30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c32:	4987      	ldr	r1, [pc, #540]	; (8008e50 <_strtod_l+0x578>)
 8008c34:	3b01      	subs	r3, #1
 8008c36:	a819      	add	r0, sp, #100	; 0x64
 8008c38:	9319      	str	r3, [sp, #100]	; 0x64
 8008c3a:	f001 f9f1 	bl	800a020 <__match>
 8008c3e:	b910      	cbnz	r0, 8008c46 <_strtod_l+0x36e>
 8008c40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c42:	3301      	adds	r3, #1
 8008c44:	9319      	str	r3, [sp, #100]	; 0x64
 8008c46:	f04f 0800 	mov.w	r8, #0
 8008c4a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008e54 <_strtod_l+0x57c>
 8008c4e:	e67c      	b.n	800894a <_strtod_l+0x72>
 8008c50:	4881      	ldr	r0, [pc, #516]	; (8008e58 <_strtod_l+0x580>)
 8008c52:	f000 ff19 	bl	8009a88 <nan>
 8008c56:	4680      	mov	r8, r0
 8008c58:	4689      	mov	r9, r1
 8008c5a:	e676      	b.n	800894a <_strtod_l+0x72>
 8008c5c:	9b08      	ldr	r3, [sp, #32]
 8008c5e:	f1bb 0f00 	cmp.w	fp, #0
 8008c62:	bf08      	it	eq
 8008c64:	46b3      	moveq	fp, r6
 8008c66:	1afb      	subs	r3, r7, r3
 8008c68:	2e10      	cmp	r6, #16
 8008c6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c6c:	4635      	mov	r5, r6
 8008c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c70:	bfa8      	it	ge
 8008c72:	2510      	movge	r5, #16
 8008c74:	f7f7 fbc0 	bl	80003f8 <__aeabi_ui2d>
 8008c78:	2e09      	cmp	r6, #9
 8008c7a:	4680      	mov	r8, r0
 8008c7c:	4689      	mov	r9, r1
 8008c7e:	dd13      	ble.n	8008ca8 <_strtod_l+0x3d0>
 8008c80:	4b76      	ldr	r3, [pc, #472]	; (8008e5c <_strtod_l+0x584>)
 8008c82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008c86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008c8a:	f7f7 fc2f 	bl	80004ec <__aeabi_dmul>
 8008c8e:	4680      	mov	r8, r0
 8008c90:	4650      	mov	r0, sl
 8008c92:	4689      	mov	r9, r1
 8008c94:	f7f7 fbb0 	bl	80003f8 <__aeabi_ui2d>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	f7f7 fa6e 	bl	8000180 <__adddf3>
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	4689      	mov	r9, r1
 8008ca8:	2e0f      	cmp	r6, #15
 8008caa:	dc36      	bgt.n	8008d1a <_strtod_l+0x442>
 8008cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f43f ae4b 	beq.w	800894a <_strtod_l+0x72>
 8008cb4:	dd22      	ble.n	8008cfc <_strtod_l+0x424>
 8008cb6:	2b16      	cmp	r3, #22
 8008cb8:	dc09      	bgt.n	8008cce <_strtod_l+0x3f6>
 8008cba:	4968      	ldr	r1, [pc, #416]	; (8008e5c <_strtod_l+0x584>)
 8008cbc:	4642      	mov	r2, r8
 8008cbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cc8:	f7f7 fc10 	bl	80004ec <__aeabi_dmul>
 8008ccc:	e7c3      	b.n	8008c56 <_strtod_l+0x37e>
 8008cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cd0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	db20      	blt.n	8008d1a <_strtod_l+0x442>
 8008cd8:	4c60      	ldr	r4, [pc, #384]	; (8008e5c <_strtod_l+0x584>)
 8008cda:	f1c6 060f 	rsb	r6, r6, #15
 8008cde:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008ce2:	4642      	mov	r2, r8
 8008ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce8:	464b      	mov	r3, r9
 8008cea:	f7f7 fbff 	bl	80004ec <__aeabi_dmul>
 8008cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf0:	1b9e      	subs	r6, r3, r6
 8008cf2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008cf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008cfa:	e7e5      	b.n	8008cc8 <_strtod_l+0x3f0>
 8008cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cfe:	3316      	adds	r3, #22
 8008d00:	db0b      	blt.n	8008d1a <_strtod_l+0x442>
 8008d02:	9b08      	ldr	r3, [sp, #32]
 8008d04:	4640      	mov	r0, r8
 8008d06:	1bdf      	subs	r7, r3, r7
 8008d08:	4b54      	ldr	r3, [pc, #336]	; (8008e5c <_strtod_l+0x584>)
 8008d0a:	4649      	mov	r1, r9
 8008d0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d14:	f7f7 fd14 	bl	8000740 <__aeabi_ddiv>
 8008d18:	e79d      	b.n	8008c56 <_strtod_l+0x37e>
 8008d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1c:	1b75      	subs	r5, r6, r5
 8008d1e:	441d      	add	r5, r3
 8008d20:	2d00      	cmp	r5, #0
 8008d22:	dd70      	ble.n	8008e06 <_strtod_l+0x52e>
 8008d24:	f015 030f 	ands.w	r3, r5, #15
 8008d28:	d00a      	beq.n	8008d40 <_strtod_l+0x468>
 8008d2a:	494c      	ldr	r1, [pc, #304]	; (8008e5c <_strtod_l+0x584>)
 8008d2c:	4642      	mov	r2, r8
 8008d2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d36:	464b      	mov	r3, r9
 8008d38:	f7f7 fbd8 	bl	80004ec <__aeabi_dmul>
 8008d3c:	4680      	mov	r8, r0
 8008d3e:	4689      	mov	r9, r1
 8008d40:	f035 050f 	bics.w	r5, r5, #15
 8008d44:	d04d      	beq.n	8008de2 <_strtod_l+0x50a>
 8008d46:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008d4a:	dd22      	ble.n	8008d92 <_strtod_l+0x4ba>
 8008d4c:	2600      	movs	r6, #0
 8008d4e:	46b3      	mov	fp, r6
 8008d50:	960b      	str	r6, [sp, #44]	; 0x2c
 8008d52:	9608      	str	r6, [sp, #32]
 8008d54:	2322      	movs	r3, #34	; 0x22
 8008d56:	f04f 0800 	mov.w	r8, #0
 8008d5a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008e54 <_strtod_l+0x57c>
 8008d5e:	6023      	str	r3, [r4, #0]
 8008d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f43f adf1 	beq.w	800894a <_strtod_l+0x72>
 8008d68:	4620      	mov	r0, r4
 8008d6a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d6c:	f7ff f934 	bl	8007fd8 <_Bfree>
 8008d70:	4620      	mov	r0, r4
 8008d72:	9908      	ldr	r1, [sp, #32]
 8008d74:	f7ff f930 	bl	8007fd8 <_Bfree>
 8008d78:	4659      	mov	r1, fp
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7ff f92c 	bl	8007fd8 <_Bfree>
 8008d80:	4620      	mov	r0, r4
 8008d82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d84:	f7ff f928 	bl	8007fd8 <_Bfree>
 8008d88:	4631      	mov	r1, r6
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f7ff f924 	bl	8007fd8 <_Bfree>
 8008d90:	e5db      	b.n	800894a <_strtod_l+0x72>
 8008d92:	4b33      	ldr	r3, [pc, #204]	; (8008e60 <_strtod_l+0x588>)
 8008d94:	4640      	mov	r0, r8
 8008d96:	9305      	str	r3, [sp, #20]
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	469a      	mov	sl, r3
 8008d9e:	112d      	asrs	r5, r5, #4
 8008da0:	2d01      	cmp	r5, #1
 8008da2:	dc21      	bgt.n	8008de8 <_strtod_l+0x510>
 8008da4:	b10b      	cbz	r3, 8008daa <_strtod_l+0x4d2>
 8008da6:	4680      	mov	r8, r0
 8008da8:	4689      	mov	r9, r1
 8008daa:	492d      	ldr	r1, [pc, #180]	; (8008e60 <_strtod_l+0x588>)
 8008dac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008db0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008db4:	4642      	mov	r2, r8
 8008db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dba:	464b      	mov	r3, r9
 8008dbc:	f7f7 fb96 	bl	80004ec <__aeabi_dmul>
 8008dc0:	4b24      	ldr	r3, [pc, #144]	; (8008e54 <_strtod_l+0x57c>)
 8008dc2:	460a      	mov	r2, r1
 8008dc4:	400b      	ands	r3, r1
 8008dc6:	4927      	ldr	r1, [pc, #156]	; (8008e64 <_strtod_l+0x58c>)
 8008dc8:	4680      	mov	r8, r0
 8008dca:	428b      	cmp	r3, r1
 8008dcc:	d8be      	bhi.n	8008d4c <_strtod_l+0x474>
 8008dce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008dd2:	428b      	cmp	r3, r1
 8008dd4:	bf86      	itte	hi
 8008dd6:	f04f 38ff 	movhi.w	r8, #4294967295
 8008dda:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008e68 <_strtod_l+0x590>
 8008dde:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008de2:	2300      	movs	r3, #0
 8008de4:	9305      	str	r3, [sp, #20]
 8008de6:	e07b      	b.n	8008ee0 <_strtod_l+0x608>
 8008de8:	07ea      	lsls	r2, r5, #31
 8008dea:	d505      	bpl.n	8008df8 <_strtod_l+0x520>
 8008dec:	9b05      	ldr	r3, [sp, #20]
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	f7f7 fb7b 	bl	80004ec <__aeabi_dmul>
 8008df6:	2301      	movs	r3, #1
 8008df8:	9a05      	ldr	r2, [sp, #20]
 8008dfa:	f10a 0a01 	add.w	sl, sl, #1
 8008dfe:	3208      	adds	r2, #8
 8008e00:	106d      	asrs	r5, r5, #1
 8008e02:	9205      	str	r2, [sp, #20]
 8008e04:	e7cc      	b.n	8008da0 <_strtod_l+0x4c8>
 8008e06:	d0ec      	beq.n	8008de2 <_strtod_l+0x50a>
 8008e08:	426d      	negs	r5, r5
 8008e0a:	f015 020f 	ands.w	r2, r5, #15
 8008e0e:	d00a      	beq.n	8008e26 <_strtod_l+0x54e>
 8008e10:	4b12      	ldr	r3, [pc, #72]	; (8008e5c <_strtod_l+0x584>)
 8008e12:	4640      	mov	r0, r8
 8008e14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e18:	4649      	mov	r1, r9
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	f7f7 fc8f 	bl	8000740 <__aeabi_ddiv>
 8008e22:	4680      	mov	r8, r0
 8008e24:	4689      	mov	r9, r1
 8008e26:	112d      	asrs	r5, r5, #4
 8008e28:	d0db      	beq.n	8008de2 <_strtod_l+0x50a>
 8008e2a:	2d1f      	cmp	r5, #31
 8008e2c:	dd1e      	ble.n	8008e6c <_strtod_l+0x594>
 8008e2e:	2600      	movs	r6, #0
 8008e30:	46b3      	mov	fp, r6
 8008e32:	960b      	str	r6, [sp, #44]	; 0x2c
 8008e34:	9608      	str	r6, [sp, #32]
 8008e36:	2322      	movs	r3, #34	; 0x22
 8008e38:	f04f 0800 	mov.w	r8, #0
 8008e3c:	f04f 0900 	mov.w	r9, #0
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	e78d      	b.n	8008d60 <_strtod_l+0x488>
 8008e44:	0800a92f 	.word	0x0800a92f
 8008e48:	0800abec 	.word	0x0800abec
 8008e4c:	0800a927 	.word	0x0800a927
 8008e50:	0800aa0b 	.word	0x0800aa0b
 8008e54:	7ff00000 	.word	0x7ff00000
 8008e58:	0800aa07 	.word	0x0800aa07
 8008e5c:	0800ab00 	.word	0x0800ab00
 8008e60:	0800aad8 	.word	0x0800aad8
 8008e64:	7ca00000 	.word	0x7ca00000
 8008e68:	7fefffff 	.word	0x7fefffff
 8008e6c:	f015 0310 	ands.w	r3, r5, #16
 8008e70:	bf18      	it	ne
 8008e72:	236a      	movne	r3, #106	; 0x6a
 8008e74:	4640      	mov	r0, r8
 8008e76:	9305      	str	r3, [sp, #20]
 8008e78:	4649      	mov	r1, r9
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009148 <_strtod_l+0x870>
 8008e80:	07ea      	lsls	r2, r5, #31
 8008e82:	d504      	bpl.n	8008e8e <_strtod_l+0x5b6>
 8008e84:	e9da 2300 	ldrd	r2, r3, [sl]
 8008e88:	f7f7 fb30 	bl	80004ec <__aeabi_dmul>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	106d      	asrs	r5, r5, #1
 8008e90:	f10a 0a08 	add.w	sl, sl, #8
 8008e94:	d1f4      	bne.n	8008e80 <_strtod_l+0x5a8>
 8008e96:	b10b      	cbz	r3, 8008e9c <_strtod_l+0x5c4>
 8008e98:	4680      	mov	r8, r0
 8008e9a:	4689      	mov	r9, r1
 8008e9c:	9b05      	ldr	r3, [sp, #20]
 8008e9e:	b1bb      	cbz	r3, 8008ed0 <_strtod_l+0x5f8>
 8008ea0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008ea4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	4649      	mov	r1, r9
 8008eac:	dd10      	ble.n	8008ed0 <_strtod_l+0x5f8>
 8008eae:	2b1f      	cmp	r3, #31
 8008eb0:	f340 8128 	ble.w	8009104 <_strtod_l+0x82c>
 8008eb4:	2b34      	cmp	r3, #52	; 0x34
 8008eb6:	bfd8      	it	le
 8008eb8:	f04f 33ff 	movle.w	r3, #4294967295
 8008ebc:	f04f 0800 	mov.w	r8, #0
 8008ec0:	bfcf      	iteee	gt
 8008ec2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008ec6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008eca:	4093      	lslle	r3, r2
 8008ecc:	ea03 0901 	andle.w	r9, r3, r1
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	4640      	mov	r0, r8
 8008ed6:	4649      	mov	r1, r9
 8008ed8:	f7f7 fd70 	bl	80009bc <__aeabi_dcmpeq>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d1a6      	bne.n	8008e2e <_strtod_l+0x556>
 8008ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee2:	465a      	mov	r2, fp
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	4633      	mov	r3, r6
 8008eea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eec:	f7ff f8dc 	bl	80080a8 <__s2b>
 8008ef0:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	f43f af2a 	beq.w	8008d4c <_strtod_l+0x474>
 8008ef8:	2600      	movs	r6, #0
 8008efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008efc:	9b08      	ldr	r3, [sp, #32]
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	eba3 0307 	sub.w	r3, r3, r7
 8008f04:	bfa8      	it	ge
 8008f06:	2300      	movge	r3, #0
 8008f08:	46b3      	mov	fp, r6
 8008f0a:	9312      	str	r3, [sp, #72]	; 0x48
 8008f0c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f10:	9316      	str	r3, [sp, #88]	; 0x58
 8008f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f14:	4620      	mov	r0, r4
 8008f16:	6859      	ldr	r1, [r3, #4]
 8008f18:	f7ff f81e 	bl	8007f58 <_Balloc>
 8008f1c:	9008      	str	r0, [sp, #32]
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f43f af18 	beq.w	8008d54 <_strtod_l+0x47c>
 8008f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f26:	300c      	adds	r0, #12
 8008f28:	691a      	ldr	r2, [r3, #16]
 8008f2a:	f103 010c 	add.w	r1, r3, #12
 8008f2e:	3202      	adds	r2, #2
 8008f30:	0092      	lsls	r2, r2, #2
 8008f32:	f000 fd9b 	bl	8009a6c <memcpy>
 8008f36:	ab1c      	add	r3, sp, #112	; 0x70
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	ab1b      	add	r3, sp, #108	; 0x6c
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	4642      	mov	r2, r8
 8008f40:	464b      	mov	r3, r9
 8008f42:	4620      	mov	r0, r4
 8008f44:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008f48:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008f4c:	f7ff fbd8 	bl	8008700 <__d2b>
 8008f50:	901a      	str	r0, [sp, #104]	; 0x68
 8008f52:	2800      	cmp	r0, #0
 8008f54:	f43f aefe 	beq.w	8008d54 <_strtod_l+0x47c>
 8008f58:	2101      	movs	r1, #1
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f7ff f93c 	bl	80081d8 <__i2b>
 8008f60:	4683      	mov	fp, r0
 8008f62:	2800      	cmp	r0, #0
 8008f64:	f43f aef6 	beq.w	8008d54 <_strtod_l+0x47c>
 8008f68:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008f6a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008f6c:	2f00      	cmp	r7, #0
 8008f6e:	bfab      	itete	ge
 8008f70:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8008f72:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008f74:	eb07 0a03 	addge.w	sl, r7, r3
 8008f78:	1bdd      	sublt	r5, r3, r7
 8008f7a:	9b05      	ldr	r3, [sp, #20]
 8008f7c:	bfa8      	it	ge
 8008f7e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008f80:	eba7 0703 	sub.w	r7, r7, r3
 8008f84:	4417      	add	r7, r2
 8008f86:	4b71      	ldr	r3, [pc, #452]	; (800914c <_strtod_l+0x874>)
 8008f88:	f107 37ff 	add.w	r7, r7, #4294967295
 8008f8c:	bfb8      	it	lt
 8008f8e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008f92:	429f      	cmp	r7, r3
 8008f94:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008f98:	f280 80c7 	bge.w	800912a <_strtod_l+0x852>
 8008f9c:	1bdb      	subs	r3, r3, r7
 8008f9e:	2b1f      	cmp	r3, #31
 8008fa0:	f04f 0101 	mov.w	r1, #1
 8008fa4:	eba2 0203 	sub.w	r2, r2, r3
 8008fa8:	f300 80b3 	bgt.w	8009112 <_strtod_l+0x83a>
 8008fac:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	9310      	str	r3, [sp, #64]	; 0x40
 8008fb6:	eb0a 0702 	add.w	r7, sl, r2
 8008fba:	9b05      	ldr	r3, [sp, #20]
 8008fbc:	45ba      	cmp	sl, r7
 8008fbe:	4415      	add	r5, r2
 8008fc0:	441d      	add	r5, r3
 8008fc2:	4653      	mov	r3, sl
 8008fc4:	bfa8      	it	ge
 8008fc6:	463b      	movge	r3, r7
 8008fc8:	42ab      	cmp	r3, r5
 8008fca:	bfa8      	it	ge
 8008fcc:	462b      	movge	r3, r5
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bfc2      	ittt	gt
 8008fd2:	1aff      	subgt	r7, r7, r3
 8008fd4:	1aed      	subgt	r5, r5, r3
 8008fd6:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008fda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	dd17      	ble.n	8009010 <_strtod_l+0x738>
 8008fe0:	4659      	mov	r1, fp
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f7ff f9b5 	bl	8008354 <__pow5mult>
 8008fea:	4683      	mov	fp, r0
 8008fec:	2800      	cmp	r0, #0
 8008fee:	f43f aeb1 	beq.w	8008d54 <_strtod_l+0x47c>
 8008ff2:	4601      	mov	r1, r0
 8008ff4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f7ff f904 	bl	8008204 <__multiply>
 8008ffc:	900a      	str	r0, [sp, #40]	; 0x28
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f43f aea8 	beq.w	8008d54 <_strtod_l+0x47c>
 8009004:	4620      	mov	r0, r4
 8009006:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009008:	f7fe ffe6 	bl	8007fd8 <_Bfree>
 800900c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800900e:	931a      	str	r3, [sp, #104]	; 0x68
 8009010:	2f00      	cmp	r7, #0
 8009012:	f300 808f 	bgt.w	8009134 <_strtod_l+0x85c>
 8009016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	dd08      	ble.n	800902e <_strtod_l+0x756>
 800901c:	4620      	mov	r0, r4
 800901e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009020:	9908      	ldr	r1, [sp, #32]
 8009022:	f7ff f997 	bl	8008354 <__pow5mult>
 8009026:	9008      	str	r0, [sp, #32]
 8009028:	2800      	cmp	r0, #0
 800902a:	f43f ae93 	beq.w	8008d54 <_strtod_l+0x47c>
 800902e:	2d00      	cmp	r5, #0
 8009030:	dd08      	ble.n	8009044 <_strtod_l+0x76c>
 8009032:	462a      	mov	r2, r5
 8009034:	4620      	mov	r0, r4
 8009036:	9908      	ldr	r1, [sp, #32]
 8009038:	f7ff f9e6 	bl	8008408 <__lshift>
 800903c:	9008      	str	r0, [sp, #32]
 800903e:	2800      	cmp	r0, #0
 8009040:	f43f ae88 	beq.w	8008d54 <_strtod_l+0x47c>
 8009044:	f1ba 0f00 	cmp.w	sl, #0
 8009048:	dd08      	ble.n	800905c <_strtod_l+0x784>
 800904a:	4659      	mov	r1, fp
 800904c:	4652      	mov	r2, sl
 800904e:	4620      	mov	r0, r4
 8009050:	f7ff f9da 	bl	8008408 <__lshift>
 8009054:	4683      	mov	fp, r0
 8009056:	2800      	cmp	r0, #0
 8009058:	f43f ae7c 	beq.w	8008d54 <_strtod_l+0x47c>
 800905c:	4620      	mov	r0, r4
 800905e:	9a08      	ldr	r2, [sp, #32]
 8009060:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009062:	f7ff fa59 	bl	8008518 <__mdiff>
 8009066:	4606      	mov	r6, r0
 8009068:	2800      	cmp	r0, #0
 800906a:	f43f ae73 	beq.w	8008d54 <_strtod_l+0x47c>
 800906e:	2500      	movs	r5, #0
 8009070:	68c3      	ldr	r3, [r0, #12]
 8009072:	4659      	mov	r1, fp
 8009074:	60c5      	str	r5, [r0, #12]
 8009076:	930a      	str	r3, [sp, #40]	; 0x28
 8009078:	f7ff fa32 	bl	80084e0 <__mcmp>
 800907c:	42a8      	cmp	r0, r5
 800907e:	da6b      	bge.n	8009158 <_strtod_l+0x880>
 8009080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009082:	ea53 0308 	orrs.w	r3, r3, r8
 8009086:	f040 808f 	bne.w	80091a8 <_strtod_l+0x8d0>
 800908a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800908e:	2b00      	cmp	r3, #0
 8009090:	f040 808a 	bne.w	80091a8 <_strtod_l+0x8d0>
 8009094:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009098:	0d1b      	lsrs	r3, r3, #20
 800909a:	051b      	lsls	r3, r3, #20
 800909c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80090a0:	f240 8082 	bls.w	80091a8 <_strtod_l+0x8d0>
 80090a4:	6973      	ldr	r3, [r6, #20]
 80090a6:	b913      	cbnz	r3, 80090ae <_strtod_l+0x7d6>
 80090a8:	6933      	ldr	r3, [r6, #16]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	dd7c      	ble.n	80091a8 <_strtod_l+0x8d0>
 80090ae:	4631      	mov	r1, r6
 80090b0:	2201      	movs	r2, #1
 80090b2:	4620      	mov	r0, r4
 80090b4:	f7ff f9a8 	bl	8008408 <__lshift>
 80090b8:	4659      	mov	r1, fp
 80090ba:	4606      	mov	r6, r0
 80090bc:	f7ff fa10 	bl	80084e0 <__mcmp>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	dd71      	ble.n	80091a8 <_strtod_l+0x8d0>
 80090c4:	9905      	ldr	r1, [sp, #20]
 80090c6:	464b      	mov	r3, r9
 80090c8:	4a21      	ldr	r2, [pc, #132]	; (8009150 <_strtod_l+0x878>)
 80090ca:	2900      	cmp	r1, #0
 80090cc:	f000 808d 	beq.w	80091ea <_strtod_l+0x912>
 80090d0:	ea02 0109 	and.w	r1, r2, r9
 80090d4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80090d8:	f300 8087 	bgt.w	80091ea <_strtod_l+0x912>
 80090dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80090e0:	f77f aea9 	ble.w	8008e36 <_strtod_l+0x55e>
 80090e4:	4640      	mov	r0, r8
 80090e6:	4649      	mov	r1, r9
 80090e8:	4b1a      	ldr	r3, [pc, #104]	; (8009154 <_strtod_l+0x87c>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	f7f7 f9fe 	bl	80004ec <__aeabi_dmul>
 80090f0:	4b17      	ldr	r3, [pc, #92]	; (8009150 <_strtod_l+0x878>)
 80090f2:	4680      	mov	r8, r0
 80090f4:	400b      	ands	r3, r1
 80090f6:	4689      	mov	r9, r1
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f47f ae35 	bne.w	8008d68 <_strtod_l+0x490>
 80090fe:	2322      	movs	r3, #34	; 0x22
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	e631      	b.n	8008d68 <_strtod_l+0x490>
 8009104:	f04f 32ff 	mov.w	r2, #4294967295
 8009108:	fa02 f303 	lsl.w	r3, r2, r3
 800910c:	ea03 0808 	and.w	r8, r3, r8
 8009110:	e6de      	b.n	8008ed0 <_strtod_l+0x5f8>
 8009112:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8009116:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800911a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800911e:	37e2      	adds	r7, #226	; 0xe2
 8009120:	fa01 f307 	lsl.w	r3, r1, r7
 8009124:	9310      	str	r3, [sp, #64]	; 0x40
 8009126:	9113      	str	r1, [sp, #76]	; 0x4c
 8009128:	e745      	b.n	8008fb6 <_strtod_l+0x6de>
 800912a:	2300      	movs	r3, #0
 800912c:	9310      	str	r3, [sp, #64]	; 0x40
 800912e:	2301      	movs	r3, #1
 8009130:	9313      	str	r3, [sp, #76]	; 0x4c
 8009132:	e740      	b.n	8008fb6 <_strtod_l+0x6de>
 8009134:	463a      	mov	r2, r7
 8009136:	4620      	mov	r0, r4
 8009138:	991a      	ldr	r1, [sp, #104]	; 0x68
 800913a:	f7ff f965 	bl	8008408 <__lshift>
 800913e:	901a      	str	r0, [sp, #104]	; 0x68
 8009140:	2800      	cmp	r0, #0
 8009142:	f47f af68 	bne.w	8009016 <_strtod_l+0x73e>
 8009146:	e605      	b.n	8008d54 <_strtod_l+0x47c>
 8009148:	0800ac00 	.word	0x0800ac00
 800914c:	fffffc02 	.word	0xfffffc02
 8009150:	7ff00000 	.word	0x7ff00000
 8009154:	39500000 	.word	0x39500000
 8009158:	46ca      	mov	sl, r9
 800915a:	d165      	bne.n	8009228 <_strtod_l+0x950>
 800915c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800915e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009162:	b352      	cbz	r2, 80091ba <_strtod_l+0x8e2>
 8009164:	4a9e      	ldr	r2, [pc, #632]	; (80093e0 <_strtod_l+0xb08>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d12a      	bne.n	80091c0 <_strtod_l+0x8e8>
 800916a:	9b05      	ldr	r3, [sp, #20]
 800916c:	4641      	mov	r1, r8
 800916e:	b1fb      	cbz	r3, 80091b0 <_strtod_l+0x8d8>
 8009170:	4b9c      	ldr	r3, [pc, #624]	; (80093e4 <_strtod_l+0xb0c>)
 8009172:	f04f 32ff 	mov.w	r2, #4294967295
 8009176:	ea09 0303 	and.w	r3, r9, r3
 800917a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800917e:	d81a      	bhi.n	80091b6 <_strtod_l+0x8de>
 8009180:	0d1b      	lsrs	r3, r3, #20
 8009182:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009186:	fa02 f303 	lsl.w	r3, r2, r3
 800918a:	4299      	cmp	r1, r3
 800918c:	d118      	bne.n	80091c0 <_strtod_l+0x8e8>
 800918e:	4b96      	ldr	r3, [pc, #600]	; (80093e8 <_strtod_l+0xb10>)
 8009190:	459a      	cmp	sl, r3
 8009192:	d102      	bne.n	800919a <_strtod_l+0x8c2>
 8009194:	3101      	adds	r1, #1
 8009196:	f43f addd 	beq.w	8008d54 <_strtod_l+0x47c>
 800919a:	f04f 0800 	mov.w	r8, #0
 800919e:	4b91      	ldr	r3, [pc, #580]	; (80093e4 <_strtod_l+0xb0c>)
 80091a0:	ea0a 0303 	and.w	r3, sl, r3
 80091a4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80091a8:	9b05      	ldr	r3, [sp, #20]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d19a      	bne.n	80090e4 <_strtod_l+0x80c>
 80091ae:	e5db      	b.n	8008d68 <_strtod_l+0x490>
 80091b0:	f04f 33ff 	mov.w	r3, #4294967295
 80091b4:	e7e9      	b.n	800918a <_strtod_l+0x8b2>
 80091b6:	4613      	mov	r3, r2
 80091b8:	e7e7      	b.n	800918a <_strtod_l+0x8b2>
 80091ba:	ea53 0308 	orrs.w	r3, r3, r8
 80091be:	d081      	beq.n	80090c4 <_strtod_l+0x7ec>
 80091c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091c2:	b1e3      	cbz	r3, 80091fe <_strtod_l+0x926>
 80091c4:	ea13 0f0a 	tst.w	r3, sl
 80091c8:	d0ee      	beq.n	80091a8 <_strtod_l+0x8d0>
 80091ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091cc:	4640      	mov	r0, r8
 80091ce:	4649      	mov	r1, r9
 80091d0:	9a05      	ldr	r2, [sp, #20]
 80091d2:	b1c3      	cbz	r3, 8009206 <_strtod_l+0x92e>
 80091d4:	f7ff fb5c 	bl	8008890 <sulp>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80091de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80091e0:	f7f6 ffce 	bl	8000180 <__adddf3>
 80091e4:	4680      	mov	r8, r0
 80091e6:	4689      	mov	r9, r1
 80091e8:	e7de      	b.n	80091a8 <_strtod_l+0x8d0>
 80091ea:	4013      	ands	r3, r2
 80091ec:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80091f0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80091f4:	f04f 38ff 	mov.w	r8, #4294967295
 80091f8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80091fc:	e7d4      	b.n	80091a8 <_strtod_l+0x8d0>
 80091fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009200:	ea13 0f08 	tst.w	r3, r8
 8009204:	e7e0      	b.n	80091c8 <_strtod_l+0x8f0>
 8009206:	f7ff fb43 	bl	8008890 <sulp>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009210:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009212:	f7f6 ffb3 	bl	800017c <__aeabi_dsub>
 8009216:	2200      	movs	r2, #0
 8009218:	2300      	movs	r3, #0
 800921a:	4680      	mov	r8, r0
 800921c:	4689      	mov	r9, r1
 800921e:	f7f7 fbcd 	bl	80009bc <__aeabi_dcmpeq>
 8009222:	2800      	cmp	r0, #0
 8009224:	d0c0      	beq.n	80091a8 <_strtod_l+0x8d0>
 8009226:	e606      	b.n	8008e36 <_strtod_l+0x55e>
 8009228:	4659      	mov	r1, fp
 800922a:	4630      	mov	r0, r6
 800922c:	f7ff fabe 	bl	80087ac <__ratio>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009238:	2200      	movs	r2, #0
 800923a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800923e:	f7f7 fbd1 	bl	80009e4 <__aeabi_dcmple>
 8009242:	2800      	cmp	r0, #0
 8009244:	d06f      	beq.n	8009326 <_strtod_l+0xa4e>
 8009246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009248:	2b00      	cmp	r3, #0
 800924a:	d17c      	bne.n	8009346 <_strtod_l+0xa6e>
 800924c:	f1b8 0f00 	cmp.w	r8, #0
 8009250:	d159      	bne.n	8009306 <_strtod_l+0xa2e>
 8009252:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009256:	2b00      	cmp	r3, #0
 8009258:	d17b      	bne.n	8009352 <_strtod_l+0xa7a>
 800925a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800925e:	2200      	movs	r2, #0
 8009260:	4b62      	ldr	r3, [pc, #392]	; (80093ec <_strtod_l+0xb14>)
 8009262:	f7f7 fbb5 	bl	80009d0 <__aeabi_dcmplt>
 8009266:	2800      	cmp	r0, #0
 8009268:	d15a      	bne.n	8009320 <_strtod_l+0xa48>
 800926a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800926e:	2200      	movs	r2, #0
 8009270:	4b5f      	ldr	r3, [pc, #380]	; (80093f0 <_strtod_l+0xb18>)
 8009272:	f7f7 f93b 	bl	80004ec <__aeabi_dmul>
 8009276:	4605      	mov	r5, r0
 8009278:	460f      	mov	r7, r1
 800927a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800927e:	9506      	str	r5, [sp, #24]
 8009280:	9307      	str	r3, [sp, #28]
 8009282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009286:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800928a:	4b56      	ldr	r3, [pc, #344]	; (80093e4 <_strtod_l+0xb0c>)
 800928c:	4a55      	ldr	r2, [pc, #340]	; (80093e4 <_strtod_l+0xb0c>)
 800928e:	ea0a 0303 	and.w	r3, sl, r3
 8009292:	9313      	str	r3, [sp, #76]	; 0x4c
 8009294:	4b57      	ldr	r3, [pc, #348]	; (80093f4 <_strtod_l+0xb1c>)
 8009296:	ea0a 0202 	and.w	r2, sl, r2
 800929a:	429a      	cmp	r2, r3
 800929c:	f040 80b0 	bne.w	8009400 <_strtod_l+0xb28>
 80092a0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80092a4:	4640      	mov	r0, r8
 80092a6:	4649      	mov	r1, r9
 80092a8:	f7ff f9c2 	bl	8008630 <__ulp>
 80092ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092b0:	f7f7 f91c 	bl	80004ec <__aeabi_dmul>
 80092b4:	4642      	mov	r2, r8
 80092b6:	464b      	mov	r3, r9
 80092b8:	f7f6 ff62 	bl	8000180 <__adddf3>
 80092bc:	f8df a124 	ldr.w	sl, [pc, #292]	; 80093e4 <_strtod_l+0xb0c>
 80092c0:	4a4d      	ldr	r2, [pc, #308]	; (80093f8 <_strtod_l+0xb20>)
 80092c2:	ea01 0a0a 	and.w	sl, r1, sl
 80092c6:	4592      	cmp	sl, r2
 80092c8:	4680      	mov	r8, r0
 80092ca:	d948      	bls.n	800935e <_strtod_l+0xa86>
 80092cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092ce:	4b46      	ldr	r3, [pc, #280]	; (80093e8 <_strtod_l+0xb10>)
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d103      	bne.n	80092dc <_strtod_l+0xa04>
 80092d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092d6:	3301      	adds	r3, #1
 80092d8:	f43f ad3c 	beq.w	8008d54 <_strtod_l+0x47c>
 80092dc:	f04f 38ff 	mov.w	r8, #4294967295
 80092e0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80093e8 <_strtod_l+0xb10>
 80092e4:	4620      	mov	r0, r4
 80092e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80092e8:	f7fe fe76 	bl	8007fd8 <_Bfree>
 80092ec:	4620      	mov	r0, r4
 80092ee:	9908      	ldr	r1, [sp, #32]
 80092f0:	f7fe fe72 	bl	8007fd8 <_Bfree>
 80092f4:	4659      	mov	r1, fp
 80092f6:	4620      	mov	r0, r4
 80092f8:	f7fe fe6e 	bl	8007fd8 <_Bfree>
 80092fc:	4631      	mov	r1, r6
 80092fe:	4620      	mov	r0, r4
 8009300:	f7fe fe6a 	bl	8007fd8 <_Bfree>
 8009304:	e605      	b.n	8008f12 <_strtod_l+0x63a>
 8009306:	f1b8 0f01 	cmp.w	r8, #1
 800930a:	d103      	bne.n	8009314 <_strtod_l+0xa3c>
 800930c:	f1b9 0f00 	cmp.w	r9, #0
 8009310:	f43f ad91 	beq.w	8008e36 <_strtod_l+0x55e>
 8009314:	2200      	movs	r2, #0
 8009316:	4b39      	ldr	r3, [pc, #228]	; (80093fc <_strtod_l+0xb24>)
 8009318:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800931a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800931e:	e016      	b.n	800934e <_strtod_l+0xa76>
 8009320:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009322:	4f33      	ldr	r7, [pc, #204]	; (80093f0 <_strtod_l+0xb18>)
 8009324:	e7a9      	b.n	800927a <_strtod_l+0x9a2>
 8009326:	4b32      	ldr	r3, [pc, #200]	; (80093f0 <_strtod_l+0xb18>)
 8009328:	2200      	movs	r2, #0
 800932a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800932e:	f7f7 f8dd 	bl	80004ec <__aeabi_dmul>
 8009332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009334:	4605      	mov	r5, r0
 8009336:	460f      	mov	r7, r1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d09e      	beq.n	800927a <_strtod_l+0x9a2>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009344:	e79d      	b.n	8009282 <_strtod_l+0x9aa>
 8009346:	2200      	movs	r2, #0
 8009348:	4b28      	ldr	r3, [pc, #160]	; (80093ec <_strtod_l+0xb14>)
 800934a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800934e:	4f27      	ldr	r7, [pc, #156]	; (80093ec <_strtod_l+0xb14>)
 8009350:	e797      	b.n	8009282 <_strtod_l+0x9aa>
 8009352:	2200      	movs	r2, #0
 8009354:	4b29      	ldr	r3, [pc, #164]	; (80093fc <_strtod_l+0xb24>)
 8009356:	4645      	mov	r5, r8
 8009358:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800935c:	e7f7      	b.n	800934e <_strtod_l+0xa76>
 800935e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8009362:	9b05      	ldr	r3, [sp, #20]
 8009364:	46ca      	mov	sl, r9
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1bc      	bne.n	80092e4 <_strtod_l+0xa0c>
 800936a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800936e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009370:	0d1b      	lsrs	r3, r3, #20
 8009372:	051b      	lsls	r3, r3, #20
 8009374:	429a      	cmp	r2, r3
 8009376:	d1b5      	bne.n	80092e4 <_strtod_l+0xa0c>
 8009378:	4628      	mov	r0, r5
 800937a:	4639      	mov	r1, r7
 800937c:	f7f7 fbfe 	bl	8000b7c <__aeabi_d2lz>
 8009380:	f7f7 f886 	bl	8000490 <__aeabi_l2d>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4628      	mov	r0, r5
 800938a:	4639      	mov	r1, r7
 800938c:	f7f6 fef6 	bl	800017c <__aeabi_dsub>
 8009390:	460b      	mov	r3, r1
 8009392:	4602      	mov	r2, r0
 8009394:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009398:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800939c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800939e:	ea4a 0a08 	orr.w	sl, sl, r8
 80093a2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80093a6:	d06c      	beq.n	8009482 <_strtod_l+0xbaa>
 80093a8:	a309      	add	r3, pc, #36	; (adr r3, 80093d0 <_strtod_l+0xaf8>)
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	f7f7 fb0f 	bl	80009d0 <__aeabi_dcmplt>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	f47f acd8 	bne.w	8008d68 <_strtod_l+0x490>
 80093b8:	a307      	add	r3, pc, #28	; (adr r3, 80093d8 <_strtod_l+0xb00>)
 80093ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093c2:	f7f7 fb23 	bl	8000a0c <__aeabi_dcmpgt>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d08c      	beq.n	80092e4 <_strtod_l+0xa0c>
 80093ca:	e4cd      	b.n	8008d68 <_strtod_l+0x490>
 80093cc:	f3af 8000 	nop.w
 80093d0:	94a03595 	.word	0x94a03595
 80093d4:	3fdfffff 	.word	0x3fdfffff
 80093d8:	35afe535 	.word	0x35afe535
 80093dc:	3fe00000 	.word	0x3fe00000
 80093e0:	000fffff 	.word	0x000fffff
 80093e4:	7ff00000 	.word	0x7ff00000
 80093e8:	7fefffff 	.word	0x7fefffff
 80093ec:	3ff00000 	.word	0x3ff00000
 80093f0:	3fe00000 	.word	0x3fe00000
 80093f4:	7fe00000 	.word	0x7fe00000
 80093f8:	7c9fffff 	.word	0x7c9fffff
 80093fc:	bff00000 	.word	0xbff00000
 8009400:	9b05      	ldr	r3, [sp, #20]
 8009402:	b333      	cbz	r3, 8009452 <_strtod_l+0xb7a>
 8009404:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009406:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800940a:	d822      	bhi.n	8009452 <_strtod_l+0xb7a>
 800940c:	a328      	add	r3, pc, #160	; (adr r3, 80094b0 <_strtod_l+0xbd8>)
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	4628      	mov	r0, r5
 8009414:	4639      	mov	r1, r7
 8009416:	f7f7 fae5 	bl	80009e4 <__aeabi_dcmple>
 800941a:	b1a0      	cbz	r0, 8009446 <_strtod_l+0xb6e>
 800941c:	4639      	mov	r1, r7
 800941e:	4628      	mov	r0, r5
 8009420:	f7f7 fb3c 	bl	8000a9c <__aeabi_d2uiz>
 8009424:	2801      	cmp	r0, #1
 8009426:	bf38      	it	cc
 8009428:	2001      	movcc	r0, #1
 800942a:	f7f6 ffe5 	bl	80003f8 <__aeabi_ui2d>
 800942e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009430:	4605      	mov	r5, r0
 8009432:	460f      	mov	r7, r1
 8009434:	bb03      	cbnz	r3, 8009478 <_strtod_l+0xba0>
 8009436:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800943a:	9014      	str	r0, [sp, #80]	; 0x50
 800943c:	9315      	str	r3, [sp, #84]	; 0x54
 800943e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009442:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009446:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009448:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800944a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800944e:	1a9b      	subs	r3, r3, r2
 8009450:	9311      	str	r3, [sp, #68]	; 0x44
 8009452:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009454:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009456:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800945a:	f7ff f8e9 	bl	8008630 <__ulp>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4640      	mov	r0, r8
 8009464:	4649      	mov	r1, r9
 8009466:	f7f7 f841 	bl	80004ec <__aeabi_dmul>
 800946a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800946c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800946e:	f7f6 fe87 	bl	8000180 <__adddf3>
 8009472:	4680      	mov	r8, r0
 8009474:	4689      	mov	r9, r1
 8009476:	e774      	b.n	8009362 <_strtod_l+0xa8a>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009480:	e7dd      	b.n	800943e <_strtod_l+0xb66>
 8009482:	a30d      	add	r3, pc, #52	; (adr r3, 80094b8 <_strtod_l+0xbe0>)
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	f7f7 faa2 	bl	80009d0 <__aeabi_dcmplt>
 800948c:	e79b      	b.n	80093c6 <_strtod_l+0xaee>
 800948e:	2300      	movs	r3, #0
 8009490:	930e      	str	r3, [sp, #56]	; 0x38
 8009492:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009494:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	f7ff ba5b 	b.w	8008952 <_strtod_l+0x7a>
 800949c:	2a65      	cmp	r2, #101	; 0x65
 800949e:	f43f ab52 	beq.w	8008b46 <_strtod_l+0x26e>
 80094a2:	2a45      	cmp	r2, #69	; 0x45
 80094a4:	f43f ab4f 	beq.w	8008b46 <_strtod_l+0x26e>
 80094a8:	2301      	movs	r3, #1
 80094aa:	f7ff bb87 	b.w	8008bbc <_strtod_l+0x2e4>
 80094ae:	bf00      	nop
 80094b0:	ffc00000 	.word	0xffc00000
 80094b4:	41dfffff 	.word	0x41dfffff
 80094b8:	94a03595 	.word	0x94a03595
 80094bc:	3fcfffff 	.word	0x3fcfffff

080094c0 <_strtod_r>:
 80094c0:	4b01      	ldr	r3, [pc, #4]	; (80094c8 <_strtod_r+0x8>)
 80094c2:	f7ff ba09 	b.w	80088d8 <_strtod_l>
 80094c6:	bf00      	nop
 80094c8:	20000090 	.word	0x20000090

080094cc <_strtol_l.constprop.0>:
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d2:	4686      	mov	lr, r0
 80094d4:	4690      	mov	r8, r2
 80094d6:	d001      	beq.n	80094dc <_strtol_l.constprop.0+0x10>
 80094d8:	2b24      	cmp	r3, #36	; 0x24
 80094da:	d906      	bls.n	80094ea <_strtol_l.constprop.0+0x1e>
 80094dc:	f7fd fd74 	bl	8006fc8 <__errno>
 80094e0:	2316      	movs	r3, #22
 80094e2:	6003      	str	r3, [r0, #0]
 80094e4:	2000      	movs	r0, #0
 80094e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ea:	460d      	mov	r5, r1
 80094ec:	4835      	ldr	r0, [pc, #212]	; (80095c4 <_strtol_l.constprop.0+0xf8>)
 80094ee:	462a      	mov	r2, r5
 80094f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094f4:	5d06      	ldrb	r6, [r0, r4]
 80094f6:	f016 0608 	ands.w	r6, r6, #8
 80094fa:	d1f8      	bne.n	80094ee <_strtol_l.constprop.0+0x22>
 80094fc:	2c2d      	cmp	r4, #45	; 0x2d
 80094fe:	d12e      	bne.n	800955e <_strtol_l.constprop.0+0x92>
 8009500:	2601      	movs	r6, #1
 8009502:	782c      	ldrb	r4, [r5, #0]
 8009504:	1c95      	adds	r5, r2, #2
 8009506:	2b00      	cmp	r3, #0
 8009508:	d057      	beq.n	80095ba <_strtol_l.constprop.0+0xee>
 800950a:	2b10      	cmp	r3, #16
 800950c:	d109      	bne.n	8009522 <_strtol_l.constprop.0+0x56>
 800950e:	2c30      	cmp	r4, #48	; 0x30
 8009510:	d107      	bne.n	8009522 <_strtol_l.constprop.0+0x56>
 8009512:	782a      	ldrb	r2, [r5, #0]
 8009514:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009518:	2a58      	cmp	r2, #88	; 0x58
 800951a:	d149      	bne.n	80095b0 <_strtol_l.constprop.0+0xe4>
 800951c:	2310      	movs	r3, #16
 800951e:	786c      	ldrb	r4, [r5, #1]
 8009520:	3502      	adds	r5, #2
 8009522:	2200      	movs	r2, #0
 8009524:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009528:	f10c 3cff 	add.w	ip, ip, #4294967295
 800952c:	fbbc f9f3 	udiv	r9, ip, r3
 8009530:	4610      	mov	r0, r2
 8009532:	fb03 ca19 	mls	sl, r3, r9, ip
 8009536:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800953a:	2f09      	cmp	r7, #9
 800953c:	d814      	bhi.n	8009568 <_strtol_l.constprop.0+0x9c>
 800953e:	463c      	mov	r4, r7
 8009540:	42a3      	cmp	r3, r4
 8009542:	dd20      	ble.n	8009586 <_strtol_l.constprop.0+0xba>
 8009544:	1c57      	adds	r7, r2, #1
 8009546:	d007      	beq.n	8009558 <_strtol_l.constprop.0+0x8c>
 8009548:	4581      	cmp	r9, r0
 800954a:	d319      	bcc.n	8009580 <_strtol_l.constprop.0+0xb4>
 800954c:	d101      	bne.n	8009552 <_strtol_l.constprop.0+0x86>
 800954e:	45a2      	cmp	sl, r4
 8009550:	db16      	blt.n	8009580 <_strtol_l.constprop.0+0xb4>
 8009552:	2201      	movs	r2, #1
 8009554:	fb00 4003 	mla	r0, r0, r3, r4
 8009558:	f815 4b01 	ldrb.w	r4, [r5], #1
 800955c:	e7eb      	b.n	8009536 <_strtol_l.constprop.0+0x6a>
 800955e:	2c2b      	cmp	r4, #43	; 0x2b
 8009560:	bf04      	itt	eq
 8009562:	782c      	ldrbeq	r4, [r5, #0]
 8009564:	1c95      	addeq	r5, r2, #2
 8009566:	e7ce      	b.n	8009506 <_strtol_l.constprop.0+0x3a>
 8009568:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800956c:	2f19      	cmp	r7, #25
 800956e:	d801      	bhi.n	8009574 <_strtol_l.constprop.0+0xa8>
 8009570:	3c37      	subs	r4, #55	; 0x37
 8009572:	e7e5      	b.n	8009540 <_strtol_l.constprop.0+0x74>
 8009574:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009578:	2f19      	cmp	r7, #25
 800957a:	d804      	bhi.n	8009586 <_strtol_l.constprop.0+0xba>
 800957c:	3c57      	subs	r4, #87	; 0x57
 800957e:	e7df      	b.n	8009540 <_strtol_l.constprop.0+0x74>
 8009580:	f04f 32ff 	mov.w	r2, #4294967295
 8009584:	e7e8      	b.n	8009558 <_strtol_l.constprop.0+0x8c>
 8009586:	1c53      	adds	r3, r2, #1
 8009588:	d108      	bne.n	800959c <_strtol_l.constprop.0+0xd0>
 800958a:	2322      	movs	r3, #34	; 0x22
 800958c:	4660      	mov	r0, ip
 800958e:	f8ce 3000 	str.w	r3, [lr]
 8009592:	f1b8 0f00 	cmp.w	r8, #0
 8009596:	d0a6      	beq.n	80094e6 <_strtol_l.constprop.0+0x1a>
 8009598:	1e69      	subs	r1, r5, #1
 800959a:	e006      	b.n	80095aa <_strtol_l.constprop.0+0xde>
 800959c:	b106      	cbz	r6, 80095a0 <_strtol_l.constprop.0+0xd4>
 800959e:	4240      	negs	r0, r0
 80095a0:	f1b8 0f00 	cmp.w	r8, #0
 80095a4:	d09f      	beq.n	80094e6 <_strtol_l.constprop.0+0x1a>
 80095a6:	2a00      	cmp	r2, #0
 80095a8:	d1f6      	bne.n	8009598 <_strtol_l.constprop.0+0xcc>
 80095aa:	f8c8 1000 	str.w	r1, [r8]
 80095ae:	e79a      	b.n	80094e6 <_strtol_l.constprop.0+0x1a>
 80095b0:	2430      	movs	r4, #48	; 0x30
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1b5      	bne.n	8009522 <_strtol_l.constprop.0+0x56>
 80095b6:	2308      	movs	r3, #8
 80095b8:	e7b3      	b.n	8009522 <_strtol_l.constprop.0+0x56>
 80095ba:	2c30      	cmp	r4, #48	; 0x30
 80095bc:	d0a9      	beq.n	8009512 <_strtol_l.constprop.0+0x46>
 80095be:	230a      	movs	r3, #10
 80095c0:	e7af      	b.n	8009522 <_strtol_l.constprop.0+0x56>
 80095c2:	bf00      	nop
 80095c4:	0800ac29 	.word	0x0800ac29

080095c8 <_strtol_r>:
 80095c8:	f7ff bf80 	b.w	80094cc <_strtol_l.constprop.0>

080095cc <__ssputs_r>:
 80095cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d0:	461f      	mov	r7, r3
 80095d2:	688e      	ldr	r6, [r1, #8]
 80095d4:	4682      	mov	sl, r0
 80095d6:	42be      	cmp	r6, r7
 80095d8:	460c      	mov	r4, r1
 80095da:	4690      	mov	r8, r2
 80095dc:	680b      	ldr	r3, [r1, #0]
 80095de:	d82c      	bhi.n	800963a <__ssputs_r+0x6e>
 80095e0:	898a      	ldrh	r2, [r1, #12]
 80095e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095e6:	d026      	beq.n	8009636 <__ssputs_r+0x6a>
 80095e8:	6965      	ldr	r5, [r4, #20]
 80095ea:	6909      	ldr	r1, [r1, #16]
 80095ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095f0:	eba3 0901 	sub.w	r9, r3, r1
 80095f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095f8:	1c7b      	adds	r3, r7, #1
 80095fa:	444b      	add	r3, r9
 80095fc:	106d      	asrs	r5, r5, #1
 80095fe:	429d      	cmp	r5, r3
 8009600:	bf38      	it	cc
 8009602:	461d      	movcc	r5, r3
 8009604:	0553      	lsls	r3, r2, #21
 8009606:	d527      	bpl.n	8009658 <__ssputs_r+0x8c>
 8009608:	4629      	mov	r1, r5
 800960a:	f7fe fc19 	bl	8007e40 <_malloc_r>
 800960e:	4606      	mov	r6, r0
 8009610:	b360      	cbz	r0, 800966c <__ssputs_r+0xa0>
 8009612:	464a      	mov	r2, r9
 8009614:	6921      	ldr	r1, [r4, #16]
 8009616:	f000 fa29 	bl	8009a6c <memcpy>
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	6126      	str	r6, [r4, #16]
 8009628:	444e      	add	r6, r9
 800962a:	6026      	str	r6, [r4, #0]
 800962c:	463e      	mov	r6, r7
 800962e:	6165      	str	r5, [r4, #20]
 8009630:	eba5 0509 	sub.w	r5, r5, r9
 8009634:	60a5      	str	r5, [r4, #8]
 8009636:	42be      	cmp	r6, r7
 8009638:	d900      	bls.n	800963c <__ssputs_r+0x70>
 800963a:	463e      	mov	r6, r7
 800963c:	4632      	mov	r2, r6
 800963e:	4641      	mov	r1, r8
 8009640:	6820      	ldr	r0, [r4, #0]
 8009642:	f000 f9d7 	bl	80099f4 <memmove>
 8009646:	2000      	movs	r0, #0
 8009648:	68a3      	ldr	r3, [r4, #8]
 800964a:	1b9b      	subs	r3, r3, r6
 800964c:	60a3      	str	r3, [r4, #8]
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	4433      	add	r3, r6
 8009652:	6023      	str	r3, [r4, #0]
 8009654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009658:	462a      	mov	r2, r5
 800965a:	f000 fda2 	bl	800a1a2 <_realloc_r>
 800965e:	4606      	mov	r6, r0
 8009660:	2800      	cmp	r0, #0
 8009662:	d1e0      	bne.n	8009626 <__ssputs_r+0x5a>
 8009664:	4650      	mov	r0, sl
 8009666:	6921      	ldr	r1, [r4, #16]
 8009668:	f7fe fb7a 	bl	8007d60 <_free_r>
 800966c:	230c      	movs	r3, #12
 800966e:	f8ca 3000 	str.w	r3, [sl]
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800967c:	81a3      	strh	r3, [r4, #12]
 800967e:	e7e9      	b.n	8009654 <__ssputs_r+0x88>

08009680 <_svfiprintf_r>:
 8009680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	4698      	mov	r8, r3
 8009686:	898b      	ldrh	r3, [r1, #12]
 8009688:	4607      	mov	r7, r0
 800968a:	061b      	lsls	r3, r3, #24
 800968c:	460d      	mov	r5, r1
 800968e:	4614      	mov	r4, r2
 8009690:	b09d      	sub	sp, #116	; 0x74
 8009692:	d50e      	bpl.n	80096b2 <_svfiprintf_r+0x32>
 8009694:	690b      	ldr	r3, [r1, #16]
 8009696:	b963      	cbnz	r3, 80096b2 <_svfiprintf_r+0x32>
 8009698:	2140      	movs	r1, #64	; 0x40
 800969a:	f7fe fbd1 	bl	8007e40 <_malloc_r>
 800969e:	6028      	str	r0, [r5, #0]
 80096a0:	6128      	str	r0, [r5, #16]
 80096a2:	b920      	cbnz	r0, 80096ae <_svfiprintf_r+0x2e>
 80096a4:	230c      	movs	r3, #12
 80096a6:	603b      	str	r3, [r7, #0]
 80096a8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ac:	e0d0      	b.n	8009850 <_svfiprintf_r+0x1d0>
 80096ae:	2340      	movs	r3, #64	; 0x40
 80096b0:	616b      	str	r3, [r5, #20]
 80096b2:	2300      	movs	r3, #0
 80096b4:	9309      	str	r3, [sp, #36]	; 0x24
 80096b6:	2320      	movs	r3, #32
 80096b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096bc:	2330      	movs	r3, #48	; 0x30
 80096be:	f04f 0901 	mov.w	r9, #1
 80096c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80096c6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009868 <_svfiprintf_r+0x1e8>
 80096ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096ce:	4623      	mov	r3, r4
 80096d0:	469a      	mov	sl, r3
 80096d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096d6:	b10a      	cbz	r2, 80096dc <_svfiprintf_r+0x5c>
 80096d8:	2a25      	cmp	r2, #37	; 0x25
 80096da:	d1f9      	bne.n	80096d0 <_svfiprintf_r+0x50>
 80096dc:	ebba 0b04 	subs.w	fp, sl, r4
 80096e0:	d00b      	beq.n	80096fa <_svfiprintf_r+0x7a>
 80096e2:	465b      	mov	r3, fp
 80096e4:	4622      	mov	r2, r4
 80096e6:	4629      	mov	r1, r5
 80096e8:	4638      	mov	r0, r7
 80096ea:	f7ff ff6f 	bl	80095cc <__ssputs_r>
 80096ee:	3001      	adds	r0, #1
 80096f0:	f000 80a9 	beq.w	8009846 <_svfiprintf_r+0x1c6>
 80096f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096f6:	445a      	add	r2, fp
 80096f8:	9209      	str	r2, [sp, #36]	; 0x24
 80096fa:	f89a 3000 	ldrb.w	r3, [sl]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 80a1 	beq.w	8009846 <_svfiprintf_r+0x1c6>
 8009704:	2300      	movs	r3, #0
 8009706:	f04f 32ff 	mov.w	r2, #4294967295
 800970a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800970e:	f10a 0a01 	add.w	sl, sl, #1
 8009712:	9304      	str	r3, [sp, #16]
 8009714:	9307      	str	r3, [sp, #28]
 8009716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800971a:	931a      	str	r3, [sp, #104]	; 0x68
 800971c:	4654      	mov	r4, sl
 800971e:	2205      	movs	r2, #5
 8009720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009724:	4850      	ldr	r0, [pc, #320]	; (8009868 <_svfiprintf_r+0x1e8>)
 8009726:	f7fd fc7b 	bl	8007020 <memchr>
 800972a:	9a04      	ldr	r2, [sp, #16]
 800972c:	b9d8      	cbnz	r0, 8009766 <_svfiprintf_r+0xe6>
 800972e:	06d0      	lsls	r0, r2, #27
 8009730:	bf44      	itt	mi
 8009732:	2320      	movmi	r3, #32
 8009734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009738:	0711      	lsls	r1, r2, #28
 800973a:	bf44      	itt	mi
 800973c:	232b      	movmi	r3, #43	; 0x2b
 800973e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009742:	f89a 3000 	ldrb.w	r3, [sl]
 8009746:	2b2a      	cmp	r3, #42	; 0x2a
 8009748:	d015      	beq.n	8009776 <_svfiprintf_r+0xf6>
 800974a:	4654      	mov	r4, sl
 800974c:	2000      	movs	r0, #0
 800974e:	f04f 0c0a 	mov.w	ip, #10
 8009752:	9a07      	ldr	r2, [sp, #28]
 8009754:	4621      	mov	r1, r4
 8009756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800975a:	3b30      	subs	r3, #48	; 0x30
 800975c:	2b09      	cmp	r3, #9
 800975e:	d94d      	bls.n	80097fc <_svfiprintf_r+0x17c>
 8009760:	b1b0      	cbz	r0, 8009790 <_svfiprintf_r+0x110>
 8009762:	9207      	str	r2, [sp, #28]
 8009764:	e014      	b.n	8009790 <_svfiprintf_r+0x110>
 8009766:	eba0 0308 	sub.w	r3, r0, r8
 800976a:	fa09 f303 	lsl.w	r3, r9, r3
 800976e:	4313      	orrs	r3, r2
 8009770:	46a2      	mov	sl, r4
 8009772:	9304      	str	r3, [sp, #16]
 8009774:	e7d2      	b.n	800971c <_svfiprintf_r+0x9c>
 8009776:	9b03      	ldr	r3, [sp, #12]
 8009778:	1d19      	adds	r1, r3, #4
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	9103      	str	r1, [sp, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	bfbb      	ittet	lt
 8009782:	425b      	neglt	r3, r3
 8009784:	f042 0202 	orrlt.w	r2, r2, #2
 8009788:	9307      	strge	r3, [sp, #28]
 800978a:	9307      	strlt	r3, [sp, #28]
 800978c:	bfb8      	it	lt
 800978e:	9204      	strlt	r2, [sp, #16]
 8009790:	7823      	ldrb	r3, [r4, #0]
 8009792:	2b2e      	cmp	r3, #46	; 0x2e
 8009794:	d10c      	bne.n	80097b0 <_svfiprintf_r+0x130>
 8009796:	7863      	ldrb	r3, [r4, #1]
 8009798:	2b2a      	cmp	r3, #42	; 0x2a
 800979a:	d134      	bne.n	8009806 <_svfiprintf_r+0x186>
 800979c:	9b03      	ldr	r3, [sp, #12]
 800979e:	3402      	adds	r4, #2
 80097a0:	1d1a      	adds	r2, r3, #4
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	9203      	str	r2, [sp, #12]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	bfb8      	it	lt
 80097aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80097ae:	9305      	str	r3, [sp, #20]
 80097b0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800986c <_svfiprintf_r+0x1ec>
 80097b4:	2203      	movs	r2, #3
 80097b6:	4650      	mov	r0, sl
 80097b8:	7821      	ldrb	r1, [r4, #0]
 80097ba:	f7fd fc31 	bl	8007020 <memchr>
 80097be:	b138      	cbz	r0, 80097d0 <_svfiprintf_r+0x150>
 80097c0:	2240      	movs	r2, #64	; 0x40
 80097c2:	9b04      	ldr	r3, [sp, #16]
 80097c4:	eba0 000a 	sub.w	r0, r0, sl
 80097c8:	4082      	lsls	r2, r0
 80097ca:	4313      	orrs	r3, r2
 80097cc:	3401      	adds	r4, #1
 80097ce:	9304      	str	r3, [sp, #16]
 80097d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d4:	2206      	movs	r2, #6
 80097d6:	4826      	ldr	r0, [pc, #152]	; (8009870 <_svfiprintf_r+0x1f0>)
 80097d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097dc:	f7fd fc20 	bl	8007020 <memchr>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d038      	beq.n	8009856 <_svfiprintf_r+0x1d6>
 80097e4:	4b23      	ldr	r3, [pc, #140]	; (8009874 <_svfiprintf_r+0x1f4>)
 80097e6:	bb1b      	cbnz	r3, 8009830 <_svfiprintf_r+0x1b0>
 80097e8:	9b03      	ldr	r3, [sp, #12]
 80097ea:	3307      	adds	r3, #7
 80097ec:	f023 0307 	bic.w	r3, r3, #7
 80097f0:	3308      	adds	r3, #8
 80097f2:	9303      	str	r3, [sp, #12]
 80097f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097f6:	4433      	add	r3, r6
 80097f8:	9309      	str	r3, [sp, #36]	; 0x24
 80097fa:	e768      	b.n	80096ce <_svfiprintf_r+0x4e>
 80097fc:	460c      	mov	r4, r1
 80097fe:	2001      	movs	r0, #1
 8009800:	fb0c 3202 	mla	r2, ip, r2, r3
 8009804:	e7a6      	b.n	8009754 <_svfiprintf_r+0xd4>
 8009806:	2300      	movs	r3, #0
 8009808:	f04f 0c0a 	mov.w	ip, #10
 800980c:	4619      	mov	r1, r3
 800980e:	3401      	adds	r4, #1
 8009810:	9305      	str	r3, [sp, #20]
 8009812:	4620      	mov	r0, r4
 8009814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009818:	3a30      	subs	r2, #48	; 0x30
 800981a:	2a09      	cmp	r2, #9
 800981c:	d903      	bls.n	8009826 <_svfiprintf_r+0x1a6>
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0c6      	beq.n	80097b0 <_svfiprintf_r+0x130>
 8009822:	9105      	str	r1, [sp, #20]
 8009824:	e7c4      	b.n	80097b0 <_svfiprintf_r+0x130>
 8009826:	4604      	mov	r4, r0
 8009828:	2301      	movs	r3, #1
 800982a:	fb0c 2101 	mla	r1, ip, r1, r2
 800982e:	e7f0      	b.n	8009812 <_svfiprintf_r+0x192>
 8009830:	ab03      	add	r3, sp, #12
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	462a      	mov	r2, r5
 8009836:	4638      	mov	r0, r7
 8009838:	4b0f      	ldr	r3, [pc, #60]	; (8009878 <_svfiprintf_r+0x1f8>)
 800983a:	a904      	add	r1, sp, #16
 800983c:	f7fc fc32 	bl	80060a4 <_printf_float>
 8009840:	1c42      	adds	r2, r0, #1
 8009842:	4606      	mov	r6, r0
 8009844:	d1d6      	bne.n	80097f4 <_svfiprintf_r+0x174>
 8009846:	89ab      	ldrh	r3, [r5, #12]
 8009848:	065b      	lsls	r3, r3, #25
 800984a:	f53f af2d 	bmi.w	80096a8 <_svfiprintf_r+0x28>
 800984e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009850:	b01d      	add	sp, #116	; 0x74
 8009852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009856:	ab03      	add	r3, sp, #12
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	462a      	mov	r2, r5
 800985c:	4638      	mov	r0, r7
 800985e:	4b06      	ldr	r3, [pc, #24]	; (8009878 <_svfiprintf_r+0x1f8>)
 8009860:	a904      	add	r1, sp, #16
 8009862:	f7fc febf 	bl	80065e4 <_printf_i>
 8009866:	e7eb      	b.n	8009840 <_svfiprintf_r+0x1c0>
 8009868:	0800ad29 	.word	0x0800ad29
 800986c:	0800ad2f 	.word	0x0800ad2f
 8009870:	0800ad33 	.word	0x0800ad33
 8009874:	080060a5 	.word	0x080060a5
 8009878:	080095cd 	.word	0x080095cd

0800987c <__sflush_r>:
 800987c:	898a      	ldrh	r2, [r1, #12]
 800987e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009880:	4605      	mov	r5, r0
 8009882:	0710      	lsls	r0, r2, #28
 8009884:	460c      	mov	r4, r1
 8009886:	d457      	bmi.n	8009938 <__sflush_r+0xbc>
 8009888:	684b      	ldr	r3, [r1, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	dc04      	bgt.n	8009898 <__sflush_r+0x1c>
 800988e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009890:	2b00      	cmp	r3, #0
 8009892:	dc01      	bgt.n	8009898 <__sflush_r+0x1c>
 8009894:	2000      	movs	r0, #0
 8009896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800989a:	2e00      	cmp	r6, #0
 800989c:	d0fa      	beq.n	8009894 <__sflush_r+0x18>
 800989e:	2300      	movs	r3, #0
 80098a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098a4:	682f      	ldr	r7, [r5, #0]
 80098a6:	6a21      	ldr	r1, [r4, #32]
 80098a8:	602b      	str	r3, [r5, #0]
 80098aa:	d032      	beq.n	8009912 <__sflush_r+0x96>
 80098ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	075a      	lsls	r2, r3, #29
 80098b2:	d505      	bpl.n	80098c0 <__sflush_r+0x44>
 80098b4:	6863      	ldr	r3, [r4, #4]
 80098b6:	1ac0      	subs	r0, r0, r3
 80098b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098ba:	b10b      	cbz	r3, 80098c0 <__sflush_r+0x44>
 80098bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098be:	1ac0      	subs	r0, r0, r3
 80098c0:	2300      	movs	r3, #0
 80098c2:	4602      	mov	r2, r0
 80098c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098c6:	4628      	mov	r0, r5
 80098c8:	6a21      	ldr	r1, [r4, #32]
 80098ca:	47b0      	blx	r6
 80098cc:	1c43      	adds	r3, r0, #1
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	d106      	bne.n	80098e0 <__sflush_r+0x64>
 80098d2:	6829      	ldr	r1, [r5, #0]
 80098d4:	291d      	cmp	r1, #29
 80098d6:	d82b      	bhi.n	8009930 <__sflush_r+0xb4>
 80098d8:	4a28      	ldr	r2, [pc, #160]	; (800997c <__sflush_r+0x100>)
 80098da:	410a      	asrs	r2, r1
 80098dc:	07d6      	lsls	r6, r2, #31
 80098de:	d427      	bmi.n	8009930 <__sflush_r+0xb4>
 80098e0:	2200      	movs	r2, #0
 80098e2:	6062      	str	r2, [r4, #4]
 80098e4:	6922      	ldr	r2, [r4, #16]
 80098e6:	04d9      	lsls	r1, r3, #19
 80098e8:	6022      	str	r2, [r4, #0]
 80098ea:	d504      	bpl.n	80098f6 <__sflush_r+0x7a>
 80098ec:	1c42      	adds	r2, r0, #1
 80098ee:	d101      	bne.n	80098f4 <__sflush_r+0x78>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	b903      	cbnz	r3, 80098f6 <__sflush_r+0x7a>
 80098f4:	6560      	str	r0, [r4, #84]	; 0x54
 80098f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098f8:	602f      	str	r7, [r5, #0]
 80098fa:	2900      	cmp	r1, #0
 80098fc:	d0ca      	beq.n	8009894 <__sflush_r+0x18>
 80098fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009902:	4299      	cmp	r1, r3
 8009904:	d002      	beq.n	800990c <__sflush_r+0x90>
 8009906:	4628      	mov	r0, r5
 8009908:	f7fe fa2a 	bl	8007d60 <_free_r>
 800990c:	2000      	movs	r0, #0
 800990e:	6360      	str	r0, [r4, #52]	; 0x34
 8009910:	e7c1      	b.n	8009896 <__sflush_r+0x1a>
 8009912:	2301      	movs	r3, #1
 8009914:	4628      	mov	r0, r5
 8009916:	47b0      	blx	r6
 8009918:	1c41      	adds	r1, r0, #1
 800991a:	d1c8      	bne.n	80098ae <__sflush_r+0x32>
 800991c:	682b      	ldr	r3, [r5, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0c5      	beq.n	80098ae <__sflush_r+0x32>
 8009922:	2b1d      	cmp	r3, #29
 8009924:	d001      	beq.n	800992a <__sflush_r+0xae>
 8009926:	2b16      	cmp	r3, #22
 8009928:	d101      	bne.n	800992e <__sflush_r+0xb2>
 800992a:	602f      	str	r7, [r5, #0]
 800992c:	e7b2      	b.n	8009894 <__sflush_r+0x18>
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	e7ae      	b.n	8009896 <__sflush_r+0x1a>
 8009938:	690f      	ldr	r7, [r1, #16]
 800993a:	2f00      	cmp	r7, #0
 800993c:	d0aa      	beq.n	8009894 <__sflush_r+0x18>
 800993e:	0793      	lsls	r3, r2, #30
 8009940:	bf18      	it	ne
 8009942:	2300      	movne	r3, #0
 8009944:	680e      	ldr	r6, [r1, #0]
 8009946:	bf08      	it	eq
 8009948:	694b      	ldreq	r3, [r1, #20]
 800994a:	1bf6      	subs	r6, r6, r7
 800994c:	600f      	str	r7, [r1, #0]
 800994e:	608b      	str	r3, [r1, #8]
 8009950:	2e00      	cmp	r6, #0
 8009952:	dd9f      	ble.n	8009894 <__sflush_r+0x18>
 8009954:	4633      	mov	r3, r6
 8009956:	463a      	mov	r2, r7
 8009958:	4628      	mov	r0, r5
 800995a:	6a21      	ldr	r1, [r4, #32]
 800995c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009960:	47e0      	blx	ip
 8009962:	2800      	cmp	r0, #0
 8009964:	dc06      	bgt.n	8009974 <__sflush_r+0xf8>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f04f 30ff 	mov.w	r0, #4294967295
 800996c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009970:	81a3      	strh	r3, [r4, #12]
 8009972:	e790      	b.n	8009896 <__sflush_r+0x1a>
 8009974:	4407      	add	r7, r0
 8009976:	1a36      	subs	r6, r6, r0
 8009978:	e7ea      	b.n	8009950 <__sflush_r+0xd4>
 800997a:	bf00      	nop
 800997c:	dfbffffe 	.word	0xdfbffffe

08009980 <_fflush_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	690b      	ldr	r3, [r1, #16]
 8009984:	4605      	mov	r5, r0
 8009986:	460c      	mov	r4, r1
 8009988:	b913      	cbnz	r3, 8009990 <_fflush_r+0x10>
 800998a:	2500      	movs	r5, #0
 800998c:	4628      	mov	r0, r5
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	b118      	cbz	r0, 800999a <_fflush_r+0x1a>
 8009992:	6a03      	ldr	r3, [r0, #32]
 8009994:	b90b      	cbnz	r3, 800999a <_fflush_r+0x1a>
 8009996:	f7fd f9cf 	bl	8006d38 <__sinit>
 800999a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0f3      	beq.n	800998a <_fflush_r+0xa>
 80099a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099a4:	07d0      	lsls	r0, r2, #31
 80099a6:	d404      	bmi.n	80099b2 <_fflush_r+0x32>
 80099a8:	0599      	lsls	r1, r3, #22
 80099aa:	d402      	bmi.n	80099b2 <_fflush_r+0x32>
 80099ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ae:	f7fd fb35 	bl	800701c <__retarget_lock_acquire_recursive>
 80099b2:	4628      	mov	r0, r5
 80099b4:	4621      	mov	r1, r4
 80099b6:	f7ff ff61 	bl	800987c <__sflush_r>
 80099ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099bc:	4605      	mov	r5, r0
 80099be:	07da      	lsls	r2, r3, #31
 80099c0:	d4e4      	bmi.n	800998c <_fflush_r+0xc>
 80099c2:	89a3      	ldrh	r3, [r4, #12]
 80099c4:	059b      	lsls	r3, r3, #22
 80099c6:	d4e1      	bmi.n	800998c <_fflush_r+0xc>
 80099c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ca:	f7fd fb28 	bl	800701e <__retarget_lock_release_recursive>
 80099ce:	e7dd      	b.n	800998c <_fflush_r+0xc>

080099d0 <fiprintf>:
 80099d0:	b40e      	push	{r1, r2, r3}
 80099d2:	b503      	push	{r0, r1, lr}
 80099d4:	4601      	mov	r1, r0
 80099d6:	ab03      	add	r3, sp, #12
 80099d8:	4805      	ldr	r0, [pc, #20]	; (80099f0 <fiprintf+0x20>)
 80099da:	f853 2b04 	ldr.w	r2, [r3], #4
 80099de:	6800      	ldr	r0, [r0, #0]
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	f000 fc41 	bl	800a268 <_vfiprintf_r>
 80099e6:	b002      	add	sp, #8
 80099e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099ec:	b003      	add	sp, #12
 80099ee:	4770      	bx	lr
 80099f0:	2000008c 	.word	0x2000008c

080099f4 <memmove>:
 80099f4:	4288      	cmp	r0, r1
 80099f6:	b510      	push	{r4, lr}
 80099f8:	eb01 0402 	add.w	r4, r1, r2
 80099fc:	d902      	bls.n	8009a04 <memmove+0x10>
 80099fe:	4284      	cmp	r4, r0
 8009a00:	4623      	mov	r3, r4
 8009a02:	d807      	bhi.n	8009a14 <memmove+0x20>
 8009a04:	1e43      	subs	r3, r0, #1
 8009a06:	42a1      	cmp	r1, r4
 8009a08:	d008      	beq.n	8009a1c <memmove+0x28>
 8009a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a12:	e7f8      	b.n	8009a06 <memmove+0x12>
 8009a14:	4601      	mov	r1, r0
 8009a16:	4402      	add	r2, r0
 8009a18:	428a      	cmp	r2, r1
 8009a1a:	d100      	bne.n	8009a1e <memmove+0x2a>
 8009a1c:	bd10      	pop	{r4, pc}
 8009a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a26:	e7f7      	b.n	8009a18 <memmove+0x24>

08009a28 <strncmp>:
 8009a28:	b510      	push	{r4, lr}
 8009a2a:	b16a      	cbz	r2, 8009a48 <strncmp+0x20>
 8009a2c:	3901      	subs	r1, #1
 8009a2e:	1884      	adds	r4, r0, r2
 8009a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d103      	bne.n	8009a44 <strncmp+0x1c>
 8009a3c:	42a0      	cmp	r0, r4
 8009a3e:	d001      	beq.n	8009a44 <strncmp+0x1c>
 8009a40:	2a00      	cmp	r2, #0
 8009a42:	d1f5      	bne.n	8009a30 <strncmp+0x8>
 8009a44:	1ad0      	subs	r0, r2, r3
 8009a46:	bd10      	pop	{r4, pc}
 8009a48:	4610      	mov	r0, r2
 8009a4a:	e7fc      	b.n	8009a46 <strncmp+0x1e>

08009a4c <_sbrk_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	2300      	movs	r3, #0
 8009a50:	4d05      	ldr	r5, [pc, #20]	; (8009a68 <_sbrk_r+0x1c>)
 8009a52:	4604      	mov	r4, r0
 8009a54:	4608      	mov	r0, r1
 8009a56:	602b      	str	r3, [r5, #0]
 8009a58:	f7f9 fb1a 	bl	8003090 <_sbrk>
 8009a5c:	1c43      	adds	r3, r0, #1
 8009a5e:	d102      	bne.n	8009a66 <_sbrk_r+0x1a>
 8009a60:	682b      	ldr	r3, [r5, #0]
 8009a62:	b103      	cbz	r3, 8009a66 <_sbrk_r+0x1a>
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
 8009a68:	200005fc 	.word	0x200005fc

08009a6c <memcpy>:
 8009a6c:	440a      	add	r2, r1
 8009a6e:	4291      	cmp	r1, r2
 8009a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a74:	d100      	bne.n	8009a78 <memcpy+0xc>
 8009a76:	4770      	bx	lr
 8009a78:	b510      	push	{r4, lr}
 8009a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a7e:	4291      	cmp	r1, r2
 8009a80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a84:	d1f9      	bne.n	8009a7a <memcpy+0xe>
 8009a86:	bd10      	pop	{r4, pc}

08009a88 <nan>:
 8009a88:	2000      	movs	r0, #0
 8009a8a:	4901      	ldr	r1, [pc, #4]	; (8009a90 <nan+0x8>)
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	7ff80000 	.word	0x7ff80000

08009a94 <abort>:
 8009a94:	2006      	movs	r0, #6
 8009a96:	b508      	push	{r3, lr}
 8009a98:	f000 fdbe 	bl	800a618 <raise>
 8009a9c:	2001      	movs	r0, #1
 8009a9e:	f7f9 fa84 	bl	8002faa <_exit>

08009aa2 <_calloc_r>:
 8009aa2:	b570      	push	{r4, r5, r6, lr}
 8009aa4:	fba1 5402 	umull	r5, r4, r1, r2
 8009aa8:	b934      	cbnz	r4, 8009ab8 <_calloc_r+0x16>
 8009aaa:	4629      	mov	r1, r5
 8009aac:	f7fe f9c8 	bl	8007e40 <_malloc_r>
 8009ab0:	4606      	mov	r6, r0
 8009ab2:	b928      	cbnz	r0, 8009ac0 <_calloc_r+0x1e>
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	220c      	movs	r2, #12
 8009aba:	2600      	movs	r6, #0
 8009abc:	6002      	str	r2, [r0, #0]
 8009abe:	e7f9      	b.n	8009ab4 <_calloc_r+0x12>
 8009ac0:	462a      	mov	r2, r5
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	f7fd f9d1 	bl	8006e6a <memset>
 8009ac8:	e7f4      	b.n	8009ab4 <_calloc_r+0x12>

08009aca <rshift>:
 8009aca:	6903      	ldr	r3, [r0, #16]
 8009acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ad0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ad4:	f100 0414 	add.w	r4, r0, #20
 8009ad8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009adc:	dd46      	ble.n	8009b6c <rshift+0xa2>
 8009ade:	f011 011f 	ands.w	r1, r1, #31
 8009ae2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ae6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009aea:	d10c      	bne.n	8009b06 <rshift+0x3c>
 8009aec:	4629      	mov	r1, r5
 8009aee:	f100 0710 	add.w	r7, r0, #16
 8009af2:	42b1      	cmp	r1, r6
 8009af4:	d335      	bcc.n	8009b62 <rshift+0x98>
 8009af6:	1a9b      	subs	r3, r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	1eea      	subs	r2, r5, #3
 8009afc:	4296      	cmp	r6, r2
 8009afe:	bf38      	it	cc
 8009b00:	2300      	movcc	r3, #0
 8009b02:	4423      	add	r3, r4
 8009b04:	e015      	b.n	8009b32 <rshift+0x68>
 8009b06:	46a1      	mov	r9, r4
 8009b08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b0c:	f1c1 0820 	rsb	r8, r1, #32
 8009b10:	40cf      	lsrs	r7, r1
 8009b12:	f105 0e04 	add.w	lr, r5, #4
 8009b16:	4576      	cmp	r6, lr
 8009b18:	46f4      	mov	ip, lr
 8009b1a:	d816      	bhi.n	8009b4a <rshift+0x80>
 8009b1c:	1a9a      	subs	r2, r3, r2
 8009b1e:	0092      	lsls	r2, r2, #2
 8009b20:	3a04      	subs	r2, #4
 8009b22:	3501      	adds	r5, #1
 8009b24:	42ae      	cmp	r6, r5
 8009b26:	bf38      	it	cc
 8009b28:	2200      	movcc	r2, #0
 8009b2a:	18a3      	adds	r3, r4, r2
 8009b2c:	50a7      	str	r7, [r4, r2]
 8009b2e:	b107      	cbz	r7, 8009b32 <rshift+0x68>
 8009b30:	3304      	adds	r3, #4
 8009b32:	42a3      	cmp	r3, r4
 8009b34:	eba3 0204 	sub.w	r2, r3, r4
 8009b38:	bf08      	it	eq
 8009b3a:	2300      	moveq	r3, #0
 8009b3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b40:	6102      	str	r2, [r0, #16]
 8009b42:	bf08      	it	eq
 8009b44:	6143      	streq	r3, [r0, #20]
 8009b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b4a:	f8dc c000 	ldr.w	ip, [ip]
 8009b4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b52:	ea4c 0707 	orr.w	r7, ip, r7
 8009b56:	f849 7b04 	str.w	r7, [r9], #4
 8009b5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b5e:	40cf      	lsrs	r7, r1
 8009b60:	e7d9      	b.n	8009b16 <rshift+0x4c>
 8009b62:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b66:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b6a:	e7c2      	b.n	8009af2 <rshift+0x28>
 8009b6c:	4623      	mov	r3, r4
 8009b6e:	e7e0      	b.n	8009b32 <rshift+0x68>

08009b70 <__hexdig_fun>:
 8009b70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b74:	2b09      	cmp	r3, #9
 8009b76:	d802      	bhi.n	8009b7e <__hexdig_fun+0xe>
 8009b78:	3820      	subs	r0, #32
 8009b7a:	b2c0      	uxtb	r0, r0
 8009b7c:	4770      	bx	lr
 8009b7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b82:	2b05      	cmp	r3, #5
 8009b84:	d801      	bhi.n	8009b8a <__hexdig_fun+0x1a>
 8009b86:	3847      	subs	r0, #71	; 0x47
 8009b88:	e7f7      	b.n	8009b7a <__hexdig_fun+0xa>
 8009b8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b8e:	2b05      	cmp	r3, #5
 8009b90:	d801      	bhi.n	8009b96 <__hexdig_fun+0x26>
 8009b92:	3827      	subs	r0, #39	; 0x27
 8009b94:	e7f1      	b.n	8009b7a <__hexdig_fun+0xa>
 8009b96:	2000      	movs	r0, #0
 8009b98:	4770      	bx	lr
	...

08009b9c <__gethex>:
 8009b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba0:	4681      	mov	r9, r0
 8009ba2:	468a      	mov	sl, r1
 8009ba4:	4617      	mov	r7, r2
 8009ba6:	680a      	ldr	r2, [r1, #0]
 8009ba8:	b085      	sub	sp, #20
 8009baa:	f102 0b02 	add.w	fp, r2, #2
 8009bae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009bb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009bb6:	9302      	str	r3, [sp, #8]
 8009bb8:	32fe      	adds	r2, #254	; 0xfe
 8009bba:	eb02 030b 	add.w	r3, r2, fp
 8009bbe:	46d8      	mov	r8, fp
 8009bc0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009bc4:	9301      	str	r3, [sp, #4]
 8009bc6:	2830      	cmp	r0, #48	; 0x30
 8009bc8:	d0f7      	beq.n	8009bba <__gethex+0x1e>
 8009bca:	f7ff ffd1 	bl	8009b70 <__hexdig_fun>
 8009bce:	4604      	mov	r4, r0
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d138      	bne.n	8009c46 <__gethex+0xaa>
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	49a7      	ldr	r1, [pc, #668]	; (8009e78 <__gethex+0x2dc>)
 8009bda:	f7ff ff25 	bl	8009a28 <strncmp>
 8009bde:	4606      	mov	r6, r0
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d169      	bne.n	8009cb8 <__gethex+0x11c>
 8009be4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009be8:	465d      	mov	r5, fp
 8009bea:	f7ff ffc1 	bl	8009b70 <__hexdig_fun>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d064      	beq.n	8009cbc <__gethex+0x120>
 8009bf2:	465a      	mov	r2, fp
 8009bf4:	7810      	ldrb	r0, [r2, #0]
 8009bf6:	4690      	mov	r8, r2
 8009bf8:	2830      	cmp	r0, #48	; 0x30
 8009bfa:	f102 0201 	add.w	r2, r2, #1
 8009bfe:	d0f9      	beq.n	8009bf4 <__gethex+0x58>
 8009c00:	f7ff ffb6 	bl	8009b70 <__hexdig_fun>
 8009c04:	2301      	movs	r3, #1
 8009c06:	fab0 f480 	clz	r4, r0
 8009c0a:	465e      	mov	r6, fp
 8009c0c:	0964      	lsrs	r4, r4, #5
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	4642      	mov	r2, r8
 8009c12:	4615      	mov	r5, r2
 8009c14:	7828      	ldrb	r0, [r5, #0]
 8009c16:	3201      	adds	r2, #1
 8009c18:	f7ff ffaa 	bl	8009b70 <__hexdig_fun>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d1f8      	bne.n	8009c12 <__gethex+0x76>
 8009c20:	2201      	movs	r2, #1
 8009c22:	4628      	mov	r0, r5
 8009c24:	4994      	ldr	r1, [pc, #592]	; (8009e78 <__gethex+0x2dc>)
 8009c26:	f7ff feff 	bl	8009a28 <strncmp>
 8009c2a:	b978      	cbnz	r0, 8009c4c <__gethex+0xb0>
 8009c2c:	b946      	cbnz	r6, 8009c40 <__gethex+0xa4>
 8009c2e:	1c6e      	adds	r6, r5, #1
 8009c30:	4632      	mov	r2, r6
 8009c32:	4615      	mov	r5, r2
 8009c34:	7828      	ldrb	r0, [r5, #0]
 8009c36:	3201      	adds	r2, #1
 8009c38:	f7ff ff9a 	bl	8009b70 <__hexdig_fun>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d1f8      	bne.n	8009c32 <__gethex+0x96>
 8009c40:	1b73      	subs	r3, r6, r5
 8009c42:	009e      	lsls	r6, r3, #2
 8009c44:	e004      	b.n	8009c50 <__gethex+0xb4>
 8009c46:	2400      	movs	r4, #0
 8009c48:	4626      	mov	r6, r4
 8009c4a:	e7e1      	b.n	8009c10 <__gethex+0x74>
 8009c4c:	2e00      	cmp	r6, #0
 8009c4e:	d1f7      	bne.n	8009c40 <__gethex+0xa4>
 8009c50:	782b      	ldrb	r3, [r5, #0]
 8009c52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c56:	2b50      	cmp	r3, #80	; 0x50
 8009c58:	d13d      	bne.n	8009cd6 <__gethex+0x13a>
 8009c5a:	786b      	ldrb	r3, [r5, #1]
 8009c5c:	2b2b      	cmp	r3, #43	; 0x2b
 8009c5e:	d02f      	beq.n	8009cc0 <__gethex+0x124>
 8009c60:	2b2d      	cmp	r3, #45	; 0x2d
 8009c62:	d031      	beq.n	8009cc8 <__gethex+0x12c>
 8009c64:	f04f 0b00 	mov.w	fp, #0
 8009c68:	1c69      	adds	r1, r5, #1
 8009c6a:	7808      	ldrb	r0, [r1, #0]
 8009c6c:	f7ff ff80 	bl	8009b70 <__hexdig_fun>
 8009c70:	1e42      	subs	r2, r0, #1
 8009c72:	b2d2      	uxtb	r2, r2
 8009c74:	2a18      	cmp	r2, #24
 8009c76:	d82e      	bhi.n	8009cd6 <__gethex+0x13a>
 8009c78:	f1a0 0210 	sub.w	r2, r0, #16
 8009c7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c80:	f7ff ff76 	bl	8009b70 <__hexdig_fun>
 8009c84:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c88:	fa5f fc8c 	uxtb.w	ip, ip
 8009c8c:	f1bc 0f18 	cmp.w	ip, #24
 8009c90:	d91d      	bls.n	8009cce <__gethex+0x132>
 8009c92:	f1bb 0f00 	cmp.w	fp, #0
 8009c96:	d000      	beq.n	8009c9a <__gethex+0xfe>
 8009c98:	4252      	negs	r2, r2
 8009c9a:	4416      	add	r6, r2
 8009c9c:	f8ca 1000 	str.w	r1, [sl]
 8009ca0:	b1dc      	cbz	r4, 8009cda <__gethex+0x13e>
 8009ca2:	9b01      	ldr	r3, [sp, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	bf14      	ite	ne
 8009ca8:	f04f 0800 	movne.w	r8, #0
 8009cac:	f04f 0806 	moveq.w	r8, #6
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	b005      	add	sp, #20
 8009cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb8:	4645      	mov	r5, r8
 8009cba:	4626      	mov	r6, r4
 8009cbc:	2401      	movs	r4, #1
 8009cbe:	e7c7      	b.n	8009c50 <__gethex+0xb4>
 8009cc0:	f04f 0b00 	mov.w	fp, #0
 8009cc4:	1ca9      	adds	r1, r5, #2
 8009cc6:	e7d0      	b.n	8009c6a <__gethex+0xce>
 8009cc8:	f04f 0b01 	mov.w	fp, #1
 8009ccc:	e7fa      	b.n	8009cc4 <__gethex+0x128>
 8009cce:	230a      	movs	r3, #10
 8009cd0:	fb03 0002 	mla	r0, r3, r2, r0
 8009cd4:	e7d0      	b.n	8009c78 <__gethex+0xdc>
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	e7e0      	b.n	8009c9c <__gethex+0x100>
 8009cda:	4621      	mov	r1, r4
 8009cdc:	eba5 0308 	sub.w	r3, r5, r8
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	2b07      	cmp	r3, #7
 8009ce4:	dc0a      	bgt.n	8009cfc <__gethex+0x160>
 8009ce6:	4648      	mov	r0, r9
 8009ce8:	f7fe f936 	bl	8007f58 <_Balloc>
 8009cec:	4604      	mov	r4, r0
 8009cee:	b940      	cbnz	r0, 8009d02 <__gethex+0x166>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	21e4      	movs	r1, #228	; 0xe4
 8009cf4:	4b61      	ldr	r3, [pc, #388]	; (8009e7c <__gethex+0x2e0>)
 8009cf6:	4862      	ldr	r0, [pc, #392]	; (8009e80 <__gethex+0x2e4>)
 8009cf8:	f7fd f9a4 	bl	8007044 <__assert_func>
 8009cfc:	3101      	adds	r1, #1
 8009cfe:	105b      	asrs	r3, r3, #1
 8009d00:	e7ef      	b.n	8009ce2 <__gethex+0x146>
 8009d02:	2300      	movs	r3, #0
 8009d04:	469b      	mov	fp, r3
 8009d06:	f100 0a14 	add.w	sl, r0, #20
 8009d0a:	f8cd a004 	str.w	sl, [sp, #4]
 8009d0e:	45a8      	cmp	r8, r5
 8009d10:	d344      	bcc.n	8009d9c <__gethex+0x200>
 8009d12:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d16:	4658      	mov	r0, fp
 8009d18:	f848 bb04 	str.w	fp, [r8], #4
 8009d1c:	eba8 080a 	sub.w	r8, r8, sl
 8009d20:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009d24:	6122      	str	r2, [r4, #16]
 8009d26:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009d2a:	f7fe fa07 	bl	800813c <__hi0bits>
 8009d2e:	683d      	ldr	r5, [r7, #0]
 8009d30:	eba8 0800 	sub.w	r8, r8, r0
 8009d34:	45a8      	cmp	r8, r5
 8009d36:	dd59      	ble.n	8009dec <__gethex+0x250>
 8009d38:	eba8 0805 	sub.w	r8, r8, r5
 8009d3c:	4641      	mov	r1, r8
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f7fe fd85 	bl	800884e <__any_on>
 8009d44:	4683      	mov	fp, r0
 8009d46:	b1b8      	cbz	r0, 8009d78 <__gethex+0x1dc>
 8009d48:	f04f 0b01 	mov.w	fp, #1
 8009d4c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009d50:	1159      	asrs	r1, r3, #5
 8009d52:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009d56:	f003 021f 	and.w	r2, r3, #31
 8009d5a:	fa0b f202 	lsl.w	r2, fp, r2
 8009d5e:	420a      	tst	r2, r1
 8009d60:	d00a      	beq.n	8009d78 <__gethex+0x1dc>
 8009d62:	455b      	cmp	r3, fp
 8009d64:	dd06      	ble.n	8009d74 <__gethex+0x1d8>
 8009d66:	4620      	mov	r0, r4
 8009d68:	f1a8 0102 	sub.w	r1, r8, #2
 8009d6c:	f7fe fd6f 	bl	800884e <__any_on>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	d138      	bne.n	8009de6 <__gethex+0x24a>
 8009d74:	f04f 0b02 	mov.w	fp, #2
 8009d78:	4641      	mov	r1, r8
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f7ff fea5 	bl	8009aca <rshift>
 8009d80:	4446      	add	r6, r8
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	42b3      	cmp	r3, r6
 8009d86:	da41      	bge.n	8009e0c <__gethex+0x270>
 8009d88:	4621      	mov	r1, r4
 8009d8a:	4648      	mov	r0, r9
 8009d8c:	f7fe f924 	bl	8007fd8 <_Bfree>
 8009d90:	2300      	movs	r3, #0
 8009d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d94:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009d98:	6013      	str	r3, [r2, #0]
 8009d9a:	e789      	b.n	8009cb0 <__gethex+0x114>
 8009d9c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009da0:	2a2e      	cmp	r2, #46	; 0x2e
 8009da2:	d014      	beq.n	8009dce <__gethex+0x232>
 8009da4:	2b20      	cmp	r3, #32
 8009da6:	d106      	bne.n	8009db6 <__gethex+0x21a>
 8009da8:	9b01      	ldr	r3, [sp, #4]
 8009daa:	f843 bb04 	str.w	fp, [r3], #4
 8009dae:	f04f 0b00 	mov.w	fp, #0
 8009db2:	9301      	str	r3, [sp, #4]
 8009db4:	465b      	mov	r3, fp
 8009db6:	7828      	ldrb	r0, [r5, #0]
 8009db8:	9303      	str	r3, [sp, #12]
 8009dba:	f7ff fed9 	bl	8009b70 <__hexdig_fun>
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	f000 000f 	and.w	r0, r0, #15
 8009dc4:	4098      	lsls	r0, r3
 8009dc6:	ea4b 0b00 	orr.w	fp, fp, r0
 8009dca:	3304      	adds	r3, #4
 8009dcc:	e79f      	b.n	8009d0e <__gethex+0x172>
 8009dce:	45a8      	cmp	r8, r5
 8009dd0:	d8e8      	bhi.n	8009da4 <__gethex+0x208>
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	4928      	ldr	r1, [pc, #160]	; (8009e78 <__gethex+0x2dc>)
 8009dd8:	9303      	str	r3, [sp, #12]
 8009dda:	f7ff fe25 	bl	8009a28 <strncmp>
 8009dde:	9b03      	ldr	r3, [sp, #12]
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d1df      	bne.n	8009da4 <__gethex+0x208>
 8009de4:	e793      	b.n	8009d0e <__gethex+0x172>
 8009de6:	f04f 0b03 	mov.w	fp, #3
 8009dea:	e7c5      	b.n	8009d78 <__gethex+0x1dc>
 8009dec:	da0b      	bge.n	8009e06 <__gethex+0x26a>
 8009dee:	eba5 0808 	sub.w	r8, r5, r8
 8009df2:	4621      	mov	r1, r4
 8009df4:	4642      	mov	r2, r8
 8009df6:	4648      	mov	r0, r9
 8009df8:	f7fe fb06 	bl	8008408 <__lshift>
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	eba6 0608 	sub.w	r6, r6, r8
 8009e02:	f100 0a14 	add.w	sl, r0, #20
 8009e06:	f04f 0b00 	mov.w	fp, #0
 8009e0a:	e7ba      	b.n	8009d82 <__gethex+0x1e6>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	42b3      	cmp	r3, r6
 8009e10:	dd74      	ble.n	8009efc <__gethex+0x360>
 8009e12:	1b9e      	subs	r6, r3, r6
 8009e14:	42b5      	cmp	r5, r6
 8009e16:	dc35      	bgt.n	8009e84 <__gethex+0x2e8>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d023      	beq.n	8009e66 <__gethex+0x2ca>
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d025      	beq.n	8009e6e <__gethex+0x2d2>
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d115      	bne.n	8009e52 <__gethex+0x2b6>
 8009e26:	42b5      	cmp	r5, r6
 8009e28:	d113      	bne.n	8009e52 <__gethex+0x2b6>
 8009e2a:	2d01      	cmp	r5, #1
 8009e2c:	d10b      	bne.n	8009e46 <__gethex+0x2aa>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	9a02      	ldr	r2, [sp, #8]
 8009e32:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	2301      	movs	r3, #1
 8009e3a:	6123      	str	r3, [r4, #16]
 8009e3c:	f8ca 3000 	str.w	r3, [sl]
 8009e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e42:	601c      	str	r4, [r3, #0]
 8009e44:	e734      	b.n	8009cb0 <__gethex+0x114>
 8009e46:	4620      	mov	r0, r4
 8009e48:	1e69      	subs	r1, r5, #1
 8009e4a:	f7fe fd00 	bl	800884e <__any_on>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d1ed      	bne.n	8009e2e <__gethex+0x292>
 8009e52:	4621      	mov	r1, r4
 8009e54:	4648      	mov	r0, r9
 8009e56:	f7fe f8bf 	bl	8007fd8 <_Bfree>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e5e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	e724      	b.n	8009cb0 <__gethex+0x114>
 8009e66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1f2      	bne.n	8009e52 <__gethex+0x2b6>
 8009e6c:	e7df      	b.n	8009e2e <__gethex+0x292>
 8009e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1dc      	bne.n	8009e2e <__gethex+0x292>
 8009e74:	e7ed      	b.n	8009e52 <__gethex+0x2b6>
 8009e76:	bf00      	nop
 8009e78:	0800abd4 	.word	0x0800abd4
 8009e7c:	0800aa6d 	.word	0x0800aa6d
 8009e80:	0800ad42 	.word	0x0800ad42
 8009e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8009e88:	f1bb 0f00 	cmp.w	fp, #0
 8009e8c:	d133      	bne.n	8009ef6 <__gethex+0x35a>
 8009e8e:	f1b8 0f00 	cmp.w	r8, #0
 8009e92:	d004      	beq.n	8009e9e <__gethex+0x302>
 8009e94:	4641      	mov	r1, r8
 8009e96:	4620      	mov	r0, r4
 8009e98:	f7fe fcd9 	bl	800884e <__any_on>
 8009e9c:	4683      	mov	fp, r0
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009ea4:	f008 081f 	and.w	r8, r8, #31
 8009ea8:	fa03 f308 	lsl.w	r3, r3, r8
 8009eac:	f04f 0802 	mov.w	r8, #2
 8009eb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009eb4:	4631      	mov	r1, r6
 8009eb6:	4213      	tst	r3, r2
 8009eb8:	4620      	mov	r0, r4
 8009eba:	bf18      	it	ne
 8009ebc:	f04b 0b02 	orrne.w	fp, fp, #2
 8009ec0:	1bad      	subs	r5, r5, r6
 8009ec2:	f7ff fe02 	bl	8009aca <rshift>
 8009ec6:	687e      	ldr	r6, [r7, #4]
 8009ec8:	f1bb 0f00 	cmp.w	fp, #0
 8009ecc:	d04a      	beq.n	8009f64 <__gethex+0x3c8>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d016      	beq.n	8009f02 <__gethex+0x366>
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d018      	beq.n	8009f0a <__gethex+0x36e>
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d109      	bne.n	8009ef0 <__gethex+0x354>
 8009edc:	f01b 0f02 	tst.w	fp, #2
 8009ee0:	d006      	beq.n	8009ef0 <__gethex+0x354>
 8009ee2:	f8da 3000 	ldr.w	r3, [sl]
 8009ee6:	ea4b 0b03 	orr.w	fp, fp, r3
 8009eea:	f01b 0f01 	tst.w	fp, #1
 8009eee:	d10f      	bne.n	8009f10 <__gethex+0x374>
 8009ef0:	f048 0810 	orr.w	r8, r8, #16
 8009ef4:	e036      	b.n	8009f64 <__gethex+0x3c8>
 8009ef6:	f04f 0b01 	mov.w	fp, #1
 8009efa:	e7d0      	b.n	8009e9e <__gethex+0x302>
 8009efc:	f04f 0801 	mov.w	r8, #1
 8009f00:	e7e2      	b.n	8009ec8 <__gethex+0x32c>
 8009f02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f04:	f1c3 0301 	rsb	r3, r3, #1
 8009f08:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d0ef      	beq.n	8009ef0 <__gethex+0x354>
 8009f10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f14:	f104 0214 	add.w	r2, r4, #20
 8009f18:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009f1c:	9301      	str	r3, [sp, #4]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009f24:	4694      	mov	ip, r2
 8009f26:	f852 1b04 	ldr.w	r1, [r2], #4
 8009f2a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009f2e:	d01e      	beq.n	8009f6e <__gethex+0x3d2>
 8009f30:	3101      	adds	r1, #1
 8009f32:	f8cc 1000 	str.w	r1, [ip]
 8009f36:	f1b8 0f02 	cmp.w	r8, #2
 8009f3a:	f104 0214 	add.w	r2, r4, #20
 8009f3e:	d13d      	bne.n	8009fbc <__gethex+0x420>
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	3b01      	subs	r3, #1
 8009f44:	42ab      	cmp	r3, r5
 8009f46:	d10b      	bne.n	8009f60 <__gethex+0x3c4>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	1169      	asrs	r1, r5, #5
 8009f4c:	f005 051f 	and.w	r5, r5, #31
 8009f50:	fa03 f505 	lsl.w	r5, r3, r5
 8009f54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f58:	421d      	tst	r5, r3
 8009f5a:	bf18      	it	ne
 8009f5c:	f04f 0801 	movne.w	r8, #1
 8009f60:	f048 0820 	orr.w	r8, r8, #32
 8009f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f66:	601c      	str	r4, [r3, #0]
 8009f68:	9b02      	ldr	r3, [sp, #8]
 8009f6a:	601e      	str	r6, [r3, #0]
 8009f6c:	e6a0      	b.n	8009cb0 <__gethex+0x114>
 8009f6e:	4290      	cmp	r0, r2
 8009f70:	f842 3c04 	str.w	r3, [r2, #-4]
 8009f74:	d8d6      	bhi.n	8009f24 <__gethex+0x388>
 8009f76:	68a2      	ldr	r2, [r4, #8]
 8009f78:	4593      	cmp	fp, r2
 8009f7a:	db17      	blt.n	8009fac <__gethex+0x410>
 8009f7c:	6861      	ldr	r1, [r4, #4]
 8009f7e:	4648      	mov	r0, r9
 8009f80:	3101      	adds	r1, #1
 8009f82:	f7fd ffe9 	bl	8007f58 <_Balloc>
 8009f86:	4682      	mov	sl, r0
 8009f88:	b918      	cbnz	r0, 8009f92 <__gethex+0x3f6>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	2184      	movs	r1, #132	; 0x84
 8009f8e:	4b1a      	ldr	r3, [pc, #104]	; (8009ff8 <__gethex+0x45c>)
 8009f90:	e6b1      	b.n	8009cf6 <__gethex+0x15a>
 8009f92:	6922      	ldr	r2, [r4, #16]
 8009f94:	f104 010c 	add.w	r1, r4, #12
 8009f98:	3202      	adds	r2, #2
 8009f9a:	0092      	lsls	r2, r2, #2
 8009f9c:	300c      	adds	r0, #12
 8009f9e:	f7ff fd65 	bl	8009a6c <memcpy>
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	4648      	mov	r0, r9
 8009fa6:	f7fe f817 	bl	8007fd8 <_Bfree>
 8009faa:	4654      	mov	r4, sl
 8009fac:	6922      	ldr	r2, [r4, #16]
 8009fae:	1c51      	adds	r1, r2, #1
 8009fb0:	6121      	str	r1, [r4, #16]
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009fb8:	6151      	str	r1, [r2, #20]
 8009fba:	e7bc      	b.n	8009f36 <__gethex+0x39a>
 8009fbc:	6921      	ldr	r1, [r4, #16]
 8009fbe:	4559      	cmp	r1, fp
 8009fc0:	dd0b      	ble.n	8009fda <__gethex+0x43e>
 8009fc2:	2101      	movs	r1, #1
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f7ff fd80 	bl	8009aca <rshift>
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	3601      	adds	r6, #1
 8009fce:	42b3      	cmp	r3, r6
 8009fd0:	f6ff aeda 	blt.w	8009d88 <__gethex+0x1ec>
 8009fd4:	f04f 0801 	mov.w	r8, #1
 8009fd8:	e7c2      	b.n	8009f60 <__gethex+0x3c4>
 8009fda:	f015 051f 	ands.w	r5, r5, #31
 8009fde:	d0f9      	beq.n	8009fd4 <__gethex+0x438>
 8009fe0:	9b01      	ldr	r3, [sp, #4]
 8009fe2:	f1c5 0520 	rsb	r5, r5, #32
 8009fe6:	441a      	add	r2, r3
 8009fe8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009fec:	f7fe f8a6 	bl	800813c <__hi0bits>
 8009ff0:	42a8      	cmp	r0, r5
 8009ff2:	dbe6      	blt.n	8009fc2 <__gethex+0x426>
 8009ff4:	e7ee      	b.n	8009fd4 <__gethex+0x438>
 8009ff6:	bf00      	nop
 8009ff8:	0800aa6d 	.word	0x0800aa6d

08009ffc <L_shift>:
 8009ffc:	f1c2 0208 	rsb	r2, r2, #8
 800a000:	0092      	lsls	r2, r2, #2
 800a002:	b570      	push	{r4, r5, r6, lr}
 800a004:	f1c2 0620 	rsb	r6, r2, #32
 800a008:	6843      	ldr	r3, [r0, #4]
 800a00a:	6804      	ldr	r4, [r0, #0]
 800a00c:	fa03 f506 	lsl.w	r5, r3, r6
 800a010:	432c      	orrs	r4, r5
 800a012:	40d3      	lsrs	r3, r2
 800a014:	6004      	str	r4, [r0, #0]
 800a016:	f840 3f04 	str.w	r3, [r0, #4]!
 800a01a:	4288      	cmp	r0, r1
 800a01c:	d3f4      	bcc.n	800a008 <L_shift+0xc>
 800a01e:	bd70      	pop	{r4, r5, r6, pc}

0800a020 <__match>:
 800a020:	b530      	push	{r4, r5, lr}
 800a022:	6803      	ldr	r3, [r0, #0]
 800a024:	3301      	adds	r3, #1
 800a026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a02a:	b914      	cbnz	r4, 800a032 <__match+0x12>
 800a02c:	6003      	str	r3, [r0, #0]
 800a02e:	2001      	movs	r0, #1
 800a030:	bd30      	pop	{r4, r5, pc}
 800a032:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a036:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a03a:	2d19      	cmp	r5, #25
 800a03c:	bf98      	it	ls
 800a03e:	3220      	addls	r2, #32
 800a040:	42a2      	cmp	r2, r4
 800a042:	d0f0      	beq.n	800a026 <__match+0x6>
 800a044:	2000      	movs	r0, #0
 800a046:	e7f3      	b.n	800a030 <__match+0x10>

0800a048 <__hexnan>:
 800a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	2500      	movs	r5, #0
 800a04e:	680b      	ldr	r3, [r1, #0]
 800a050:	4682      	mov	sl, r0
 800a052:	115e      	asrs	r6, r3, #5
 800a054:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a058:	f013 031f 	ands.w	r3, r3, #31
 800a05c:	bf18      	it	ne
 800a05e:	3604      	addne	r6, #4
 800a060:	1f37      	subs	r7, r6, #4
 800a062:	4690      	mov	r8, r2
 800a064:	46b9      	mov	r9, r7
 800a066:	463c      	mov	r4, r7
 800a068:	46ab      	mov	fp, r5
 800a06a:	b087      	sub	sp, #28
 800a06c:	6801      	ldr	r1, [r0, #0]
 800a06e:	9301      	str	r3, [sp, #4]
 800a070:	f846 5c04 	str.w	r5, [r6, #-4]
 800a074:	9502      	str	r5, [sp, #8]
 800a076:	784a      	ldrb	r2, [r1, #1]
 800a078:	1c4b      	adds	r3, r1, #1
 800a07a:	9303      	str	r3, [sp, #12]
 800a07c:	b342      	cbz	r2, 800a0d0 <__hexnan+0x88>
 800a07e:	4610      	mov	r0, r2
 800a080:	9105      	str	r1, [sp, #20]
 800a082:	9204      	str	r2, [sp, #16]
 800a084:	f7ff fd74 	bl	8009b70 <__hexdig_fun>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d14f      	bne.n	800a12c <__hexnan+0xe4>
 800a08c:	9a04      	ldr	r2, [sp, #16]
 800a08e:	9905      	ldr	r1, [sp, #20]
 800a090:	2a20      	cmp	r2, #32
 800a092:	d818      	bhi.n	800a0c6 <__hexnan+0x7e>
 800a094:	9b02      	ldr	r3, [sp, #8]
 800a096:	459b      	cmp	fp, r3
 800a098:	dd13      	ble.n	800a0c2 <__hexnan+0x7a>
 800a09a:	454c      	cmp	r4, r9
 800a09c:	d206      	bcs.n	800a0ac <__hexnan+0x64>
 800a09e:	2d07      	cmp	r5, #7
 800a0a0:	dc04      	bgt.n	800a0ac <__hexnan+0x64>
 800a0a2:	462a      	mov	r2, r5
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f7ff ffa8 	bl	8009ffc <L_shift>
 800a0ac:	4544      	cmp	r4, r8
 800a0ae:	d950      	bls.n	800a152 <__hexnan+0x10a>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f1a4 0904 	sub.w	r9, r4, #4
 800a0b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0ba:	461d      	mov	r5, r3
 800a0bc:	464c      	mov	r4, r9
 800a0be:	f8cd b008 	str.w	fp, [sp, #8]
 800a0c2:	9903      	ldr	r1, [sp, #12]
 800a0c4:	e7d7      	b.n	800a076 <__hexnan+0x2e>
 800a0c6:	2a29      	cmp	r2, #41	; 0x29
 800a0c8:	d155      	bne.n	800a176 <__hexnan+0x12e>
 800a0ca:	3102      	adds	r1, #2
 800a0cc:	f8ca 1000 	str.w	r1, [sl]
 800a0d0:	f1bb 0f00 	cmp.w	fp, #0
 800a0d4:	d04f      	beq.n	800a176 <__hexnan+0x12e>
 800a0d6:	454c      	cmp	r4, r9
 800a0d8:	d206      	bcs.n	800a0e8 <__hexnan+0xa0>
 800a0da:	2d07      	cmp	r5, #7
 800a0dc:	dc04      	bgt.n	800a0e8 <__hexnan+0xa0>
 800a0de:	462a      	mov	r2, r5
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f7ff ff8a 	bl	8009ffc <L_shift>
 800a0e8:	4544      	cmp	r4, r8
 800a0ea:	d934      	bls.n	800a156 <__hexnan+0x10e>
 800a0ec:	4623      	mov	r3, r4
 800a0ee:	f1a8 0204 	sub.w	r2, r8, #4
 800a0f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0f6:	429f      	cmp	r7, r3
 800a0f8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0fc:	d2f9      	bcs.n	800a0f2 <__hexnan+0xaa>
 800a0fe:	1b3b      	subs	r3, r7, r4
 800a100:	f023 0303 	bic.w	r3, r3, #3
 800a104:	3304      	adds	r3, #4
 800a106:	3e03      	subs	r6, #3
 800a108:	3401      	adds	r4, #1
 800a10a:	42a6      	cmp	r6, r4
 800a10c:	bf38      	it	cc
 800a10e:	2304      	movcc	r3, #4
 800a110:	2200      	movs	r2, #0
 800a112:	4443      	add	r3, r8
 800a114:	f843 2b04 	str.w	r2, [r3], #4
 800a118:	429f      	cmp	r7, r3
 800a11a:	d2fb      	bcs.n	800a114 <__hexnan+0xcc>
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	b91b      	cbnz	r3, 800a128 <__hexnan+0xe0>
 800a120:	4547      	cmp	r7, r8
 800a122:	d126      	bne.n	800a172 <__hexnan+0x12a>
 800a124:	2301      	movs	r3, #1
 800a126:	603b      	str	r3, [r7, #0]
 800a128:	2005      	movs	r0, #5
 800a12a:	e025      	b.n	800a178 <__hexnan+0x130>
 800a12c:	3501      	adds	r5, #1
 800a12e:	2d08      	cmp	r5, #8
 800a130:	f10b 0b01 	add.w	fp, fp, #1
 800a134:	dd06      	ble.n	800a144 <__hexnan+0xfc>
 800a136:	4544      	cmp	r4, r8
 800a138:	d9c3      	bls.n	800a0c2 <__hexnan+0x7a>
 800a13a:	2300      	movs	r3, #0
 800a13c:	2501      	movs	r5, #1
 800a13e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a142:	3c04      	subs	r4, #4
 800a144:	6822      	ldr	r2, [r4, #0]
 800a146:	f000 000f 	and.w	r0, r0, #15
 800a14a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a14e:	6020      	str	r0, [r4, #0]
 800a150:	e7b7      	b.n	800a0c2 <__hexnan+0x7a>
 800a152:	2508      	movs	r5, #8
 800a154:	e7b5      	b.n	800a0c2 <__hexnan+0x7a>
 800a156:	9b01      	ldr	r3, [sp, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d0df      	beq.n	800a11c <__hexnan+0xd4>
 800a15c:	f04f 32ff 	mov.w	r2, #4294967295
 800a160:	f1c3 0320 	rsb	r3, r3, #32
 800a164:	40da      	lsrs	r2, r3
 800a166:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a16a:	4013      	ands	r3, r2
 800a16c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a170:	e7d4      	b.n	800a11c <__hexnan+0xd4>
 800a172:	3f04      	subs	r7, #4
 800a174:	e7d2      	b.n	800a11c <__hexnan+0xd4>
 800a176:	2004      	movs	r0, #4
 800a178:	b007      	add	sp, #28
 800a17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a17e <__ascii_mbtowc>:
 800a17e:	b082      	sub	sp, #8
 800a180:	b901      	cbnz	r1, 800a184 <__ascii_mbtowc+0x6>
 800a182:	a901      	add	r1, sp, #4
 800a184:	b142      	cbz	r2, 800a198 <__ascii_mbtowc+0x1a>
 800a186:	b14b      	cbz	r3, 800a19c <__ascii_mbtowc+0x1e>
 800a188:	7813      	ldrb	r3, [r2, #0]
 800a18a:	600b      	str	r3, [r1, #0]
 800a18c:	7812      	ldrb	r2, [r2, #0]
 800a18e:	1e10      	subs	r0, r2, #0
 800a190:	bf18      	it	ne
 800a192:	2001      	movne	r0, #1
 800a194:	b002      	add	sp, #8
 800a196:	4770      	bx	lr
 800a198:	4610      	mov	r0, r2
 800a19a:	e7fb      	b.n	800a194 <__ascii_mbtowc+0x16>
 800a19c:	f06f 0001 	mvn.w	r0, #1
 800a1a0:	e7f8      	b.n	800a194 <__ascii_mbtowc+0x16>

0800a1a2 <_realloc_r>:
 800a1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a6:	4680      	mov	r8, r0
 800a1a8:	4614      	mov	r4, r2
 800a1aa:	460e      	mov	r6, r1
 800a1ac:	b921      	cbnz	r1, 800a1b8 <_realloc_r+0x16>
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b4:	f7fd be44 	b.w	8007e40 <_malloc_r>
 800a1b8:	b92a      	cbnz	r2, 800a1c6 <_realloc_r+0x24>
 800a1ba:	f7fd fdd1 	bl	8007d60 <_free_r>
 800a1be:	4625      	mov	r5, r4
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c6:	f000 fa43 	bl	800a650 <_malloc_usable_size_r>
 800a1ca:	4284      	cmp	r4, r0
 800a1cc:	4607      	mov	r7, r0
 800a1ce:	d802      	bhi.n	800a1d6 <_realloc_r+0x34>
 800a1d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1d4:	d812      	bhi.n	800a1fc <_realloc_r+0x5a>
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	4640      	mov	r0, r8
 800a1da:	f7fd fe31 	bl	8007e40 <_malloc_r>
 800a1de:	4605      	mov	r5, r0
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d0ed      	beq.n	800a1c0 <_realloc_r+0x1e>
 800a1e4:	42bc      	cmp	r4, r7
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	4631      	mov	r1, r6
 800a1ea:	bf28      	it	cs
 800a1ec:	463a      	movcs	r2, r7
 800a1ee:	f7ff fc3d 	bl	8009a6c <memcpy>
 800a1f2:	4631      	mov	r1, r6
 800a1f4:	4640      	mov	r0, r8
 800a1f6:	f7fd fdb3 	bl	8007d60 <_free_r>
 800a1fa:	e7e1      	b.n	800a1c0 <_realloc_r+0x1e>
 800a1fc:	4635      	mov	r5, r6
 800a1fe:	e7df      	b.n	800a1c0 <_realloc_r+0x1e>

0800a200 <__ascii_wctomb>:
 800a200:	4603      	mov	r3, r0
 800a202:	4608      	mov	r0, r1
 800a204:	b141      	cbz	r1, 800a218 <__ascii_wctomb+0x18>
 800a206:	2aff      	cmp	r2, #255	; 0xff
 800a208:	d904      	bls.n	800a214 <__ascii_wctomb+0x14>
 800a20a:	228a      	movs	r2, #138	; 0x8a
 800a20c:	f04f 30ff 	mov.w	r0, #4294967295
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	4770      	bx	lr
 800a214:	2001      	movs	r0, #1
 800a216:	700a      	strb	r2, [r1, #0]
 800a218:	4770      	bx	lr

0800a21a <__sfputc_r>:
 800a21a:	6893      	ldr	r3, [r2, #8]
 800a21c:	b410      	push	{r4}
 800a21e:	3b01      	subs	r3, #1
 800a220:	2b00      	cmp	r3, #0
 800a222:	6093      	str	r3, [r2, #8]
 800a224:	da07      	bge.n	800a236 <__sfputc_r+0x1c>
 800a226:	6994      	ldr	r4, [r2, #24]
 800a228:	42a3      	cmp	r3, r4
 800a22a:	db01      	blt.n	800a230 <__sfputc_r+0x16>
 800a22c:	290a      	cmp	r1, #10
 800a22e:	d102      	bne.n	800a236 <__sfputc_r+0x1c>
 800a230:	bc10      	pop	{r4}
 800a232:	f000 b933 	b.w	800a49c <__swbuf_r>
 800a236:	6813      	ldr	r3, [r2, #0]
 800a238:	1c58      	adds	r0, r3, #1
 800a23a:	6010      	str	r0, [r2, #0]
 800a23c:	7019      	strb	r1, [r3, #0]
 800a23e:	4608      	mov	r0, r1
 800a240:	bc10      	pop	{r4}
 800a242:	4770      	bx	lr

0800a244 <__sfputs_r>:
 800a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a246:	4606      	mov	r6, r0
 800a248:	460f      	mov	r7, r1
 800a24a:	4614      	mov	r4, r2
 800a24c:	18d5      	adds	r5, r2, r3
 800a24e:	42ac      	cmp	r4, r5
 800a250:	d101      	bne.n	800a256 <__sfputs_r+0x12>
 800a252:	2000      	movs	r0, #0
 800a254:	e007      	b.n	800a266 <__sfputs_r+0x22>
 800a256:	463a      	mov	r2, r7
 800a258:	4630      	mov	r0, r6
 800a25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25e:	f7ff ffdc 	bl	800a21a <__sfputc_r>
 800a262:	1c43      	adds	r3, r0, #1
 800a264:	d1f3      	bne.n	800a24e <__sfputs_r+0xa>
 800a266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a268 <_vfiprintf_r>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	460d      	mov	r5, r1
 800a26e:	4614      	mov	r4, r2
 800a270:	4698      	mov	r8, r3
 800a272:	4606      	mov	r6, r0
 800a274:	b09d      	sub	sp, #116	; 0x74
 800a276:	b118      	cbz	r0, 800a280 <_vfiprintf_r+0x18>
 800a278:	6a03      	ldr	r3, [r0, #32]
 800a27a:	b90b      	cbnz	r3, 800a280 <_vfiprintf_r+0x18>
 800a27c:	f7fc fd5c 	bl	8006d38 <__sinit>
 800a280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a282:	07d9      	lsls	r1, r3, #31
 800a284:	d405      	bmi.n	800a292 <_vfiprintf_r+0x2a>
 800a286:	89ab      	ldrh	r3, [r5, #12]
 800a288:	059a      	lsls	r2, r3, #22
 800a28a:	d402      	bmi.n	800a292 <_vfiprintf_r+0x2a>
 800a28c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a28e:	f7fc fec5 	bl	800701c <__retarget_lock_acquire_recursive>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	071b      	lsls	r3, r3, #28
 800a296:	d501      	bpl.n	800a29c <_vfiprintf_r+0x34>
 800a298:	692b      	ldr	r3, [r5, #16]
 800a29a:	b99b      	cbnz	r3, 800a2c4 <_vfiprintf_r+0x5c>
 800a29c:	4629      	mov	r1, r5
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f000 f93a 	bl	800a518 <__swsetup_r>
 800a2a4:	b170      	cbz	r0, 800a2c4 <_vfiprintf_r+0x5c>
 800a2a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2a8:	07dc      	lsls	r4, r3, #31
 800a2aa:	d504      	bpl.n	800a2b6 <_vfiprintf_r+0x4e>
 800a2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b0:	b01d      	add	sp, #116	; 0x74
 800a2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b6:	89ab      	ldrh	r3, [r5, #12]
 800a2b8:	0598      	lsls	r0, r3, #22
 800a2ba:	d4f7      	bmi.n	800a2ac <_vfiprintf_r+0x44>
 800a2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2be:	f7fc feae 	bl	800701e <__retarget_lock_release_recursive>
 800a2c2:	e7f3      	b.n	800a2ac <_vfiprintf_r+0x44>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c8:	2320      	movs	r3, #32
 800a2ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2ce:	2330      	movs	r3, #48	; 0x30
 800a2d0:	f04f 0901 	mov.w	r9, #1
 800a2d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a488 <_vfiprintf_r+0x220>
 800a2dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2e0:	4623      	mov	r3, r4
 800a2e2:	469a      	mov	sl, r3
 800a2e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2e8:	b10a      	cbz	r2, 800a2ee <_vfiprintf_r+0x86>
 800a2ea:	2a25      	cmp	r2, #37	; 0x25
 800a2ec:	d1f9      	bne.n	800a2e2 <_vfiprintf_r+0x7a>
 800a2ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a2f2:	d00b      	beq.n	800a30c <_vfiprintf_r+0xa4>
 800a2f4:	465b      	mov	r3, fp
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	f7ff ffa2 	bl	800a244 <__sfputs_r>
 800a300:	3001      	adds	r0, #1
 800a302:	f000 80a9 	beq.w	800a458 <_vfiprintf_r+0x1f0>
 800a306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a308:	445a      	add	r2, fp
 800a30a:	9209      	str	r2, [sp, #36]	; 0x24
 800a30c:	f89a 3000 	ldrb.w	r3, [sl]
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 80a1 	beq.w	800a458 <_vfiprintf_r+0x1f0>
 800a316:	2300      	movs	r3, #0
 800a318:	f04f 32ff 	mov.w	r2, #4294967295
 800a31c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a320:	f10a 0a01 	add.w	sl, sl, #1
 800a324:	9304      	str	r3, [sp, #16]
 800a326:	9307      	str	r3, [sp, #28]
 800a328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a32c:	931a      	str	r3, [sp, #104]	; 0x68
 800a32e:	4654      	mov	r4, sl
 800a330:	2205      	movs	r2, #5
 800a332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a336:	4854      	ldr	r0, [pc, #336]	; (800a488 <_vfiprintf_r+0x220>)
 800a338:	f7fc fe72 	bl	8007020 <memchr>
 800a33c:	9a04      	ldr	r2, [sp, #16]
 800a33e:	b9d8      	cbnz	r0, 800a378 <_vfiprintf_r+0x110>
 800a340:	06d1      	lsls	r1, r2, #27
 800a342:	bf44      	itt	mi
 800a344:	2320      	movmi	r3, #32
 800a346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a34a:	0713      	lsls	r3, r2, #28
 800a34c:	bf44      	itt	mi
 800a34e:	232b      	movmi	r3, #43	; 0x2b
 800a350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a354:	f89a 3000 	ldrb.w	r3, [sl]
 800a358:	2b2a      	cmp	r3, #42	; 0x2a
 800a35a:	d015      	beq.n	800a388 <_vfiprintf_r+0x120>
 800a35c:	4654      	mov	r4, sl
 800a35e:	2000      	movs	r0, #0
 800a360:	f04f 0c0a 	mov.w	ip, #10
 800a364:	9a07      	ldr	r2, [sp, #28]
 800a366:	4621      	mov	r1, r4
 800a368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a36c:	3b30      	subs	r3, #48	; 0x30
 800a36e:	2b09      	cmp	r3, #9
 800a370:	d94d      	bls.n	800a40e <_vfiprintf_r+0x1a6>
 800a372:	b1b0      	cbz	r0, 800a3a2 <_vfiprintf_r+0x13a>
 800a374:	9207      	str	r2, [sp, #28]
 800a376:	e014      	b.n	800a3a2 <_vfiprintf_r+0x13a>
 800a378:	eba0 0308 	sub.w	r3, r0, r8
 800a37c:	fa09 f303 	lsl.w	r3, r9, r3
 800a380:	4313      	orrs	r3, r2
 800a382:	46a2      	mov	sl, r4
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	e7d2      	b.n	800a32e <_vfiprintf_r+0xc6>
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	1d19      	adds	r1, r3, #4
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	9103      	str	r1, [sp, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	bfbb      	ittet	lt
 800a394:	425b      	neglt	r3, r3
 800a396:	f042 0202 	orrlt.w	r2, r2, #2
 800a39a:	9307      	strge	r3, [sp, #28]
 800a39c:	9307      	strlt	r3, [sp, #28]
 800a39e:	bfb8      	it	lt
 800a3a0:	9204      	strlt	r2, [sp, #16]
 800a3a2:	7823      	ldrb	r3, [r4, #0]
 800a3a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a3a6:	d10c      	bne.n	800a3c2 <_vfiprintf_r+0x15a>
 800a3a8:	7863      	ldrb	r3, [r4, #1]
 800a3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ac:	d134      	bne.n	800a418 <_vfiprintf_r+0x1b0>
 800a3ae:	9b03      	ldr	r3, [sp, #12]
 800a3b0:	3402      	adds	r4, #2
 800a3b2:	1d1a      	adds	r2, r3, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	9203      	str	r2, [sp, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	bfb8      	it	lt
 800a3bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3c0:	9305      	str	r3, [sp, #20]
 800a3c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a48c <_vfiprintf_r+0x224>
 800a3c6:	2203      	movs	r2, #3
 800a3c8:	4650      	mov	r0, sl
 800a3ca:	7821      	ldrb	r1, [r4, #0]
 800a3cc:	f7fc fe28 	bl	8007020 <memchr>
 800a3d0:	b138      	cbz	r0, 800a3e2 <_vfiprintf_r+0x17a>
 800a3d2:	2240      	movs	r2, #64	; 0x40
 800a3d4:	9b04      	ldr	r3, [sp, #16]
 800a3d6:	eba0 000a 	sub.w	r0, r0, sl
 800a3da:	4082      	lsls	r2, r0
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	3401      	adds	r4, #1
 800a3e0:	9304      	str	r3, [sp, #16]
 800a3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e6:	2206      	movs	r2, #6
 800a3e8:	4829      	ldr	r0, [pc, #164]	; (800a490 <_vfiprintf_r+0x228>)
 800a3ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ee:	f7fc fe17 	bl	8007020 <memchr>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d03f      	beq.n	800a476 <_vfiprintf_r+0x20e>
 800a3f6:	4b27      	ldr	r3, [pc, #156]	; (800a494 <_vfiprintf_r+0x22c>)
 800a3f8:	bb1b      	cbnz	r3, 800a442 <_vfiprintf_r+0x1da>
 800a3fa:	9b03      	ldr	r3, [sp, #12]
 800a3fc:	3307      	adds	r3, #7
 800a3fe:	f023 0307 	bic.w	r3, r3, #7
 800a402:	3308      	adds	r3, #8
 800a404:	9303      	str	r3, [sp, #12]
 800a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a408:	443b      	add	r3, r7
 800a40a:	9309      	str	r3, [sp, #36]	; 0x24
 800a40c:	e768      	b.n	800a2e0 <_vfiprintf_r+0x78>
 800a40e:	460c      	mov	r4, r1
 800a410:	2001      	movs	r0, #1
 800a412:	fb0c 3202 	mla	r2, ip, r2, r3
 800a416:	e7a6      	b.n	800a366 <_vfiprintf_r+0xfe>
 800a418:	2300      	movs	r3, #0
 800a41a:	f04f 0c0a 	mov.w	ip, #10
 800a41e:	4619      	mov	r1, r3
 800a420:	3401      	adds	r4, #1
 800a422:	9305      	str	r3, [sp, #20]
 800a424:	4620      	mov	r0, r4
 800a426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a42a:	3a30      	subs	r2, #48	; 0x30
 800a42c:	2a09      	cmp	r2, #9
 800a42e:	d903      	bls.n	800a438 <_vfiprintf_r+0x1d0>
 800a430:	2b00      	cmp	r3, #0
 800a432:	d0c6      	beq.n	800a3c2 <_vfiprintf_r+0x15a>
 800a434:	9105      	str	r1, [sp, #20]
 800a436:	e7c4      	b.n	800a3c2 <_vfiprintf_r+0x15a>
 800a438:	4604      	mov	r4, r0
 800a43a:	2301      	movs	r3, #1
 800a43c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a440:	e7f0      	b.n	800a424 <_vfiprintf_r+0x1bc>
 800a442:	ab03      	add	r3, sp, #12
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	462a      	mov	r2, r5
 800a448:	4630      	mov	r0, r6
 800a44a:	4b13      	ldr	r3, [pc, #76]	; (800a498 <_vfiprintf_r+0x230>)
 800a44c:	a904      	add	r1, sp, #16
 800a44e:	f7fb fe29 	bl	80060a4 <_printf_float>
 800a452:	4607      	mov	r7, r0
 800a454:	1c78      	adds	r0, r7, #1
 800a456:	d1d6      	bne.n	800a406 <_vfiprintf_r+0x19e>
 800a458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a45a:	07d9      	lsls	r1, r3, #31
 800a45c:	d405      	bmi.n	800a46a <_vfiprintf_r+0x202>
 800a45e:	89ab      	ldrh	r3, [r5, #12]
 800a460:	059a      	lsls	r2, r3, #22
 800a462:	d402      	bmi.n	800a46a <_vfiprintf_r+0x202>
 800a464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a466:	f7fc fdda 	bl	800701e <__retarget_lock_release_recursive>
 800a46a:	89ab      	ldrh	r3, [r5, #12]
 800a46c:	065b      	lsls	r3, r3, #25
 800a46e:	f53f af1d 	bmi.w	800a2ac <_vfiprintf_r+0x44>
 800a472:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a474:	e71c      	b.n	800a2b0 <_vfiprintf_r+0x48>
 800a476:	ab03      	add	r3, sp, #12
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	462a      	mov	r2, r5
 800a47c:	4630      	mov	r0, r6
 800a47e:	4b06      	ldr	r3, [pc, #24]	; (800a498 <_vfiprintf_r+0x230>)
 800a480:	a904      	add	r1, sp, #16
 800a482:	f7fc f8af 	bl	80065e4 <_printf_i>
 800a486:	e7e4      	b.n	800a452 <_vfiprintf_r+0x1ea>
 800a488:	0800ad29 	.word	0x0800ad29
 800a48c:	0800ad2f 	.word	0x0800ad2f
 800a490:	0800ad33 	.word	0x0800ad33
 800a494:	080060a5 	.word	0x080060a5
 800a498:	0800a245 	.word	0x0800a245

0800a49c <__swbuf_r>:
 800a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49e:	460e      	mov	r6, r1
 800a4a0:	4614      	mov	r4, r2
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	b118      	cbz	r0, 800a4ae <__swbuf_r+0x12>
 800a4a6:	6a03      	ldr	r3, [r0, #32]
 800a4a8:	b90b      	cbnz	r3, 800a4ae <__swbuf_r+0x12>
 800a4aa:	f7fc fc45 	bl	8006d38 <__sinit>
 800a4ae:	69a3      	ldr	r3, [r4, #24]
 800a4b0:	60a3      	str	r3, [r4, #8]
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	071a      	lsls	r2, r3, #28
 800a4b6:	d525      	bpl.n	800a504 <__swbuf_r+0x68>
 800a4b8:	6923      	ldr	r3, [r4, #16]
 800a4ba:	b31b      	cbz	r3, 800a504 <__swbuf_r+0x68>
 800a4bc:	6823      	ldr	r3, [r4, #0]
 800a4be:	6922      	ldr	r2, [r4, #16]
 800a4c0:	b2f6      	uxtb	r6, r6
 800a4c2:	1a98      	subs	r0, r3, r2
 800a4c4:	6963      	ldr	r3, [r4, #20]
 800a4c6:	4637      	mov	r7, r6
 800a4c8:	4283      	cmp	r3, r0
 800a4ca:	dc04      	bgt.n	800a4d6 <__swbuf_r+0x3a>
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	f7ff fa56 	bl	8009980 <_fflush_r>
 800a4d4:	b9e0      	cbnz	r0, 800a510 <__swbuf_r+0x74>
 800a4d6:	68a3      	ldr	r3, [r4, #8]
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	60a3      	str	r3, [r4, #8]
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	1c5a      	adds	r2, r3, #1
 800a4e0:	6022      	str	r2, [r4, #0]
 800a4e2:	701e      	strb	r6, [r3, #0]
 800a4e4:	6962      	ldr	r2, [r4, #20]
 800a4e6:	1c43      	adds	r3, r0, #1
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d004      	beq.n	800a4f6 <__swbuf_r+0x5a>
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	07db      	lsls	r3, r3, #31
 800a4f0:	d506      	bpl.n	800a500 <__swbuf_r+0x64>
 800a4f2:	2e0a      	cmp	r6, #10
 800a4f4:	d104      	bne.n	800a500 <__swbuf_r+0x64>
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	f7ff fa41 	bl	8009980 <_fflush_r>
 800a4fe:	b938      	cbnz	r0, 800a510 <__swbuf_r+0x74>
 800a500:	4638      	mov	r0, r7
 800a502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a504:	4621      	mov	r1, r4
 800a506:	4628      	mov	r0, r5
 800a508:	f000 f806 	bl	800a518 <__swsetup_r>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d0d5      	beq.n	800a4bc <__swbuf_r+0x20>
 800a510:	f04f 37ff 	mov.w	r7, #4294967295
 800a514:	e7f4      	b.n	800a500 <__swbuf_r+0x64>
	...

0800a518 <__swsetup_r>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4b2a      	ldr	r3, [pc, #168]	; (800a5c4 <__swsetup_r+0xac>)
 800a51c:	4605      	mov	r5, r0
 800a51e:	6818      	ldr	r0, [r3, #0]
 800a520:	460c      	mov	r4, r1
 800a522:	b118      	cbz	r0, 800a52c <__swsetup_r+0x14>
 800a524:	6a03      	ldr	r3, [r0, #32]
 800a526:	b90b      	cbnz	r3, 800a52c <__swsetup_r+0x14>
 800a528:	f7fc fc06 	bl	8006d38 <__sinit>
 800a52c:	89a3      	ldrh	r3, [r4, #12]
 800a52e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a532:	0718      	lsls	r0, r3, #28
 800a534:	d422      	bmi.n	800a57c <__swsetup_r+0x64>
 800a536:	06d9      	lsls	r1, r3, #27
 800a538:	d407      	bmi.n	800a54a <__swsetup_r+0x32>
 800a53a:	2309      	movs	r3, #9
 800a53c:	602b      	str	r3, [r5, #0]
 800a53e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a542:	f04f 30ff 	mov.w	r0, #4294967295
 800a546:	81a3      	strh	r3, [r4, #12]
 800a548:	e034      	b.n	800a5b4 <__swsetup_r+0x9c>
 800a54a:	0758      	lsls	r0, r3, #29
 800a54c:	d512      	bpl.n	800a574 <__swsetup_r+0x5c>
 800a54e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a550:	b141      	cbz	r1, 800a564 <__swsetup_r+0x4c>
 800a552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a556:	4299      	cmp	r1, r3
 800a558:	d002      	beq.n	800a560 <__swsetup_r+0x48>
 800a55a:	4628      	mov	r0, r5
 800a55c:	f7fd fc00 	bl	8007d60 <_free_r>
 800a560:	2300      	movs	r3, #0
 800a562:	6363      	str	r3, [r4, #52]	; 0x34
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a56a:	81a3      	strh	r3, [r4, #12]
 800a56c:	2300      	movs	r3, #0
 800a56e:	6063      	str	r3, [r4, #4]
 800a570:	6923      	ldr	r3, [r4, #16]
 800a572:	6023      	str	r3, [r4, #0]
 800a574:	89a3      	ldrh	r3, [r4, #12]
 800a576:	f043 0308 	orr.w	r3, r3, #8
 800a57a:	81a3      	strh	r3, [r4, #12]
 800a57c:	6923      	ldr	r3, [r4, #16]
 800a57e:	b94b      	cbnz	r3, 800a594 <__swsetup_r+0x7c>
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a58a:	d003      	beq.n	800a594 <__swsetup_r+0x7c>
 800a58c:	4621      	mov	r1, r4
 800a58e:	4628      	mov	r0, r5
 800a590:	f000 f88b 	bl	800a6aa <__smakebuf_r>
 800a594:	89a0      	ldrh	r0, [r4, #12]
 800a596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a59a:	f010 0301 	ands.w	r3, r0, #1
 800a59e:	d00a      	beq.n	800a5b6 <__swsetup_r+0x9e>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	60a3      	str	r3, [r4, #8]
 800a5a4:	6963      	ldr	r3, [r4, #20]
 800a5a6:	425b      	negs	r3, r3
 800a5a8:	61a3      	str	r3, [r4, #24]
 800a5aa:	6923      	ldr	r3, [r4, #16]
 800a5ac:	b943      	cbnz	r3, 800a5c0 <__swsetup_r+0xa8>
 800a5ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5b2:	d1c4      	bne.n	800a53e <__swsetup_r+0x26>
 800a5b4:	bd38      	pop	{r3, r4, r5, pc}
 800a5b6:	0781      	lsls	r1, r0, #30
 800a5b8:	bf58      	it	pl
 800a5ba:	6963      	ldrpl	r3, [r4, #20]
 800a5bc:	60a3      	str	r3, [r4, #8]
 800a5be:	e7f4      	b.n	800a5aa <__swsetup_r+0x92>
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	e7f7      	b.n	800a5b4 <__swsetup_r+0x9c>
 800a5c4:	2000008c 	.word	0x2000008c

0800a5c8 <_raise_r>:
 800a5c8:	291f      	cmp	r1, #31
 800a5ca:	b538      	push	{r3, r4, r5, lr}
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	d904      	bls.n	800a5dc <_raise_r+0x14>
 800a5d2:	2316      	movs	r3, #22
 800a5d4:	6003      	str	r3, [r0, #0]
 800a5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5da:	bd38      	pop	{r3, r4, r5, pc}
 800a5dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a5de:	b112      	cbz	r2, 800a5e6 <_raise_r+0x1e>
 800a5e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5e4:	b94b      	cbnz	r3, 800a5fa <_raise_r+0x32>
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f000 f830 	bl	800a64c <_getpid_r>
 800a5ec:	462a      	mov	r2, r5
 800a5ee:	4601      	mov	r1, r0
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5f6:	f000 b817 	b.w	800a628 <_kill_r>
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d00a      	beq.n	800a614 <_raise_r+0x4c>
 800a5fe:	1c59      	adds	r1, r3, #1
 800a600:	d103      	bne.n	800a60a <_raise_r+0x42>
 800a602:	2316      	movs	r3, #22
 800a604:	6003      	str	r3, [r0, #0]
 800a606:	2001      	movs	r0, #1
 800a608:	e7e7      	b.n	800a5da <_raise_r+0x12>
 800a60a:	2400      	movs	r4, #0
 800a60c:	4628      	mov	r0, r5
 800a60e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a612:	4798      	blx	r3
 800a614:	2000      	movs	r0, #0
 800a616:	e7e0      	b.n	800a5da <_raise_r+0x12>

0800a618 <raise>:
 800a618:	4b02      	ldr	r3, [pc, #8]	; (800a624 <raise+0xc>)
 800a61a:	4601      	mov	r1, r0
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	f7ff bfd3 	b.w	800a5c8 <_raise_r>
 800a622:	bf00      	nop
 800a624:	2000008c 	.word	0x2000008c

0800a628 <_kill_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	2300      	movs	r3, #0
 800a62c:	4d06      	ldr	r5, [pc, #24]	; (800a648 <_kill_r+0x20>)
 800a62e:	4604      	mov	r4, r0
 800a630:	4608      	mov	r0, r1
 800a632:	4611      	mov	r1, r2
 800a634:	602b      	str	r3, [r5, #0]
 800a636:	f7f8 fca8 	bl	8002f8a <_kill>
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	d102      	bne.n	800a644 <_kill_r+0x1c>
 800a63e:	682b      	ldr	r3, [r5, #0]
 800a640:	b103      	cbz	r3, 800a644 <_kill_r+0x1c>
 800a642:	6023      	str	r3, [r4, #0]
 800a644:	bd38      	pop	{r3, r4, r5, pc}
 800a646:	bf00      	nop
 800a648:	200005fc 	.word	0x200005fc

0800a64c <_getpid_r>:
 800a64c:	f7f8 bc96 	b.w	8002f7c <_getpid>

0800a650 <_malloc_usable_size_r>:
 800a650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a654:	1f18      	subs	r0, r3, #4
 800a656:	2b00      	cmp	r3, #0
 800a658:	bfbc      	itt	lt
 800a65a:	580b      	ldrlt	r3, [r1, r0]
 800a65c:	18c0      	addlt	r0, r0, r3
 800a65e:	4770      	bx	lr

0800a660 <__swhatbuf_r>:
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	460c      	mov	r4, r1
 800a664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a668:	4615      	mov	r5, r2
 800a66a:	2900      	cmp	r1, #0
 800a66c:	461e      	mov	r6, r3
 800a66e:	b096      	sub	sp, #88	; 0x58
 800a670:	da0c      	bge.n	800a68c <__swhatbuf_r+0x2c>
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	2100      	movs	r1, #0
 800a676:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a67a:	bf0c      	ite	eq
 800a67c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a680:	2340      	movne	r3, #64	; 0x40
 800a682:	2000      	movs	r0, #0
 800a684:	6031      	str	r1, [r6, #0]
 800a686:	602b      	str	r3, [r5, #0]
 800a688:	b016      	add	sp, #88	; 0x58
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	466a      	mov	r2, sp
 800a68e:	f000 f849 	bl	800a724 <_fstat_r>
 800a692:	2800      	cmp	r0, #0
 800a694:	dbed      	blt.n	800a672 <__swhatbuf_r+0x12>
 800a696:	9901      	ldr	r1, [sp, #4]
 800a698:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a69c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a6a0:	4259      	negs	r1, r3
 800a6a2:	4159      	adcs	r1, r3
 800a6a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6a8:	e7eb      	b.n	800a682 <__swhatbuf_r+0x22>

0800a6aa <__smakebuf_r>:
 800a6aa:	898b      	ldrh	r3, [r1, #12]
 800a6ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6ae:	079d      	lsls	r5, r3, #30
 800a6b0:	4606      	mov	r6, r0
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	d507      	bpl.n	800a6c6 <__smakebuf_r+0x1c>
 800a6b6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6ba:	6023      	str	r3, [r4, #0]
 800a6bc:	6123      	str	r3, [r4, #16]
 800a6be:	2301      	movs	r3, #1
 800a6c0:	6163      	str	r3, [r4, #20]
 800a6c2:	b002      	add	sp, #8
 800a6c4:	bd70      	pop	{r4, r5, r6, pc}
 800a6c6:	466a      	mov	r2, sp
 800a6c8:	ab01      	add	r3, sp, #4
 800a6ca:	f7ff ffc9 	bl	800a660 <__swhatbuf_r>
 800a6ce:	9900      	ldr	r1, [sp, #0]
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f7fd fbb4 	bl	8007e40 <_malloc_r>
 800a6d8:	b948      	cbnz	r0, 800a6ee <__smakebuf_r+0x44>
 800a6da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6de:	059a      	lsls	r2, r3, #22
 800a6e0:	d4ef      	bmi.n	800a6c2 <__smakebuf_r+0x18>
 800a6e2:	f023 0303 	bic.w	r3, r3, #3
 800a6e6:	f043 0302 	orr.w	r3, r3, #2
 800a6ea:	81a3      	strh	r3, [r4, #12]
 800a6ec:	e7e3      	b.n	800a6b6 <__smakebuf_r+0xc>
 800a6ee:	89a3      	ldrh	r3, [r4, #12]
 800a6f0:	6020      	str	r0, [r4, #0]
 800a6f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f6:	81a3      	strh	r3, [r4, #12]
 800a6f8:	9b00      	ldr	r3, [sp, #0]
 800a6fa:	6120      	str	r0, [r4, #16]
 800a6fc:	6163      	str	r3, [r4, #20]
 800a6fe:	9b01      	ldr	r3, [sp, #4]
 800a700:	b15b      	cbz	r3, 800a71a <__smakebuf_r+0x70>
 800a702:	4630      	mov	r0, r6
 800a704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a708:	f000 f81e 	bl	800a748 <_isatty_r>
 800a70c:	b128      	cbz	r0, 800a71a <__smakebuf_r+0x70>
 800a70e:	89a3      	ldrh	r3, [r4, #12]
 800a710:	f023 0303 	bic.w	r3, r3, #3
 800a714:	f043 0301 	orr.w	r3, r3, #1
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	89a3      	ldrh	r3, [r4, #12]
 800a71c:	431d      	orrs	r5, r3
 800a71e:	81a5      	strh	r5, [r4, #12]
 800a720:	e7cf      	b.n	800a6c2 <__smakebuf_r+0x18>
	...

0800a724 <_fstat_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	2300      	movs	r3, #0
 800a728:	4d06      	ldr	r5, [pc, #24]	; (800a744 <_fstat_r+0x20>)
 800a72a:	4604      	mov	r4, r0
 800a72c:	4608      	mov	r0, r1
 800a72e:	4611      	mov	r1, r2
 800a730:	602b      	str	r3, [r5, #0]
 800a732:	f7f8 fc88 	bl	8003046 <_fstat>
 800a736:	1c43      	adds	r3, r0, #1
 800a738:	d102      	bne.n	800a740 <_fstat_r+0x1c>
 800a73a:	682b      	ldr	r3, [r5, #0]
 800a73c:	b103      	cbz	r3, 800a740 <_fstat_r+0x1c>
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	bd38      	pop	{r3, r4, r5, pc}
 800a742:	bf00      	nop
 800a744:	200005fc 	.word	0x200005fc

0800a748 <_isatty_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	2300      	movs	r3, #0
 800a74c:	4d05      	ldr	r5, [pc, #20]	; (800a764 <_isatty_r+0x1c>)
 800a74e:	4604      	mov	r4, r0
 800a750:	4608      	mov	r0, r1
 800a752:	602b      	str	r3, [r5, #0]
 800a754:	f7f8 fc86 	bl	8003064 <_isatty>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_isatty_r+0x1a>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_isatty_r+0x1a>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	200005fc 	.word	0x200005fc

0800a768 <_init>:
 800a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76a:	bf00      	nop
 800a76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76e:	bc08      	pop	{r3}
 800a770:	469e      	mov	lr, r3
 800a772:	4770      	bx	lr

0800a774 <_fini>:
 800a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a776:	bf00      	nop
 800a778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77a:	bc08      	pop	{r3}
 800a77c:	469e      	mov	lr, r3
 800a77e:	4770      	bx	lr
