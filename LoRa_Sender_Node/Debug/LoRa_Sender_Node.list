
LoRa_Sender_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afb8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800b0c8  0800b0c8  0001b0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b730  0800b730  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800b730  0800b730  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b730  0800b730  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b730  0800b730  0001b730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b734  0800b734  0001b734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800b738  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000200  0800b934  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  0800b934  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f08  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a0  00000000  00000000  00032170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  00034910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9e  00000000  00000000  00035b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001971f  00000000  00000000  00036a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015502  00000000  00000000  0005014d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090ba3  00000000  00000000  0006564f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006640  00000000  00000000  000f61f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000fc834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b0b0 	.word	0x0800b0b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800b0b0 	.word	0x0800b0b0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	4605      	mov	r5, r0
 8000b80:	460c      	mov	r4, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	2300      	movs	r3, #0
 8000b86:	4628      	mov	r0, r5
 8000b88:	4621      	mov	r1, r4
 8000b8a:	f7ff ff21 	bl	80009d0 <__aeabi_dcmplt>
 8000b8e:	b928      	cbnz	r0, 8000b9c <__aeabi_d2lz+0x20>
 8000b90:	4628      	mov	r0, r5
 8000b92:	4621      	mov	r1, r4
 8000b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b98:	f000 b80a 	b.w	8000bb0 <__aeabi_d2ulz>
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ba2:	f000 f805 	bl	8000bb0 <__aeabi_d2ulz>
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bac:	bd38      	pop	{r3, r4, r5, pc}
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2ulz>:
 8000bb0:	b5d0      	push	{r4, r6, r7, lr}
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <__aeabi_d2ulz+0x34>)
 8000bb6:	4606      	mov	r6, r0
 8000bb8:	460f      	mov	r7, r1
 8000bba:	f7ff fc97 	bl	80004ec <__aeabi_dmul>
 8000bbe:	f7ff ff6d 	bl	8000a9c <__aeabi_d2uiz>
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	f7ff fc18 	bl	80003f8 <__aeabi_ui2d>
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <__aeabi_d2ulz+0x38>)
 8000bcc:	f7ff fc8e 	bl	80004ec <__aeabi_dmul>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	4639      	mov	r1, r7
 8000bd8:	f7ff fad0 	bl	800017c <__aeabi_dsub>
 8000bdc:	f7ff ff5e 	bl	8000a9c <__aeabi_d2uiz>
 8000be0:	4621      	mov	r1, r4
 8000be2:	bdd0      	pop	{r4, r6, r7, pc}
 8000be4:	3df00000 	.word	0x3df00000
 8000be8:	41f00000 	.word	0x41f00000

08000bec <DHT22_Start>:
#include "stdio.h"
#include "stdint.h"
#include "DHT22.h"

// Function implementations
void DHT22_Start(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	Set_Pin_Output(GPIOA, GPIO_PIN_5); // set the pin as output
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <DHT22_Start+0x3c>)
 8000bf4:	f000 f892 	bl	8000d1c <Set_Pin_Output>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // pull the pin low
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2120      	movs	r1, #32
 8000bfc:	480a      	ldr	r0, [pc, #40]	; (8000c28 <DHT22_Start+0x3c>)
 8000bfe:	f002 fe4c 	bl	800389a <HAL_GPIO_WritePin>
	Delay_Us(1200);
 8000c02:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000c06:	f001 f945 	bl	8001e94 <Delay_Us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // pull the pin high
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <DHT22_Start+0x3c>)
 8000c10:	f002 fe43 	bl	800389a <HAL_GPIO_WritePin>
	Delay_Us(20);
 8000c14:	2014      	movs	r0, #20
 8000c16:	f001 f93d 	bl	8001e94 <Delay_Us>
	Set_Pin_Input(GPIOA, GPIO_PIN_5); // set the pin as input
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <DHT22_Start+0x3c>)
 8000c1e:	f000 f8a2 	bl	8000d66 <Set_Pin_Input>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40010800 	.word	0x40010800

08000c2c <DHT22_Check_Response>:

uint8_t DHT22_Check_Response(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	uint8_t resposne = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]
	Delay_Us(40);
 8000c36:	2028      	movs	r0, #40	; 0x28
 8000c38:	f001 f92c 	bl	8001e94 <Delay_Us>
	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) {
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <DHT22_Check_Response+0x5c>)
 8000c40:	f002 fe14 	bl	800386c <HAL_GPIO_ReadPin>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10f      	bne.n	8000c6a <DHT22_Check_Response+0x3e>
		Delay_Us(80); // wait 80 us for response from DHT22
 8000c4a:	2050      	movs	r0, #80	; 0x50
 8000c4c:	f001 f922 	bl	8001e94 <Delay_Us>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8000c50:	2120      	movs	r1, #32
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <DHT22_Check_Response+0x5c>)
 8000c54:	f002 fe0a 	bl	800386c <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <DHT22_Check_Response+0x38>
			resposne = 1; // successfully receive the response
 8000c5e:	2301      	movs	r3, #1
 8000c60:	71fb      	strb	r3, [r7, #7]
 8000c62:	e004      	b.n	8000c6e <DHT22_Check_Response+0x42>
		else
			resposne = -1; // fail to receive the response
 8000c64:	23ff      	movs	r3, #255	; 0xff
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	e001      	b.n	8000c6e <DHT22_Check_Response+0x42>
	} else
		return -1;
 8000c6a:	23ff      	movs	r3, #255	; 0xff
 8000c6c:	e008      	b.n	8000c80 <DHT22_Check_Response+0x54>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8000c6e:	bf00      	nop
 8000c70:	2120      	movs	r1, #32
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <DHT22_Check_Response+0x5c>)
 8000c74:	f002 fdfa 	bl	800386c <HAL_GPIO_ReadPin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f8      	bne.n	8000c70 <DHT22_Check_Response+0x44>
		; // wait for the pin to go low
	return resposne;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40010800 	.word	0x40010800

08000c8c <DHT22_Read_Data>:

uint8_t DHT22_Read_Data(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
	uint8_t data;
	for (uint8_t i = 0; i < 8; i++) {
 8000c92:	2300      	movs	r3, #0
 8000c94:	71bb      	strb	r3, [r7, #6]
 8000c96:	e037      	b.n	8000d08 <DHT22_Read_Data+0x7c>
//		Delay_Us(50);
		while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)))
 8000c98:	bf00      	nop
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	481e      	ldr	r0, [pc, #120]	; (8000d18 <DHT22_Read_Data+0x8c>)
 8000c9e:	f002 fde5 	bl	800386c <HAL_GPIO_ReadPin>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f8      	beq.n	8000c9a <DHT22_Read_Data+0xe>
			; // wait for the pin to to go high
		Delay_Us(30);
 8000ca8:	201e      	movs	r0, #30
 8000caa:	f001 f8f3 	bl	8001e94 <Delay_Us>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) // if the pin is high
 8000cae:	2120      	movs	r1, #32
 8000cb0:	4819      	ldr	r0, [pc, #100]	; (8000d18 <DHT22_Read_Data+0x8c>)
 8000cb2:	f002 fddb 	bl	800386c <HAL_GPIO_ReadPin>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d00c      	beq.n	8000cd6 <DHT22_Read_Data+0x4a>
			data |= 1 << (7 - i); // write 1 bit
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	b25a      	sxtb	r2, r3
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	e00d      	b.n	8000cf2 <DHT22_Read_Data+0x66>
		else
			// if the pin is low
			data &= ~(1 << (7 - i)); // write 0 bit
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	f1c3 0307 	rsb	r3, r3, #7
 8000cdc:	2201      	movs	r2, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	b25a      	sxtb	r2, r3
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	4013      	ands	r3, r2
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	71fb      	strb	r3, [r7, #7]
		while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8000cf2:	bf00      	nop
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	4808      	ldr	r0, [pc, #32]	; (8000d18 <DHT22_Read_Data+0x8c>)
 8000cf8:	f002 fdb8 	bl	800386c <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f8      	bne.n	8000cf4 <DHT22_Read_Data+0x68>
	for (uint8_t i = 0; i < 8; i++) {
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	3301      	adds	r3, #1
 8000d06:	71bb      	strb	r3, [r7, #6]
 8000d08:	79bb      	ldrb	r3, [r7, #6]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	d9c4      	bls.n	8000c98 <DHT22_Read_Data+0xc>
			; // wait for the pin to go low
	}
	return data;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40010800 	.word	0x40010800

08000d1c <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000d36:	887b      	ldrh	r3, [r7, #2]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f002 fdac 	bl	800389a <HAL_GPIO_WritePin>
	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	4619      	mov	r1, r3
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f002 fc03 	bl	8003564 <HAL_GPIO_Init>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	2200      	movs	r2, #0
 8000d84:	4619      	mov	r1, r3
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f002 fd87 	bl	800389a <HAL_GPIO_WritePin>
	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	4619      	mov	r1, r3
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f002 fbde 	bl	8003564 <HAL_GPIO_Init>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <DHT22_Get_Data>:

uint8_t DHT22_Get_Data(DHT22_Data *data) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	uint8_t status, tempByte1, tempByte2, humidByte1, humidByte2, rcv_checksum, checksum = 0xFF;
 8000db8:	23ff      	movs	r3, #255	; 0xff
 8000dba:	72bb      	strb	r3, [r7, #10]
	DHT22_Start();
 8000dbc:	f7ff ff16 	bl	8000bec <DHT22_Start>
	status = DHT22_Check_Response();
 8000dc0:	f7ff ff34 	bl	8000c2c <DHT22_Check_Response>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	727b      	strb	r3, [r7, #9]
	if (status) {
 8000dc8:	7a7b      	ldrb	r3, [r7, #9]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d013      	beq.n	8000df6 <DHT22_Get_Data+0x46>
		humidByte1 = DHT22_Read_Data();
 8000dce:	f7ff ff5d 	bl	8000c8c <DHT22_Read_Data>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	737b      	strb	r3, [r7, #13]
		humidByte2 = DHT22_Read_Data();
 8000dd6:	f7ff ff59 	bl	8000c8c <DHT22_Read_Data>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	733b      	strb	r3, [r7, #12]
		tempByte1 = DHT22_Read_Data();
 8000dde:	f7ff ff55 	bl	8000c8c <DHT22_Read_Data>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
		tempByte2 = DHT22_Read_Data();
 8000de6:	f7ff ff51 	bl	8000c8c <DHT22_Read_Data>
 8000dea:	4603      	mov	r3, r0
 8000dec:	73bb      	strb	r3, [r7, #14]
		rcv_checksum = DHT22_Read_Data();
 8000dee:	f7ff ff4d 	bl	8000c8c <DHT22_Read_Data>
 8000df2:	4603      	mov	r3, r0
 8000df4:	72fb      	strb	r3, [r7, #11]
	}
	checksum = humidByte1 + humidByte2 + tempByte1 + tempByte2;
 8000df6:	7b7a      	ldrb	r2, [r7, #13]
 8000df8:	7b3b      	ldrb	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	4413      	add	r3, r2
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	7bbb      	ldrb	r3, [r7, #14]
 8000e06:	4413      	add	r3, r2
 8000e08:	72bb      	strb	r3, [r7, #10]

	if (checksum == rcv_checksum) {
 8000e0a:	7aba      	ldrb	r2, [r7, #10]
 8000e0c:	7afb      	ldrb	r3, [r7, #11]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d123      	bne.n	8000e5a <DHT22_Get_Data+0xaa>
		data->temperature = (double) (((tempByte1 << 8) | tempByte2)) / 10.00;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	021a      	lsls	r2, r3, #8
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fafc 	bl	8000418 <__aeabi_i2d>
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <DHT22_Get_Data+0xb4>)
 8000e26:	f7ff fc8b 	bl	8000740 <__aeabi_ddiv>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	e9c1 2300 	strd	r2, r3, [r1]
		data->humidity = (double) (((humidByte1 << 8) | humidByte2)) / 10.00;
 8000e34:	7b7b      	ldrb	r3, [r7, #13]
 8000e36:	021a      	lsls	r2, r3, #8
 8000e38:	7b3b      	ldrb	r3, [r7, #12]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff faeb 	bl	8000418 <__aeabi_i2d>
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <DHT22_Get_Data+0xb4>)
 8000e48:	f7ff fc7a 	bl	8000740 <__aeabi_ddiv>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <DHT22_Get_Data+0xac>
	}
	else
		return 0;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40240000 	.word	0x40240000

08000e68 <lcd_send_cmd>:
// External variables
extern I2C_HandleTypeDef hi2c1;

// Function implementation
void lcd_send_cmd (char cmd)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f023 030f 	bic.w	r3, r3, #15
 8000e78:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f043 030c 	orr.w	r3, r3, #12
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	f043 030c 	orr.w	r3, r3, #12
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ea8:	f107 0208 	add.w	r2, r7, #8
 8000eac:	2364      	movs	r3, #100	; 0x64
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	214e      	movs	r1, #78	; 0x4e
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <lcd_send_cmd+0x5c>)
 8000eb6:	f002 fe7d 	bl	8003bb4 <HAL_I2C_Master_Transmit>
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000021c 	.word	0x2000021c

08000ec8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f023 030f 	bic.w	r3, r3, #15
 8000ed8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	f043 030d 	orr.w	r3, r3, #13
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	f043 0309 	orr.w	r3, r3, #9
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	f043 030d 	orr.w	r3, r3, #13
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	f043 0309 	orr.w	r3, r3, #9
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f08:	f107 0208 	add.w	r2, r7, #8
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2304      	movs	r3, #4
 8000f12:	214e      	movs	r1, #78	; 0x4e
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <lcd_send_data+0x5c>)
 8000f16:	f002 fe4d 	bl	8003bb4 <HAL_I2C_Master_Transmit>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000021c 	.word	0x2000021c

08000f28 <lcd_init>:

void lcd_init (void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000f2c:	2032      	movs	r0, #50	; 0x32
 8000f2e:	f002 f9e7 	bl	8003300 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f32:	2030      	movs	r0, #48	; 0x30
 8000f34:	f7ff ff98 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000f38:	2005      	movs	r0, #5
 8000f3a:	f002 f9e1 	bl	8003300 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f3e:	2030      	movs	r0, #48	; 0x30
 8000f40:	f7ff ff92 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000f44:	2001      	movs	r0, #1
 8000f46:	f002 f9db 	bl	8003300 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f4a:	2030      	movs	r0, #48	; 0x30
 8000f4c:	f7ff ff8c 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(10);
 8000f50:	200a      	movs	r0, #10
 8000f52:	f002 f9d5 	bl	8003300 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000f56:	2020      	movs	r0, #32
 8000f58:	f7ff ff86 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f002 f9cf 	bl	8003300 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f62:	2028      	movs	r0, #40	; 0x28
 8000f64:	f7ff ff80 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f002 f9c9 	bl	8003300 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f6e:	2008      	movs	r0, #8
 8000f70:	f7ff ff7a 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f002 f9c3 	bl	8003300 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff ff74 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f002 f9bd 	bl	8003300 <HAL_Delay>
	HAL_Delay(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f002 f9ba 	bl	8003300 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f8c:	2006      	movs	r0, #6
 8000f8e:	f7ff ff6b 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f002 f9b4 	bl	8003300 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f98:	200c      	movs	r0, #12
 8000f9a:	f7ff ff65 	bl	8000e68 <lcd_send_cmd>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000faa:	e006      	b.n	8000fba <lcd_send_string+0x18>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff87 	bl	8000ec8 <lcd_send_data>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f4      	bne.n	8000fac <lcd_send_string+0xa>
}
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <lcd_clear>:

void lcd_clear(void){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 8000fd2:	2080      	movs	r0, #128	; 0x80
 8000fd4:	f7ff ff48 	bl	8000e68 <lcd_send_cmd>
	for (int i = 0; i < 70; i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	e005      	b.n	8000fea <lcd_clear+0x1e>
		lcd_send_data(' ');
 8000fde:	2020      	movs	r0, #32
 8000fe0:	f7ff ff72 	bl	8000ec8 <lcd_send_data>
	for (int i = 0; i < 70; i++)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b45      	cmp	r3, #69	; 0x45
 8000fee:	ddf6      	ble.n	8000fde <lcd_clear+0x12>
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <lcd_put_cursor>:

void lcd_put_cursor(int row, int col){
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
	switch (row) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <lcd_put_cursor+0x18>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <lcd_put_cursor+0x22>
			break;
		case 1:
			col |= 0xC0;
			break;
		default:
			break;
 8001010:	e009      	b.n	8001026 <lcd_put_cursor+0x2c>
			col |= 0x80;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001018:	603b      	str	r3, [r7, #0]
			break;
 800101a:	e004      	b.n	8001026 <lcd_put_cursor+0x2c>
			col |= 0xC0;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001022:	603b      	str	r3, [r7, #0]
			break;
 8001024:	bf00      	nop
	}
	lcd_send_cmd(col);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff1c 	bl	8000e68 <lcd_send_cmd>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001038:	b4b0      	push	{r4, r5, r7}
 800103a:	b08f      	sub	sp, #60	; 0x3c
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001040:	f240 13b1 	movw	r3, #433	; 0x1b1
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001046:	2307      	movs	r3, #7
 8001048:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 800104c:	2307      	movs	r3, #7
 800104e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8001052:	2301      	movs	r3, #1
 8001054:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8001058:	23ff      	movs	r3, #255	; 0xff
 800105a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8001064:	2308      	movs	r3, #8
 8001066:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	461d      	mov	r5, r3
 800106c:	f107 040c 	add.w	r4, r7, #12
 8001070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001078:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800107c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	373c      	adds	r7, #60	; 0x3c
 8001084:	46bd      	mov	sp, r7
 8001086:	bcb0      	pop	{r4, r5, r7}
 8001088:	4770      	bx	lr

0800108a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001094:	2101      	movs	r1, #1
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f99f 	bl	80013da <LoRa_read>
 800109c:	4603      	mov	r3, r0
 800109e:	73bb      	strb	r3, [r7, #14]
	data = read;
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d107      	bne.n	80010ba <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	f023 0307 	bic.w	r3, r3, #7
 80010b0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
 80010b8:	e03e      	b.n	8001138 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10c      	bne.n	80010da <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80010c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010c4:	f023 0307 	bic.w	r3, r3, #7
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	61da      	str	r2, [r3, #28]
 80010d8:	e02e      	b.n	8001138 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d10c      	bne.n	80010fa <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80010e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010e4:	f023 0307 	bic.w	r3, r3, #7
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	f043 0303 	orr.w	r3, r3, #3
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	61da      	str	r2, [r3, #28]
 80010f8:	e01e      	b.n	8001138 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d10c      	bne.n	800111a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001104:	f023 0307 	bic.w	r3, r3, #7
 8001108:	b25b      	sxtb	r3, r3
 800110a:	f043 0305 	orr.w	r3, r3, #5
 800110e:	b25b      	sxtb	r3, r3
 8001110:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2205      	movs	r2, #5
 8001116:	61da      	str	r2, [r3, #28]
 8001118:	e00e      	b.n	8001138 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b06      	cmp	r3, #6
 800111e:	d10b      	bne.n	8001138 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001124:	f023 0307 	bic.w	r3, r3, #7
 8001128:	b25b      	sxtb	r3, r3
 800112a:	f043 0306 	orr.w	r3, r3, #6
 800112e:	b25b      	sxtb	r3, r3
 8001130:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2206      	movs	r2, #6
 8001136:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	461a      	mov	r2, r3
 800113c:	2101      	movs	r1, #1
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f965 	bl	800140e <LoRa_write>
	//HAL_Delay(10);
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	4613      	mov	r3, r2
 800115a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	889b      	ldrh	r3, [r3, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	f002 fb97 	bl	800389a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6998      	ldr	r0, [r3, #24]
 8001170:	88fa      	ldrh	r2, [r7, #6]
 8001172:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	f003 fd08 	bl	8004b8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800117c:	bf00      	nop
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4618      	mov	r0, r3
 8001184:	f004 f90d 	bl	80053a2 <HAL_SPI_GetState>
 8001188:	4603      	mov	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d1f7      	bne.n	800117e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6998      	ldr	r0, [r3, #24]
 8001192:	8b3a      	ldrh	r2, [r7, #24]
 8001194:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001198:	6839      	ldr	r1, [r7, #0]
 800119a:	f003 fe3a 	bl	8004e12 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800119e:	bf00      	nop
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 f8fc 	bl	80053a2 <HAL_SPI_GetState>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d1f7      	bne.n	80011a0 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	889b      	ldrh	r3, [r3, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	f002 fb6d 	bl	800389a <HAL_GPIO_WritePin>
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	4613      	mov	r3, r2
 80011d6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	889b      	ldrh	r3, [r3, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f002 fb59 	bl	800389a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6998      	ldr	r0, [r3, #24]
 80011ec:	88fa      	ldrh	r2, [r7, #6]
 80011ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	f003 fcca 	bl	8004b8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011f8:	bf00      	nop
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 f8cf 	bl	80053a2 <HAL_SPI_GetState>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d1f7      	bne.n	80011fa <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6998      	ldr	r0, [r3, #24]
 800120e:	8b3a      	ldrh	r2, [r7, #24]
 8001210:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001214:	6839      	ldr	r1, [r7, #0]
 8001216:	f003 fcb9 	bl	8004b8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800121a:	bf00      	nop
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4618      	mov	r0, r3
 8001222:	f004 f8be 	bl	80053a2 <HAL_SPI_GetState>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d1f7      	bne.n	800121c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	889b      	ldrh	r3, [r3, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	4619      	mov	r1, r3
 8001238:	f002 fb2f 	bl	800389a <HAL_GPIO_WritePin>
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	04db      	lsls	r3, r3, #19
 8001252:	115b      	asrs	r3, r3, #5
 8001254:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	0c1b      	lsrs	r3, r3, #16
 800125a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	461a      	mov	r2, r3
 8001260:	2106      	movs	r1, #6
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f8d3 	bl	800140e <LoRa_write>
	HAL_Delay(5);
 8001268:	2005      	movs	r0, #5
 800126a:	f002 f849 	bl	8003300 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001274:	7afb      	ldrb	r3, [r7, #11]
 8001276:	461a      	mov	r2, r3
 8001278:	2107      	movs	r1, #7
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f8c7 	bl	800140e <LoRa_write>
	HAL_Delay(5);
 8001280:	2005      	movs	r0, #5
 8001282:	f002 f83d 	bl	8003300 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800128a:	7afb      	ldrb	r3, [r7, #11]
 800128c:	461a      	mov	r2, r3
 800128e:	2108      	movs	r1, #8
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f8bc 	bl	800140e <LoRa_write>
	HAL_Delay(5);
 8001296:	2005      	movs	r0, #5
 8001298:	f002 f832 	bl	8003300 <HAL_Delay>
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	dd01      	ble.n	80012b8 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80012b4:	230c      	movs	r3, #12
 80012b6:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	dc01      	bgt.n	80012c2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80012be:	2307      	movs	r3, #7
 80012c0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80012c2:	211e      	movs	r1, #30
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f888 	bl	80013da <LoRa_read>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80012ce:	200a      	movs	r0, #10
 80012d0:	f002 f816 	bl	8003300 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80012e8:	7bbb      	ldrb	r3, [r7, #14]
 80012ea:	461a      	mov	r2, r3
 80012ec:	211e      	movs	r1, #30
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f88d 	bl	800140e <LoRa_write>
	HAL_Delay(10);
 80012f4:	200a      	movs	r0, #10
 80012f6:	f002 f803 	bl	8003300 <HAL_Delay>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	461a      	mov	r2, r3
 8001312:	2109      	movs	r1, #9
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f87a 	bl	800140e <LoRa_write>
	HAL_Delay(10);
 800131a:	200a      	movs	r0, #10
 800131c:	f001 fff0 	bl	8003300 <HAL_Delay>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	2b2c      	cmp	r3, #44	; 0x2c
 800133c:	d801      	bhi.n	8001342 <LoRa_setOCP+0x1a>
		current = 45;
 800133e:	232d      	movs	r3, #45	; 0x2d
 8001340:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	2bf0      	cmp	r3, #240	; 0xf0
 8001346:	d901      	bls.n	800134c <LoRa_setOCP+0x24>
		current = 240;
 8001348:	23f0      	movs	r3, #240	; 0xf0
 800134a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	2b78      	cmp	r3, #120	; 0x78
 8001350:	d809      	bhi.n	8001366 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	3b2d      	subs	r3, #45	; 0x2d
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <LoRa_setOCP+0x78>)
 8001358:	fb82 1203 	smull	r1, r2, r2, r3
 800135c:	1052      	asrs	r2, r2, #1
 800135e:	17db      	asrs	r3, r3, #31
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e00b      	b.n	800137e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	2bf0      	cmp	r3, #240	; 0xf0
 800136a:	d808      	bhi.n	800137e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	331e      	adds	r3, #30
 8001370:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <LoRa_setOCP+0x78>)
 8001372:	fb82 1203 	smull	r1, r2, r2, r3
 8001376:	1092      	asrs	r2, r2, #2
 8001378:	17db      	asrs	r3, r3, #31
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	3320      	adds	r3, #32
 8001382:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	461a      	mov	r2, r3
 8001388:	210b      	movs	r1, #11
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f83f 	bl	800140e <LoRa_write>
	HAL_Delay(10);
 8001390:	200a      	movs	r0, #10
 8001392:	f001 ffb5 	bl	8003300 <HAL_Delay>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	66666667 	.word	0x66666667

080013a4 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80013ac:	211e      	movs	r1, #30
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f813 	bl	80013da <LoRa_read>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	f043 0307 	orr.w	r3, r3, #7
 80013be:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	461a      	mov	r2, r3
 80013c4:	211e      	movs	r1, #30
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f821 	bl	800140e <LoRa_write>
	HAL_Delay(10);
 80013cc:	200a      	movs	r0, #10
 80013ce:	f001 ff97 	bl	8003300 <HAL_Delay>
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af02      	add	r7, sp, #8
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80013f0:	f107 030f 	add.w	r3, r7, #15
 80013f4:	f107 010e 	add.w	r1, r7, #14
 80013f8:	2201      	movs	r2, #1
 80013fa:	9200      	str	r2, [sp, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fea4 	bl	800114c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af02      	add	r7, sp, #8
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	460b      	mov	r3, r1
 8001418:	70fb      	strb	r3, [r7, #3]
 800141a:	4613      	mov	r3, r2
 800141c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001424:	b2db      	uxtb	r3, r3
 8001426:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001428:	78bb      	ldrb	r3, [r7, #2]
 800142a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800142c:	f107 030f 	add.w	r3, r7, #15
 8001430:	f107 010e 	add.w	r1, r7, #14
 8001434:	2201      	movs	r2, #1
 8001436:	9200      	str	r2, [sp, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fec4 	bl	80011c8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	461a      	mov	r2, r3
 8001454:	460b      	mov	r3, r1
 8001456:	72fb      	strb	r3, [r7, #11]
 8001458:	4613      	mov	r3, r2
 800145a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800145c:	7afb      	ldrb	r3, [r7, #11]
 800145e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001462:	b2db      	uxtb	r3, r3
 8001464:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	889b      	ldrh	r3, [r3, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	f002 fa12 	bl	800389a <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6998      	ldr	r0, [r3, #24]
 800147a:	f107 0117 	add.w	r1, r7, #23
 800147e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001482:	2201      	movs	r2, #1
 8001484:	f003 fb82 	bl	8004b8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001488:	bf00      	nop
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4618      	mov	r0, r3
 8001490:	f003 ff87 	bl	80053a2 <HAL_SPI_GetState>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d1f7      	bne.n	800148a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6998      	ldr	r0, [r3, #24]
 800149e:	7abb      	ldrb	r3, [r7, #10]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f003 fb70 	bl	8004b8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80014ac:	bf00      	nop
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 ff75 	bl	80053a2 <HAL_SPI_GetState>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d1f7      	bne.n	80014ae <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	889b      	ldrh	r3, [r3, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	4619      	mov	r1, r3
 80014ca:	f002 f9e6 	bl	800389a <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]

	return 1;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	4611      	mov	r1, r2
 80014f6:	461a      	mov	r2, r3
 80014f8:	460b      	mov	r3, r1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4613      	mov	r3, r2
 80014fe:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001506:	2101      	movs	r1, #1
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff fdbe 	bl	800108a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800150e:	210e      	movs	r1, #14
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff ff62 	bl	80013da <LoRa_read>
 8001516:	4603      	mov	r3, r0
 8001518:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800151a:	7cfb      	ldrb	r3, [r7, #19]
 800151c:	461a      	mov	r2, r3
 800151e:	210d      	movs	r1, #13
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f7ff ff74 	bl	800140e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	461a      	mov	r2, r3
 800152a:	2122      	movs	r1, #34	; 0x22
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff ff6e 	bl	800140e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	2100      	movs	r1, #0
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff ff85 	bl	8001448 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800153e:	2103      	movs	r1, #3
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f7ff fda2 	bl	800108a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001546:	2112      	movs	r1, #18
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff ff46 	bl	80013da <LoRa_read>
 800154e:	4603      	mov	r3, r0
 8001550:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001552:	7cfb      	ldrb	r3, [r7, #19]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00a      	beq.n	8001572 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800155c:	22ff      	movs	r2, #255	; 0xff
 800155e:	2112      	movs	r1, #18
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff ff54 	bl	800140e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001566:	6979      	ldr	r1, [r7, #20]
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff fd8e 	bl	800108a <LoRa_gotoMode>
			return 1;
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001572:	88bb      	ldrh	r3, [r7, #4]
 8001574:	3b01      	subs	r3, #1
 8001576:	80bb      	strh	r3, [r7, #4]
 8001578:	88bb      	ldrh	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d105      	bne.n	800158a <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800157e:	6979      	ldr	r1, [r7, #20]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff fd82 	bl	800108a <LoRa_gotoMode>
				return 0;
 8001586:	2300      	movs	r3, #0
 8001588:	e003      	b.n	8001592 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800158a:	2001      	movs	r0, #1
 800158c:	f001 feb8 	bl	8003300 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001590:	e7d9      	b.n	8001546 <LoRa_transmit+0x5c>
	}
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80015a2:	2105      	movs	r1, #5
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fd70 	bl	800108a <LoRa_gotoMode>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80015b2:	b590      	push	{r4, r7, lr}
 80015b4:	b089      	sub	sp, #36	; 0x24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	4613      	mov	r3, r2
 80015be:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	e007      	b.n	80015da <LoRa_receive+0x28>
		data[i]=0;
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	4413      	add	r3, r2
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	3301      	adds	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	429a      	cmp	r2, r3
 80015e0:	dbf3      	blt.n	80015ca <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80015e2:	2101      	movs	r1, #1
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fd50 	bl	800108a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80015ea:	2112      	movs	r1, #18
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f7ff fef4 	bl	80013da <LoRa_read>
 80015f2:	4603      	mov	r3, r0
 80015f4:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80015f6:	7cfb      	ldrb	r3, [r7, #19]
 80015f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d02f      	beq.n	8001660 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001600:	22ff      	movs	r2, #255	; 0xff
 8001602:	2112      	movs	r1, #18
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff ff02 	bl	800140e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800160a:	2113      	movs	r1, #19
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff fee4 	bl	80013da <LoRa_read>
 8001612:	4603      	mov	r3, r0
 8001614:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001616:	2110      	movs	r1, #16
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff fede 	bl	80013da <LoRa_read>
 800161e:	4603      	mov	r3, r0
 8001620:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001622:	7cfb      	ldrb	r3, [r7, #19]
 8001624:	461a      	mov	r2, r3
 8001626:	210d      	movs	r1, #13
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fef0 	bl	800140e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800162e:	7cba      	ldrb	r2, [r7, #18]
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	4293      	cmp	r3, r2
 8001634:	bf28      	it	cs
 8001636:	4613      	movcs	r3, r2
 8001638:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e00b      	b.n	8001658 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	18d4      	adds	r4, r2, r3
 8001646:	2100      	movs	r1, #0
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff fec6 	bl	80013da <LoRa_read>
 800164e:	4603      	mov	r3, r0
 8001650:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	429a      	cmp	r2, r3
 800165e:	dbef      	blt.n	8001640 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001660:	2105      	movs	r1, #5
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff fd11 	bl	800108a <LoRa_gotoMode>
    return min;
 8001668:	7ffb      	ldrb	r3, [r7, #31]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}

08001672 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff2b 	bl	80014d6 <LoRa_isvalid>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8093 	beq.w	80017ae <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001688:	2100      	movs	r1, #0
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fcfd 	bl	800108a <LoRa_gotoMode>
			HAL_Delay(10);
 8001690:	200a      	movs	r0, #10
 8001692:	f001 fe35 	bl	8003300 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001696:	2101      	movs	r1, #1
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fe9e 	bl	80013da <LoRa_read>
 800169e:	4603      	mov	r3, r0
 80016a0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80016a2:	200a      	movs	r0, #10
 80016a4:	f001 fe2c 	bl	8003300 <HAL_Delay>
			data = read | 0x80;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016ae:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80016b0:	7bbb      	ldrb	r3, [r7, #14]
 80016b2:	461a      	mov	r2, r3
 80016b4:	2101      	movs	r1, #1
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fea9 	bl	800140e <LoRa_write>
			HAL_Delay(100);
 80016bc:	2064      	movs	r0, #100	; 0x64
 80016be:	f001 fe1f 	bl	8003300 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fdbb 	bl	8001244 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fe13 	bl	8001302 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fe1f 	bl	8001328 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80016ea:	2223      	movs	r2, #35	; 0x23
 80016ec:	210c      	movs	r1, #12
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fe8d 	bl	800140e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fe55 	bl	80013a4 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fdce 	bl	80012a4 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001708:	22ff      	movs	r2, #255	; 0xff
 800170a:	211f      	movs	r1, #31
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fe7e 	bl	800140e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	b2da      	uxtb	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4413      	add	r3, r2
 800172c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	461a      	mov	r2, r3
 8001732:	211d      	movs	r1, #29
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fe6a 	bl	800140e <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	b29b      	uxth	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	2120      	movs	r1, #32
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fe60 	bl	800140e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	b2db      	uxtb	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	2121      	movs	r1, #33	; 0x21
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fe58 	bl	800140e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800175e:	2140      	movs	r1, #64	; 0x40
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fe3a 	bl	80013da <LoRa_read>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001770:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001772:	7bbb      	ldrb	r3, [r7, #14]
 8001774:	461a      	mov	r2, r3
 8001776:	2140      	movs	r1, #64	; 0x40
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fe48 	bl	800140e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800177e:	2101      	movs	r1, #1
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fc82 	bl	800108a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800178c:	200a      	movs	r0, #10
 800178e:	f001 fdb7 	bl	8003300 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001792:	2142      	movs	r1, #66	; 0x42
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fe20 	bl	80013da <LoRa_read>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	2b12      	cmp	r3, #18
 80017a2:	d101      	bne.n	80017a8 <LoRa_init+0x136>
				return LORA_OK;
 80017a4:	23c8      	movs	r3, #200	; 0xc8
 80017a6:	e004      	b.n	80017b2 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80017a8:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80017ac:	e001      	b.n	80017b2 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80017ae:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b092      	sub	sp, #72	; 0x48
 80017c0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c2:	f001 fd3b 	bl	800323c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c6:	f000 f8f1 	bl	80019ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ca:	f000 faa7 	bl	8001d1c <MX_GPIO_Init>
  MX_SPI2_Init();
 80017ce:	f000 f95d 	bl	8001a8c <MX_SPI2_Init>
  MX_TIM2_Init();
 80017d2:	f000 f991 	bl	8001af8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017d6:	f000 f9db 	bl	8001b90 <MX_TIM3_Init>
  MX_I2C1_Init();
 80017da:	f000 f929 	bl	8001a30 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80017de:	f000 fa73 	bl	8001cc8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80017e2:	f000 fa23 	bl	8001c2c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	// Initialize Timer 2 / Timer 3
	HAL_TIM_Base_Start(&htim2);
 80017e6:	485f      	ldr	r0, [pc, #380]	; (8001964 <main+0x1a8>)
 80017e8:	f003 ff30 	bl	800564c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 80017ec:	485e      	ldr	r0, [pc, #376]	; (8001968 <main+0x1ac>)
 80017ee:	f003 ff2d 	bl	800564c <HAL_TIM_Base_Start>

	// Initialize DHT22
	while(!DHT22_Get_Data(&dht22Data))
 80017f2:	e002      	b.n	80017fa <main+0x3e>
	{
		// DHT22 doesn't response
		// Re-Initilize again
		Delay_Ms(200);
 80017f4:	20c8      	movs	r0, #200	; 0xc8
 80017f6:	f000 fb65 	bl	8001ec4 <Delay_Ms>
	while(!DHT22_Get_Data(&dht22Data))
 80017fa:	485c      	ldr	r0, [pc, #368]	; (800196c <main+0x1b0>)
 80017fc:	f7ff fad8 	bl	8000db0 <DHT22_Get_Data>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f6      	beq.n	80017f4 <main+0x38>
	}

	// Initialize LCD
	lcd_init();
 8001806:	f7ff fb8f 	bl	8000f28 <lcd_init>

	// Initialize LoRa
	myLoRa = newLoRa();
 800180a:	4c59      	ldr	r4, [pc, #356]	; (8001970 <main+0x1b4>)
 800180c:	463b      	mov	r3, r7
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fc12 	bl	8001038 <newLoRa>
 8001814:	4625      	mov	r5, r4
 8001816:	463c      	mov	r4, r7
 8001818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001820:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001824:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myLoRa.CS_port = NSS_GPIO_Port;
 8001828:	4b51      	ldr	r3, [pc, #324]	; (8001970 <main+0x1b4>)
 800182a:	4a52      	ldr	r2, [pc, #328]	; (8001974 <main+0x1b8>)
 800182c:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_Pin;
 800182e:	4b50      	ldr	r3, [pc, #320]	; (8001970 <main+0x1b4>)
 8001830:	2201      	movs	r2, #1
 8001832:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = RST_GPIO_Port;
 8001834:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <main+0x1b4>)
 8001836:	4a4f      	ldr	r2, [pc, #316]	; (8001974 <main+0x1b8>)
 8001838:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_Pin;
 800183a:	4b4d      	ldr	r3, [pc, #308]	; (8001970 <main+0x1b4>)
 800183c:	2202      	movs	r2, #2
 800183e:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_GPIO_Port;
 8001840:	4b4b      	ldr	r3, [pc, #300]	; (8001970 <main+0x1b4>)
 8001842:	4a4c      	ldr	r2, [pc, #304]	; (8001974 <main+0x1b8>)
 8001844:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_Pin;
 8001846:	4b4a      	ldr	r3, [pc, #296]	; (8001970 <main+0x1b4>)
 8001848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184c:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi2;
 800184e:	4b48      	ldr	r3, [pc, #288]	; (8001970 <main+0x1b4>)
 8001850:	4a49      	ldr	r2, [pc, #292]	; (8001978 <main+0x1bc>)
 8001852:	619a      	str	r2, [r3, #24]
	if (LoRa_init(&myLoRa) == 200) {
 8001854:	4846      	ldr	r0, [pc, #280]	; (8001970 <main+0x1b4>)
 8001856:	f7ff ff0c 	bl	8001672 <LoRa_init>
 800185a:	4603      	mov	r3, r0
 800185c:	2bc8      	cmp	r3, #200	; 0xc8
 800185e:	d116      	bne.n	800188e <main+0xd2>
		lcd_clear();
 8001860:	f7ff fbb4 	bl	8000fcc <lcd_clear>
		lcd_put_cursor(0, 5);
 8001864:	2105      	movs	r1, #5
 8001866:	2000      	movs	r0, #0
 8001868:	f7ff fbc7 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("Hello");
 800186c:	4843      	ldr	r0, [pc, #268]	; (800197c <main+0x1c0>)
 800186e:	f7ff fb98 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 2);
 8001872:	2102      	movs	r1, #2
 8001874:	2001      	movs	r0, #1
 8001876:	f7ff fbc0 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("LoRa started");
 800187a:	4841      	ldr	r0, [pc, #260]	; (8001980 <main+0x1c4>)
 800187c:	f7ff fb91 	bl	8000fa2 <lcd_send_string>
		HAL_Delay(2000);
 8001880:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001884:	f001 fd3c 	bl	8003300 <HAL_Delay>
		lcd_clear();
 8001888:	f7ff fba0 	bl	8000fcc <lcd_clear>
 800188c:	e013      	b.n	80018b6 <main+0xfa>
	} else {
		lcd_put_cursor(0, 0);
 800188e:	2100      	movs	r1, #0
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff fbb2 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("Fail to initialize LoRa");
 8001896:	483b      	ldr	r0, [pc, #236]	; (8001984 <main+0x1c8>)
 8001898:	f7ff fb83 	bl	8000fa2 <lcd_send_string>
		HAL_Delay(3000);
 800189c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018a0:	f001 fd2e 	bl	8003300 <HAL_Delay>
		lcd_clear();
 80018a4:	f7ff fb92 	bl	8000fcc <lcd_clear>
		lcd_put_cursor(0, 0);
 80018a8:	2100      	movs	r1, #0
 80018aa:	2000      	movs	r0, #0
 80018ac:	f7ff fba5 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("Please try again!");
 80018b0:	4835      	ldr	r0, [pc, #212]	; (8001988 <main+0x1cc>)
 80018b2:	f7ff fb76 	bl	8000fa2 <lcd_send_string>
	}
	LoRa_startReceiving(&myLoRa); // Start LoRa receive mode
 80018b6:	482e      	ldr	r0, [pc, #184]	; (8001970 <main+0x1b4>)
 80018b8:	f7ff fe6f 	bl	800159a <LoRa_startReceiving>

	// Turn off the alarm mode
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c2:	4832      	ldr	r0, [pc, #200]	; (800198c <main+0x1d0>)
 80018c4:	f001 ffe9 	bl	800389a <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/* DHT22 get data */
		dht22Status = DHT22_Get_Data(&dht22Data);
 80018c8:	4828      	ldr	r0, [pc, #160]	; (800196c <main+0x1b0>)
 80018ca:	f7ff fa71 	bl	8000db0 <DHT22_Get_Data>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <main+0x1d4>)
 80018d4:	701a      	strb	r2, [r3, #0]
		/* LoRa sending */
		Packet_Encapsulation(lora_data, 10, 20, dht22Data.temperature, dht22Data.humidity, cmdStatus, alarmStatus);
 80018d6:	4b25      	ldr	r3, [pc, #148]	; (800196c <main+0x1b0>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	4923      	ldr	r1, [pc, #140]	; (800196c <main+0x1b0>)
 80018de:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80018e2:	4c2c      	ldr	r4, [pc, #176]	; (8001994 <main+0x1d8>)
 80018e4:	6824      	ldr	r4, [r4, #0]
 80018e6:	4d2c      	ldr	r5, [pc, #176]	; (8001998 <main+0x1dc>)
 80018e8:	682d      	ldr	r5, [r5, #0]
 80018ea:	9505      	str	r5, [sp, #20]
 80018ec:	9404      	str	r4, [sp, #16]
 80018ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80018f2:	e9cd 2300 	strd	r2, r3, [sp]
 80018f6:	2214      	movs	r2, #20
 80018f8:	210a      	movs	r1, #10
 80018fa:	4828      	ldr	r0, [pc, #160]	; (800199c <main+0x1e0>)
 80018fc:	f000 fc1e 	bl	800213c <Packet_Encapsulation>
		// Stop Timer 4
		HAL_TIM_Base_Stop_IT(&htim4);
 8001900:	4827      	ldr	r0, [pc, #156]	; (80019a0 <main+0x1e4>)
 8001902:	f003 ff3f 	bl	8005784 <HAL_TIM_Base_Stop_IT>
		// LoRa sending data
		loraStatus = LoRa_transmit(&myLoRa, (uint8_t*) lora_data, strlen(lora_data), 100);
 8001906:	4825      	ldr	r0, [pc, #148]	; (800199c <main+0x1e0>)
 8001908:	f7fe fc2c 	bl	8000164 <strlen>
 800190c:	4603      	mov	r3, r0
 800190e:	b2da      	uxtb	r2, r3
 8001910:	2364      	movs	r3, #100	; 0x64
 8001912:	4922      	ldr	r1, [pc, #136]	; (800199c <main+0x1e0>)
 8001914:	4816      	ldr	r0, [pc, #88]	; (8001970 <main+0x1b4>)
 8001916:	f7ff fde8 	bl	80014ea <LoRa_transmit>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <main+0x1e8>)
 8001920:	701a      	strb	r2, [r3, #0]
		Delay_Ms(50);
 8001922:	2032      	movs	r0, #50	; 0x32
 8001924:	f000 face 	bl	8001ec4 <Delay_Ms>
		cmdStatus = 0;
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <main+0x1d8>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
		// Start Timer 4
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 800192e:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <main+0x1e4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim4);
 8001936:	481a      	ldr	r0, [pc, #104]	; (80019a0 <main+0x1e4>)
 8001938:	f003 fed2 	bl	80056e0 <HAL_TIM_Base_Start_IT>
		/* Check the temperature and humidity level */
		Alarm_Check(dht22Data.temperature, dht22Data.humidity);
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <main+0x1b0>)
 800193e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <main+0x1b0>)
 8001944:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001948:	f001 f82c 	bl	80029a4 <Alarm_Check>

		/* Print DHT22 data onto LCD */
		Lcd_Sytem_State_Print(mode);
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <main+0x1ec>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 fc11 	bl	8002178 <Lcd_Sytem_State_Print>

		/* Handle when the increase/decrease button is pressed a long time */
		Long_Pressed_Button();
 8001956:	f000 fea7 	bl	80026a8 <Long_Pressed_Button>

		Delay_Ms(300);
 800195a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800195e:	f000 fab1 	bl	8001ec4 <Delay_Ms>
		dht22Status = DHT22_Get_Data(&dht22Data);
 8001962:	e7b1      	b.n	80018c8 <main+0x10c>
 8001964:	200002c8 	.word	0x200002c8
 8001968:	20000310 	.word	0x20000310
 800196c:	200004a0 	.word	0x200004a0
 8001970:	200003e8 	.word	0x200003e8
 8001974:	40010c00 	.word	0x40010c00
 8001978:	20000270 	.word	0x20000270
 800197c:	0800b0d0 	.word	0x0800b0d0
 8001980:	0800b0d8 	.word	0x0800b0d8
 8001984:	0800b0e8 	.word	0x0800b0e8
 8001988:	0800b100 	.word	0x0800b100
 800198c:	40011000 	.word	0x40011000
 8001990:	200004b0 	.word	0x200004b0
 8001994:	200004b4 	.word	0x200004b4
 8001998:	200004b8 	.word	0x200004b8
 800199c:	20000414 	.word	0x20000414
 80019a0:	20000358 	.word	0x20000358
 80019a4:	200004b1 	.word	0x200004b1
 80019a8:	2000049c 	.word	0x2000049c

080019ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b090      	sub	sp, #64	; 0x40
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0318 	add.w	r3, r7, #24
 80019b6:	2228      	movs	r2, #40	; 0x28
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f005 faf5 	bl	8006faa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d2:	2301      	movs	r3, #1
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d6:	2310      	movs	r3, #16
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019da:	2302      	movs	r3, #2
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80019de:	2300      	movs	r3, #0
 80019e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80019e2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80019e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e8:	f107 0318 	add.w	r3, r7, #24
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 fc39 	bl	8004264 <HAL_RCC_OscConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80019f8:	f001 f954 	bl	8002ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fc:	230f      	movs	r3, #15
 80019fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a00:	2302      	movs	r3, #2
 8001a02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2102      	movs	r1, #2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 fea6 	bl	8004768 <HAL_RCC_ClockConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001a22:	f001 f93f 	bl	8002ca4 <Error_Handler>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3740      	adds	r7, #64	; 0x40
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <MX_I2C1_Init+0x54>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_I2C1_Init+0x58>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a6e:	f001 ff5d 	bl	800392c <HAL_I2C_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a78:	f001 f914 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	2000021c 	.word	0x2000021c
 8001a84:	40005400 	.word	0x40005400
 8001a88:	000186a0 	.word	0x000186a0

08001a8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <MX_SPI2_Init+0x64>)
 8001a92:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <MX_SPI2_Init+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <MX_SPI2_Init+0x64>)
 8001a98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <MX_SPI2_Init+0x64>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <MX_SPI2_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_SPI2_Init+0x64>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_SPI2_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_SPI2_Init+0x64>)
 8001ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_SPI2_Init+0x64>)
 8001ac0:	2208      	movs	r2, #8
 8001ac2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <MX_SPI2_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_SPI2_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <MX_SPI2_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_SPI2_Init+0x64>)
 8001ad8:	220a      	movs	r2, #10
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <MX_SPI2_Init+0x64>)
 8001ade:	f002 ffd1 	bl	8004a84 <HAL_SPI_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ae8:	f001 f8dc 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000270 	.word	0x20000270
 8001af4:	40003800 	.word	0x40003800

08001af8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afe:	f107 0308 	add.w	r3, r7, #8
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b1e:	223f      	movs	r2, #63	; 0x3f
 8001b20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b3c:	4813      	ldr	r0, [pc, #76]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b3e:	f003 fd35 	bl	80055ac <HAL_TIM_Base_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b48:	f001 f8ac 	bl	8002ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b52:	f107 0308 	add.w	r3, r7, #8
 8001b56:	4619      	mov	r1, r3
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b5a:	f003 ff49 	bl	80059f0 <HAL_TIM_ConfigClockSource>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b64:	f001 f89e 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b70:	463b      	mov	r3, r7
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b76:	f004 f91f 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b80:	f001 f890 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200002c8 	.word	0x200002c8

08001b90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bae:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <MX_TIM3_Init+0x98>)
 8001bb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000-1;
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bb4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001bb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bd4:	4813      	ldr	r0, [pc, #76]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bd6:	f003 fce9 	bl	80055ac <HAL_TIM_Base_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001be0:	f001 f860 	bl	8002ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480c      	ldr	r0, [pc, #48]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bf2:	f003 fefd 	bl	80059f0 <HAL_TIM_ConfigClockSource>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001bfc:	f001 f852 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c08:	463b      	mov	r3, r7
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001c0e:	f004 f8d3 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001c18:	f001 f844 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000310 	.word	0x20000310
 8001c28:	40000400 	.word	0x40000400

08001c2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <MX_TIM4_Init+0x98>)
 8001c4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64000-1;
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c50:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001c54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 150-1;
 8001c5c:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c5e:	2295      	movs	r2, #149	; 0x95
 8001c60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c6e:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c70:	f003 fc9c 	bl	80055ac <HAL_TIM_Base_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001c7a:	f001 f813 	bl	8002ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c8c:	f003 feb0 	bl	80059f0 <HAL_TIM_ConfigClockSource>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001c96:	f001 f805 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001ca8:	f004 f886 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001cb2:	f000 fff7 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000358 	.word	0x20000358
 8001cc4:	40000800 	.word	0x40000800

08001cc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <MX_USART1_UART_Init+0x50>)
 8001cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cee:	220c      	movs	r2, #12
 8001cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001d00:	f004 f8ca 	bl	8005e98 <HAL_UART_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d0a:	f000 ffcb 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200003a0 	.word	0x200003a0
 8001d18:	40013800 	.word	0x40013800

08001d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <MX_GPIO_Init+0x164>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a52      	ldr	r2, [pc, #328]	; (8001e80 <MX_GPIO_Init+0x164>)
 8001d36:	f043 0310 	orr.w	r3, r3, #16
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <MX_GPIO_Init+0x164>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d48:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <MX_GPIO_Init+0x164>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a4c      	ldr	r2, [pc, #304]	; (8001e80 <MX_GPIO_Init+0x164>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <MX_GPIO_Init+0x164>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d60:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <MX_GPIO_Init+0x164>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <MX_GPIO_Init+0x164>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <MX_GPIO_Init+0x164>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d7e:	4841      	ldr	r0, [pc, #260]	; (8001e84 <MX_GPIO_Init+0x168>)
 8001d80:	f001 fd8b 	bl	800389a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT22_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001d8a:	483f      	ldr	r0, [pc, #252]	; (8001e88 <MX_GPIO_Init+0x16c>)
 8001d8c:	f001 fd85 	bl	800389a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8001d90:	2201      	movs	r2, #1
 8001d92:	2103      	movs	r1, #3
 8001d94:	483d      	ldr	r0, [pc, #244]	; (8001e8c <MX_GPIO_Init+0x170>)
 8001d96:	f001 fd80 	bl	800389a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4619      	mov	r1, r3
 8001db2:	4834      	ldr	r0, [pc, #208]	; (8001e84 <MX_GPIO_Init+0x168>)
 8001db4:	f001 fbd6 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_BUTTON_Pin INC_BUTTON_Pin DES_BUTTON_Pin MODE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BUZZER_BUTTON_Pin|INC_BUTTON_Pin|DES_BUTTON_Pin|MODE_BUTTON_Pin;
 8001db8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dbe:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <MX_GPIO_Init+0x174>)
 8001dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f107 0310 	add.w	r3, r7, #16
 8001dca:	4619      	mov	r1, r3
 8001dcc:	482e      	ldr	r0, [pc, #184]	; (8001e88 <MX_GPIO_Init+0x16c>)
 8001dce:	f001 fbc9 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin|BUZZER_Pin;
 8001dd2:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2302      	movs	r3, #2
 8001de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	4619      	mov	r1, r3
 8001dea:	4827      	ldr	r0, [pc, #156]	; (8001e88 <MX_GPIO_Init+0x16c>)
 8001dec:	f001 fbba 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8001df0:	2303      	movs	r3, #3
 8001df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	4619      	mov	r1, r3
 8001e06:	4821      	ldr	r0, [pc, #132]	; (8001e8c <MX_GPIO_Init+0x170>)
 8001e08:	f001 fbac 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e12:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <MX_GPIO_Init+0x174>)
 8001e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	f107 0310 	add.w	r3, r7, #16
 8001e1e:	4619      	mov	r1, r3
 8001e20:	481a      	ldr	r0, [pc, #104]	; (8001e8c <MX_GPIO_Init+0x170>)
 8001e22:	f001 fb9f 	bl	8003564 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 15, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	210f      	movs	r1, #15
 8001e2a:	2007      	movs	r0, #7
 8001e2c:	f001 fb63 	bl	80034f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e30:	2007      	movs	r0, #7
 8001e32:	f001 fb7c 	bl	800352e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	210f      	movs	r1, #15
 8001e3a:	2008      	movs	r0, #8
 8001e3c:	f001 fb5b 	bl	80034f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001e40:	2008      	movs	r0, #8
 8001e42:	f001 fb74 	bl	800352e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	210f      	movs	r1, #15
 8001e4a:	2009      	movs	r0, #9
 8001e4c:	f001 fb53 	bl	80034f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e50:	2009      	movs	r0, #9
 8001e52:	f001 fb6c 	bl	800352e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	210f      	movs	r1, #15
 8001e5a:	2017      	movs	r0, #23
 8001e5c:	f001 fb4b 	bl	80034f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e60:	2017      	movs	r0, #23
 8001e62:	f001 fb64 	bl	800352e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2028      	movs	r0, #40	; 0x28
 8001e6c:	f001 fb43 	bl	80034f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e70:	2028      	movs	r0, #40	; 0x28
 8001e72:	f001 fb5c 	bl	800352e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e76:	bf00      	nop
 8001e78:	3720      	adds	r7, #32
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40011000 	.word	0x40011000
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	40010c00 	.word	0x40010c00
 8001e90:	10110000 	.word	0x10110000

08001e94 <Delay_Us>:

/* USER CODE BEGIN 4 */

// Delay micro-second function
void Delay_Us(uint32_t us)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0); // set counter value to 0
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <Delay_Us+0x2c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8001ea4:	bf00      	nop
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <Delay_Us+0x2c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d8f9      	bhi.n	8001ea6 <Delay_Us+0x12>
		; // wait for the counter to reach the us input in the parameter
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200002c8 	.word	0x200002c8

08001ec4 <Delay_Ms>:

// Delay mili-second function
void Delay_Ms(uint32_t ms)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3, 0); // set counter value to 0
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <Delay_Ms+0x2c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < ms)
 8001ed4:	bf00      	nop
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <Delay_Ms+0x2c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d8f9      	bhi.n	8001ed6 <Delay_Ms+0x12>
		; // wait for the counter to reach the us input in the parameter
}
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000310 	.word	0x20000310

08001ef4 <Buzzer_Trigger>:

// Trigger Buzzer function
void Buzzer_Trigger(void) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001efe:	4807      	ldr	r0, [pc, #28]	; (8001f1c <Buzzer_Trigger+0x28>)
 8001f00:	f001 fccb 	bl	800389a <HAL_GPIO_WritePin>
	Delay_Ms(130);
 8001f04:	2082      	movs	r0, #130	; 0x82
 8001f06:	f7ff ffdd 	bl	8001ec4 <Delay_Ms>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <Buzzer_Trigger+0x28>)
 8001f12:	f001 fcc2 	bl	800389a <HAL_GPIO_WritePin>
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40010800 	.word	0x40010800

08001f20 <HAL_GPIO_EXTI_Callback>:

// Buzzer button callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
	Buzzer_Trigger();
 8001f2a:	f7ff ffe3 	bl	8001ef4 <Buzzer_Trigger>
	switch (GPIO_Pin) {
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f34:	d00e      	beq.n	8001f54 <HAL_GPIO_EXTI_Callback+0x34>
 8001f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f3a:	f300 80e8 	bgt.w	800210e <HAL_GPIO_EXTI_Callback+0x1ee>
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	f000 8099 	beq.w	8002076 <HAL_GPIO_EXTI_Callback+0x156>
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	f300 80e2 	bgt.w	800210e <HAL_GPIO_EXTI_Callback+0x1ee>
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d030      	beq.n	8001fb0 <HAL_GPIO_EXTI_Callback+0x90>
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d045      	beq.n	8001fde <HAL_GPIO_EXTI_Callback+0xbe>
 8001f52:	e0dc      	b.n	800210e <HAL_GPIO_EXTI_Callback+0x1ee>

		// MODE_BUTTON pressed
		case MODE_BUTTON_Pin:
			if(mode == NORMAL)
 8001f54:	4b74      	ldr	r3, [pc, #464]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <HAL_GPIO_EXTI_Callback+0x48>
			{
				lcd_clear();
 8001f5c:	f7ff f836 	bl	8000fcc <lcd_clear>
				mode = TEMPERATURE_SETPOINT_LOW;
 8001f60:	4b71      	ldr	r3, [pc, #452]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
			else
			{
				lcd_clear();
				mode = NORMAL;
			}
			break;
 8001f66:	e0d6      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>
			else if(mode == TEMPERATURE_SETPOINT_LOW)
 8001f68:	4b6f      	ldr	r3, [pc, #444]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d105      	bne.n	8001f7c <HAL_GPIO_EXTI_Callback+0x5c>
				lcd_clear();
 8001f70:	f7ff f82c 	bl	8000fcc <lcd_clear>
				mode = TEMPERATURE_SETPOINT_HIGH;
 8001f74:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8001f76:	2202      	movs	r2, #2
 8001f78:	701a      	strb	r2, [r3, #0]
			break;
 8001f7a:	e0cc      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>
			else if(mode == TEMPERATURE_SETPOINT_HIGH)
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d105      	bne.n	8001f90 <HAL_GPIO_EXTI_Callback+0x70>
				lcd_clear();
 8001f84:	f7ff f822 	bl	8000fcc <lcd_clear>
				mode = HUMIDITY_SETPOINT_LOW;
 8001f88:	4b67      	ldr	r3, [pc, #412]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	701a      	strb	r2, [r3, #0]
			break;
 8001f8e:	e0c2      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>
			else if(mode == HUMIDITY_SETPOINT_LOW)
 8001f90:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d105      	bne.n	8001fa4 <HAL_GPIO_EXTI_Callback+0x84>
				lcd_clear();
 8001f98:	f7ff f818 	bl	8000fcc <lcd_clear>
				mode = HUMIDITY_SETPOINT_HIGH;
 8001f9c:	4b62      	ldr	r3, [pc, #392]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	701a      	strb	r2, [r3, #0]
			break;
 8001fa2:	e0b8      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>
				lcd_clear();
 8001fa4:	f7ff f812 	bl	8000fcc <lcd_clear>
				mode = NORMAL;
 8001fa8:	4b5f      	ldr	r3, [pc, #380]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
			break;
 8001fae:	e0b2      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>

		// BUZZER_BUTTON pressed
		case BUZZER_BUTTON_Pin:
			// Toggle the built-in LED, changing the alarm status
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001fb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fb4:	485d      	ldr	r0, [pc, #372]	; (800212c <HAL_GPIO_EXTI_Callback+0x20c>)
 8001fb6:	f001 fc88 	bl	80038ca <HAL_GPIO_TogglePin>
			// Check if the alarm is turned OFF
			if(HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin))
 8001fba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fbe:	485b      	ldr	r0, [pc, #364]	; (800212c <HAL_GPIO_EXTI_Callback+0x20c>)
 8001fc0:	f001 fc54 	bl	800386c <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_GPIO_EXTI_Callback+0xb6>
			{
				// clear the LCD screen
				lcd_clear();
 8001fca:	f7fe ffff 	bl	8000fcc <lcd_clear>
				alarmStatus = 0;
 8001fce:	4b58      	ldr	r3, [pc, #352]	; (8002130 <HAL_GPIO_EXTI_Callback+0x210>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
			}
			else
			{
				alarmStatus = 1;
			}
			break;
 8001fd4:	e09f      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>
				alarmStatus = 1;
 8001fd6:	4b56      	ldr	r3, [pc, #344]	; (8002130 <HAL_GPIO_EXTI_Callback+0x210>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
			break;
 8001fdc:	e09b      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>

		// INC_BUTTON pressed
		case INC_BUTTON_Pin:
			if(mode == TEMPERATURE_SETPOINT_LOW)
 8001fde:	4b52      	ldr	r3, [pc, #328]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10d      	bne.n	8002002 <HAL_GPIO_EXTI_Callback+0xe2>
			{
				temp_setpoint[0] = temp_setpoint[0] + 0.1;
 8001fe6:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_GPIO_EXTI_Callback+0x214>)
 8001fe8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fec:	a34c      	add	r3, pc, #304	; (adr r3, 8002120 <HAL_GPIO_EXTI_Callback+0x200>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	f7fe f8c5 	bl	8000180 <__adddf3>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	494e      	ldr	r1, [pc, #312]	; (8002134 <HAL_GPIO_EXTI_Callback+0x214>)
 8001ffc:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else
			{
				mode = NORMAL;
			}
			break;
 8002000:	e089      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>
			else if(mode == TEMPERATURE_SETPOINT_HIGH)
 8002002:	4b49      	ldr	r3, [pc, #292]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d10d      	bne.n	8002026 <HAL_GPIO_EXTI_Callback+0x106>
				temp_setpoint[1] = temp_setpoint[1] + 0.1;
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_GPIO_EXTI_Callback+0x214>)
 800200c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002010:	a343      	add	r3, pc, #268	; (adr r3, 8002120 <HAL_GPIO_EXTI_Callback+0x200>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe f8b3 	bl	8000180 <__adddf3>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4945      	ldr	r1, [pc, #276]	; (8002134 <HAL_GPIO_EXTI_Callback+0x214>)
 8002020:	e9c1 2302 	strd	r2, r3, [r1, #8]
			break;
 8002024:	e077      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>
			else if(mode == HUMIDITY_SETPOINT_LOW)
 8002026:	4b40      	ldr	r3, [pc, #256]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d10d      	bne.n	800204a <HAL_GPIO_EXTI_Callback+0x12a>
				humid_setpoint[0] = humid_setpoint[0] + 0.1;
 800202e:	4b42      	ldr	r3, [pc, #264]	; (8002138 <HAL_GPIO_EXTI_Callback+0x218>)
 8002030:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002034:	a33a      	add	r3, pc, #232	; (adr r3, 8002120 <HAL_GPIO_EXTI_Callback+0x200>)
 8002036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203a:	f7fe f8a1 	bl	8000180 <__adddf3>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	493d      	ldr	r1, [pc, #244]	; (8002138 <HAL_GPIO_EXTI_Callback+0x218>)
 8002044:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8002048:	e065      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>
			else if(mode == HUMIDITY_SETPOINT_HIGH)
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b04      	cmp	r3, #4
 8002050:	d10d      	bne.n	800206e <HAL_GPIO_EXTI_Callback+0x14e>
				humid_setpoint[1] = humid_setpoint[1] + 0.1;
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_GPIO_EXTI_Callback+0x218>)
 8002054:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002058:	a331      	add	r3, pc, #196	; (adr r3, 8002120 <HAL_GPIO_EXTI_Callback+0x200>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	f7fe f88f 	bl	8000180 <__adddf3>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4934      	ldr	r1, [pc, #208]	; (8002138 <HAL_GPIO_EXTI_Callback+0x218>)
 8002068:	e9c1 2302 	strd	r2, r3, [r1, #8]
			break;
 800206c:	e053      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>
				mode = NORMAL;
 800206e:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
			break;
 8002074:	e04f      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>

		// DES_BUTTON pressed
		case DES_BUTTON_Pin:
			if(mode == TEMPERATURE_SETPOINT_LOW)
 8002076:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d10d      	bne.n	800209a <HAL_GPIO_EXTI_Callback+0x17a>
			{
				temp_setpoint[0] = temp_setpoint[0] - 0.1;
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_GPIO_EXTI_Callback+0x214>)
 8002080:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002084:	a326      	add	r3, pc, #152	; (adr r3, 8002120 <HAL_GPIO_EXTI_Callback+0x200>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	f7fe f877 	bl	800017c <__aeabi_dsub>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4928      	ldr	r1, [pc, #160]	; (8002134 <HAL_GPIO_EXTI_Callback+0x214>)
 8002094:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else
			{
				mode = NORMAL;
			}
			break;
 8002098:	e03d      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>
			else if(mode == TEMPERATURE_SETPOINT_HIGH)
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d10d      	bne.n	80020be <HAL_GPIO_EXTI_Callback+0x19e>
				temp_setpoint[1] = temp_setpoint[1] - 0.1;
 80020a2:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_GPIO_EXTI_Callback+0x214>)
 80020a4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80020a8:	a31d      	add	r3, pc, #116	; (adr r3, 8002120 <HAL_GPIO_EXTI_Callback+0x200>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	f7fe f865 	bl	800017c <__aeabi_dsub>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	491f      	ldr	r1, [pc, #124]	; (8002134 <HAL_GPIO_EXTI_Callback+0x214>)
 80020b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			break;
 80020bc:	e02b      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>
			else if(mode == HUMIDITY_SETPOINT_LOW)
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d10d      	bne.n	80020e2 <HAL_GPIO_EXTI_Callback+0x1c2>
				humid_setpoint[0] = humid_setpoint[0] - 0.1;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_GPIO_EXTI_Callback+0x218>)
 80020c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020cc:	a314      	add	r3, pc, #80	; (adr r3, 8002120 <HAL_GPIO_EXTI_Callback+0x200>)
 80020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d2:	f7fe f853 	bl	800017c <__aeabi_dsub>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4917      	ldr	r1, [pc, #92]	; (8002138 <HAL_GPIO_EXTI_Callback+0x218>)
 80020dc:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 80020e0:	e019      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>
			else if(mode == HUMIDITY_SETPOINT_HIGH)
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d10d      	bne.n	8002106 <HAL_GPIO_EXTI_Callback+0x1e6>
				humid_setpoint[1] = humid_setpoint[1] - 0.1;
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <HAL_GPIO_EXTI_Callback+0x218>)
 80020ec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80020f0:	a30b      	add	r3, pc, #44	; (adr r3, 8002120 <HAL_GPIO_EXTI_Callback+0x200>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	f7fe f841 	bl	800017c <__aeabi_dsub>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	490e      	ldr	r1, [pc, #56]	; (8002138 <HAL_GPIO_EXTI_Callback+0x218>)
 8002100:	e9c1 2302 	strd	r2, r3, [r1, #8]
			break;
 8002104:	e007      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>
				mode = NORMAL;
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
			break;
 800210c:	e003      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x1f6>

		// Something went wrong, turn back to NORMAL MODE
		default:
			mode = NORMAL;
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_GPIO_EXTI_Callback+0x208>)
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
			break;
 8002114:	bf00      	nop
	}
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	9999999a 	.word	0x9999999a
 8002124:	3fb99999 	.word	0x3fb99999
 8002128:	2000049c 	.word	0x2000049c
 800212c:	40011000 	.word	0x40011000
 8002130:	200004b8 	.word	0x200004b8
 8002134:	20000008 	.word	0x20000008
 8002138:	20000018 	.word	0x20000018

0800213c <Packet_Encapsulation>:

// Encapsulate the data into a packet containing the string: "source_id,destination_id,temperature,humidity"
void Packet_Encapsulation(char* buffer ,int src_id, int des_id, double temp, double humid, int cmd_status, int alarm_status)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af06      	add	r7, sp, #24
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
	sprintf(buffer, "%d,%d,%0.1lf,%0.1lf,%d,%d", src_id, des_id, temp, humid,cmd_status,alarm_status);
 8002148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214a:	9305      	str	r3, [sp, #20]
 800214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214e:	9304      	str	r3, [sp, #16]
 8002150:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002154:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800215c:	e9cd 2300 	strd	r2, r3, [sp]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	4903      	ldr	r1, [pc, #12]	; (8002174 <Packet_Encapsulation+0x38>)
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f004 fe90 	bl	8006e8c <siprintf>
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	0800b114 	.word	0x0800b114

08002178 <Lcd_Sytem_State_Print>:

// System state LCD print
void Lcd_Sytem_State_Print(uint8_t mode) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2b04      	cmp	r3, #4
 8002186:	f200 826d 	bhi.w	8002664 <Lcd_Sytem_State_Print+0x4ec>
 800218a:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <Lcd_Sytem_State_Print+0x18>)
 800218c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002190:	080021a5 	.word	0x080021a5
 8002194:	08002281 	.word	0x08002281
 8002198:	08002345 	.word	0x08002345
 800219c:	08002445 	.word	0x08002445
 80021a0:	08002555 	.word	0x08002555

	// NORMAL MODE LCD print
	case NORMAL:
		lcd_put_cursor(0, 0);
 80021a4:	2100      	movs	r1, #0
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7fe ff27 	bl	8000ffa <lcd_put_cursor>
		if(dht22Data.temperature <= 9.9 && dht22Data.temperature >= 0.0)
 80021ac:	4b98      	ldr	r3, [pc, #608]	; (8002410 <Lcd_Sytem_State_Print+0x298>)
 80021ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021b2:	a395      	add	r3, pc, #596	; (adr r3, 8002408 <Lcd_Sytem_State_Print+0x290>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	f7fe fc14 	bl	80009e4 <__aeabi_dcmple>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d013      	beq.n	80021ea <Lcd_Sytem_State_Print+0x72>
 80021c2:	4b93      	ldr	r3, [pc, #588]	; (8002410 <Lcd_Sytem_State_Print+0x298>)
 80021c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	f7fe fc12 	bl	80009f8 <__aeabi_dcmpge>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <Lcd_Sytem_State_Print+0x72>
		{
			sprintf(lcd_data, "TEMP:  %0.1lf C", dht22Data.temperature);
 80021da:	4b8d      	ldr	r3, [pc, #564]	; (8002410 <Lcd_Sytem_State_Print+0x298>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	498c      	ldr	r1, [pc, #560]	; (8002414 <Lcd_Sytem_State_Print+0x29c>)
 80021e2:	488d      	ldr	r0, [pc, #564]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 80021e4:	f004 fe52 	bl	8006e8c <siprintf>
 80021e8:	e006      	b.n	80021f8 <Lcd_Sytem_State_Print+0x80>
		}
		else
		{
			sprintf(lcd_data, "TEMP: %0.1lf C", dht22Data.temperature);
 80021ea:	4b89      	ldr	r3, [pc, #548]	; (8002410 <Lcd_Sytem_State_Print+0x298>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	498a      	ldr	r1, [pc, #552]	; (800241c <Lcd_Sytem_State_Print+0x2a4>)
 80021f2:	4889      	ldr	r0, [pc, #548]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 80021f4:	f004 fe4a 	bl	8006e8c <siprintf>
		}
		lcd_send_string(lcd_data);
 80021f8:	4887      	ldr	r0, [pc, #540]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 80021fa:	f7fe fed2 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 80021fe:	2100      	movs	r1, #0
 8002200:	2001      	movs	r0, #1
 8002202:	f7fe fefa 	bl	8000ffa <lcd_put_cursor>
		if(dht22Data.humidity <= 9.9 && dht22Data.humidity >= 0)
 8002206:	4b82      	ldr	r3, [pc, #520]	; (8002410 <Lcd_Sytem_State_Print+0x298>)
 8002208:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800220c:	a37e      	add	r3, pc, #504	; (adr r3, 8002408 <Lcd_Sytem_State_Print+0x290>)
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	f7fe fbe7 	bl	80009e4 <__aeabi_dcmple>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <Lcd_Sytem_State_Print+0xcc>
 800221c:	4b7c      	ldr	r3, [pc, #496]	; (8002410 <Lcd_Sytem_State_Print+0x298>)
 800221e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	f7fe fbe5 	bl	80009f8 <__aeabi_dcmpge>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <Lcd_Sytem_State_Print+0xcc>
		{
			sprintf(lcd_data, "HUMID:   %0.1lf %%", dht22Data.humidity);
 8002234:	4b76      	ldr	r3, [pc, #472]	; (8002410 <Lcd_Sytem_State_Print+0x298>)
 8002236:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800223a:	4979      	ldr	r1, [pc, #484]	; (8002420 <Lcd_Sytem_State_Print+0x2a8>)
 800223c:	4876      	ldr	r0, [pc, #472]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 800223e:	f004 fe25 	bl	8006e8c <siprintf>
 8002242:	e019      	b.n	8002278 <Lcd_Sytem_State_Print+0x100>
		}
		else if(dht22Data.humidity == 100.0)
 8002244:	4b72      	ldr	r3, [pc, #456]	; (8002410 <Lcd_Sytem_State_Print+0x298>)
 8002246:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	4b75      	ldr	r3, [pc, #468]	; (8002424 <Lcd_Sytem_State_Print+0x2ac>)
 8002250:	f7fe fbb4 	bl	80009bc <__aeabi_dcmpeq>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <Lcd_Sytem_State_Print+0xf2>
		{
			sprintf(lcd_data, "HUMID: %0.1lf %%", dht22Data.humidity);
 800225a:	4b6d      	ldr	r3, [pc, #436]	; (8002410 <Lcd_Sytem_State_Print+0x298>)
 800225c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002260:	4971      	ldr	r1, [pc, #452]	; (8002428 <Lcd_Sytem_State_Print+0x2b0>)
 8002262:	486d      	ldr	r0, [pc, #436]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 8002264:	f004 fe12 	bl	8006e8c <siprintf>
 8002268:	e006      	b.n	8002278 <Lcd_Sytem_State_Print+0x100>
		}
		else
		{
			sprintf(lcd_data, "HUMID:  %0.1lf %%", dht22Data.humidity);
 800226a:	4b69      	ldr	r3, [pc, #420]	; (8002410 <Lcd_Sytem_State_Print+0x298>)
 800226c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002270:	496e      	ldr	r1, [pc, #440]	; (800242c <Lcd_Sytem_State_Print+0x2b4>)
 8002272:	4869      	ldr	r0, [pc, #420]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 8002274:	f004 fe0a 	bl	8006e8c <siprintf>
		}
		lcd_send_string(lcd_data);
 8002278:	4867      	ldr	r0, [pc, #412]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 800227a:	f7fe fe92 	bl	8000fa2 <lcd_send_string>
		break;
 800227e:	e1f4      	b.n	800266a <Lcd_Sytem_State_Print+0x4f2>

	//  TEMPERATURE_SETPOINT_LOW MODE LCD print
	case TEMPERATURE_SETPOINT_LOW:
		lcd_put_cursor(0, 0);
 8002280:	2100      	movs	r1, #0
 8002282:	2000      	movs	r0, #0
 8002284:	f7fe feb9 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("TempSetpoint(L)");
 8002288:	4869      	ldr	r0, [pc, #420]	; (8002430 <Lcd_Sytem_State_Print+0x2b8>)
 800228a:	f7fe fe8a 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 800228e:	2100      	movs	r1, #0
 8002290:	2001      	movs	r0, #1
 8002292:	f7fe feb2 	bl	8000ffa <lcd_put_cursor>
		if(temp_setpoint[0] <= 9.9 && temp_setpoint[0] >= 0.0)
 8002296:	4b67      	ldr	r3, [pc, #412]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 8002298:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229c:	a35a      	add	r3, pc, #360	; (adr r3, 8002408 <Lcd_Sytem_State_Print+0x290>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	f7fe fb9f 	bl	80009e4 <__aeabi_dcmple>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <Lcd_Sytem_State_Print+0x15c>
 80022ac:	4b61      	ldr	r3, [pc, #388]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 80022ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	f7fe fb9d 	bl	80009f8 <__aeabi_dcmpge>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d007      	beq.n	80022d4 <Lcd_Sytem_State_Print+0x15c>
		{
			sprintf(lcd_data, " %0.1lf C", temp_setpoint[0]);
 80022c4:	4b5b      	ldr	r3, [pc, #364]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	495b      	ldr	r1, [pc, #364]	; (8002438 <Lcd_Sytem_State_Print+0x2c0>)
 80022cc:	4852      	ldr	r0, [pc, #328]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 80022ce:	f004 fddd 	bl	8006e8c <siprintf>
 80022d2:	e006      	b.n	80022e2 <Lcd_Sytem_State_Print+0x16a>
		}
		else
		{
			sprintf(lcd_data, "%0.1lf C", temp_setpoint[0]);
 80022d4:	4b57      	ldr	r3, [pc, #348]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	4958      	ldr	r1, [pc, #352]	; (800243c <Lcd_Sytem_State_Print+0x2c4>)
 80022dc:	484e      	ldr	r0, [pc, #312]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 80022de:	f004 fdd5 	bl	8006e8c <siprintf>
		}
		lcd_send_string(lcd_data);
 80022e2:	484d      	ldr	r0, [pc, #308]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 80022e4:	f7fe fe5d 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 9);
 80022e8:	2109      	movs	r1, #9
 80022ea:	2001      	movs	r0, #1
 80022ec:	f7fe fe85 	bl	8000ffa <lcd_put_cursor>
		if(temp_setpoint[1] <= 9.9 && temp_setpoint[1] >= 0.0)
 80022f0:	4b50      	ldr	r3, [pc, #320]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 80022f2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80022f6:	a344      	add	r3, pc, #272	; (adr r3, 8002408 <Lcd_Sytem_State_Print+0x290>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	f7fe fb72 	bl	80009e4 <__aeabi_dcmple>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d013      	beq.n	800232e <Lcd_Sytem_State_Print+0x1b6>
 8002306:	4b4b      	ldr	r3, [pc, #300]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 8002308:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	f7fe fb70 	bl	80009f8 <__aeabi_dcmpge>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <Lcd_Sytem_State_Print+0x1b6>
		{
			sprintf(lcd_data, " %0.1lf C", temp_setpoint[1]);
 800231e:	4b45      	ldr	r3, [pc, #276]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 8002320:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002324:	4944      	ldr	r1, [pc, #272]	; (8002438 <Lcd_Sytem_State_Print+0x2c0>)
 8002326:	483c      	ldr	r0, [pc, #240]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 8002328:	f004 fdb0 	bl	8006e8c <siprintf>
 800232c:	e006      	b.n	800233c <Lcd_Sytem_State_Print+0x1c4>
		}
		else
		{
			sprintf(lcd_data, "%0.1lf C", temp_setpoint[1]);
 800232e:	4b41      	ldr	r3, [pc, #260]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 8002330:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002334:	4941      	ldr	r1, [pc, #260]	; (800243c <Lcd_Sytem_State_Print+0x2c4>)
 8002336:	4838      	ldr	r0, [pc, #224]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 8002338:	f004 fda8 	bl	8006e8c <siprintf>
		}
		lcd_send_string(lcd_data);
 800233c:	4836      	ldr	r0, [pc, #216]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 800233e:	f7fe fe30 	bl	8000fa2 <lcd_send_string>
		break;
 8002342:	e192      	b.n	800266a <Lcd_Sytem_State_Print+0x4f2>

	// TEMPERATURE_SETPOINT_HIGH MODE LCD print
	case TEMPERATURE_SETPOINT_HIGH:
		lcd_put_cursor(0, 0);
 8002344:	2100      	movs	r1, #0
 8002346:	2000      	movs	r0, #0
 8002348:	f7fe fe57 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("TempSetpoint(H)");
 800234c:	483c      	ldr	r0, [pc, #240]	; (8002440 <Lcd_Sytem_State_Print+0x2c8>)
 800234e:	f7fe fe28 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 8002352:	2100      	movs	r1, #0
 8002354:	2001      	movs	r0, #1
 8002356:	f7fe fe50 	bl	8000ffa <lcd_put_cursor>
		if(temp_setpoint[0] <= 9.9 && temp_setpoint[0] >= 0.0)
 800235a:	4b36      	ldr	r3, [pc, #216]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 800235c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002360:	a329      	add	r3, pc, #164	; (adr r3, 8002408 <Lcd_Sytem_State_Print+0x290>)
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	f7fe fb3d 	bl	80009e4 <__aeabi_dcmple>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d013      	beq.n	8002398 <Lcd_Sytem_State_Print+0x220>
 8002370:	4b30      	ldr	r3, [pc, #192]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 8002372:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	f7fe fb3b 	bl	80009f8 <__aeabi_dcmpge>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <Lcd_Sytem_State_Print+0x220>
		{
			sprintf(lcd_data, " %0.1lf C", temp_setpoint[0]);
 8002388:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	492a      	ldr	r1, [pc, #168]	; (8002438 <Lcd_Sytem_State_Print+0x2c0>)
 8002390:	4821      	ldr	r0, [pc, #132]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 8002392:	f004 fd7b 	bl	8006e8c <siprintf>
 8002396:	e006      	b.n	80023a6 <Lcd_Sytem_State_Print+0x22e>
		}
		else
		{
			sprintf(lcd_data, "%0.1lf C", temp_setpoint[0]);
 8002398:	4b26      	ldr	r3, [pc, #152]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	4927      	ldr	r1, [pc, #156]	; (800243c <Lcd_Sytem_State_Print+0x2c4>)
 80023a0:	481d      	ldr	r0, [pc, #116]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 80023a2:	f004 fd73 	bl	8006e8c <siprintf>
		}
		lcd_send_string(lcd_data);
 80023a6:	481c      	ldr	r0, [pc, #112]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 80023a8:	f7fe fdfb 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 9);
 80023ac:	2109      	movs	r1, #9
 80023ae:	2001      	movs	r0, #1
 80023b0:	f7fe fe23 	bl	8000ffa <lcd_put_cursor>
		if(temp_setpoint[1] <= 9.9 && temp_setpoint[1] >= 0.0)
 80023b4:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 80023b6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80023ba:	a313      	add	r3, pc, #76	; (adr r3, 8002408 <Lcd_Sytem_State_Print+0x290>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f7fe fb10 	bl	80009e4 <__aeabi_dcmple>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d013      	beq.n	80023f2 <Lcd_Sytem_State_Print+0x27a>
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 80023cc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	f7fe fb0e 	bl	80009f8 <__aeabi_dcmpge>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <Lcd_Sytem_State_Print+0x27a>
		{
			sprintf(lcd_data, " %0.1lf C", temp_setpoint[1]);
 80023e2:	4b14      	ldr	r3, [pc, #80]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 80023e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023e8:	4913      	ldr	r1, [pc, #76]	; (8002438 <Lcd_Sytem_State_Print+0x2c0>)
 80023ea:	480b      	ldr	r0, [pc, #44]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 80023ec:	f004 fd4e 	bl	8006e8c <siprintf>
 80023f0:	e006      	b.n	8002400 <Lcd_Sytem_State_Print+0x288>
		}
		else
		{
			sprintf(lcd_data, "%0.1lf C", temp_setpoint[1]);
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <Lcd_Sytem_State_Print+0x2bc>)
 80023f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023f8:	4910      	ldr	r1, [pc, #64]	; (800243c <Lcd_Sytem_State_Print+0x2c4>)
 80023fa:	4807      	ldr	r0, [pc, #28]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 80023fc:	f004 fd46 	bl	8006e8c <siprintf>
		}
		lcd_send_string(lcd_data);
 8002400:	4805      	ldr	r0, [pc, #20]	; (8002418 <Lcd_Sytem_State_Print+0x2a0>)
 8002402:	f7fe fdce 	bl	8000fa2 <lcd_send_string>
		break;
 8002406:	e130      	b.n	800266a <Lcd_Sytem_State_Print+0x4f2>
 8002408:	cccccccd 	.word	0xcccccccd
 800240c:	4023cccc 	.word	0x4023cccc
 8002410:	200004a0 	.word	0x200004a0
 8002414:	0800b130 	.word	0x0800b130
 8002418:	2000048c 	.word	0x2000048c
 800241c:	0800b140 	.word	0x0800b140
 8002420:	0800b150 	.word	0x0800b150
 8002424:	40590000 	.word	0x40590000
 8002428:	0800b164 	.word	0x0800b164
 800242c:	0800b178 	.word	0x0800b178
 8002430:	0800b18c 	.word	0x0800b18c
 8002434:	20000008 	.word	0x20000008
 8002438:	0800b19c 	.word	0x0800b19c
 800243c:	0800b1a8 	.word	0x0800b1a8
 8002440:	0800b1b4 	.word	0x0800b1b4

	// HUMIDITY_SETPOINT_LOW MODE LCD print
	case HUMIDITY_SETPOINT_LOW:
		lcd_put_cursor(0, 0);
 8002444:	2100      	movs	r1, #0
 8002446:	2000      	movs	r0, #0
 8002448:	f7fe fdd7 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("HumidSetpoint(L)");
 800244c:	488c      	ldr	r0, [pc, #560]	; (8002680 <Lcd_Sytem_State_Print+0x508>)
 800244e:	f7fe fda8 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 8002452:	2100      	movs	r1, #0
 8002454:	2001      	movs	r0, #1
 8002456:	f7fe fdd0 	bl	8000ffa <lcd_put_cursor>
		if(humid_setpoint[0] <= 9.9 && humid_setpoint[0] >= 0.0)
 800245a:	4b8a      	ldr	r3, [pc, #552]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 800245c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002460:	a385      	add	r3, pc, #532	; (adr r3, 8002678 <Lcd_Sytem_State_Print+0x500>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fe fabd 	bl	80009e4 <__aeabi_dcmple>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <Lcd_Sytem_State_Print+0x320>
 8002470:	4b84      	ldr	r3, [pc, #528]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 8002472:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	f7fe fabb 	bl	80009f8 <__aeabi_dcmpge>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <Lcd_Sytem_State_Print+0x320>
		{
			sprintf(lcd_data, "  %0.1lf %%", humid_setpoint[0]);
 8002488:	4b7e      	ldr	r3, [pc, #504]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	497e      	ldr	r1, [pc, #504]	; (8002688 <Lcd_Sytem_State_Print+0x510>)
 8002490:	487e      	ldr	r0, [pc, #504]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 8002492:	f004 fcfb 	bl	8006e8c <siprintf>
 8002496:	e019      	b.n	80024cc <Lcd_Sytem_State_Print+0x354>
		}
		else if (humid_setpoint[0] == 100.0)
 8002498:	4b7a      	ldr	r3, [pc, #488]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 800249a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	4b7b      	ldr	r3, [pc, #492]	; (8002690 <Lcd_Sytem_State_Print+0x518>)
 80024a4:	f7fe fa8a 	bl	80009bc <__aeabi_dcmpeq>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <Lcd_Sytem_State_Print+0x346>
		{
			sprintf(lcd_data, "%0.1lf %%", humid_setpoint[0]);
 80024ae:	4b75      	ldr	r3, [pc, #468]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	4977      	ldr	r1, [pc, #476]	; (8002694 <Lcd_Sytem_State_Print+0x51c>)
 80024b6:	4875      	ldr	r0, [pc, #468]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 80024b8:	f004 fce8 	bl	8006e8c <siprintf>
 80024bc:	e006      	b.n	80024cc <Lcd_Sytem_State_Print+0x354>
		}
		else
		{
			sprintf(lcd_data, " %0.1lf %%", humid_setpoint[0]);
 80024be:	4b71      	ldr	r3, [pc, #452]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	4974      	ldr	r1, [pc, #464]	; (8002698 <Lcd_Sytem_State_Print+0x520>)
 80024c6:	4871      	ldr	r0, [pc, #452]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 80024c8:	f004 fce0 	bl	8006e8c <siprintf>
		}
		lcd_send_string(lcd_data);
 80024cc:	486f      	ldr	r0, [pc, #444]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 80024ce:	f7fe fd68 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 8);
 80024d2:	2108      	movs	r1, #8
 80024d4:	2001      	movs	r0, #1
 80024d6:	f7fe fd90 	bl	8000ffa <lcd_put_cursor>
		if(humid_setpoint[1] <= 9.9 && humid_setpoint[1] >= 0.0)
 80024da:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 80024dc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80024e0:	a365      	add	r3, pc, #404	; (adr r3, 8002678 <Lcd_Sytem_State_Print+0x500>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	f7fe fa7d 	bl	80009e4 <__aeabi_dcmple>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <Lcd_Sytem_State_Print+0x3a0>
 80024f0:	4b64      	ldr	r3, [pc, #400]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 80024f2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	f7fe fa7b 	bl	80009f8 <__aeabi_dcmpge>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <Lcd_Sytem_State_Print+0x3a0>
		{
			sprintf(lcd_data, "  %0.1lf %%", humid_setpoint[1]);
 8002508:	4b5e      	ldr	r3, [pc, #376]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 800250a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800250e:	495e      	ldr	r1, [pc, #376]	; (8002688 <Lcd_Sytem_State_Print+0x510>)
 8002510:	485e      	ldr	r0, [pc, #376]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 8002512:	f004 fcbb 	bl	8006e8c <siprintf>
 8002516:	e019      	b.n	800254c <Lcd_Sytem_State_Print+0x3d4>
		}
		else if (humid_setpoint[1] == 100.0)
 8002518:	4b5a      	ldr	r3, [pc, #360]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 800251a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <Lcd_Sytem_State_Print+0x518>)
 8002524:	f7fe fa4a 	bl	80009bc <__aeabi_dcmpeq>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <Lcd_Sytem_State_Print+0x3c6>
		{
			sprintf(lcd_data, "%0.1lf %%", humid_setpoint[1]);
 800252e:	4b55      	ldr	r3, [pc, #340]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 8002530:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002534:	4957      	ldr	r1, [pc, #348]	; (8002694 <Lcd_Sytem_State_Print+0x51c>)
 8002536:	4855      	ldr	r0, [pc, #340]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 8002538:	f004 fca8 	bl	8006e8c <siprintf>
 800253c:	e006      	b.n	800254c <Lcd_Sytem_State_Print+0x3d4>
		}
		else
		{
			sprintf(lcd_data, " %0.1lf %%", humid_setpoint[1]);
 800253e:	4b51      	ldr	r3, [pc, #324]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 8002540:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002544:	4954      	ldr	r1, [pc, #336]	; (8002698 <Lcd_Sytem_State_Print+0x520>)
 8002546:	4851      	ldr	r0, [pc, #324]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 8002548:	f004 fca0 	bl	8006e8c <siprintf>
		}
		lcd_send_string(lcd_data);
 800254c:	484f      	ldr	r0, [pc, #316]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 800254e:	f7fe fd28 	bl	8000fa2 <lcd_send_string>
		break;
 8002552:	e08a      	b.n	800266a <Lcd_Sytem_State_Print+0x4f2>

	// HUMIDITY_SETPOINT_HIGH MODE LCD print
	case HUMIDITY_SETPOINT_HIGH:
		lcd_put_cursor(0, 0);
 8002554:	2100      	movs	r1, #0
 8002556:	2000      	movs	r0, #0
 8002558:	f7fe fd4f 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("HumidSetpoint(H)");
 800255c:	484f      	ldr	r0, [pc, #316]	; (800269c <Lcd_Sytem_State_Print+0x524>)
 800255e:	f7fe fd20 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 8002562:	2100      	movs	r1, #0
 8002564:	2001      	movs	r0, #1
 8002566:	f7fe fd48 	bl	8000ffa <lcd_put_cursor>
		if(humid_setpoint[0] < 10.0 && humid_setpoint[0] >= 0.0)
 800256a:	4b46      	ldr	r3, [pc, #280]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 800256c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <Lcd_Sytem_State_Print+0x528>)
 8002576:	f7fe fa2b 	bl	80009d0 <__aeabi_dcmplt>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <Lcd_Sytem_State_Print+0x430>
 8002580:	4b40      	ldr	r3, [pc, #256]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 8002582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	f7fe fa33 	bl	80009f8 <__aeabi_dcmpge>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <Lcd_Sytem_State_Print+0x430>
		{
			sprintf(lcd_data, "  %0.1lf %%", humid_setpoint[0]);
 8002598:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	493a      	ldr	r1, [pc, #232]	; (8002688 <Lcd_Sytem_State_Print+0x510>)
 80025a0:	483a      	ldr	r0, [pc, #232]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 80025a2:	f004 fc73 	bl	8006e8c <siprintf>
 80025a6:	e019      	b.n	80025dc <Lcd_Sytem_State_Print+0x464>
		}
		else if (humid_setpoint[0] == 100.0)
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 80025aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	4b37      	ldr	r3, [pc, #220]	; (8002690 <Lcd_Sytem_State_Print+0x518>)
 80025b4:	f7fe fa02 	bl	80009bc <__aeabi_dcmpeq>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <Lcd_Sytem_State_Print+0x456>
		{
			sprintf(lcd_data, "%0.1lf %%", humid_setpoint[0]);
 80025be:	4b31      	ldr	r3, [pc, #196]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	4933      	ldr	r1, [pc, #204]	; (8002694 <Lcd_Sytem_State_Print+0x51c>)
 80025c6:	4831      	ldr	r0, [pc, #196]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 80025c8:	f004 fc60 	bl	8006e8c <siprintf>
 80025cc:	e006      	b.n	80025dc <Lcd_Sytem_State_Print+0x464>
		}
		else
		{
			sprintf(lcd_data, " %0.1lf %%", humid_setpoint[0]);
 80025ce:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	4930      	ldr	r1, [pc, #192]	; (8002698 <Lcd_Sytem_State_Print+0x520>)
 80025d6:	482d      	ldr	r0, [pc, #180]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 80025d8:	f004 fc58 	bl	8006e8c <siprintf>
		}
		lcd_send_string(lcd_data);
 80025dc:	482b      	ldr	r0, [pc, #172]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 80025de:	f7fe fce0 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 8);
 80025e2:	2108      	movs	r1, #8
 80025e4:	2001      	movs	r0, #1
 80025e6:	f7fe fd08 	bl	8000ffa <lcd_put_cursor>
		if(humid_setpoint[1] < 10.0 && humid_setpoint[1] >= 0.0)
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 80025ec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <Lcd_Sytem_State_Print+0x528>)
 80025f6:	f7fe f9eb 	bl	80009d0 <__aeabi_dcmplt>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <Lcd_Sytem_State_Print+0x4b0>
 8002600:	4b20      	ldr	r3, [pc, #128]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 8002602:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	f7fe f9f3 	bl	80009f8 <__aeabi_dcmpge>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <Lcd_Sytem_State_Print+0x4b0>
		{
			sprintf(lcd_data, "  %0.1lf %%", humid_setpoint[1]);
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 800261a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800261e:	491a      	ldr	r1, [pc, #104]	; (8002688 <Lcd_Sytem_State_Print+0x510>)
 8002620:	481a      	ldr	r0, [pc, #104]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 8002622:	f004 fc33 	bl	8006e8c <siprintf>
 8002626:	e019      	b.n	800265c <Lcd_Sytem_State_Print+0x4e4>
		}
		else if (humid_setpoint[1] == 100.0)
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 800262a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <Lcd_Sytem_State_Print+0x518>)
 8002634:	f7fe f9c2 	bl	80009bc <__aeabi_dcmpeq>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d007      	beq.n	800264e <Lcd_Sytem_State_Print+0x4d6>
		{
			sprintf(lcd_data, "%0.1lf %%", humid_setpoint[1]);
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 8002640:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002644:	4913      	ldr	r1, [pc, #76]	; (8002694 <Lcd_Sytem_State_Print+0x51c>)
 8002646:	4811      	ldr	r0, [pc, #68]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 8002648:	f004 fc20 	bl	8006e8c <siprintf>
 800264c:	e006      	b.n	800265c <Lcd_Sytem_State_Print+0x4e4>
		}
		else
		{
			sprintf(lcd_data, " %0.1lf %%", humid_setpoint[1]);
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <Lcd_Sytem_State_Print+0x50c>)
 8002650:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002654:	4910      	ldr	r1, [pc, #64]	; (8002698 <Lcd_Sytem_State_Print+0x520>)
 8002656:	480d      	ldr	r0, [pc, #52]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 8002658:	f004 fc18 	bl	8006e8c <siprintf>
		}
		lcd_send_string(lcd_data);
 800265c:	480b      	ldr	r0, [pc, #44]	; (800268c <Lcd_Sytem_State_Print+0x514>)
 800265e:	f7fe fca0 	bl	8000fa2 <lcd_send_string>
		break;
 8002662:	e002      	b.n	800266a <Lcd_Sytem_State_Print+0x4f2>

	// Some issues occur, back to NORMAL MODE
	default:
		mode = NORMAL;
 8002664:	2300      	movs	r3, #0
 8002666:	71fb      	strb	r3, [r7, #7]
		break;
 8002668:	bf00      	nop
	}
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	f3af 8000 	nop.w
 8002678:	cccccccd 	.word	0xcccccccd
 800267c:	4023cccc 	.word	0x4023cccc
 8002680:	0800b1c4 	.word	0x0800b1c4
 8002684:	20000018 	.word	0x20000018
 8002688:	0800b1d8 	.word	0x0800b1d8
 800268c:	2000048c 	.word	0x2000048c
 8002690:	40590000 	.word	0x40590000
 8002694:	0800b1e4 	.word	0x0800b1e4
 8002698:	0800b1f0 	.word	0x0800b1f0
 800269c:	0800b1fc 	.word	0x0800b1fc
 80026a0:	40240000 	.word	0x40240000
 80026a4:	00000000 	.word	0x00000000

080026a8 <Long_Pressed_Button>:

// Long pressed button handle
void Long_Pressed_Button(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	// Temperature set point increase/decrease when the button is pressed a long time
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 80026ac:	e01f      	b.n	80026ee <Long_Pressed_Button+0x46>
	{
		Delay_Ms(150);
 80026ae:	2096      	movs	r0, #150	; 0x96
 80026b0:	f7ff fc08 	bl	8001ec4 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 80026b4:	2108      	movs	r1, #8
 80026b6:	489a      	ldr	r0, [pc, #616]	; (8002920 <Long_Pressed_Button+0x278>)
 80026b8:	f001 f8d8 	bl	800386c <HAL_GPIO_ReadPin>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d115      	bne.n	80026ee <Long_Pressed_Button+0x46>
 80026c2:	4b98      	ldr	r3, [pc, #608]	; (8002924 <Long_Pressed_Button+0x27c>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d111      	bne.n	80026ee <Long_Pressed_Button+0x46>
		{
			temp_setpoint[0] = temp_setpoint[0] - 0.1;
 80026ca:	4b97      	ldr	r3, [pc, #604]	; (8002928 <Long_Pressed_Button+0x280>)
 80026cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d0:	a391      	add	r3, pc, #580	; (adr r3, 8002918 <Long_Pressed_Button+0x270>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fd fd51 	bl	800017c <__aeabi_dsub>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4992      	ldr	r1, [pc, #584]	; (8002928 <Long_Pressed_Button+0x280>)
 80026e0:	e9c1 2300 	strd	r2, r3, [r1]
			Lcd_Sytem_State_Print(mode);
 80026e4:	4b8f      	ldr	r3, [pc, #572]	; (8002924 <Long_Pressed_Button+0x27c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fd45 	bl	8002178 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 80026ee:	2108      	movs	r1, #8
 80026f0:	488b      	ldr	r0, [pc, #556]	; (8002920 <Long_Pressed_Button+0x278>)
 80026f2:	f001 f8bb 	bl	800386c <HAL_GPIO_ReadPin>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d124      	bne.n	8002746 <Long_Pressed_Button+0x9e>
 80026fc:	4b89      	ldr	r3, [pc, #548]	; (8002924 <Long_Pressed_Button+0x27c>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d0d4      	beq.n	80026ae <Long_Pressed_Button+0x6>
		}
	}
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 8002704:	e01f      	b.n	8002746 <Long_Pressed_Button+0x9e>
	{
		Delay_Ms(150);
 8002706:	2096      	movs	r0, #150	; 0x96
 8002708:	f7ff fbdc 	bl	8001ec4 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 800270c:	2104      	movs	r1, #4
 800270e:	4884      	ldr	r0, [pc, #528]	; (8002920 <Long_Pressed_Button+0x278>)
 8002710:	f001 f8ac 	bl	800386c <HAL_GPIO_ReadPin>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d115      	bne.n	8002746 <Long_Pressed_Button+0x9e>
 800271a:	4b82      	ldr	r3, [pc, #520]	; (8002924 <Long_Pressed_Button+0x27c>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d111      	bne.n	8002746 <Long_Pressed_Button+0x9e>
		{
			temp_setpoint[0] = temp_setpoint[0] + 0.1;
 8002722:	4b81      	ldr	r3, [pc, #516]	; (8002928 <Long_Pressed_Button+0x280>)
 8002724:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002728:	a37b      	add	r3, pc, #492	; (adr r3, 8002918 <Long_Pressed_Button+0x270>)
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	f7fd fd27 	bl	8000180 <__adddf3>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	497c      	ldr	r1, [pc, #496]	; (8002928 <Long_Pressed_Button+0x280>)
 8002738:	e9c1 2300 	strd	r2, r3, [r1]
			Lcd_Sytem_State_Print(mode);
 800273c:	4b79      	ldr	r3, [pc, #484]	; (8002924 <Long_Pressed_Button+0x27c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fd19 	bl	8002178 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 8002746:	2104      	movs	r1, #4
 8002748:	4875      	ldr	r0, [pc, #468]	; (8002920 <Long_Pressed_Button+0x278>)
 800274a:	f001 f88f 	bl	800386c <HAL_GPIO_ReadPin>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d124      	bne.n	800279e <Long_Pressed_Button+0xf6>
 8002754:	4b73      	ldr	r3, [pc, #460]	; (8002924 <Long_Pressed_Button+0x27c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d0d4      	beq.n	8002706 <Long_Pressed_Button+0x5e>
		}
	}
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 800275c:	e01f      	b.n	800279e <Long_Pressed_Button+0xf6>
	{
		Delay_Ms(150);
 800275e:	2096      	movs	r0, #150	; 0x96
 8002760:	f7ff fbb0 	bl	8001ec4 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 8002764:	2108      	movs	r1, #8
 8002766:	486e      	ldr	r0, [pc, #440]	; (8002920 <Long_Pressed_Button+0x278>)
 8002768:	f001 f880 	bl	800386c <HAL_GPIO_ReadPin>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d115      	bne.n	800279e <Long_Pressed_Button+0xf6>
 8002772:	4b6c      	ldr	r3, [pc, #432]	; (8002924 <Long_Pressed_Button+0x27c>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d111      	bne.n	800279e <Long_Pressed_Button+0xf6>
		{
			temp_setpoint[1] = temp_setpoint[1] - 0.1;
 800277a:	4b6b      	ldr	r3, [pc, #428]	; (8002928 <Long_Pressed_Button+0x280>)
 800277c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002780:	a365      	add	r3, pc, #404	; (adr r3, 8002918 <Long_Pressed_Button+0x270>)
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002786:	f7fd fcf9 	bl	800017c <__aeabi_dsub>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4966      	ldr	r1, [pc, #408]	; (8002928 <Long_Pressed_Button+0x280>)
 8002790:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Lcd_Sytem_State_Print(mode);
 8002794:	4b63      	ldr	r3, [pc, #396]	; (8002924 <Long_Pressed_Button+0x27c>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fced 	bl	8002178 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 800279e:	2108      	movs	r1, #8
 80027a0:	485f      	ldr	r0, [pc, #380]	; (8002920 <Long_Pressed_Button+0x278>)
 80027a2:	f001 f863 	bl	800386c <HAL_GPIO_ReadPin>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d124      	bne.n	80027f6 <Long_Pressed_Button+0x14e>
 80027ac:	4b5d      	ldr	r3, [pc, #372]	; (8002924 <Long_Pressed_Button+0x27c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d0d4      	beq.n	800275e <Long_Pressed_Button+0xb6>
		}
	}
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 80027b4:	e01f      	b.n	80027f6 <Long_Pressed_Button+0x14e>
	{
		Delay_Ms(150);
 80027b6:	2096      	movs	r0, #150	; 0x96
 80027b8:	f7ff fb84 	bl	8001ec4 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 80027bc:	2104      	movs	r1, #4
 80027be:	4858      	ldr	r0, [pc, #352]	; (8002920 <Long_Pressed_Button+0x278>)
 80027c0:	f001 f854 	bl	800386c <HAL_GPIO_ReadPin>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d115      	bne.n	80027f6 <Long_Pressed_Button+0x14e>
 80027ca:	4b56      	ldr	r3, [pc, #344]	; (8002924 <Long_Pressed_Button+0x27c>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d111      	bne.n	80027f6 <Long_Pressed_Button+0x14e>
		{
			temp_setpoint[1] = temp_setpoint[1] + 0.1;
 80027d2:	4b55      	ldr	r3, [pc, #340]	; (8002928 <Long_Pressed_Button+0x280>)
 80027d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80027d8:	a34f      	add	r3, pc, #316	; (adr r3, 8002918 <Long_Pressed_Button+0x270>)
 80027da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027de:	f7fd fccf 	bl	8000180 <__adddf3>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4950      	ldr	r1, [pc, #320]	; (8002928 <Long_Pressed_Button+0x280>)
 80027e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Lcd_Sytem_State_Print(mode);
 80027ec:	4b4d      	ldr	r3, [pc, #308]	; (8002924 <Long_Pressed_Button+0x27c>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fcc1 	bl	8002178 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 80027f6:	2104      	movs	r1, #4
 80027f8:	4849      	ldr	r0, [pc, #292]	; (8002920 <Long_Pressed_Button+0x278>)
 80027fa:	f001 f837 	bl	800386c <HAL_GPIO_ReadPin>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d124      	bne.n	800284e <Long_Pressed_Button+0x1a6>
 8002804:	4b47      	ldr	r3, [pc, #284]	; (8002924 <Long_Pressed_Button+0x27c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d0d4      	beq.n	80027b6 <Long_Pressed_Button+0x10e>
		}

	}

	// Humidity set point increase/decrease when the button is pressed a long time
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 800280c:	e01f      	b.n	800284e <Long_Pressed_Button+0x1a6>
	{
		Delay_Ms(150);
 800280e:	2096      	movs	r0, #150	; 0x96
 8002810:	f7ff fb58 	bl	8001ec4 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 8002814:	2108      	movs	r1, #8
 8002816:	4842      	ldr	r0, [pc, #264]	; (8002920 <Long_Pressed_Button+0x278>)
 8002818:	f001 f828 	bl	800386c <HAL_GPIO_ReadPin>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d115      	bne.n	800284e <Long_Pressed_Button+0x1a6>
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <Long_Pressed_Button+0x27c>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d111      	bne.n	800284e <Long_Pressed_Button+0x1a6>
		{
			humid_setpoint[0] = humid_setpoint[0] - 0.1;
 800282a:	4b40      	ldr	r3, [pc, #256]	; (800292c <Long_Pressed_Button+0x284>)
 800282c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002830:	a339      	add	r3, pc, #228	; (adr r3, 8002918 <Long_Pressed_Button+0x270>)
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f7fd fca1 	bl	800017c <__aeabi_dsub>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	493b      	ldr	r1, [pc, #236]	; (800292c <Long_Pressed_Button+0x284>)
 8002840:	e9c1 2300 	strd	r2, r3, [r1]
			Lcd_Sytem_State_Print(mode);
 8002844:	4b37      	ldr	r3, [pc, #220]	; (8002924 <Long_Pressed_Button+0x27c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fc95 	bl	8002178 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 800284e:	2108      	movs	r1, #8
 8002850:	4833      	ldr	r0, [pc, #204]	; (8002920 <Long_Pressed_Button+0x278>)
 8002852:	f001 f80b 	bl	800386c <HAL_GPIO_ReadPin>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d124      	bne.n	80028a6 <Long_Pressed_Button+0x1fe>
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <Long_Pressed_Button+0x27c>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d0d4      	beq.n	800280e <Long_Pressed_Button+0x166>
		}
	}
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 8002864:	e01f      	b.n	80028a6 <Long_Pressed_Button+0x1fe>
	{
		Delay_Ms(150);
 8002866:	2096      	movs	r0, #150	; 0x96
 8002868:	f7ff fb2c 	bl	8001ec4 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 800286c:	2104      	movs	r1, #4
 800286e:	482c      	ldr	r0, [pc, #176]	; (8002920 <Long_Pressed_Button+0x278>)
 8002870:	f000 fffc 	bl	800386c <HAL_GPIO_ReadPin>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d115      	bne.n	80028a6 <Long_Pressed_Button+0x1fe>
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <Long_Pressed_Button+0x27c>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d111      	bne.n	80028a6 <Long_Pressed_Button+0x1fe>
		{
			humid_setpoint[0] = humid_setpoint[0] + 0.1;
 8002882:	4b2a      	ldr	r3, [pc, #168]	; (800292c <Long_Pressed_Button+0x284>)
 8002884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002888:	a323      	add	r3, pc, #140	; (adr r3, 8002918 <Long_Pressed_Button+0x270>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	f7fd fc77 	bl	8000180 <__adddf3>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4925      	ldr	r1, [pc, #148]	; (800292c <Long_Pressed_Button+0x284>)
 8002898:	e9c1 2300 	strd	r2, r3, [r1]
			Lcd_Sytem_State_Print(mode);
 800289c:	4b21      	ldr	r3, [pc, #132]	; (8002924 <Long_Pressed_Button+0x27c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fc69 	bl	8002178 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 80028a6:	2104      	movs	r1, #4
 80028a8:	481d      	ldr	r0, [pc, #116]	; (8002920 <Long_Pressed_Button+0x278>)
 80028aa:	f000 ffdf 	bl	800386c <HAL_GPIO_ReadPin>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d124      	bne.n	80028fe <Long_Pressed_Button+0x256>
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <Long_Pressed_Button+0x27c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d0d4      	beq.n	8002866 <Long_Pressed_Button+0x1be>
		}
	}
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 80028bc:	e01f      	b.n	80028fe <Long_Pressed_Button+0x256>
	{
		Delay_Ms(150);
 80028be:	2096      	movs	r0, #150	; 0x96
 80028c0:	f7ff fb00 	bl	8001ec4 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 80028c4:	2108      	movs	r1, #8
 80028c6:	4816      	ldr	r0, [pc, #88]	; (8002920 <Long_Pressed_Button+0x278>)
 80028c8:	f000 ffd0 	bl	800386c <HAL_GPIO_ReadPin>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d115      	bne.n	80028fe <Long_Pressed_Button+0x256>
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <Long_Pressed_Button+0x27c>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d111      	bne.n	80028fe <Long_Pressed_Button+0x256>
		{
			humid_setpoint[1] = humid_setpoint[1] - 0.1;
 80028da:	4b14      	ldr	r3, [pc, #80]	; (800292c <Long_Pressed_Button+0x284>)
 80028dc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80028e0:	a30d      	add	r3, pc, #52	; (adr r3, 8002918 <Long_Pressed_Button+0x270>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	f7fd fc49 	bl	800017c <__aeabi_dsub>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	490f      	ldr	r1, [pc, #60]	; (800292c <Long_Pressed_Button+0x284>)
 80028f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Lcd_Sytem_State_Print(mode);
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <Long_Pressed_Button+0x27c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fc3d 	bl	8002178 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 80028fe:	2108      	movs	r1, #8
 8002900:	4807      	ldr	r0, [pc, #28]	; (8002920 <Long_Pressed_Button+0x278>)
 8002902:	f000 ffb3 	bl	800386c <HAL_GPIO_ReadPin>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d131      	bne.n	8002970 <Long_Pressed_Button+0x2c8>
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <Long_Pressed_Button+0x27c>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d0d4      	beq.n	80028be <Long_Pressed_Button+0x216>
		}
	}
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 8002914:	e02c      	b.n	8002970 <Long_Pressed_Button+0x2c8>
 8002916:	bf00      	nop
 8002918:	9999999a 	.word	0x9999999a
 800291c:	3fb99999 	.word	0x3fb99999
 8002920:	40010800 	.word	0x40010800
 8002924:	2000049c 	.word	0x2000049c
 8002928:	20000008 	.word	0x20000008
 800292c:	20000018 	.word	0x20000018
	{
		Delay_Ms(150);
 8002930:	2096      	movs	r0, #150	; 0x96
 8002932:	f7ff fac7 	bl	8001ec4 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 8002936:	2104      	movs	r1, #4
 8002938:	4817      	ldr	r0, [pc, #92]	; (8002998 <Long_Pressed_Button+0x2f0>)
 800293a:	f000 ff97 	bl	800386c <HAL_GPIO_ReadPin>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d115      	bne.n	8002970 <Long_Pressed_Button+0x2c8>
 8002944:	4b15      	ldr	r3, [pc, #84]	; (800299c <Long_Pressed_Button+0x2f4>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b04      	cmp	r3, #4
 800294a:	d111      	bne.n	8002970 <Long_Pressed_Button+0x2c8>
		{
			humid_setpoint[1] = humid_setpoint[1] + 0.1;
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <Long_Pressed_Button+0x2f8>)
 800294e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002952:	a30f      	add	r3, pc, #60	; (adr r3, 8002990 <Long_Pressed_Button+0x2e8>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f7fd fc12 	bl	8000180 <__adddf3>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	490f      	ldr	r1, [pc, #60]	; (80029a0 <Long_Pressed_Button+0x2f8>)
 8002962:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Lcd_Sytem_State_Print(mode);
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <Long_Pressed_Button+0x2f4>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fc04 	bl	8002178 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 8002970:	2104      	movs	r1, #4
 8002972:	4809      	ldr	r0, [pc, #36]	; (8002998 <Long_Pressed_Button+0x2f0>)
 8002974:	f000 ff7a 	bl	800386c <HAL_GPIO_ReadPin>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <Long_Pressed_Button+0x2de>
 800297e:	4b07      	ldr	r3, [pc, #28]	; (800299c <Long_Pressed_Button+0x2f4>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b04      	cmp	r3, #4
 8002984:	d0d4      	beq.n	8002930 <Long_Pressed_Button+0x288>
		}
	}
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	f3af 8000 	nop.w
 8002990:	9999999a 	.word	0x9999999a
 8002994:	3fb99999 	.word	0x3fb99999
 8002998:	40010800 	.word	0x40010800
 800299c:	2000049c 	.word	0x2000049c
 80029a0:	20000018 	.word	0x20000018

080029a4 <Alarm_Check>:

// Alarm checking
void Alarm_Check(double temp, double humid)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80029ae:	e9c7 2300 	strd	r2, r3, [r7]
	// Check if the alarm is turned ON
	if(!HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin))
 80029b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029b6:	4843      	ldr	r0, [pc, #268]	; (8002ac4 <Alarm_Check+0x120>)
 80029b8:	f000 ff58 	bl	800386c <HAL_GPIO_ReadPin>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d17c      	bne.n	8002abc <Alarm_Check+0x118>
	{
		// Check the temperature value
		if(temp > temp_setpoint[1])
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <Alarm_Check+0x124>)
 80029c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029cc:	f7fe f81e 	bl	8000a0c <__aeabi_dcmpgt>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d014      	beq.n	8002a00 <Alarm_Check+0x5c>
		{
			// The temperature is too HIGH
			Buzzer_Trigger();
 80029d6:	f7ff fa8d 	bl	8001ef4 <Buzzer_Trigger>
			lcd_clear();
 80029da:	f7fe faf7 	bl	8000fcc <lcd_clear>
			lcd_put_cursor(0, 4);
 80029de:	2104      	movs	r1, #4
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7fe fb0a 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Too high");
 80029e6:	4839      	ldr	r0, [pc, #228]	; (8002acc <Alarm_Check+0x128>)
 80029e8:	f7fe fadb 	bl	8000fa2 <lcd_send_string>
			lcd_put_cursor(1, 2);
 80029ec:	2102      	movs	r1, #2
 80029ee:	2001      	movs	r0, #1
 80029f0:	f7fe fb03 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Temperature");
 80029f4:	4836      	ldr	r0, [pc, #216]	; (8002ad0 <Alarm_Check+0x12c>)
 80029f6:	f7fe fad4 	bl	8000fa2 <lcd_send_string>
			Delay_Ms(200);
 80029fa:	20c8      	movs	r0, #200	; 0xc8
 80029fc:	f7ff fa62 	bl	8001ec4 <Delay_Ms>
		}
		if(temp < temp_setpoint[0])
 8002a00:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <Alarm_Check+0x124>)
 8002a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a0a:	f7fd ffe1 	bl	80009d0 <__aeabi_dcmplt>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d014      	beq.n	8002a3e <Alarm_Check+0x9a>
		{
			// The temperature is too LOW
			Buzzer_Trigger();
 8002a14:	f7ff fa6e 	bl	8001ef4 <Buzzer_Trigger>
			lcd_clear();
 8002a18:	f7fe fad8 	bl	8000fcc <lcd_clear>
			lcd_put_cursor(0, 4);
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fe faeb 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Too low");
 8002a24:	482b      	ldr	r0, [pc, #172]	; (8002ad4 <Alarm_Check+0x130>)
 8002a26:	f7fe fabc 	bl	8000fa2 <lcd_send_string>
			lcd_put_cursor(1, 2);
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	f7fe fae4 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Temperature");
 8002a32:	4827      	ldr	r0, [pc, #156]	; (8002ad0 <Alarm_Check+0x12c>)
 8002a34:	f7fe fab5 	bl	8000fa2 <lcd_send_string>
			Delay_Ms(200);
 8002a38:	20c8      	movs	r0, #200	; 0xc8
 8002a3a:	f7ff fa43 	bl	8001ec4 <Delay_Ms>
		}

		// Check the humidity value
		if(humid > humid_setpoint[1])
 8002a3e:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <Alarm_Check+0x134>)
 8002a40:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a48:	f7fd ffe0 	bl	8000a0c <__aeabi_dcmpgt>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d014      	beq.n	8002a7c <Alarm_Check+0xd8>
		{
			// The humidity is too HIGH
			Buzzer_Trigger();
 8002a52:	f7ff fa4f 	bl	8001ef4 <Buzzer_Trigger>
			lcd_clear();
 8002a56:	f7fe fab9 	bl	8000fcc <lcd_clear>
			lcd_put_cursor(0, 4);
 8002a5a:	2104      	movs	r1, #4
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fe facc 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Too high");
 8002a62:	481a      	ldr	r0, [pc, #104]	; (8002acc <Alarm_Check+0x128>)
 8002a64:	f7fe fa9d 	bl	8000fa2 <lcd_send_string>
			lcd_put_cursor(1, 4);
 8002a68:	2104      	movs	r1, #4
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f7fe fac5 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Humidity");
 8002a70:	481a      	ldr	r0, [pc, #104]	; (8002adc <Alarm_Check+0x138>)
 8002a72:	f7fe fa96 	bl	8000fa2 <lcd_send_string>
			Delay_Ms(200);
 8002a76:	20c8      	movs	r0, #200	; 0xc8
 8002a78:	f7ff fa24 	bl	8001ec4 <Delay_Ms>
		}
		if(humid < humid_setpoint[0])
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <Alarm_Check+0x134>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a86:	f7fd ffa3 	bl	80009d0 <__aeabi_dcmplt>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d100      	bne.n	8002a92 <Alarm_Check+0xee>
			lcd_put_cursor(1, 4);
			lcd_send_string("Humidity");
			Delay_Ms(200);
		}
	}
}
 8002a90:	e014      	b.n	8002abc <Alarm_Check+0x118>
			Buzzer_Trigger();
 8002a92:	f7ff fa2f 	bl	8001ef4 <Buzzer_Trigger>
			lcd_clear();
 8002a96:	f7fe fa99 	bl	8000fcc <lcd_clear>
			lcd_put_cursor(0, 4);
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fe faac 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Too low");
 8002aa2:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <Alarm_Check+0x130>)
 8002aa4:	f7fe fa7d 	bl	8000fa2 <lcd_send_string>
			lcd_put_cursor(1, 4);
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f7fe faa5 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Humidity");
 8002ab0:	480a      	ldr	r0, [pc, #40]	; (8002adc <Alarm_Check+0x138>)
 8002ab2:	f7fe fa76 	bl	8000fa2 <lcd_send_string>
			Delay_Ms(200);
 8002ab6:	20c8      	movs	r0, #200	; 0xc8
 8002ab8:	f7ff fa04 	bl	8001ec4 <Delay_Ms>
}
 8002abc:	bf00      	nop
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40011000 	.word	0x40011000
 8002ac8:	20000008 	.word	0x20000008
 8002acc:	0800b210 	.word	0x0800b210
 8002ad0:	0800b21c 	.word	0x0800b21c
 8002ad4:	0800b228 	.word	0x0800b228
 8002ad8:	20000018 	.word	0x20000018
 8002adc:	0800b230 	.word	0x0800b230

08002ae0 <LoRa_Receive_Handle>:

// LoRa receive data handle
void LoRa_Receive_Handle()
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08c      	sub	sp, #48	; 0x30
 8002ae4:	af00      	add	r7, sp, #0
	char *rcvSrcId;		// pointer to source ID
	char *rcvDesId;		// pointer to destination ID
	char *cmdType;			// pointer to received message

	rcvSrcId = strtok(received_data, ",");            	// return the pointer to the source_id
 8002ae6:	4954      	ldr	r1, [pc, #336]	; (8002c38 <LoRa_Receive_Handle+0x158>)
 8002ae8:	4854      	ldr	r0, [pc, #336]	; (8002c3c <LoRa_Receive_Handle+0x15c>)
 8002aea:	f004 fa67 	bl	8006fbc <strtok>
 8002aee:	62f8      	str	r0, [r7, #44]	; 0x2c
	rcvDesId = strtok(NULL, ",");                     	// continue to return the pointer to the destination_id
 8002af0:	4951      	ldr	r1, [pc, #324]	; (8002c38 <LoRa_Receive_Handle+0x158>)
 8002af2:	2000      	movs	r0, #0
 8002af4:	f004 fa62 	bl	8006fbc <strtok>
 8002af8:	62b8      	str	r0, [r7, #40]	; 0x28
	cmdType = strtok(NULL, ","); 						// continue to return the pointer to the received command type
 8002afa:	494f      	ldr	r1, [pc, #316]	; (8002c38 <LoRa_Receive_Handle+0x158>)
 8002afc:	2000      	movs	r0, #0
 8002afe:	f004 fa5d 	bl	8006fbc <strtok>
 8002b02:	6278      	str	r0, [r7, #36]	; 0x24

	// Check if the destination ID is correct
	if(!strcmp(rcvDesId, srcId))
 8002b04:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <LoRa_Receive_Handle+0x160>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b0c:	f7fd fb20 	bl	8000150 <strcmp>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 808b 	bne.w	8002c2e <LoRa_Receive_Handle+0x14e>
	{
		if (!strcmp(cmdType,"1"))
 8002b18:	494a      	ldr	r1, [pc, #296]	; (8002c44 <LoRa_Receive_Handle+0x164>)
 8002b1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b1c:	f7fd fb18 	bl	8000150 <strcmp>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d12c      	bne.n	8002b80 <LoRa_Receive_Handle+0xa0>
		{
			char *status; // pointer to the received buzzer status
			status = strtok(NULL, ","); // continue to return the pointer to the received buzzer status
 8002b26:	4944      	ldr	r1, [pc, #272]	; (8002c38 <LoRa_Receive_Handle+0x158>)
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f004 fa47 	bl	8006fbc <strtok>
 8002b2e:	6138      	str	r0, [r7, #16]
			if (!strcmp(status, "ON"))
 8002b30:	4945      	ldr	r1, [pc, #276]	; (8002c48 <LoRa_Receive_Handle+0x168>)
 8002b32:	6938      	ldr	r0, [r7, #16]
 8002b34:	f7fd fb0c 	bl	8000150 <strcmp>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10c      	bne.n	8002b58 <LoRa_Receive_Handle+0x78>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b44:	4841      	ldr	r0, [pc, #260]	; (8002c4c <LoRa_Receive_Handle+0x16c>)
 8002b46:	f000 fea8 	bl	800389a <HAL_GPIO_WritePin>
				cmdStatus = 1;
 8002b4a:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <LoRa_Receive_Handle+0x170>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
				alarmStatus = 1;
 8002b50:	4b40      	ldr	r3, [pc, #256]	; (8002c54 <LoRa_Receive_Handle+0x174>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
			sscanf(humidHighest, "%lf", &d);
			humid_setpoint[1] = d;
			cmdStatus = 1;
		}
	}
}
 8002b56:	e06a      	b.n	8002c2e <LoRa_Receive_Handle+0x14e>
			else if (!strcmp(status, "OFF"))
 8002b58:	493f      	ldr	r1, [pc, #252]	; (8002c58 <LoRa_Receive_Handle+0x178>)
 8002b5a:	6938      	ldr	r0, [r7, #16]
 8002b5c:	f7fd faf8 	bl	8000150 <strcmp>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d163      	bne.n	8002c2e <LoRa_Receive_Handle+0x14e>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002b66:	2201      	movs	r2, #1
 8002b68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b6c:	4837      	ldr	r0, [pc, #220]	; (8002c4c <LoRa_Receive_Handle+0x16c>)
 8002b6e:	f000 fe94 	bl	800389a <HAL_GPIO_WritePin>
				cmdStatus = 1;
 8002b72:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <LoRa_Receive_Handle+0x170>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
				alarmStatus = 0;
 8002b78:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <LoRa_Receive_Handle+0x174>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
}
 8002b7e:	e056      	b.n	8002c2e <LoRa_Receive_Handle+0x14e>
		else if (!strcmp(cmdType, "2"))
 8002b80:	4936      	ldr	r1, [pc, #216]	; (8002c5c <LoRa_Receive_Handle+0x17c>)
 8002b82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b84:	f7fd fae4 	bl	8000150 <strcmp>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d125      	bne.n	8002bda <LoRa_Receive_Handle+0xfa>
			tempLowest = strtok(NULL, ","); // continue to return the pointer to the received lowest temperature level
 8002b8e:	492a      	ldr	r1, [pc, #168]	; (8002c38 <LoRa_Receive_Handle+0x158>)
 8002b90:	2000      	movs	r0, #0
 8002b92:	f004 fa13 	bl	8006fbc <strtok>
 8002b96:	61b8      	str	r0, [r7, #24]
			tempHighest = strtok(NULL, ","); // continue to return the pointer to the received highest temperature level
 8002b98:	4927      	ldr	r1, [pc, #156]	; (8002c38 <LoRa_Receive_Handle+0x158>)
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f004 fa0e 	bl	8006fbc <strtok>
 8002ba0:	6178      	str	r0, [r7, #20]
			sscanf(tempLowest, "%lf", &d);
 8002ba2:	f107 0308 	add.w	r3, r7, #8
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	492d      	ldr	r1, [pc, #180]	; (8002c60 <LoRa_Receive_Handle+0x180>)
 8002baa:	69b8      	ldr	r0, [r7, #24]
 8002bac:	f004 f98e 	bl	8006ecc <siscanf>
			temp_setpoint[0] = d;
 8002bb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bb4:	492b      	ldr	r1, [pc, #172]	; (8002c64 <LoRa_Receive_Handle+0x184>)
 8002bb6:	e9c1 2300 	strd	r2, r3, [r1]
			sscanf(tempHighest, "%lf", &d);
 8002bba:	f107 0308 	add.w	r3, r7, #8
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4927      	ldr	r1, [pc, #156]	; (8002c60 <LoRa_Receive_Handle+0x180>)
 8002bc2:	6978      	ldr	r0, [r7, #20]
 8002bc4:	f004 f982 	bl	8006ecc <siscanf>
			temp_setpoint[1] = d;
 8002bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bcc:	4925      	ldr	r1, [pc, #148]	; (8002c64 <LoRa_Receive_Handle+0x184>)
 8002bce:	e9c1 2302 	strd	r2, r3, [r1, #8]
			cmdStatus = 1;
 8002bd2:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <LoRa_Receive_Handle+0x170>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
}
 8002bd8:	e029      	b.n	8002c2e <LoRa_Receive_Handle+0x14e>
		else if (!strcmp(cmdType, "3"))
 8002bda:	4923      	ldr	r1, [pc, #140]	; (8002c68 <LoRa_Receive_Handle+0x188>)
 8002bdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bde:	f7fd fab7 	bl	8000150 <strcmp>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d122      	bne.n	8002c2e <LoRa_Receive_Handle+0x14e>
			humidLowest = strtok(NULL, ","); // continue to return the pointer to the received lowest humidity level
 8002be8:	4913      	ldr	r1, [pc, #76]	; (8002c38 <LoRa_Receive_Handle+0x158>)
 8002bea:	2000      	movs	r0, #0
 8002bec:	f004 f9e6 	bl	8006fbc <strtok>
 8002bf0:	6238      	str	r0, [r7, #32]
			humidHighest = strtok(NULL, ","); // continue to return the pointer to the received highest humdity level
 8002bf2:	4911      	ldr	r1, [pc, #68]	; (8002c38 <LoRa_Receive_Handle+0x158>)
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f004 f9e1 	bl	8006fbc <strtok>
 8002bfa:	61f8      	str	r0, [r7, #28]
			sscanf(humidLowest, "%lf", &d);
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4917      	ldr	r1, [pc, #92]	; (8002c60 <LoRa_Receive_Handle+0x180>)
 8002c02:	6a38      	ldr	r0, [r7, #32]
 8002c04:	f004 f962 	bl	8006ecc <siscanf>
			humid_setpoint[0] = d;
 8002c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c0c:	4917      	ldr	r1, [pc, #92]	; (8002c6c <LoRa_Receive_Handle+0x18c>)
 8002c0e:	e9c1 2300 	strd	r2, r3, [r1]
			sscanf(humidHighest, "%lf", &d);
 8002c12:	463b      	mov	r3, r7
 8002c14:	461a      	mov	r2, r3
 8002c16:	4912      	ldr	r1, [pc, #72]	; (8002c60 <LoRa_Receive_Handle+0x180>)
 8002c18:	69f8      	ldr	r0, [r7, #28]
 8002c1a:	f004 f957 	bl	8006ecc <siscanf>
			humid_setpoint[1] = d;
 8002c1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c22:	4912      	ldr	r1, [pc, #72]	; (8002c6c <LoRa_Receive_Handle+0x18c>)
 8002c24:	e9c1 2302 	strd	r2, r3, [r1, #8]
			cmdStatus = 1;
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <LoRa_Receive_Handle+0x170>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
}
 8002c2e:	bf00      	nop
 8002c30:	3730      	adds	r7, #48	; 0x30
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	0800b23c 	.word	0x0800b23c
 8002c3c:	20000478 	.word	0x20000478
 8002c40:	20000000 	.word	0x20000000
 8002c44:	0800b240 	.word	0x0800b240
 8002c48:	0800b244 	.word	0x0800b244
 8002c4c:	40011000 	.word	0x40011000
 8002c50:	200004b4 	.word	0x200004b4
 8002c54:	200004b8 	.word	0x200004b8
 8002c58:	0800b248 	.word	0x0800b248
 8002c5c:	0800b24c 	.word	0x0800b24c
 8002c60:	0800b250 	.word	0x0800b250
 8002c64:	20000008 	.word	0x20000008
 8002c68:	0800b254 	.word	0x0800b254
 8002c6c:	20000018 	.word	0x20000018

08002c70 <HAL_TIM_PeriodElapsedCallback>:

// Timer 4 callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d106      	bne.n	8002c8e <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		/* LoRa receiving */
		LoRa_receive(&myLoRa, (uint8_t*) received_data, 20);
 8002c80:	2214      	movs	r2, #20
 8002c82:	4906      	ldr	r1, [pc, #24]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002c84:	4806      	ldr	r0, [pc, #24]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002c86:	f7fe fc94 	bl	80015b2 <LoRa_receive>
		LoRa_Receive_Handle();
 8002c8a:	f7ff ff29 	bl	8002ae0 <LoRa_Receive_Handle>
	}
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000358 	.word	0x20000358
 8002c9c:	20000478 	.word	0x20000478
 8002ca0:	200003e8 	.word	0x200003e8

08002ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca8:	b672      	cpsid	i
}
 8002caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cac:	e7fe      	b.n	8002cac <Error_Handler+0x8>
	...

08002cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <HAL_MspInit+0x40>)
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	4a0d      	ldr	r2, [pc, #52]	; (8002cf0 <HAL_MspInit+0x40>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6193      	str	r3, [r2, #24]
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_MspInit+0x40>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_MspInit+0x40>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <HAL_MspInit+0x40>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	61d3      	str	r3, [r2, #28]
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_MspInit+0x40>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 0310 	add.w	r3, r7, #16
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <HAL_I2C_MspInit+0x70>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d123      	bne.n	8002d5c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <HAL_I2C_MspInit+0x74>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <HAL_I2C_MspInit+0x74>)
 8002d1a:	f043 0308 	orr.w	r3, r3, #8
 8002d1e:	6193      	str	r3, [r2, #24]
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_I2C_MspInit+0x74>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d2c:	23c0      	movs	r3, #192	; 0xc0
 8002d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d30:	2312      	movs	r3, #18
 8002d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d38:	f107 0310 	add.w	r3, r7, #16
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	480b      	ldr	r0, [pc, #44]	; (8002d6c <HAL_I2C_MspInit+0x78>)
 8002d40:	f000 fc10 	bl	8003564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_I2C_MspInit+0x74>)
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_I2C_MspInit+0x74>)
 8002d4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d4e:	61d3      	str	r3, [r2, #28]
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_I2C_MspInit+0x74>)
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d5c:	bf00      	nop
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40005400 	.word	0x40005400
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40010c00 	.word	0x40010c00

08002d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 0310 	add.w	r3, r7, #16
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d131      	bne.n	8002df4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_SPI_MspInit+0x90>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	4a1a      	ldr	r2, [pc, #104]	; (8002e00 <HAL_SPI_MspInit+0x90>)
 8002d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d9a:	61d3      	str	r3, [r2, #28]
 8002d9c:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <HAL_SPI_MspInit+0x90>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da8:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_SPI_MspInit+0x90>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <HAL_SPI_MspInit+0x90>)
 8002dae:	f043 0308 	orr.w	r3, r3, #8
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_SPI_MspInit+0x90>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002dc0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002dc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dce:	f107 0310 	add.w	r3, r7, #16
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	480b      	ldr	r0, [pc, #44]	; (8002e04 <HAL_SPI_MspInit+0x94>)
 8002dd6:	f000 fbc5 	bl	8003564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002dda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de8:	f107 0310 	add.w	r3, r7, #16
 8002dec:	4619      	mov	r1, r3
 8002dee:	4805      	ldr	r0, [pc, #20]	; (8002e04 <HAL_SPI_MspInit+0x94>)
 8002df0:	f000 fbb8 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002df4:	bf00      	nop
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40003800 	.word	0x40003800
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40010c00 	.word	0x40010c00

08002e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d10c      	bne.n	8002e34 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <HAL_TIM_Base_MspInit+0x8c>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <HAL_TIM_Base_MspInit+0x8c>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	61d3      	str	r3, [r2, #28]
 8002e26:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_TIM_Base_MspInit+0x8c>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e32:	e02a      	b.n	8002e8a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <HAL_TIM_Base_MspInit+0x90>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10c      	bne.n	8002e58 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_TIM_Base_MspInit+0x8c>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <HAL_TIM_Base_MspInit+0x8c>)
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	61d3      	str	r3, [r2, #28]
 8002e4a:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_TIM_Base_MspInit+0x8c>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
}
 8002e56:	e018      	b.n	8002e8a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0f      	ldr	r2, [pc, #60]	; (8002e9c <HAL_TIM_Base_MspInit+0x94>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d113      	bne.n	8002e8a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_TIM_Base_MspInit+0x8c>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <HAL_TIM_Base_MspInit+0x8c>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	61d3      	str	r3, [r2, #28]
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_TIM_Base_MspInit+0x8c>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	210f      	movs	r1, #15
 8002e7e:	201e      	movs	r0, #30
 8002e80:	f000 fb39 	bl	80034f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e84:	201e      	movs	r0, #30
 8002e86:	f000 fb52 	bl	800352e <HAL_NVIC_EnableIRQ>
}
 8002e8a:	bf00      	nop
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	40000800 	.word	0x40000800

08002ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	f107 0310 	add.w	r3, r7, #16
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_UART_MspInit+0x8c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d131      	bne.n	8002f24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_UART_MspInit+0x90>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	4a1a      	ldr	r2, [pc, #104]	; (8002f30 <HAL_UART_MspInit+0x90>)
 8002ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eca:	6193      	str	r3, [r2, #24]
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_UART_MspInit+0x90>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed8:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_UART_MspInit+0x90>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <HAL_UART_MspInit+0x90>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	6193      	str	r3, [r2, #24]
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_UART_MspInit+0x90>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ef4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efe:	f107 0310 	add.w	r3, r7, #16
 8002f02:	4619      	mov	r1, r3
 8002f04:	480b      	ldr	r0, [pc, #44]	; (8002f34 <HAL_UART_MspInit+0x94>)
 8002f06:	f000 fb2d 	bl	8003564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f18:	f107 0310 	add.w	r3, r7, #16
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4805      	ldr	r0, [pc, #20]	; (8002f34 <HAL_UART_MspInit+0x94>)
 8002f20:	f000 fb20 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f24:	bf00      	nop
 8002f26:	3720      	adds	r7, #32
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40010800 	.word	0x40010800

08002f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f3c:	e7fe      	b.n	8002f3c <NMI_Handler+0x4>

08002f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f42:	e7fe      	b.n	8002f42 <HardFault_Handler+0x4>

08002f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f48:	e7fe      	b.n	8002f48 <MemManage_Handler+0x4>

08002f4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f4e:	e7fe      	b.n	8002f4e <BusFault_Handler+0x4>

08002f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f54:	e7fe      	b.n	8002f54 <UsageFault_Handler+0x4>

08002f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr

08002f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr

08002f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f7e:	f000 f9a3 	bl	80032c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	Delay_Us(65000);
 8002f8a:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002f8e:	f7fe ff81 	bl	8001e94 <Delay_Us>
	Delay_Us(65000);
 8002f92:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002f96:	f7fe ff7d 	bl	8001e94 <Delay_Us>
	Delay_Us(65000);
 8002f9a:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002f9e:	f7fe ff79 	bl	8001e94 <Delay_Us>
	Delay_Us(65000);
 8002fa2:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002fa6:	f7fe ff75 	bl	8001e94 <Delay_Us>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUZZER_BUTTON_Pin);
 8002faa:	2002      	movs	r0, #2
 8002fac:	f000 fca6 	bl	80038fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	Delay_Us(65000);
 8002fb8:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002fbc:	f7fe ff6a 	bl	8001e94 <Delay_Us>
	Delay_Us(65000);
 8002fc0:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002fc4:	f7fe ff66 	bl	8001e94 <Delay_Us>
	Delay_Us(65000);
 8002fc8:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002fcc:	f7fe ff62 	bl	8001e94 <Delay_Us>
	Delay_Us(65000);
 8002fd0:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002fd4:	f7fe ff5e 	bl	8001e94 <Delay_Us>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INC_BUTTON_Pin);
 8002fd8:	2004      	movs	r0, #4
 8002fda:	f000 fc8f 	bl	80038fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	Delay_Us(65000);
 8002fe6:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002fea:	f7fe ff53 	bl	8001e94 <Delay_Us>
	Delay_Us(65000);
 8002fee:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002ff2:	f7fe ff4f 	bl	8001e94 <Delay_Us>
	Delay_Us(65000);
 8002ff6:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8002ffa:	f7fe ff4b 	bl	8001e94 <Delay_Us>
	Delay_Us(65000);
 8002ffe:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8003002:	f7fe ff47 	bl	8001e94 <Delay_Us>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DES_BUTTON_Pin);
 8003006:	2008      	movs	r0, #8
 8003008:	f000 fc78 	bl	80038fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}

08003010 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	Delay_Us(65000);
 8003014:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8003018:	f7fe ff3c 	bl	8001e94 <Delay_Us>
	Delay_Us(65000);
 800301c:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8003020:	f7fe ff38 	bl	8001e94 <Delay_Us>
	Delay_Us(65000);
 8003024:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8003028:	f7fe ff34 	bl	8001e94 <Delay_Us>
	Delay_Us(65000);
 800302c:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8003030:	f7fe ff30 	bl	8001e94 <Delay_Us>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_BUTTON_Pin);
 8003034:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003038:	f000 fc60 	bl	80038fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}

08003040 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <TIM4_IRQHandler+0x10>)
 8003046:	f002 fbcb 	bl	80057e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000358 	.word	0x20000358

08003054 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8003058:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800305c:	f000 fc4e 	bl	80038fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}

08003064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return 1;
 8003068:	2301      	movs	r3, #1
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <_kill>:

int _kill(int pid, int sig)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800307c:	f004 f844 	bl	8007108 <__errno>
 8003080:	4603      	mov	r3, r0
 8003082:	2216      	movs	r2, #22
 8003084:	601a      	str	r2, [r3, #0]
  return -1;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <_exit>:

void _exit (int status)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800309a:	f04f 31ff 	mov.w	r1, #4294967295
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ffe7 	bl	8003072 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030a4:	e7fe      	b.n	80030a4 <_exit+0x12>

080030a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	e00a      	b.n	80030ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030b8:	f3af 8000 	nop.w
 80030bc:	4601      	mov	r1, r0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	60ba      	str	r2, [r7, #8]
 80030c4:	b2ca      	uxtb	r2, r1
 80030c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3301      	adds	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	dbf0      	blt.n	80030b8 <_read+0x12>
  }

  return len;
 80030d6:	687b      	ldr	r3, [r7, #4]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	e009      	b.n	8003106 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	60ba      	str	r2, [r7, #8]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	3301      	adds	r3, #1
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	dbf1      	blt.n	80030f2 <_write+0x12>
  }
  return len;
 800310e:	687b      	ldr	r3, [r7, #4]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <_close>:

int _close(int file)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800313e:	605a      	str	r2, [r3, #4]
  return 0;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <_isatty>:

int _isatty(int file)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003154:	2301      	movs	r3, #1
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <_sbrk+0x5c>)
 8003182:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <_sbrk+0x60>)
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800318c:	4b13      	ldr	r3, [pc, #76]	; (80031dc <_sbrk+0x64>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <_sbrk+0x64>)
 8003196:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <_sbrk+0x68>)
 8003198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <_sbrk+0x64>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d207      	bcs.n	80031b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a8:	f003 ffae 	bl	8007108 <__errno>
 80031ac:	4603      	mov	r3, r0
 80031ae:	220c      	movs	r2, #12
 80031b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	e009      	b.n	80031cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b8:	4b08      	ldr	r3, [pc, #32]	; (80031dc <_sbrk+0x64>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031be:	4b07      	ldr	r3, [pc, #28]	; (80031dc <_sbrk+0x64>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	4a05      	ldr	r2, [pc, #20]	; (80031dc <_sbrk+0x64>)
 80031c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ca:	68fb      	ldr	r3, [r7, #12]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20005000 	.word	0x20005000
 80031d8:	00000400 	.word	0x00000400
 80031dc:	200004bc 	.word	0x200004bc
 80031e0:	20000610 	.word	0x20000610

080031e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031f0:	f7ff fff8 	bl	80031e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031f4:	480b      	ldr	r0, [pc, #44]	; (8003224 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80031f6:	490c      	ldr	r1, [pc, #48]	; (8003228 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80031f8:	4a0c      	ldr	r2, [pc, #48]	; (800322c <LoopFillZerobss+0x16>)
  movs r3, #0
 80031fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031fc:	e002      	b.n	8003204 <LoopCopyDataInit>

080031fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003202:	3304      	adds	r3, #4

08003204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003208:	d3f9      	bcc.n	80031fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800320a:	4a09      	ldr	r2, [pc, #36]	; (8003230 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800320c:	4c09      	ldr	r4, [pc, #36]	; (8003234 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003210:	e001      	b.n	8003216 <LoopFillZerobss>

08003212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003214:	3204      	adds	r2, #4

08003216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003218:	d3fb      	bcc.n	8003212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800321a:	f003 ff7b 	bl	8007114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800321e:	f7fe facd 	bl	80017bc <main>
  bx lr
 8003222:	4770      	bx	lr
  ldr r0, =_sdata
 8003224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003228:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800322c:	0800b738 	.word	0x0800b738
  ldr r2, =_sbss
 8003230:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003234:	20000610 	.word	0x20000610

08003238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003238:	e7fe      	b.n	8003238 <ADC1_2_IRQHandler>
	...

0800323c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_Init+0x28>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a07      	ldr	r2, [pc, #28]	; (8003264 <HAL_Init+0x28>)
 8003246:	f043 0310 	orr.w	r3, r3, #16
 800324a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800324c:	2003      	movs	r0, #3
 800324e:	f000 f947 	bl	80034e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003252:	200f      	movs	r0, #15
 8003254:	f000 f808 	bl	8003268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003258:	f7ff fd2a 	bl	8002cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40022000 	.word	0x40022000

08003268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_InitTick+0x54>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_InitTick+0x58>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	4619      	mov	r1, r3
 800327a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800327e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f95f 	bl	800354a <HAL_SYSTICK_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e00e      	b.n	80032b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b0f      	cmp	r3, #15
 800329a:	d80a      	bhi.n	80032b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800329c:	2200      	movs	r2, #0
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
 80032a4:	f000 f927 	bl	80034f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032a8:	4a06      	ldr	r2, [pc, #24]	; (80032c4 <HAL_InitTick+0x5c>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	e000      	b.n	80032b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000028 	.word	0x20000028
 80032c0:	20000030 	.word	0x20000030
 80032c4:	2000002c 	.word	0x2000002c

080032c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_IncTick+0x1c>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_IncTick+0x20>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4413      	add	r3, r2
 80032d8:	4a03      	ldr	r2, [pc, #12]	; (80032e8 <HAL_IncTick+0x20>)
 80032da:	6013      	str	r3, [r2, #0]
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr
 80032e4:	20000030 	.word	0x20000030
 80032e8:	200004c0 	.word	0x200004c0

080032ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b02      	ldr	r3, [pc, #8]	; (80032fc <HAL_GetTick+0x10>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	200004c0 	.word	0x200004c0

08003300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff fff0 	bl	80032ec <HAL_GetTick>
 800330c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d005      	beq.n	8003326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <HAL_Delay+0x44>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003326:	bf00      	nop
 8003328:	f7ff ffe0 	bl	80032ec <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	429a      	cmp	r2, r3
 8003336:	d8f7      	bhi.n	8003328 <HAL_Delay+0x28>
  {
  }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000030 	.word	0x20000030

08003348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003364:	4013      	ands	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337a:	4a04      	ldr	r2, [pc, #16]	; (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	60d3      	str	r3, [r2, #12]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0307 	and.w	r3, r3, #7
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	db0b      	blt.n	80033d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	f003 021f 	and.w	r2, r3, #31
 80033c4:	4906      	ldr	r1, [pc, #24]	; (80033e0 <__NVIC_EnableIRQ+0x34>)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2001      	movs	r0, #1
 80033ce:	fa00 f202 	lsl.w	r2, r0, r2
 80033d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	e000e100 	.word	0xe000e100

080033e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	db0a      	blt.n	800340e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	490c      	ldr	r1, [pc, #48]	; (8003430 <__NVIC_SetPriority+0x4c>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	440b      	add	r3, r1
 8003408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800340c:	e00a      	b.n	8003424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4908      	ldr	r1, [pc, #32]	; (8003434 <__NVIC_SetPriority+0x50>)
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	3b04      	subs	r3, #4
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	440b      	add	r3, r1
 8003422:	761a      	strb	r2, [r3, #24]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000e100 	.word	0xe000e100
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003438:	b480      	push	{r7}
 800343a:	b089      	sub	sp, #36	; 0x24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f1c3 0307 	rsb	r3, r3, #7
 8003452:	2b04      	cmp	r3, #4
 8003454:	bf28      	it	cs
 8003456:	2304      	movcs	r3, #4
 8003458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3304      	adds	r3, #4
 800345e:	2b06      	cmp	r3, #6
 8003460:	d902      	bls.n	8003468 <NVIC_EncodePriority+0x30>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3b03      	subs	r3, #3
 8003466:	e000      	b.n	800346a <NVIC_EncodePriority+0x32>
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	401a      	ands	r2, r3
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003480:	f04f 31ff 	mov.w	r1, #4294967295
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	43d9      	mvns	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	4313      	orrs	r3, r2
         );
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	; 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ac:	d301      	bcc.n	80034b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00f      	b.n	80034d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <SysTick_Config+0x40>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ba:	210f      	movs	r1, #15
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	f7ff ff90 	bl	80033e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <SysTick_Config+0x40>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ca:	4b04      	ldr	r3, [pc, #16]	; (80034dc <SysTick_Config+0x40>)
 80034cc:	2207      	movs	r2, #7
 80034ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	e000e010 	.word	0xe000e010

080034e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff2d 	bl	8003348 <__NVIC_SetPriorityGrouping>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003508:	f7ff ff42 	bl	8003390 <__NVIC_GetPriorityGrouping>
 800350c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	6978      	ldr	r0, [r7, #20]
 8003514:	f7ff ff90 	bl	8003438 <NVIC_EncodePriority>
 8003518:	4602      	mov	r2, r0
 800351a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff5f 	bl	80033e4 <__NVIC_SetPriority>
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff35 	bl	80033ac <__NVIC_EnableIRQ>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ffa2 	bl	800349c <SysTick_Config>
 8003558:	4603      	mov	r3, r0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003564:	b480      	push	{r7}
 8003566:	b08b      	sub	sp, #44	; 0x2c
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003576:	e169      	b.n	800384c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003578:	2201      	movs	r2, #1
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	429a      	cmp	r2, r3
 8003592:	f040 8158 	bne.w	8003846 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4a9a      	ldr	r2, [pc, #616]	; (8003804 <HAL_GPIO_Init+0x2a0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d05e      	beq.n	800365e <HAL_GPIO_Init+0xfa>
 80035a0:	4a98      	ldr	r2, [pc, #608]	; (8003804 <HAL_GPIO_Init+0x2a0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d875      	bhi.n	8003692 <HAL_GPIO_Init+0x12e>
 80035a6:	4a98      	ldr	r2, [pc, #608]	; (8003808 <HAL_GPIO_Init+0x2a4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d058      	beq.n	800365e <HAL_GPIO_Init+0xfa>
 80035ac:	4a96      	ldr	r2, [pc, #600]	; (8003808 <HAL_GPIO_Init+0x2a4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d86f      	bhi.n	8003692 <HAL_GPIO_Init+0x12e>
 80035b2:	4a96      	ldr	r2, [pc, #600]	; (800380c <HAL_GPIO_Init+0x2a8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d052      	beq.n	800365e <HAL_GPIO_Init+0xfa>
 80035b8:	4a94      	ldr	r2, [pc, #592]	; (800380c <HAL_GPIO_Init+0x2a8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d869      	bhi.n	8003692 <HAL_GPIO_Init+0x12e>
 80035be:	4a94      	ldr	r2, [pc, #592]	; (8003810 <HAL_GPIO_Init+0x2ac>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d04c      	beq.n	800365e <HAL_GPIO_Init+0xfa>
 80035c4:	4a92      	ldr	r2, [pc, #584]	; (8003810 <HAL_GPIO_Init+0x2ac>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d863      	bhi.n	8003692 <HAL_GPIO_Init+0x12e>
 80035ca:	4a92      	ldr	r2, [pc, #584]	; (8003814 <HAL_GPIO_Init+0x2b0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d046      	beq.n	800365e <HAL_GPIO_Init+0xfa>
 80035d0:	4a90      	ldr	r2, [pc, #576]	; (8003814 <HAL_GPIO_Init+0x2b0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d85d      	bhi.n	8003692 <HAL_GPIO_Init+0x12e>
 80035d6:	2b12      	cmp	r3, #18
 80035d8:	d82a      	bhi.n	8003630 <HAL_GPIO_Init+0xcc>
 80035da:	2b12      	cmp	r3, #18
 80035dc:	d859      	bhi.n	8003692 <HAL_GPIO_Init+0x12e>
 80035de:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <HAL_GPIO_Init+0x80>)
 80035e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e4:	0800365f 	.word	0x0800365f
 80035e8:	08003639 	.word	0x08003639
 80035ec:	0800364b 	.word	0x0800364b
 80035f0:	0800368d 	.word	0x0800368d
 80035f4:	08003693 	.word	0x08003693
 80035f8:	08003693 	.word	0x08003693
 80035fc:	08003693 	.word	0x08003693
 8003600:	08003693 	.word	0x08003693
 8003604:	08003693 	.word	0x08003693
 8003608:	08003693 	.word	0x08003693
 800360c:	08003693 	.word	0x08003693
 8003610:	08003693 	.word	0x08003693
 8003614:	08003693 	.word	0x08003693
 8003618:	08003693 	.word	0x08003693
 800361c:	08003693 	.word	0x08003693
 8003620:	08003693 	.word	0x08003693
 8003624:	08003693 	.word	0x08003693
 8003628:	08003641 	.word	0x08003641
 800362c:	08003655 	.word	0x08003655
 8003630:	4a79      	ldr	r2, [pc, #484]	; (8003818 <HAL_GPIO_Init+0x2b4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003636:	e02c      	b.n	8003692 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	623b      	str	r3, [r7, #32]
          break;
 800363e:	e029      	b.n	8003694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	3304      	adds	r3, #4
 8003646:	623b      	str	r3, [r7, #32]
          break;
 8003648:	e024      	b.n	8003694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	3308      	adds	r3, #8
 8003650:	623b      	str	r3, [r7, #32]
          break;
 8003652:	e01f      	b.n	8003694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	330c      	adds	r3, #12
 800365a:	623b      	str	r3, [r7, #32]
          break;
 800365c:	e01a      	b.n	8003694 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d102      	bne.n	800366c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003666:	2304      	movs	r3, #4
 8003668:	623b      	str	r3, [r7, #32]
          break;
 800366a:	e013      	b.n	8003694 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003674:	2308      	movs	r3, #8
 8003676:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	611a      	str	r2, [r3, #16]
          break;
 800367e:	e009      	b.n	8003694 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003680:	2308      	movs	r3, #8
 8003682:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	615a      	str	r2, [r3, #20]
          break;
 800368a:	e003      	b.n	8003694 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800368c:	2300      	movs	r3, #0
 800368e:	623b      	str	r3, [r7, #32]
          break;
 8003690:	e000      	b.n	8003694 <HAL_GPIO_Init+0x130>
          break;
 8003692:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2bff      	cmp	r3, #255	; 0xff
 8003698:	d801      	bhi.n	800369e <HAL_GPIO_Init+0x13a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	e001      	b.n	80036a2 <HAL_GPIO_Init+0x13e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3304      	adds	r3, #4
 80036a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2bff      	cmp	r3, #255	; 0xff
 80036a8:	d802      	bhi.n	80036b0 <HAL_GPIO_Init+0x14c>
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	e002      	b.n	80036b6 <HAL_GPIO_Init+0x152>
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	3b08      	subs	r3, #8
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	210f      	movs	r1, #15
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	401a      	ands	r2, r3
 80036c8:	6a39      	ldr	r1, [r7, #32]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	431a      	orrs	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80b1 	beq.w	8003846 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036e4:	4b4d      	ldr	r3, [pc, #308]	; (800381c <HAL_GPIO_Init+0x2b8>)
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	4a4c      	ldr	r2, [pc, #304]	; (800381c <HAL_GPIO_Init+0x2b8>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6193      	str	r3, [r2, #24]
 80036f0:	4b4a      	ldr	r3, [pc, #296]	; (800381c <HAL_GPIO_Init+0x2b8>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036fc:	4a48      	ldr	r2, [pc, #288]	; (8003820 <HAL_GPIO_Init+0x2bc>)
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	3302      	adds	r3, #2
 8003704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003708:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	220f      	movs	r2, #15
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4013      	ands	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a40      	ldr	r2, [pc, #256]	; (8003824 <HAL_GPIO_Init+0x2c0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <HAL_GPIO_Init+0x1ec>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3f      	ldr	r2, [pc, #252]	; (8003828 <HAL_GPIO_Init+0x2c4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00d      	beq.n	800374c <HAL_GPIO_Init+0x1e8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3e      	ldr	r2, [pc, #248]	; (800382c <HAL_GPIO_Init+0x2c8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <HAL_GPIO_Init+0x1e4>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a3d      	ldr	r2, [pc, #244]	; (8003830 <HAL_GPIO_Init+0x2cc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_GPIO_Init+0x1e0>
 8003740:	2303      	movs	r3, #3
 8003742:	e006      	b.n	8003752 <HAL_GPIO_Init+0x1ee>
 8003744:	2304      	movs	r3, #4
 8003746:	e004      	b.n	8003752 <HAL_GPIO_Init+0x1ee>
 8003748:	2302      	movs	r3, #2
 800374a:	e002      	b.n	8003752 <HAL_GPIO_Init+0x1ee>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_GPIO_Init+0x1ee>
 8003750:	2300      	movs	r3, #0
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	f002 0203 	and.w	r2, r2, #3
 8003758:	0092      	lsls	r2, r2, #2
 800375a:	4093      	lsls	r3, r2
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003762:	492f      	ldr	r1, [pc, #188]	; (8003820 <HAL_GPIO_Init+0x2bc>)
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	089b      	lsrs	r3, r3, #2
 8003768:	3302      	adds	r3, #2
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d006      	beq.n	800378a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800377c:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	492c      	ldr	r1, [pc, #176]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	4313      	orrs	r3, r2
 8003786:	608b      	str	r3, [r1, #8]
 8003788:	e006      	b.n	8003798 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800378a:	4b2a      	ldr	r3, [pc, #168]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	43db      	mvns	r3, r3
 8003792:	4928      	ldr	r1, [pc, #160]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 8003794:	4013      	ands	r3, r2
 8003796:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d006      	beq.n	80037b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037a4:	4b23      	ldr	r3, [pc, #140]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	4922      	ldr	r1, [pc, #136]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60cb      	str	r3, [r1, #12]
 80037b0:	e006      	b.n	80037c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	491e      	ldr	r1, [pc, #120]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 80037bc:	4013      	ands	r3, r2
 80037be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d006      	beq.n	80037da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	4918      	ldr	r1, [pc, #96]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
 80037d8:	e006      	b.n	80037e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037da:	4b16      	ldr	r3, [pc, #88]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	4914      	ldr	r1, [pc, #80]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d021      	beq.n	8003838 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	490e      	ldr	r1, [pc, #56]	; (8003834 <HAL_GPIO_Init+0x2d0>)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
 8003800:	e021      	b.n	8003846 <HAL_GPIO_Init+0x2e2>
 8003802:	bf00      	nop
 8003804:	10320000 	.word	0x10320000
 8003808:	10310000 	.word	0x10310000
 800380c:	10220000 	.word	0x10220000
 8003810:	10210000 	.word	0x10210000
 8003814:	10120000 	.word	0x10120000
 8003818:	10110000 	.word	0x10110000
 800381c:	40021000 	.word	0x40021000
 8003820:	40010000 	.word	0x40010000
 8003824:	40010800 	.word	0x40010800
 8003828:	40010c00 	.word	0x40010c00
 800382c:	40011000 	.word	0x40011000
 8003830:	40011400 	.word	0x40011400
 8003834:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_GPIO_Init+0x304>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	43db      	mvns	r3, r3
 8003840:	4909      	ldr	r1, [pc, #36]	; (8003868 <HAL_GPIO_Init+0x304>)
 8003842:	4013      	ands	r3, r2
 8003844:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	3301      	adds	r3, #1
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	fa22 f303 	lsr.w	r3, r2, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	f47f ae8e 	bne.w	8003578 <HAL_GPIO_Init+0x14>
  }
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	372c      	adds	r7, #44	; 0x2c
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	40010400 	.word	0x40010400

0800386c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	887b      	ldrh	r3, [r7, #2]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
 8003888:	e001      	b.n	800388e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	807b      	strh	r3, [r7, #2]
 80038a6:	4613      	mov	r3, r2
 80038a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038aa:	787b      	ldrb	r3, [r7, #1]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038b0:	887a      	ldrh	r2, [r7, #2]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038b6:	e003      	b.n	80038c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038b8:	887b      	ldrh	r3, [r7, #2]
 80038ba:	041a      	lsls	r2, r3, #16
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	611a      	str	r2, [r3, #16]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038dc:	887a      	ldrh	r2, [r7, #2]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4013      	ands	r3, r2
 80038e2:	041a      	lsls	r2, r3, #16
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	43d9      	mvns	r1, r3
 80038e8:	887b      	ldrh	r3, [r7, #2]
 80038ea:	400b      	ands	r3, r1
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	611a      	str	r2, [r3, #16]
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d006      	beq.n	8003920 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003912:	4a05      	ldr	r2, [pc, #20]	; (8003928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003914:	88fb      	ldrh	r3, [r7, #6]
 8003916:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fb00 	bl	8001f20 <HAL_GPIO_EXTI_Callback>
  }
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40010400 	.word	0x40010400

0800392c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e12b      	b.n	8003b96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff f9ce 	bl	8002cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	; 0x24
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800397e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800398e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003990:	f001 f832 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8003994:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4a81      	ldr	r2, [pc, #516]	; (8003ba0 <HAL_I2C_Init+0x274>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d807      	bhi.n	80039b0 <HAL_I2C_Init+0x84>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a80      	ldr	r2, [pc, #512]	; (8003ba4 <HAL_I2C_Init+0x278>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	bf94      	ite	ls
 80039a8:	2301      	movls	r3, #1
 80039aa:	2300      	movhi	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	e006      	b.n	80039be <HAL_I2C_Init+0x92>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a7d      	ldr	r2, [pc, #500]	; (8003ba8 <HAL_I2C_Init+0x27c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	bf94      	ite	ls
 80039b8:	2301      	movls	r3, #1
 80039ba:	2300      	movhi	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e0e7      	b.n	8003b96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4a78      	ldr	r2, [pc, #480]	; (8003bac <HAL_I2C_Init+0x280>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	0c9b      	lsrs	r3, r3, #18
 80039d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4a6a      	ldr	r2, [pc, #424]	; (8003ba0 <HAL_I2C_Init+0x274>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d802      	bhi.n	8003a00 <HAL_I2C_Init+0xd4>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3301      	adds	r3, #1
 80039fe:	e009      	b.n	8003a14 <HAL_I2C_Init+0xe8>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	4a69      	ldr	r2, [pc, #420]	; (8003bb0 <HAL_I2C_Init+0x284>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	099b      	lsrs	r3, r3, #6
 8003a12:	3301      	adds	r3, #1
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	495c      	ldr	r1, [pc, #368]	; (8003ba0 <HAL_I2C_Init+0x274>)
 8003a30:	428b      	cmp	r3, r1
 8003a32:	d819      	bhi.n	8003a68 <HAL_I2C_Init+0x13c>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1e59      	subs	r1, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a42:	1c59      	adds	r1, r3, #1
 8003a44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a48:	400b      	ands	r3, r1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_I2C_Init+0x138>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1e59      	subs	r1, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a62:	e051      	b.n	8003b08 <HAL_I2C_Init+0x1dc>
 8003a64:	2304      	movs	r3, #4
 8003a66:	e04f      	b.n	8003b08 <HAL_I2C_Init+0x1dc>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d111      	bne.n	8003a94 <HAL_I2C_Init+0x168>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e58      	subs	r0, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	440b      	add	r3, r1
 8003a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e012      	b.n	8003aba <HAL_I2C_Init+0x18e>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1e58      	subs	r0, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6859      	ldr	r1, [r3, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	0099      	lsls	r1, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Init+0x196>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e022      	b.n	8003b08 <HAL_I2C_Init+0x1dc>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_I2C_Init+0x1bc>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1e58      	subs	r0, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6859      	ldr	r1, [r3, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	440b      	add	r3, r1
 8003ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003adc:	3301      	adds	r3, #1
 8003ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae6:	e00f      	b.n	8003b08 <HAL_I2C_Init+0x1dc>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1e58      	subs	r0, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	0099      	lsls	r1, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afe:	3301      	adds	r3, #1
 8003b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	6809      	ldr	r1, [r1, #0]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6911      	ldr	r1, [r2, #16]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68d2      	ldr	r2, [r2, #12]
 8003b42:	4311      	orrs	r1, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	000186a0 	.word	0x000186a0
 8003ba4:	001e847f 	.word	0x001e847f
 8003ba8:	003d08ff 	.word	0x003d08ff
 8003bac:	431bde83 	.word	0x431bde83
 8003bb0:	10624dd3 	.word	0x10624dd3

08003bb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	817b      	strh	r3, [r7, #10]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bc8:	f7ff fb90 	bl	80032ec <HAL_GetTick>
 8003bcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	f040 80e0 	bne.w	8003d9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2319      	movs	r3, #25
 8003be2:	2201      	movs	r2, #1
 8003be4:	4970      	ldr	r1, [pc, #448]	; (8003da8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f964 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e0d3      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_I2C_Master_Transmit+0x50>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e0cc      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d007      	beq.n	8003c2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0201 	orr.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2221      	movs	r2, #33	; 0x21
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2210      	movs	r2, #16
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	893a      	ldrh	r2, [r7, #8]
 8003c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a50      	ldr	r2, [pc, #320]	; (8003dac <HAL_I2C_Master_Transmit+0x1f8>)
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c6c:	8979      	ldrh	r1, [r7, #10]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	6a3a      	ldr	r2, [r7, #32]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f89c 	bl	8003db0 <I2C_MasterRequestWrite>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e08d      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c98:	e066      	b.n	8003d68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	6a39      	ldr	r1, [r7, #32]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fa22 	bl	80040e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00d      	beq.n	8003cc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d107      	bne.n	8003cc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e06b      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	781a      	ldrb	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d11b      	bne.n	8003d3c <HAL_I2C_Master_Transmit+0x188>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d017      	beq.n	8003d3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	6a39      	ldr	r1, [r7, #32]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fa19 	bl	8004178 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00d      	beq.n	8003d68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d107      	bne.n	8003d64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e01a      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d194      	bne.n	8003c9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e000      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
  }
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	00100002 	.word	0x00100002
 8003dac:	ffff0000 	.word	0xffff0000

08003db0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d006      	beq.n	8003dda <I2C_MasterRequestWrite+0x2a>
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d003      	beq.n	8003dda <I2C_MasterRequestWrite+0x2a>
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dd8:	d108      	bne.n	8003dec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e00b      	b.n	8003e04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	2b12      	cmp	r3, #18
 8003df2:	d107      	bne.n	8003e04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f84f 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00d      	beq.n	8003e38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e2a:	d103      	bne.n	8003e34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e035      	b.n	8003ea4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e40:	d108      	bne.n	8003e54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e42:	897b      	ldrh	r3, [r7, #10]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e50:	611a      	str	r2, [r3, #16]
 8003e52:	e01b      	b.n	8003e8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e54:	897b      	ldrh	r3, [r7, #10]
 8003e56:	11db      	asrs	r3, r3, #7
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f003 0306 	and.w	r3, r3, #6
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f063 030f 	orn	r3, r3, #15
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	490e      	ldr	r1, [pc, #56]	; (8003eac <I2C_MasterRequestWrite+0xfc>)
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f898 	bl	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e010      	b.n	8003ea4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e82:	897b      	ldrh	r3, [r7, #10]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4907      	ldr	r1, [pc, #28]	; (8003eb0 <I2C_MasterRequestWrite+0x100>)
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f888 	bl	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	00010008 	.word	0x00010008
 8003eb0:	00010002 	.word	0x00010002

08003eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec4:	e048      	b.n	8003f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d044      	beq.n	8003f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ece:	f7ff fa0d 	bl	80032ec <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d139      	bne.n	8003f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	0c1b      	lsrs	r3, r3, #16
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d10d      	bne.n	8003f0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	43da      	mvns	r2, r3
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	e00c      	b.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	43da      	mvns	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4013      	ands	r3, r2
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d116      	bne.n	8003f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f043 0220 	orr.w	r2, r3, #32
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e023      	b.n	8003fa0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	0c1b      	lsrs	r3, r3, #16
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10d      	bne.n	8003f7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	43da      	mvns	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	e00c      	b.n	8003f98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	43da      	mvns	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d093      	beq.n	8003ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fb6:	e071      	b.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d123      	bne.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fe0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	f043 0204 	orr.w	r2, r3, #4
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e067      	b.n	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004016:	d041      	beq.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004018:	f7ff f968 	bl	80032ec <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	d302      	bcc.n	800402e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d136      	bne.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d10c      	bne.n	8004052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	43da      	mvns	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	e00b      	b.n	800406a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	43da      	mvns	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4013      	ands	r3, r2
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf14      	ite	ne
 8004064:	2301      	movne	r3, #1
 8004066:	2300      	moveq	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d016      	beq.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e021      	b.n	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	0c1b      	lsrs	r3, r3, #16
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d10c      	bne.n	80040c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	43da      	mvns	r2, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bf14      	ite	ne
 80040b8:	2301      	movne	r3, #1
 80040ba:	2300      	moveq	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e00b      	b.n	80040d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	43da      	mvns	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4013      	ands	r3, r2
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bf14      	ite	ne
 80040d2:	2301      	movne	r3, #1
 80040d4:	2300      	moveq	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f47f af6d 	bne.w	8003fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f4:	e034      	b.n	8004160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f886 	bl	8004208 <I2C_IsAcknowledgeFailed>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e034      	b.n	8004170 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d028      	beq.n	8004160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7ff f8ed 	bl	80032ec <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d11d      	bne.n	8004160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412e:	2b80      	cmp	r3, #128	; 0x80
 8004130:	d016      	beq.n	8004160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e007      	b.n	8004170 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416a:	2b80      	cmp	r3, #128	; 0x80
 800416c:	d1c3      	bne.n	80040f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004184:	e034      	b.n	80041f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f83e 	bl	8004208 <I2C_IsAcknowledgeFailed>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e034      	b.n	8004200 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d028      	beq.n	80041f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419e:	f7ff f8a5 	bl	80032ec <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d302      	bcc.n	80041b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d11d      	bne.n	80041f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d016      	beq.n	80041f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	f043 0220 	orr.w	r2, r3, #32
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e007      	b.n	8004200 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d1c3      	bne.n	8004186 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421e:	d11b      	bne.n	8004258 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004228:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	f043 0204 	orr.w	r2, r3, #4
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e272      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8087 	beq.w	8004392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004284:	4b92      	ldr	r3, [pc, #584]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b04      	cmp	r3, #4
 800428e:	d00c      	beq.n	80042aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004290:	4b8f      	ldr	r3, [pc, #572]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b08      	cmp	r3, #8
 800429a:	d112      	bne.n	80042c2 <HAL_RCC_OscConfig+0x5e>
 800429c:	4b8c      	ldr	r3, [pc, #560]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d10b      	bne.n	80042c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042aa:	4b89      	ldr	r3, [pc, #548]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d06c      	beq.n	8004390 <HAL_RCC_OscConfig+0x12c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d168      	bne.n	8004390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e24c      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ca:	d106      	bne.n	80042da <HAL_RCC_OscConfig+0x76>
 80042cc:	4b80      	ldr	r3, [pc, #512]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a7f      	ldr	r2, [pc, #508]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	e02e      	b.n	8004338 <HAL_RCC_OscConfig+0xd4>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10c      	bne.n	80042fc <HAL_RCC_OscConfig+0x98>
 80042e2:	4b7b      	ldr	r3, [pc, #492]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a7a      	ldr	r2, [pc, #488]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4b78      	ldr	r3, [pc, #480]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a77      	ldr	r2, [pc, #476]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e01d      	b.n	8004338 <HAL_RCC_OscConfig+0xd4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0xbc>
 8004306:	4b72      	ldr	r3, [pc, #456]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a71      	ldr	r2, [pc, #452]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b6f      	ldr	r3, [pc, #444]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a6e      	ldr	r2, [pc, #440]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0xd4>
 8004320:	4b6b      	ldr	r3, [pc, #428]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6a      	ldr	r2, [pc, #424]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b68      	ldr	r3, [pc, #416]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a67      	ldr	r2, [pc, #412]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004336:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fe ffd4 	bl	80032ec <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004348:	f7fe ffd0 	bl	80032ec <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	; 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e200      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b5d      	ldr	r3, [pc, #372]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0xe4>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fe ffc0 	bl	80032ec <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fe ffbc 	bl	80032ec <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1ec      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	4b53      	ldr	r3, [pc, #332]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x10c>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d063      	beq.n	8004466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800439e:	4b4c      	ldr	r3, [pc, #304]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043aa:	4b49      	ldr	r3, [pc, #292]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d11c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x18c>
 80043b6:	4b46      	ldr	r3, [pc, #280]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d116      	bne.n	80043f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	4b43      	ldr	r3, [pc, #268]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCC_OscConfig+0x176>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1c0      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b3d      	ldr	r3, [pc, #244]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4939      	ldr	r1, [pc, #228]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	e03a      	b.n	8004466 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f8:	4b36      	ldr	r3, [pc, #216]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fe:	f7fe ff75 	bl	80032ec <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004406:	f7fe ff71 	bl	80032ec <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e1a1      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004418:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4927      	ldr	r1, [pc, #156]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]
 8004438:	e015      	b.n	8004466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fe ff54 	bl	80032ec <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004448:	f7fe ff50 	bl	80032ec <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e180      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d03a      	beq.n	80044e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d019      	beq.n	80044ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <HAL_RCC_OscConfig+0x274>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004480:	f7fe ff34 	bl	80032ec <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004488:	f7fe ff30 	bl	80032ec <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e160      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f000 face 	bl	8004a48 <RCC_Delay>
 80044ac:	e01c      	b.n	80044e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ae:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <HAL_RCC_OscConfig+0x274>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b4:	f7fe ff1a 	bl	80032ec <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ba:	e00f      	b.n	80044dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fe ff16 	bl	80032ec <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d908      	bls.n	80044dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e146      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000
 80044d4:	42420000 	.word	0x42420000
 80044d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044dc:	4b92      	ldr	r3, [pc, #584]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e9      	bne.n	80044bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80a6 	beq.w	8004642 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f6:	2300      	movs	r3, #0
 80044f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fa:	4b8b      	ldr	r3, [pc, #556]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10d      	bne.n	8004522 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	4b88      	ldr	r3, [pc, #544]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	4a87      	ldr	r2, [pc, #540]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	61d3      	str	r3, [r2, #28]
 8004512:	4b85      	ldr	r3, [pc, #532]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004522:	4b82      	ldr	r3, [pc, #520]	; (800472c <HAL_RCC_OscConfig+0x4c8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d118      	bne.n	8004560 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452e:	4b7f      	ldr	r3, [pc, #508]	; (800472c <HAL_RCC_OscConfig+0x4c8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7e      	ldr	r2, [pc, #504]	; (800472c <HAL_RCC_OscConfig+0x4c8>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453a:	f7fe fed7 	bl	80032ec <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004542:	f7fe fed3 	bl	80032ec <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b64      	cmp	r3, #100	; 0x64
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e103      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	4b75      	ldr	r3, [pc, #468]	; (800472c <HAL_RCC_OscConfig+0x4c8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x312>
 8004568:	4b6f      	ldr	r3, [pc, #444]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a6e      	ldr	r2, [pc, #440]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6213      	str	r3, [r2, #32]
 8004574:	e02d      	b.n	80045d2 <HAL_RCC_OscConfig+0x36e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x334>
 800457e:	4b6a      	ldr	r3, [pc, #424]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4a69      	ldr	r2, [pc, #420]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	6213      	str	r3, [r2, #32]
 800458a:	4b67      	ldr	r3, [pc, #412]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4a66      	ldr	r2, [pc, #408]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004590:	f023 0304 	bic.w	r3, r3, #4
 8004594:	6213      	str	r3, [r2, #32]
 8004596:	e01c      	b.n	80045d2 <HAL_RCC_OscConfig+0x36e>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b05      	cmp	r3, #5
 800459e:	d10c      	bne.n	80045ba <HAL_RCC_OscConfig+0x356>
 80045a0:	4b61      	ldr	r3, [pc, #388]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	4a60      	ldr	r2, [pc, #384]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045a6:	f043 0304 	orr.w	r3, r3, #4
 80045aa:	6213      	str	r3, [r2, #32]
 80045ac:	4b5e      	ldr	r3, [pc, #376]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4a5d      	ldr	r2, [pc, #372]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	6213      	str	r3, [r2, #32]
 80045b8:	e00b      	b.n	80045d2 <HAL_RCC_OscConfig+0x36e>
 80045ba:	4b5b      	ldr	r3, [pc, #364]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	4a5a      	ldr	r2, [pc, #360]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6213      	str	r3, [r2, #32]
 80045c6:	4b58      	ldr	r3, [pc, #352]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	4a57      	ldr	r2, [pc, #348]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d015      	beq.n	8004606 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045da:	f7fe fe87 	bl	80032ec <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fe fe83 	bl	80032ec <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e0b1      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f8:	4b4b      	ldr	r3, [pc, #300]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ee      	beq.n	80045e2 <HAL_RCC_OscConfig+0x37e>
 8004604:	e014      	b.n	8004630 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004606:	f7fe fe71 	bl	80032ec <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460c:	e00a      	b.n	8004624 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460e:	f7fe fe6d 	bl	80032ec <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	f241 3288 	movw	r2, #5000	; 0x1388
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e09b      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004624:	4b40      	ldr	r3, [pc, #256]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1ee      	bne.n	800460e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d105      	bne.n	8004642 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004636:	4b3c      	ldr	r3, [pc, #240]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	4a3b      	ldr	r2, [pc, #236]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004640:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8087 	beq.w	800475a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800464c:	4b36      	ldr	r3, [pc, #216]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b08      	cmp	r3, #8
 8004656:	d061      	beq.n	800471c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d146      	bne.n	80046ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004660:	4b33      	ldr	r3, [pc, #204]	; (8004730 <HAL_RCC_OscConfig+0x4cc>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004666:	f7fe fe41 	bl	80032ec <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466e:	f7fe fe3d 	bl	80032ec <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e06d      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004680:	4b29      	ldr	r3, [pc, #164]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004694:	d108      	bne.n	80046a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004696:	4b24      	ldr	r3, [pc, #144]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	4921      	ldr	r1, [pc, #132]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046a8:	4b1f      	ldr	r3, [pc, #124]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a19      	ldr	r1, [r3, #32]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	430b      	orrs	r3, r1
 80046ba:	491b      	ldr	r1, [pc, #108]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c0:	4b1b      	ldr	r3, [pc, #108]	; (8004730 <HAL_RCC_OscConfig+0x4cc>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c6:	f7fe fe11 	bl	80032ec <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ce:	f7fe fe0d 	bl	80032ec <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e03d      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e0:	4b11      	ldr	r3, [pc, #68]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x46a>
 80046ec:	e035      	b.n	800475a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ee:	4b10      	ldr	r3, [pc, #64]	; (8004730 <HAL_RCC_OscConfig+0x4cc>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fe fdfa 	bl	80032ec <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fe fdf6 	bl	80032ec <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e026      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800470e:	4b06      	ldr	r3, [pc, #24]	; (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x498>
 800471a:	e01e      	b.n	800475a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d107      	bne.n	8004734 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e019      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
 8004728:	40021000 	.word	0x40021000
 800472c:	40007000 	.word	0x40007000
 8004730:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <HAL_RCC_OscConfig+0x500>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	429a      	cmp	r2, r3
 8004746:	d106      	bne.n	8004756 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d001      	beq.n	800475a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40021000 	.word	0x40021000

08004768 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0d0      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800477c:	4b6a      	ldr	r3, [pc, #424]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d910      	bls.n	80047ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b67      	ldr	r3, [pc, #412]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 0207 	bic.w	r2, r3, #7
 8004792:	4965      	ldr	r1, [pc, #404]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b63      	ldr	r3, [pc, #396]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0b8      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c4:	4b59      	ldr	r3, [pc, #356]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a58      	ldr	r2, [pc, #352]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047dc:	4b53      	ldr	r3, [pc, #332]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4a52      	ldr	r2, [pc, #328]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e8:	4b50      	ldr	r3, [pc, #320]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	494d      	ldr	r1, [pc, #308]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d040      	beq.n	8004888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	4b47      	ldr	r3, [pc, #284]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d115      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e07f      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004826:	4b41      	ldr	r3, [pc, #260]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e073      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004836:	4b3d      	ldr	r3, [pc, #244]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e06b      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004846:	4b39      	ldr	r3, [pc, #228]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f023 0203 	bic.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4936      	ldr	r1, [pc, #216]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004858:	f7fe fd48 	bl	80032ec <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	e00a      	b.n	8004876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004860:	f7fe fd44 	bl	80032ec <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	; 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e053      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	4b2d      	ldr	r3, [pc, #180]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 020c 	and.w	r2, r3, #12
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	429a      	cmp	r2, r3
 8004886:	d1eb      	bne.n	8004860 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004888:	4b27      	ldr	r3, [pc, #156]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d210      	bcs.n	80048b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b24      	ldr	r3, [pc, #144]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 0207 	bic.w	r2, r3, #7
 800489e:	4922      	ldr	r1, [pc, #136]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e032      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c4:	4b19      	ldr	r3, [pc, #100]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4916      	ldr	r1, [pc, #88]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	490e      	ldr	r1, [pc, #56]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048f6:	f000 f821 	bl	800493c <HAL_RCC_GetSysClockFreq>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	490a      	ldr	r1, [pc, #40]	; (8004930 <HAL_RCC_ClockConfig+0x1c8>)
 8004908:	5ccb      	ldrb	r3, [r1, r3]
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <HAL_RCC_ClockConfig+0x1cc>)
 8004910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <HAL_RCC_ClockConfig+0x1d0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fca6 	bl	8003268 <HAL_InitTick>

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40022000 	.word	0x40022000
 800492c:	40021000 	.word	0x40021000
 8004930:	0800b264 	.word	0x0800b264
 8004934:	20000028 	.word	0x20000028
 8004938:	2000002c 	.word	0x2000002c

0800493c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	2300      	movs	r3, #0
 8004950:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004956:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b04      	cmp	r3, #4
 8004964:	d002      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0x30>
 8004966:	2b08      	cmp	r3, #8
 8004968:	d003      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0x36>
 800496a:	e027      	b.n	80049bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800496c:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800496e:	613b      	str	r3, [r7, #16]
      break;
 8004970:	e027      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	0c9b      	lsrs	r3, r3, #18
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800497c:	5cd3      	ldrb	r3, [r2, r3]
 800497e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d010      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800498a:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	0c5b      	lsrs	r3, r3, #17
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	4a11      	ldr	r2, [pc, #68]	; (80049dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a0d      	ldr	r2, [pc, #52]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800499e:	fb03 f202 	mul.w	r2, r3, r2
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	e004      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a0c      	ldr	r2, [pc, #48]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049b0:	fb02 f303 	mul.w	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	613b      	str	r3, [r7, #16]
      break;
 80049ba:	e002      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049bc:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80049be:	613b      	str	r3, [r7, #16]
      break;
 80049c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c2:	693b      	ldr	r3, [r7, #16]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000
 80049d4:	007a1200 	.word	0x007a1200
 80049d8:	0800b27c 	.word	0x0800b27c
 80049dc:	0800b28c 	.word	0x0800b28c
 80049e0:	003d0900 	.word	0x003d0900

080049e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e8:	4b02      	ldr	r3, [pc, #8]	; (80049f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80049ea:	681b      	ldr	r3, [r3, #0]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr
 80049f4:	20000028 	.word	0x20000028

080049f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049fc:	f7ff fff2 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	; (8004a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	0800b274 	.word	0x0800b274

08004a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a24:	f7ff ffde 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	0adb      	lsrs	r3, r3, #11
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4903      	ldr	r1, [pc, #12]	; (8004a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40021000 	.word	0x40021000
 8004a44:	0800b274 	.word	0x0800b274

08004a48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <RCC_Delay+0x34>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <RCC_Delay+0x38>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	0a5b      	lsrs	r3, r3, #9
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	fb02 f303 	mul.w	r3, r2, r3
 8004a62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a64:	bf00      	nop
  }
  while (Delay --);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1e5a      	subs	r2, r3, #1
 8004a6a:	60fa      	str	r2, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f9      	bne.n	8004a64 <RCC_Delay+0x1c>
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr
 8004a7c:	20000028 	.word	0x20000028
 8004a80:	10624dd3 	.word	0x10624dd3

08004a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e076      	b.n	8004b84 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d108      	bne.n	8004ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa6:	d009      	beq.n	8004abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	61da      	str	r2, [r3, #28]
 8004aae:	e005      	b.n	8004abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fe f94a 	bl	8002d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b40:	ea42 0103 	orr.w	r1, r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	0c1a      	lsrs	r2, r3, #16
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f002 0204 	and.w	r2, r2, #4
 8004b62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_SPI_Transmit+0x22>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e12d      	b.n	8004e0a <HAL_SPI_Transmit+0x27e>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bb6:	f7fe fb99 	bl	80032ec <HAL_GetTick>
 8004bba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004bbc:	88fb      	ldrh	r3, [r7, #6]
 8004bbe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d002      	beq.n	8004bd2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bd0:	e116      	b.n	8004e00 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_SPI_Transmit+0x52>
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004be2:	e10d      	b.n	8004e00 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2203      	movs	r2, #3
 8004be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	88fa      	ldrh	r2, [r7, #6]
 8004c02:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2a:	d10f      	bne.n	8004c4c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c56:	2b40      	cmp	r3, #64	; 0x40
 8004c58:	d007      	beq.n	8004c6a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c72:	d14f      	bne.n	8004d14 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <HAL_SPI_Transmit+0xf6>
 8004c7c:	8afb      	ldrh	r3, [r7, #22]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d142      	bne.n	8004d08 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	1c9a      	adds	r2, r3, #2
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ca6:	e02f      	b.n	8004d08 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d112      	bne.n	8004cdc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	881a      	ldrh	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	1c9a      	adds	r2, r3, #2
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cda:	e015      	b.n	8004d08 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cdc:	f7fe fb06 	bl	80032ec <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d803      	bhi.n	8004cf4 <HAL_SPI_Transmit+0x168>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d102      	bne.n	8004cfa <HAL_SPI_Transmit+0x16e>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004d06:	e07b      	b.n	8004e00 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1ca      	bne.n	8004ca8 <HAL_SPI_Transmit+0x11c>
 8004d12:	e050      	b.n	8004db6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <HAL_SPI_Transmit+0x196>
 8004d1c:	8afb      	ldrh	r3, [r7, #22]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d144      	bne.n	8004dac <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	330c      	adds	r3, #12
 8004d2c:	7812      	ldrb	r2, [r2, #0]
 8004d2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d48:	e030      	b.n	8004dac <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d113      	bne.n	8004d80 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	7812      	ldrb	r2, [r2, #0]
 8004d64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d7e:	e015      	b.n	8004dac <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d80:	f7fe fab4 	bl	80032ec <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d803      	bhi.n	8004d98 <HAL_SPI_Transmit+0x20c>
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d96:	d102      	bne.n	8004d9e <HAL_SPI_Transmit+0x212>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004daa:	e029      	b.n	8004e00 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1c9      	bne.n	8004d4a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	6839      	ldr	r1, [r7, #0]
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 fbd8 	bl	8005570 <SPI_EndRxTxTransaction>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	77fb      	strb	r3, [r7, #31]
 8004df6:	e003      	b.n	8004e00 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e08:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b088      	sub	sp, #32
 8004e16:	af02      	add	r7, sp, #8
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004e32:	2302      	movs	r3, #2
 8004e34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e36:	e0fb      	b.n	8005030 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e40:	d112      	bne.n	8004e68 <HAL_SPI_Receive+0x56>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10e      	bne.n	8004e68 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f8ef 	bl	8005042 <HAL_SPI_TransmitReceive>
 8004e64:	4603      	mov	r3, r0
 8004e66:	e0e8      	b.n	800503a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_SPI_Receive+0x64>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e0e1      	b.n	800503a <HAL_SPI_Receive+0x228>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e7e:	f7fe fa35 	bl	80032ec <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_SPI_Receive+0x7e>
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e94:	e0cc      	b.n	8005030 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2204      	movs	r2, #4
 8004e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	88fa      	ldrh	r2, [r7, #6]
 8004eae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	88fa      	ldrh	r2, [r7, #6]
 8004eb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004edc:	d10f      	bne.n	8004efe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004efc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d007      	beq.n	8004f1c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d16a      	bne.n	8004ffa <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f24:	e032      	b.n	8004f8c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d115      	bne.n	8004f60 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f103 020c 	add.w	r2, r3, #12
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	7812      	ldrb	r2, [r2, #0]
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f5e:	e015      	b.n	8004f8c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f60:	f7fe f9c4 	bl	80032ec <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d803      	bhi.n	8004f78 <HAL_SPI_Receive+0x166>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f76:	d102      	bne.n	8004f7e <HAL_SPI_Receive+0x16c>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004f8a:	e051      	b.n	8005030 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1c7      	bne.n	8004f26 <HAL_SPI_Receive+0x114>
 8004f96:	e035      	b.n	8005004 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d113      	bne.n	8004fce <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	b292      	uxth	r2, r2
 8004fb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	1c9a      	adds	r2, r3, #2
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fcc:	e015      	b.n	8004ffa <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fce:	f7fe f98d 	bl	80032ec <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d803      	bhi.n	8004fe6 <HAL_SPI_Receive+0x1d4>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe4:	d102      	bne.n	8004fec <HAL_SPI_Receive+0x1da>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d106      	bne.n	8004ffa <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004ff8:	e01a      	b.n	8005030 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1c9      	bne.n	8004f98 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	6839      	ldr	r1, [r7, #0]
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 fa5f 	bl	80054cc <SPI_EndRxTransaction>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	75fb      	strb	r3, [r7, #23]
 8005026:	e003      	b.n	8005030 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005038:	7dfb      	ldrb	r3, [r7, #23]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b08c      	sub	sp, #48	; 0x30
 8005046:	af00      	add	r7, sp, #0
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	607a      	str	r2, [r7, #4]
 800504e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005050:	2301      	movs	r3, #1
 8005052:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_SPI_TransmitReceive+0x26>
 8005064:	2302      	movs	r3, #2
 8005066:	e198      	b.n	800539a <HAL_SPI_TransmitReceive+0x358>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005070:	f7fe f93c 	bl	80032ec <HAL_GetTick>
 8005074:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800507c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005086:	887b      	ldrh	r3, [r7, #2]
 8005088:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800508a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800508e:	2b01      	cmp	r3, #1
 8005090:	d00f      	beq.n	80050b2 <HAL_SPI_TransmitReceive+0x70>
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005098:	d107      	bne.n	80050aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d103      	bne.n	80050aa <HAL_SPI_TransmitReceive+0x68>
 80050a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d003      	beq.n	80050b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
 80050ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050b0:	e16d      	b.n	800538e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_SPI_TransmitReceive+0x82>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <HAL_SPI_TransmitReceive+0x82>
 80050be:	887b      	ldrh	r3, [r7, #2]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d103      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050ca:	e160      	b.n	800538e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d003      	beq.n	80050e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2205      	movs	r2, #5
 80050dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	887a      	ldrh	r2, [r7, #2]
 80050f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	887a      	ldrh	r2, [r7, #2]
 80050f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	887a      	ldrh	r2, [r7, #2]
 8005102:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	887a      	ldrh	r2, [r7, #2]
 8005108:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	d007      	beq.n	8005134 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005132:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513c:	d17c      	bne.n	8005238 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_SPI_TransmitReceive+0x10a>
 8005146:	8b7b      	ldrh	r3, [r7, #26]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d16a      	bne.n	8005222 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	881a      	ldrh	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	1c9a      	adds	r2, r3, #2
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005170:	e057      	b.n	8005222 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b02      	cmp	r3, #2
 800517e:	d11b      	bne.n	80051b8 <HAL_SPI_TransmitReceive+0x176>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d016      	beq.n	80051b8 <HAL_SPI_TransmitReceive+0x176>
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d113      	bne.n	80051b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	881a      	ldrh	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	1c9a      	adds	r2, r3, #2
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d119      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x1b8>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d014      	beq.n	80051fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	b292      	uxth	r2, r2
 80051dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	1c9a      	adds	r2, r3, #2
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051f6:	2301      	movs	r3, #1
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051fa:	f7fe f877 	bl	80032ec <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005206:	429a      	cmp	r2, r3
 8005208:	d80b      	bhi.n	8005222 <HAL_SPI_TransmitReceive+0x1e0>
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d007      	beq.n	8005222 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005220:	e0b5      	b.n	800538e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1a2      	bne.n	8005172 <HAL_SPI_TransmitReceive+0x130>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d19d      	bne.n	8005172 <HAL_SPI_TransmitReceive+0x130>
 8005236:	e080      	b.n	800533a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_SPI_TransmitReceive+0x204>
 8005240:	8b7b      	ldrh	r3, [r7, #26]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d16f      	bne.n	8005326 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	7812      	ldrb	r2, [r2, #0]
 8005252:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800526c:	e05b      	b.n	8005326 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b02      	cmp	r3, #2
 800527a:	d11c      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x274>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d017      	beq.n	80052b6 <HAL_SPI_TransmitReceive+0x274>
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	2b01      	cmp	r3, #1
 800528a:	d114      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	7812      	ldrb	r2, [r2, #0]
 8005298:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d119      	bne.n	80052f8 <HAL_SPI_TransmitReceive+0x2b6>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d014      	beq.n	80052f8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052f4:	2301      	movs	r3, #1
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052f8:	f7fd fff8 	bl	80032ec <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005304:	429a      	cmp	r2, r3
 8005306:	d803      	bhi.n	8005310 <HAL_SPI_TransmitReceive+0x2ce>
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d102      	bne.n	8005316 <HAL_SPI_TransmitReceive+0x2d4>
 8005310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005312:	2b00      	cmp	r3, #0
 8005314:	d107      	bne.n	8005326 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005324:	e033      	b.n	800538e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d19e      	bne.n	800526e <HAL_SPI_TransmitReceive+0x22c>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d199      	bne.n	800526e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800533a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f916 	bl	8005570 <SPI_EndRxTxTransaction>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d006      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005356:	e01a      	b.n	800538e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005384:	e003      	b.n	800538e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005396:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800539a:	4618      	mov	r0, r3
 800539c:	3730      	adds	r7, #48	; 0x30
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053b0:	b2db      	uxtb	r3, r3
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	4613      	mov	r3, r2
 80053ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053cc:	f7fd ff8e 	bl	80032ec <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	1a9b      	subs	r3, r3, r2
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	4413      	add	r3, r2
 80053da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053dc:	f7fd ff86 	bl	80032ec <HAL_GetTick>
 80053e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053e2:	4b39      	ldr	r3, [pc, #228]	; (80054c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	015b      	lsls	r3, r3, #5
 80053e8:	0d1b      	lsrs	r3, r3, #20
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	fb02 f303 	mul.w	r3, r2, r3
 80053f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053f2:	e054      	b.n	800549e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d050      	beq.n	800549e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053fc:	f7fd ff76 	bl	80032ec <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	429a      	cmp	r2, r3
 800540a:	d902      	bls.n	8005412 <SPI_WaitFlagStateUntilTimeout+0x56>
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d13d      	bne.n	800548e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005420:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800542a:	d111      	bne.n	8005450 <SPI_WaitFlagStateUntilTimeout+0x94>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005434:	d004      	beq.n	8005440 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543e:	d107      	bne.n	8005450 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005458:	d10f      	bne.n	800547a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005478:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e017      	b.n	80054be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	3b01      	subs	r3, #1
 800549c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4013      	ands	r3, r2
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	bf0c      	ite	eq
 80054ae:	2301      	moveq	r3, #1
 80054b0:	2300      	movne	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d19b      	bne.n	80053f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000028 	.word	0x20000028

080054cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e0:	d111      	bne.n	8005506 <SPI_EndRxTransaction+0x3a>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ea:	d004      	beq.n	80054f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f4:	d107      	bne.n	8005506 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005504:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800550e:	d117      	bne.n	8005540 <SPI_EndRxTransaction+0x74>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005518:	d112      	bne.n	8005540 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2200      	movs	r2, #0
 8005522:	2101      	movs	r1, #1
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7ff ff49 	bl	80053bc <SPI_WaitFlagStateUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01a      	beq.n	8005566 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005534:	f043 0220 	orr.w	r2, r3, #32
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e013      	b.n	8005568 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2200      	movs	r2, #0
 8005548:	2180      	movs	r1, #128	; 0x80
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f7ff ff36 	bl	80053bc <SPI_WaitFlagStateUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	f043 0220 	orr.w	r2, r3, #32
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e000      	b.n	8005568 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2200      	movs	r2, #0
 8005584:	2180      	movs	r1, #128	; 0x80
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f7ff ff18 	bl	80053bc <SPI_WaitFlagStateUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005596:	f043 0220 	orr.w	r2, r3, #32
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e000      	b.n	80055a4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e041      	b.n	8005642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fd fc18 	bl	8002e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f000 faec 	bl	8005bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	d001      	beq.n	8005664 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e032      	b.n	80056ca <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <HAL_TIM_Base_Start+0x88>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00e      	beq.n	8005694 <HAL_TIM_Base_Start+0x48>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567e:	d009      	beq.n	8005694 <HAL_TIM_Base_Start+0x48>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a14      	ldr	r2, [pc, #80]	; (80056d8 <HAL_TIM_Base_Start+0x8c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_TIM_Base_Start+0x48>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a13      	ldr	r2, [pc, #76]	; (80056dc <HAL_TIM_Base_Start+0x90>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d111      	bne.n	80056b8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b06      	cmp	r3, #6
 80056a4:	d010      	beq.n	80056c8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0201 	orr.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b6:	e007      	b.n	80056c8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800

080056e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d001      	beq.n	80056f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e03a      	b.n	800576e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a18      	ldr	r2, [pc, #96]	; (8005778 <HAL_TIM_Base_Start_IT+0x98>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00e      	beq.n	8005738 <HAL_TIM_Base_Start_IT+0x58>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005722:	d009      	beq.n	8005738 <HAL_TIM_Base_Start_IT+0x58>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a14      	ldr	r2, [pc, #80]	; (800577c <HAL_TIM_Base_Start_IT+0x9c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d004      	beq.n	8005738 <HAL_TIM_Base_Start_IT+0x58>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a13      	ldr	r2, [pc, #76]	; (8005780 <HAL_TIM_Base_Start_IT+0xa0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d111      	bne.n	800575c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b06      	cmp	r3, #6
 8005748:	d010      	beq.n	800576c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0201 	orr.w	r2, r2, #1
 8005758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575a:	e007      	b.n	800576c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr
 8005778:	40012c00 	.word	0x40012c00
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800

08005784 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6a1a      	ldr	r2, [r3, #32]
 80057a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10f      	bne.n	80057cc <HAL_TIM_Base_Stop_IT+0x48>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6a1a      	ldr	r2, [r3, #32]
 80057b2:	f240 4344 	movw	r3, #1092	; 0x444
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_Base_Stop_IT+0x48>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0201 	bic.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr

080057e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d122      	bne.n	800583c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d11b      	bne.n	800583c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0202 	mvn.w	r2, #2
 800580c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f9b4 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f9a7 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f9b6 	bl	8005ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b04      	cmp	r3, #4
 8005848:	d122      	bne.n	8005890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b04      	cmp	r3, #4
 8005856:	d11b      	bne.n	8005890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0204 	mvn.w	r2, #4
 8005860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f98a 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 800587c:	e005      	b.n	800588a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f97d 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f98c 	bl	8005ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b08      	cmp	r3, #8
 800589c:	d122      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d11b      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0208 	mvn.w	r2, #8
 80058b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2204      	movs	r2, #4
 80058ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f960 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 80058d0:	e005      	b.n	80058de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f953 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f962 	bl	8005ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d122      	bne.n	8005938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d11b      	bne.n	8005938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0210 	mvn.w	r2, #16
 8005908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2208      	movs	r2, #8
 800590e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f936 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 8005924:	e005      	b.n	8005932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f929 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f938 	bl	8005ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b01      	cmp	r3, #1
 8005944:	d10e      	bne.n	8005964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d107      	bne.n	8005964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0201 	mvn.w	r2, #1
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fd f986 	bl	8002c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d10e      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597c:	2b80      	cmp	r3, #128	; 0x80
 800597e:	d107      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa7b 	bl	8005e86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d10e      	bne.n	80059bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d107      	bne.n	80059bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f8fc 	bl	8005bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d10e      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d107      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0220 	mvn.w	r2, #32
 80059e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa46 	bl	8005e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059e8:	bf00      	nop
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_TIM_ConfigClockSource+0x1c>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e0b4      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x186>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a44:	d03e      	beq.n	8005ac4 <HAL_TIM_ConfigClockSource+0xd4>
 8005a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4a:	f200 8087 	bhi.w	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	f000 8086 	beq.w	8005b62 <HAL_TIM_ConfigClockSource+0x172>
 8005a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5a:	d87f      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a5c:	2b70      	cmp	r3, #112	; 0x70
 8005a5e:	d01a      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0xa6>
 8005a60:	2b70      	cmp	r3, #112	; 0x70
 8005a62:	d87b      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a64:	2b60      	cmp	r3, #96	; 0x60
 8005a66:	d050      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x11a>
 8005a68:	2b60      	cmp	r3, #96	; 0x60
 8005a6a:	d877      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a6c:	2b50      	cmp	r3, #80	; 0x50
 8005a6e:	d03c      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0xfa>
 8005a70:	2b50      	cmp	r3, #80	; 0x50
 8005a72:	d873      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	d058      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x13a>
 8005a78:	2b40      	cmp	r3, #64	; 0x40
 8005a7a:	d86f      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a7c:	2b30      	cmp	r3, #48	; 0x30
 8005a7e:	d064      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x15a>
 8005a80:	2b30      	cmp	r3, #48	; 0x30
 8005a82:	d86b      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d060      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x15a>
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d867      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d05c      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x15a>
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d05a      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x15a>
 8005a94:	e062      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aa6:	f000 f968 	bl	8005d7a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ab8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	609a      	str	r2, [r3, #8]
      break;
 8005ac2:	e04f      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ad4:	f000 f951 	bl	8005d7a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ae6:	609a      	str	r2, [r3, #8]
      break;
 8005ae8:	e03c      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af6:	461a      	mov	r2, r3
 8005af8:	f000 f8c8 	bl	8005c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2150      	movs	r1, #80	; 0x50
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f91f 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 8005b08:	e02c      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b16:	461a      	mov	r2, r3
 8005b18:	f000 f8e6 	bl	8005ce8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2160      	movs	r1, #96	; 0x60
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f90f 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 8005b28:	e01c      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b36:	461a      	mov	r2, r3
 8005b38:	f000 f8a8 	bl	8005c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2140      	movs	r1, #64	; 0x40
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f8ff 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 8005b48:	e00c      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4619      	mov	r1, r3
 8005b54:	4610      	mov	r0, r2
 8005b56:	f000 f8f6 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 8005b5a:	e003      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b60:	e000      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr

08005b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr
	...

08005bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a29      	ldr	r2, [pc, #164]	; (8005c80 <TIM_Base_SetConfig+0xb8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00b      	beq.n	8005bf8 <TIM_Base_SetConfig+0x30>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be6:	d007      	beq.n	8005bf8 <TIM_Base_SetConfig+0x30>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a26      	ldr	r2, [pc, #152]	; (8005c84 <TIM_Base_SetConfig+0xbc>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_Base_SetConfig+0x30>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a25      	ldr	r2, [pc, #148]	; (8005c88 <TIM_Base_SetConfig+0xc0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d108      	bne.n	8005c0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a1c      	ldr	r2, [pc, #112]	; (8005c80 <TIM_Base_SetConfig+0xb8>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00b      	beq.n	8005c2a <TIM_Base_SetConfig+0x62>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c18:	d007      	beq.n	8005c2a <TIM_Base_SetConfig+0x62>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a19      	ldr	r2, [pc, #100]	; (8005c84 <TIM_Base_SetConfig+0xbc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_Base_SetConfig+0x62>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a18      	ldr	r2, [pc, #96]	; (8005c88 <TIM_Base_SetConfig+0xc0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d108      	bne.n	8005c3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a07      	ldr	r2, [pc, #28]	; (8005c80 <TIM_Base_SetConfig+0xb8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d103      	bne.n	8005c70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	615a      	str	r2, [r3, #20]
}
 8005c76:	bf00      	nop
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800

08005c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f023 0201 	bic.w	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f023 030a 	bic.w	r3, r3, #10
 8005cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bc80      	pop	{r7}
 8005ce6:	4770      	bx	lr

08005ce8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	f023 0210 	bic.w	r2, r3, #16
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	031b      	lsls	r3, r3, #12
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	621a      	str	r2, [r3, #32]
}
 8005d3c:	bf00      	nop
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr

08005d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f043 0307 	orr.w	r3, r3, #7
 8005d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bc80      	pop	{r7}
 8005d78:	4770      	bx	lr

08005d7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b087      	sub	sp, #28
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	607a      	str	r2, [r7, #4]
 8005d86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	021a      	lsls	r2, r3, #8
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	609a      	str	r2, [r3, #8]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e046      	b.n	8005e5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a16      	ldr	r2, [pc, #88]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00e      	beq.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1c:	d009      	beq.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a12      	ldr	r2, [pc, #72]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d004      	beq.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a10      	ldr	r2, [pc, #64]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d10c      	bne.n	8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bc80      	pop	{r7}
 8005e66:	4770      	bx	lr
 8005e68:	40012c00 	.word	0x40012c00
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800

08005e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr

08005e86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e042      	b.n	8005f30 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fc ffee 	bl	8002ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2224      	movs	r2, #36	; 0x24
 8005ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f82b 	bl	8005f38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f72:	f023 030c 	bic.w	r3, r3, #12
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	68b9      	ldr	r1, [r7, #8]
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a2c      	ldr	r2, [pc, #176]	; (800604c <UART_SetConfig+0x114>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d103      	bne.n	8005fa8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005fa0:	f7fe fd3e 	bl	8004a20 <HAL_RCC_GetPCLK2Freq>
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	e002      	b.n	8005fae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fa8:	f7fe fd26 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8005fac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009a      	lsls	r2, r3, #2
 8005fb8:	441a      	add	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc4:	4a22      	ldr	r2, [pc, #136]	; (8006050 <UART_SetConfig+0x118>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	0119      	lsls	r1, r3, #4
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009a      	lsls	r2, r3, #2
 8005fd8:	441a      	add	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fe4:	4b1a      	ldr	r3, [pc, #104]	; (8006050 <UART_SetConfig+0x118>)
 8005fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	2064      	movs	r0, #100	; 0x64
 8005fee:	fb00 f303 	mul.w	r3, r0, r3
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	3332      	adds	r3, #50	; 0x32
 8005ff8:	4a15      	ldr	r2, [pc, #84]	; (8006050 <UART_SetConfig+0x118>)
 8005ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006004:	4419      	add	r1, r3
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009a      	lsls	r2, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	fbb2 f2f3 	udiv	r2, r2, r3
 800601c:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <UART_SetConfig+0x118>)
 800601e:	fba3 0302 	umull	r0, r3, r3, r2
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	2064      	movs	r0, #100	; 0x64
 8006026:	fb00 f303 	mul.w	r3, r0, r3
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	3332      	adds	r3, #50	; 0x32
 8006030:	4a07      	ldr	r2, [pc, #28]	; (8006050 <UART_SetConfig+0x118>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	095b      	lsrs	r3, r3, #5
 8006038:	f003 020f 	and.w	r2, r3, #15
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	440a      	add	r2, r1
 8006042:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40013800 	.word	0x40013800
 8006050:	51eb851f 	.word	0x51eb851f

08006054 <__cvt>:
 8006054:	2b00      	cmp	r3, #0
 8006056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800605a:	461f      	mov	r7, r3
 800605c:	bfbb      	ittet	lt
 800605e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006062:	461f      	movlt	r7, r3
 8006064:	2300      	movge	r3, #0
 8006066:	232d      	movlt	r3, #45	; 0x2d
 8006068:	b088      	sub	sp, #32
 800606a:	4614      	mov	r4, r2
 800606c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800606e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006070:	7013      	strb	r3, [r2, #0]
 8006072:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006074:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006078:	f023 0820 	bic.w	r8, r3, #32
 800607c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006080:	d005      	beq.n	800608e <__cvt+0x3a>
 8006082:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006086:	d100      	bne.n	800608a <__cvt+0x36>
 8006088:	3501      	adds	r5, #1
 800608a:	2302      	movs	r3, #2
 800608c:	e000      	b.n	8006090 <__cvt+0x3c>
 800608e:	2303      	movs	r3, #3
 8006090:	aa07      	add	r2, sp, #28
 8006092:	9204      	str	r2, [sp, #16]
 8006094:	aa06      	add	r2, sp, #24
 8006096:	e9cd a202 	strd	sl, r2, [sp, #8]
 800609a:	e9cd 3500 	strd	r3, r5, [sp]
 800609e:	4622      	mov	r2, r4
 80060a0:	463b      	mov	r3, r7
 80060a2:	f001 f919 	bl	80072d8 <_dtoa_r>
 80060a6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80060aa:	4606      	mov	r6, r0
 80060ac:	d102      	bne.n	80060b4 <__cvt+0x60>
 80060ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060b0:	07db      	lsls	r3, r3, #31
 80060b2:	d522      	bpl.n	80060fa <__cvt+0xa6>
 80060b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060b8:	eb06 0905 	add.w	r9, r6, r5
 80060bc:	d110      	bne.n	80060e0 <__cvt+0x8c>
 80060be:	7833      	ldrb	r3, [r6, #0]
 80060c0:	2b30      	cmp	r3, #48	; 0x30
 80060c2:	d10a      	bne.n	80060da <__cvt+0x86>
 80060c4:	2200      	movs	r2, #0
 80060c6:	2300      	movs	r3, #0
 80060c8:	4620      	mov	r0, r4
 80060ca:	4639      	mov	r1, r7
 80060cc:	f7fa fc76 	bl	80009bc <__aeabi_dcmpeq>
 80060d0:	b918      	cbnz	r0, 80060da <__cvt+0x86>
 80060d2:	f1c5 0501 	rsb	r5, r5, #1
 80060d6:	f8ca 5000 	str.w	r5, [sl]
 80060da:	f8da 3000 	ldr.w	r3, [sl]
 80060de:	4499      	add	r9, r3
 80060e0:	2200      	movs	r2, #0
 80060e2:	2300      	movs	r3, #0
 80060e4:	4620      	mov	r0, r4
 80060e6:	4639      	mov	r1, r7
 80060e8:	f7fa fc68 	bl	80009bc <__aeabi_dcmpeq>
 80060ec:	b108      	cbz	r0, 80060f2 <__cvt+0x9e>
 80060ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80060f2:	2230      	movs	r2, #48	; 0x30
 80060f4:	9b07      	ldr	r3, [sp, #28]
 80060f6:	454b      	cmp	r3, r9
 80060f8:	d307      	bcc.n	800610a <__cvt+0xb6>
 80060fa:	4630      	mov	r0, r6
 80060fc:	9b07      	ldr	r3, [sp, #28]
 80060fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006100:	1b9b      	subs	r3, r3, r6
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	b008      	add	sp, #32
 8006106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800610a:	1c59      	adds	r1, r3, #1
 800610c:	9107      	str	r1, [sp, #28]
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	e7f0      	b.n	80060f4 <__cvt+0xa0>

08006112 <__exponent>:
 8006112:	4603      	mov	r3, r0
 8006114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006116:	2900      	cmp	r1, #0
 8006118:	f803 2b02 	strb.w	r2, [r3], #2
 800611c:	bfb6      	itet	lt
 800611e:	222d      	movlt	r2, #45	; 0x2d
 8006120:	222b      	movge	r2, #43	; 0x2b
 8006122:	4249      	neglt	r1, r1
 8006124:	2909      	cmp	r1, #9
 8006126:	7042      	strb	r2, [r0, #1]
 8006128:	dd2a      	ble.n	8006180 <__exponent+0x6e>
 800612a:	f10d 0207 	add.w	r2, sp, #7
 800612e:	4617      	mov	r7, r2
 8006130:	260a      	movs	r6, #10
 8006132:	fb91 f5f6 	sdiv	r5, r1, r6
 8006136:	4694      	mov	ip, r2
 8006138:	fb06 1415 	mls	r4, r6, r5, r1
 800613c:	3430      	adds	r4, #48	; 0x30
 800613e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006142:	460c      	mov	r4, r1
 8006144:	2c63      	cmp	r4, #99	; 0x63
 8006146:	4629      	mov	r1, r5
 8006148:	f102 32ff 	add.w	r2, r2, #4294967295
 800614c:	dcf1      	bgt.n	8006132 <__exponent+0x20>
 800614e:	3130      	adds	r1, #48	; 0x30
 8006150:	f1ac 0402 	sub.w	r4, ip, #2
 8006154:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006158:	4622      	mov	r2, r4
 800615a:	1c41      	adds	r1, r0, #1
 800615c:	42ba      	cmp	r2, r7
 800615e:	d30a      	bcc.n	8006176 <__exponent+0x64>
 8006160:	f10d 0209 	add.w	r2, sp, #9
 8006164:	eba2 020c 	sub.w	r2, r2, ip
 8006168:	42bc      	cmp	r4, r7
 800616a:	bf88      	it	hi
 800616c:	2200      	movhi	r2, #0
 800616e:	4413      	add	r3, r2
 8006170:	1a18      	subs	r0, r3, r0
 8006172:	b003      	add	sp, #12
 8006174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006176:	f812 5b01 	ldrb.w	r5, [r2], #1
 800617a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800617e:	e7ed      	b.n	800615c <__exponent+0x4a>
 8006180:	2330      	movs	r3, #48	; 0x30
 8006182:	3130      	adds	r1, #48	; 0x30
 8006184:	7083      	strb	r3, [r0, #2]
 8006186:	70c1      	strb	r1, [r0, #3]
 8006188:	1d03      	adds	r3, r0, #4
 800618a:	e7f1      	b.n	8006170 <__exponent+0x5e>

0800618c <_printf_float>:
 800618c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006190:	b091      	sub	sp, #68	; 0x44
 8006192:	460c      	mov	r4, r1
 8006194:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006198:	4616      	mov	r6, r2
 800619a:	461f      	mov	r7, r3
 800619c:	4605      	mov	r5, r0
 800619e:	f000 ff69 	bl	8007074 <_localeconv_r>
 80061a2:	6803      	ldr	r3, [r0, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	9309      	str	r3, [sp, #36]	; 0x24
 80061a8:	f7f9 ffdc 	bl	8000164 <strlen>
 80061ac:	2300      	movs	r3, #0
 80061ae:	930e      	str	r3, [sp, #56]	; 0x38
 80061b0:	f8d8 3000 	ldr.w	r3, [r8]
 80061b4:	900a      	str	r0, [sp, #40]	; 0x28
 80061b6:	3307      	adds	r3, #7
 80061b8:	f023 0307 	bic.w	r3, r3, #7
 80061bc:	f103 0208 	add.w	r2, r3, #8
 80061c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80061c4:	f8d4 b000 	ldr.w	fp, [r4]
 80061c8:	f8c8 2000 	str.w	r2, [r8]
 80061cc:	e9d3 a800 	ldrd	sl, r8, [r3]
 80061d0:	4652      	mov	r2, sl
 80061d2:	4643      	mov	r3, r8
 80061d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80061d8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80061dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80061de:	f04f 32ff 	mov.w	r2, #4294967295
 80061e2:	4650      	mov	r0, sl
 80061e4:	4b9c      	ldr	r3, [pc, #624]	; (8006458 <_printf_float+0x2cc>)
 80061e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061e8:	f7fa fc1a 	bl	8000a20 <__aeabi_dcmpun>
 80061ec:	bb70      	cbnz	r0, 800624c <_printf_float+0xc0>
 80061ee:	f04f 32ff 	mov.w	r2, #4294967295
 80061f2:	4650      	mov	r0, sl
 80061f4:	4b98      	ldr	r3, [pc, #608]	; (8006458 <_printf_float+0x2cc>)
 80061f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061f8:	f7fa fbf4 	bl	80009e4 <__aeabi_dcmple>
 80061fc:	bb30      	cbnz	r0, 800624c <_printf_float+0xc0>
 80061fe:	2200      	movs	r2, #0
 8006200:	2300      	movs	r3, #0
 8006202:	4650      	mov	r0, sl
 8006204:	4641      	mov	r1, r8
 8006206:	f7fa fbe3 	bl	80009d0 <__aeabi_dcmplt>
 800620a:	b110      	cbz	r0, 8006212 <_printf_float+0x86>
 800620c:	232d      	movs	r3, #45	; 0x2d
 800620e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006212:	4a92      	ldr	r2, [pc, #584]	; (800645c <_printf_float+0x2d0>)
 8006214:	4b92      	ldr	r3, [pc, #584]	; (8006460 <_printf_float+0x2d4>)
 8006216:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800621a:	bf94      	ite	ls
 800621c:	4690      	movls	r8, r2
 800621e:	4698      	movhi	r8, r3
 8006220:	2303      	movs	r3, #3
 8006222:	f04f 0a00 	mov.w	sl, #0
 8006226:	6123      	str	r3, [r4, #16]
 8006228:	f02b 0304 	bic.w	r3, fp, #4
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	4633      	mov	r3, r6
 8006230:	4621      	mov	r1, r4
 8006232:	4628      	mov	r0, r5
 8006234:	9700      	str	r7, [sp, #0]
 8006236:	aa0f      	add	r2, sp, #60	; 0x3c
 8006238:	f000 f9d6 	bl	80065e8 <_printf_common>
 800623c:	3001      	adds	r0, #1
 800623e:	f040 8090 	bne.w	8006362 <_printf_float+0x1d6>
 8006242:	f04f 30ff 	mov.w	r0, #4294967295
 8006246:	b011      	add	sp, #68	; 0x44
 8006248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624c:	4652      	mov	r2, sl
 800624e:	4643      	mov	r3, r8
 8006250:	4650      	mov	r0, sl
 8006252:	4641      	mov	r1, r8
 8006254:	f7fa fbe4 	bl	8000a20 <__aeabi_dcmpun>
 8006258:	b148      	cbz	r0, 800626e <_printf_float+0xe2>
 800625a:	f1b8 0f00 	cmp.w	r8, #0
 800625e:	bfb8      	it	lt
 8006260:	232d      	movlt	r3, #45	; 0x2d
 8006262:	4a80      	ldr	r2, [pc, #512]	; (8006464 <_printf_float+0x2d8>)
 8006264:	bfb8      	it	lt
 8006266:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800626a:	4b7f      	ldr	r3, [pc, #508]	; (8006468 <_printf_float+0x2dc>)
 800626c:	e7d3      	b.n	8006216 <_printf_float+0x8a>
 800626e:	6863      	ldr	r3, [r4, #4]
 8006270:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	d142      	bne.n	80062fe <_printf_float+0x172>
 8006278:	2306      	movs	r3, #6
 800627a:	6063      	str	r3, [r4, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	9206      	str	r2, [sp, #24]
 8006280:	aa0e      	add	r2, sp, #56	; 0x38
 8006282:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006286:	aa0d      	add	r2, sp, #52	; 0x34
 8006288:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800628c:	9203      	str	r2, [sp, #12]
 800628e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006292:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	6863      	ldr	r3, [r4, #4]
 800629a:	4652      	mov	r2, sl
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	4628      	mov	r0, r5
 80062a0:	4643      	mov	r3, r8
 80062a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80062a4:	f7ff fed6 	bl	8006054 <__cvt>
 80062a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062aa:	4680      	mov	r8, r0
 80062ac:	2947      	cmp	r1, #71	; 0x47
 80062ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062b0:	d108      	bne.n	80062c4 <_printf_float+0x138>
 80062b2:	1cc8      	adds	r0, r1, #3
 80062b4:	db02      	blt.n	80062bc <_printf_float+0x130>
 80062b6:	6863      	ldr	r3, [r4, #4]
 80062b8:	4299      	cmp	r1, r3
 80062ba:	dd40      	ble.n	800633e <_printf_float+0x1b2>
 80062bc:	f1a9 0902 	sub.w	r9, r9, #2
 80062c0:	fa5f f989 	uxtb.w	r9, r9
 80062c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80062c8:	d81f      	bhi.n	800630a <_printf_float+0x17e>
 80062ca:	464a      	mov	r2, r9
 80062cc:	3901      	subs	r1, #1
 80062ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80062d2:	910d      	str	r1, [sp, #52]	; 0x34
 80062d4:	f7ff ff1d 	bl	8006112 <__exponent>
 80062d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062da:	4682      	mov	sl, r0
 80062dc:	1813      	adds	r3, r2, r0
 80062de:	2a01      	cmp	r2, #1
 80062e0:	6123      	str	r3, [r4, #16]
 80062e2:	dc02      	bgt.n	80062ea <_printf_float+0x15e>
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	07d2      	lsls	r2, r2, #31
 80062e8:	d501      	bpl.n	80062ee <_printf_float+0x162>
 80062ea:	3301      	adds	r3, #1
 80062ec:	6123      	str	r3, [r4, #16]
 80062ee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d09b      	beq.n	800622e <_printf_float+0xa2>
 80062f6:	232d      	movs	r3, #45	; 0x2d
 80062f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fc:	e797      	b.n	800622e <_printf_float+0xa2>
 80062fe:	2947      	cmp	r1, #71	; 0x47
 8006300:	d1bc      	bne.n	800627c <_printf_float+0xf0>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1ba      	bne.n	800627c <_printf_float+0xf0>
 8006306:	2301      	movs	r3, #1
 8006308:	e7b7      	b.n	800627a <_printf_float+0xee>
 800630a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800630e:	d118      	bne.n	8006342 <_printf_float+0x1b6>
 8006310:	2900      	cmp	r1, #0
 8006312:	6863      	ldr	r3, [r4, #4]
 8006314:	dd0b      	ble.n	800632e <_printf_float+0x1a2>
 8006316:	6121      	str	r1, [r4, #16]
 8006318:	b913      	cbnz	r3, 8006320 <_printf_float+0x194>
 800631a:	6822      	ldr	r2, [r4, #0]
 800631c:	07d0      	lsls	r0, r2, #31
 800631e:	d502      	bpl.n	8006326 <_printf_float+0x19a>
 8006320:	3301      	adds	r3, #1
 8006322:	440b      	add	r3, r1
 8006324:	6123      	str	r3, [r4, #16]
 8006326:	f04f 0a00 	mov.w	sl, #0
 800632a:	65a1      	str	r1, [r4, #88]	; 0x58
 800632c:	e7df      	b.n	80062ee <_printf_float+0x162>
 800632e:	b913      	cbnz	r3, 8006336 <_printf_float+0x1aa>
 8006330:	6822      	ldr	r2, [r4, #0]
 8006332:	07d2      	lsls	r2, r2, #31
 8006334:	d501      	bpl.n	800633a <_printf_float+0x1ae>
 8006336:	3302      	adds	r3, #2
 8006338:	e7f4      	b.n	8006324 <_printf_float+0x198>
 800633a:	2301      	movs	r3, #1
 800633c:	e7f2      	b.n	8006324 <_printf_float+0x198>
 800633e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006344:	4299      	cmp	r1, r3
 8006346:	db05      	blt.n	8006354 <_printf_float+0x1c8>
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	6121      	str	r1, [r4, #16]
 800634c:	07d8      	lsls	r0, r3, #31
 800634e:	d5ea      	bpl.n	8006326 <_printf_float+0x19a>
 8006350:	1c4b      	adds	r3, r1, #1
 8006352:	e7e7      	b.n	8006324 <_printf_float+0x198>
 8006354:	2900      	cmp	r1, #0
 8006356:	bfcc      	ite	gt
 8006358:	2201      	movgt	r2, #1
 800635a:	f1c1 0202 	rsble	r2, r1, #2
 800635e:	4413      	add	r3, r2
 8006360:	e7e0      	b.n	8006324 <_printf_float+0x198>
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	055a      	lsls	r2, r3, #21
 8006366:	d407      	bmi.n	8006378 <_printf_float+0x1ec>
 8006368:	6923      	ldr	r3, [r4, #16]
 800636a:	4642      	mov	r2, r8
 800636c:	4631      	mov	r1, r6
 800636e:	4628      	mov	r0, r5
 8006370:	47b8      	blx	r7
 8006372:	3001      	adds	r0, #1
 8006374:	d12b      	bne.n	80063ce <_printf_float+0x242>
 8006376:	e764      	b.n	8006242 <_printf_float+0xb6>
 8006378:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800637c:	f240 80dd 	bls.w	800653a <_printf_float+0x3ae>
 8006380:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006384:	2200      	movs	r2, #0
 8006386:	2300      	movs	r3, #0
 8006388:	f7fa fb18 	bl	80009bc <__aeabi_dcmpeq>
 800638c:	2800      	cmp	r0, #0
 800638e:	d033      	beq.n	80063f8 <_printf_float+0x26c>
 8006390:	2301      	movs	r3, #1
 8006392:	4631      	mov	r1, r6
 8006394:	4628      	mov	r0, r5
 8006396:	4a35      	ldr	r2, [pc, #212]	; (800646c <_printf_float+0x2e0>)
 8006398:	47b8      	blx	r7
 800639a:	3001      	adds	r0, #1
 800639c:	f43f af51 	beq.w	8006242 <_printf_float+0xb6>
 80063a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80063a4:	429a      	cmp	r2, r3
 80063a6:	db02      	blt.n	80063ae <_printf_float+0x222>
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	07d8      	lsls	r0, r3, #31
 80063ac:	d50f      	bpl.n	80063ce <_printf_float+0x242>
 80063ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063b2:	4631      	mov	r1, r6
 80063b4:	4628      	mov	r0, r5
 80063b6:	47b8      	blx	r7
 80063b8:	3001      	adds	r0, #1
 80063ba:	f43f af42 	beq.w	8006242 <_printf_float+0xb6>
 80063be:	f04f 0800 	mov.w	r8, #0
 80063c2:	f104 091a 	add.w	r9, r4, #26
 80063c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063c8:	3b01      	subs	r3, #1
 80063ca:	4543      	cmp	r3, r8
 80063cc:	dc09      	bgt.n	80063e2 <_printf_float+0x256>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	079b      	lsls	r3, r3, #30
 80063d2:	f100 8104 	bmi.w	80065de <_printf_float+0x452>
 80063d6:	68e0      	ldr	r0, [r4, #12]
 80063d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063da:	4298      	cmp	r0, r3
 80063dc:	bfb8      	it	lt
 80063de:	4618      	movlt	r0, r3
 80063e0:	e731      	b.n	8006246 <_printf_float+0xba>
 80063e2:	2301      	movs	r3, #1
 80063e4:	464a      	mov	r2, r9
 80063e6:	4631      	mov	r1, r6
 80063e8:	4628      	mov	r0, r5
 80063ea:	47b8      	blx	r7
 80063ec:	3001      	adds	r0, #1
 80063ee:	f43f af28 	beq.w	8006242 <_printf_float+0xb6>
 80063f2:	f108 0801 	add.w	r8, r8, #1
 80063f6:	e7e6      	b.n	80063c6 <_printf_float+0x23a>
 80063f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	dc38      	bgt.n	8006470 <_printf_float+0x2e4>
 80063fe:	2301      	movs	r3, #1
 8006400:	4631      	mov	r1, r6
 8006402:	4628      	mov	r0, r5
 8006404:	4a19      	ldr	r2, [pc, #100]	; (800646c <_printf_float+0x2e0>)
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	f43f af1a 	beq.w	8006242 <_printf_float+0xb6>
 800640e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006412:	4313      	orrs	r3, r2
 8006414:	d102      	bne.n	800641c <_printf_float+0x290>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	07d9      	lsls	r1, r3, #31
 800641a:	d5d8      	bpl.n	80063ce <_printf_float+0x242>
 800641c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006420:	4631      	mov	r1, r6
 8006422:	4628      	mov	r0, r5
 8006424:	47b8      	blx	r7
 8006426:	3001      	adds	r0, #1
 8006428:	f43f af0b 	beq.w	8006242 <_printf_float+0xb6>
 800642c:	f04f 0900 	mov.w	r9, #0
 8006430:	f104 0a1a 	add.w	sl, r4, #26
 8006434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006436:	425b      	negs	r3, r3
 8006438:	454b      	cmp	r3, r9
 800643a:	dc01      	bgt.n	8006440 <_printf_float+0x2b4>
 800643c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800643e:	e794      	b.n	800636a <_printf_float+0x1de>
 8006440:	2301      	movs	r3, #1
 8006442:	4652      	mov	r2, sl
 8006444:	4631      	mov	r1, r6
 8006446:	4628      	mov	r0, r5
 8006448:	47b8      	blx	r7
 800644a:	3001      	adds	r0, #1
 800644c:	f43f aef9 	beq.w	8006242 <_printf_float+0xb6>
 8006450:	f109 0901 	add.w	r9, r9, #1
 8006454:	e7ee      	b.n	8006434 <_printf_float+0x2a8>
 8006456:	bf00      	nop
 8006458:	7fefffff 	.word	0x7fefffff
 800645c:	0800b28e 	.word	0x0800b28e
 8006460:	0800b292 	.word	0x0800b292
 8006464:	0800b296 	.word	0x0800b296
 8006468:	0800b29a 	.word	0x0800b29a
 800646c:	0800b6c0 	.word	0x0800b6c0
 8006470:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006472:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006474:	429a      	cmp	r2, r3
 8006476:	bfa8      	it	ge
 8006478:	461a      	movge	r2, r3
 800647a:	2a00      	cmp	r2, #0
 800647c:	4691      	mov	r9, r2
 800647e:	dc37      	bgt.n	80064f0 <_printf_float+0x364>
 8006480:	f04f 0b00 	mov.w	fp, #0
 8006484:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006488:	f104 021a 	add.w	r2, r4, #26
 800648c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006490:	ebaa 0309 	sub.w	r3, sl, r9
 8006494:	455b      	cmp	r3, fp
 8006496:	dc33      	bgt.n	8006500 <_printf_float+0x374>
 8006498:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800649c:	429a      	cmp	r2, r3
 800649e:	db3b      	blt.n	8006518 <_printf_float+0x38c>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	07da      	lsls	r2, r3, #31
 80064a4:	d438      	bmi.n	8006518 <_printf_float+0x38c>
 80064a6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80064aa:	eba2 0903 	sub.w	r9, r2, r3
 80064ae:	eba2 020a 	sub.w	r2, r2, sl
 80064b2:	4591      	cmp	r9, r2
 80064b4:	bfa8      	it	ge
 80064b6:	4691      	movge	r9, r2
 80064b8:	f1b9 0f00 	cmp.w	r9, #0
 80064bc:	dc34      	bgt.n	8006528 <_printf_float+0x39c>
 80064be:	f04f 0800 	mov.w	r8, #0
 80064c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064c6:	f104 0a1a 	add.w	sl, r4, #26
 80064ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064ce:	1a9b      	subs	r3, r3, r2
 80064d0:	eba3 0309 	sub.w	r3, r3, r9
 80064d4:	4543      	cmp	r3, r8
 80064d6:	f77f af7a 	ble.w	80063ce <_printf_float+0x242>
 80064da:	2301      	movs	r3, #1
 80064dc:	4652      	mov	r2, sl
 80064de:	4631      	mov	r1, r6
 80064e0:	4628      	mov	r0, r5
 80064e2:	47b8      	blx	r7
 80064e4:	3001      	adds	r0, #1
 80064e6:	f43f aeac 	beq.w	8006242 <_printf_float+0xb6>
 80064ea:	f108 0801 	add.w	r8, r8, #1
 80064ee:	e7ec      	b.n	80064ca <_printf_float+0x33e>
 80064f0:	4613      	mov	r3, r2
 80064f2:	4631      	mov	r1, r6
 80064f4:	4642      	mov	r2, r8
 80064f6:	4628      	mov	r0, r5
 80064f8:	47b8      	blx	r7
 80064fa:	3001      	adds	r0, #1
 80064fc:	d1c0      	bne.n	8006480 <_printf_float+0x2f4>
 80064fe:	e6a0      	b.n	8006242 <_printf_float+0xb6>
 8006500:	2301      	movs	r3, #1
 8006502:	4631      	mov	r1, r6
 8006504:	4628      	mov	r0, r5
 8006506:	920b      	str	r2, [sp, #44]	; 0x2c
 8006508:	47b8      	blx	r7
 800650a:	3001      	adds	r0, #1
 800650c:	f43f ae99 	beq.w	8006242 <_printf_float+0xb6>
 8006510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006512:	f10b 0b01 	add.w	fp, fp, #1
 8006516:	e7b9      	b.n	800648c <_printf_float+0x300>
 8006518:	4631      	mov	r1, r6
 800651a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800651e:	4628      	mov	r0, r5
 8006520:	47b8      	blx	r7
 8006522:	3001      	adds	r0, #1
 8006524:	d1bf      	bne.n	80064a6 <_printf_float+0x31a>
 8006526:	e68c      	b.n	8006242 <_printf_float+0xb6>
 8006528:	464b      	mov	r3, r9
 800652a:	4631      	mov	r1, r6
 800652c:	4628      	mov	r0, r5
 800652e:	eb08 020a 	add.w	r2, r8, sl
 8006532:	47b8      	blx	r7
 8006534:	3001      	adds	r0, #1
 8006536:	d1c2      	bne.n	80064be <_printf_float+0x332>
 8006538:	e683      	b.n	8006242 <_printf_float+0xb6>
 800653a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800653c:	2a01      	cmp	r2, #1
 800653e:	dc01      	bgt.n	8006544 <_printf_float+0x3b8>
 8006540:	07db      	lsls	r3, r3, #31
 8006542:	d539      	bpl.n	80065b8 <_printf_float+0x42c>
 8006544:	2301      	movs	r3, #1
 8006546:	4642      	mov	r2, r8
 8006548:	4631      	mov	r1, r6
 800654a:	4628      	mov	r0, r5
 800654c:	47b8      	blx	r7
 800654e:	3001      	adds	r0, #1
 8006550:	f43f ae77 	beq.w	8006242 <_printf_float+0xb6>
 8006554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006558:	4631      	mov	r1, r6
 800655a:	4628      	mov	r0, r5
 800655c:	47b8      	blx	r7
 800655e:	3001      	adds	r0, #1
 8006560:	f43f ae6f 	beq.w	8006242 <_printf_float+0xb6>
 8006564:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006568:	2200      	movs	r2, #0
 800656a:	2300      	movs	r3, #0
 800656c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006570:	f7fa fa24 	bl	80009bc <__aeabi_dcmpeq>
 8006574:	b9d8      	cbnz	r0, 80065ae <_printf_float+0x422>
 8006576:	f109 33ff 	add.w	r3, r9, #4294967295
 800657a:	f108 0201 	add.w	r2, r8, #1
 800657e:	4631      	mov	r1, r6
 8006580:	4628      	mov	r0, r5
 8006582:	47b8      	blx	r7
 8006584:	3001      	adds	r0, #1
 8006586:	d10e      	bne.n	80065a6 <_printf_float+0x41a>
 8006588:	e65b      	b.n	8006242 <_printf_float+0xb6>
 800658a:	2301      	movs	r3, #1
 800658c:	464a      	mov	r2, r9
 800658e:	4631      	mov	r1, r6
 8006590:	4628      	mov	r0, r5
 8006592:	47b8      	blx	r7
 8006594:	3001      	adds	r0, #1
 8006596:	f43f ae54 	beq.w	8006242 <_printf_float+0xb6>
 800659a:	f108 0801 	add.w	r8, r8, #1
 800659e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065a0:	3b01      	subs	r3, #1
 80065a2:	4543      	cmp	r3, r8
 80065a4:	dcf1      	bgt.n	800658a <_printf_float+0x3fe>
 80065a6:	4653      	mov	r3, sl
 80065a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80065ac:	e6de      	b.n	800636c <_printf_float+0x1e0>
 80065ae:	f04f 0800 	mov.w	r8, #0
 80065b2:	f104 091a 	add.w	r9, r4, #26
 80065b6:	e7f2      	b.n	800659e <_printf_float+0x412>
 80065b8:	2301      	movs	r3, #1
 80065ba:	4642      	mov	r2, r8
 80065bc:	e7df      	b.n	800657e <_printf_float+0x3f2>
 80065be:	2301      	movs	r3, #1
 80065c0:	464a      	mov	r2, r9
 80065c2:	4631      	mov	r1, r6
 80065c4:	4628      	mov	r0, r5
 80065c6:	47b8      	blx	r7
 80065c8:	3001      	adds	r0, #1
 80065ca:	f43f ae3a 	beq.w	8006242 <_printf_float+0xb6>
 80065ce:	f108 0801 	add.w	r8, r8, #1
 80065d2:	68e3      	ldr	r3, [r4, #12]
 80065d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80065d6:	1a5b      	subs	r3, r3, r1
 80065d8:	4543      	cmp	r3, r8
 80065da:	dcf0      	bgt.n	80065be <_printf_float+0x432>
 80065dc:	e6fb      	b.n	80063d6 <_printf_float+0x24a>
 80065de:	f04f 0800 	mov.w	r8, #0
 80065e2:	f104 0919 	add.w	r9, r4, #25
 80065e6:	e7f4      	b.n	80065d2 <_printf_float+0x446>

080065e8 <_printf_common>:
 80065e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065ec:	4616      	mov	r6, r2
 80065ee:	4699      	mov	r9, r3
 80065f0:	688a      	ldr	r2, [r1, #8]
 80065f2:	690b      	ldr	r3, [r1, #16]
 80065f4:	4607      	mov	r7, r0
 80065f6:	4293      	cmp	r3, r2
 80065f8:	bfb8      	it	lt
 80065fa:	4613      	movlt	r3, r2
 80065fc:	6033      	str	r3, [r6, #0]
 80065fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006602:	460c      	mov	r4, r1
 8006604:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006608:	b10a      	cbz	r2, 800660e <_printf_common+0x26>
 800660a:	3301      	adds	r3, #1
 800660c:	6033      	str	r3, [r6, #0]
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	0699      	lsls	r1, r3, #26
 8006612:	bf42      	ittt	mi
 8006614:	6833      	ldrmi	r3, [r6, #0]
 8006616:	3302      	addmi	r3, #2
 8006618:	6033      	strmi	r3, [r6, #0]
 800661a:	6825      	ldr	r5, [r4, #0]
 800661c:	f015 0506 	ands.w	r5, r5, #6
 8006620:	d106      	bne.n	8006630 <_printf_common+0x48>
 8006622:	f104 0a19 	add.w	sl, r4, #25
 8006626:	68e3      	ldr	r3, [r4, #12]
 8006628:	6832      	ldr	r2, [r6, #0]
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	42ab      	cmp	r3, r5
 800662e:	dc2b      	bgt.n	8006688 <_printf_common+0xa0>
 8006630:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006634:	1e13      	subs	r3, r2, #0
 8006636:	6822      	ldr	r2, [r4, #0]
 8006638:	bf18      	it	ne
 800663a:	2301      	movne	r3, #1
 800663c:	0692      	lsls	r2, r2, #26
 800663e:	d430      	bmi.n	80066a2 <_printf_common+0xba>
 8006640:	4649      	mov	r1, r9
 8006642:	4638      	mov	r0, r7
 8006644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006648:	47c0      	blx	r8
 800664a:	3001      	adds	r0, #1
 800664c:	d023      	beq.n	8006696 <_printf_common+0xae>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	6922      	ldr	r2, [r4, #16]
 8006652:	f003 0306 	and.w	r3, r3, #6
 8006656:	2b04      	cmp	r3, #4
 8006658:	bf14      	ite	ne
 800665a:	2500      	movne	r5, #0
 800665c:	6833      	ldreq	r3, [r6, #0]
 800665e:	f04f 0600 	mov.w	r6, #0
 8006662:	bf08      	it	eq
 8006664:	68e5      	ldreq	r5, [r4, #12]
 8006666:	f104 041a 	add.w	r4, r4, #26
 800666a:	bf08      	it	eq
 800666c:	1aed      	subeq	r5, r5, r3
 800666e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006672:	bf08      	it	eq
 8006674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006678:	4293      	cmp	r3, r2
 800667a:	bfc4      	itt	gt
 800667c:	1a9b      	subgt	r3, r3, r2
 800667e:	18ed      	addgt	r5, r5, r3
 8006680:	42b5      	cmp	r5, r6
 8006682:	d11a      	bne.n	80066ba <_printf_common+0xd2>
 8006684:	2000      	movs	r0, #0
 8006686:	e008      	b.n	800669a <_printf_common+0xb2>
 8006688:	2301      	movs	r3, #1
 800668a:	4652      	mov	r2, sl
 800668c:	4649      	mov	r1, r9
 800668e:	4638      	mov	r0, r7
 8006690:	47c0      	blx	r8
 8006692:	3001      	adds	r0, #1
 8006694:	d103      	bne.n	800669e <_printf_common+0xb6>
 8006696:	f04f 30ff 	mov.w	r0, #4294967295
 800669a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800669e:	3501      	adds	r5, #1
 80066a0:	e7c1      	b.n	8006626 <_printf_common+0x3e>
 80066a2:	2030      	movs	r0, #48	; 0x30
 80066a4:	18e1      	adds	r1, r4, r3
 80066a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066b0:	4422      	add	r2, r4
 80066b2:	3302      	adds	r3, #2
 80066b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066b8:	e7c2      	b.n	8006640 <_printf_common+0x58>
 80066ba:	2301      	movs	r3, #1
 80066bc:	4622      	mov	r2, r4
 80066be:	4649      	mov	r1, r9
 80066c0:	4638      	mov	r0, r7
 80066c2:	47c0      	blx	r8
 80066c4:	3001      	adds	r0, #1
 80066c6:	d0e6      	beq.n	8006696 <_printf_common+0xae>
 80066c8:	3601      	adds	r6, #1
 80066ca:	e7d9      	b.n	8006680 <_printf_common+0x98>

080066cc <_printf_i>:
 80066cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066d0:	7e0f      	ldrb	r7, [r1, #24]
 80066d2:	4691      	mov	r9, r2
 80066d4:	2f78      	cmp	r7, #120	; 0x78
 80066d6:	4680      	mov	r8, r0
 80066d8:	460c      	mov	r4, r1
 80066da:	469a      	mov	sl, r3
 80066dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066e2:	d807      	bhi.n	80066f4 <_printf_i+0x28>
 80066e4:	2f62      	cmp	r7, #98	; 0x62
 80066e6:	d80a      	bhi.n	80066fe <_printf_i+0x32>
 80066e8:	2f00      	cmp	r7, #0
 80066ea:	f000 80d5 	beq.w	8006898 <_printf_i+0x1cc>
 80066ee:	2f58      	cmp	r7, #88	; 0x58
 80066f0:	f000 80c1 	beq.w	8006876 <_printf_i+0x1aa>
 80066f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066fc:	e03a      	b.n	8006774 <_printf_i+0xa8>
 80066fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006702:	2b15      	cmp	r3, #21
 8006704:	d8f6      	bhi.n	80066f4 <_printf_i+0x28>
 8006706:	a101      	add	r1, pc, #4	; (adr r1, 800670c <_printf_i+0x40>)
 8006708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800670c:	08006765 	.word	0x08006765
 8006710:	08006779 	.word	0x08006779
 8006714:	080066f5 	.word	0x080066f5
 8006718:	080066f5 	.word	0x080066f5
 800671c:	080066f5 	.word	0x080066f5
 8006720:	080066f5 	.word	0x080066f5
 8006724:	08006779 	.word	0x08006779
 8006728:	080066f5 	.word	0x080066f5
 800672c:	080066f5 	.word	0x080066f5
 8006730:	080066f5 	.word	0x080066f5
 8006734:	080066f5 	.word	0x080066f5
 8006738:	0800687f 	.word	0x0800687f
 800673c:	080067a5 	.word	0x080067a5
 8006740:	08006839 	.word	0x08006839
 8006744:	080066f5 	.word	0x080066f5
 8006748:	080066f5 	.word	0x080066f5
 800674c:	080068a1 	.word	0x080068a1
 8006750:	080066f5 	.word	0x080066f5
 8006754:	080067a5 	.word	0x080067a5
 8006758:	080066f5 	.word	0x080066f5
 800675c:	080066f5 	.word	0x080066f5
 8006760:	08006841 	.word	0x08006841
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	1d1a      	adds	r2, r3, #4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	602a      	str	r2, [r5, #0]
 800676c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006774:	2301      	movs	r3, #1
 8006776:	e0a0      	b.n	80068ba <_printf_i+0x1ee>
 8006778:	6820      	ldr	r0, [r4, #0]
 800677a:	682b      	ldr	r3, [r5, #0]
 800677c:	0607      	lsls	r7, r0, #24
 800677e:	f103 0104 	add.w	r1, r3, #4
 8006782:	6029      	str	r1, [r5, #0]
 8006784:	d501      	bpl.n	800678a <_printf_i+0xbe>
 8006786:	681e      	ldr	r6, [r3, #0]
 8006788:	e003      	b.n	8006792 <_printf_i+0xc6>
 800678a:	0646      	lsls	r6, r0, #25
 800678c:	d5fb      	bpl.n	8006786 <_printf_i+0xba>
 800678e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006792:	2e00      	cmp	r6, #0
 8006794:	da03      	bge.n	800679e <_printf_i+0xd2>
 8006796:	232d      	movs	r3, #45	; 0x2d
 8006798:	4276      	negs	r6, r6
 800679a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800679e:	230a      	movs	r3, #10
 80067a0:	4859      	ldr	r0, [pc, #356]	; (8006908 <_printf_i+0x23c>)
 80067a2:	e012      	b.n	80067ca <_printf_i+0xfe>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	6820      	ldr	r0, [r4, #0]
 80067a8:	1d19      	adds	r1, r3, #4
 80067aa:	6029      	str	r1, [r5, #0]
 80067ac:	0605      	lsls	r5, r0, #24
 80067ae:	d501      	bpl.n	80067b4 <_printf_i+0xe8>
 80067b0:	681e      	ldr	r6, [r3, #0]
 80067b2:	e002      	b.n	80067ba <_printf_i+0xee>
 80067b4:	0641      	lsls	r1, r0, #25
 80067b6:	d5fb      	bpl.n	80067b0 <_printf_i+0xe4>
 80067b8:	881e      	ldrh	r6, [r3, #0]
 80067ba:	2f6f      	cmp	r7, #111	; 0x6f
 80067bc:	bf0c      	ite	eq
 80067be:	2308      	moveq	r3, #8
 80067c0:	230a      	movne	r3, #10
 80067c2:	4851      	ldr	r0, [pc, #324]	; (8006908 <_printf_i+0x23c>)
 80067c4:	2100      	movs	r1, #0
 80067c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067ca:	6865      	ldr	r5, [r4, #4]
 80067cc:	2d00      	cmp	r5, #0
 80067ce:	bfa8      	it	ge
 80067d0:	6821      	ldrge	r1, [r4, #0]
 80067d2:	60a5      	str	r5, [r4, #8]
 80067d4:	bfa4      	itt	ge
 80067d6:	f021 0104 	bicge.w	r1, r1, #4
 80067da:	6021      	strge	r1, [r4, #0]
 80067dc:	b90e      	cbnz	r6, 80067e2 <_printf_i+0x116>
 80067de:	2d00      	cmp	r5, #0
 80067e0:	d04b      	beq.n	800687a <_printf_i+0x1ae>
 80067e2:	4615      	mov	r5, r2
 80067e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80067e8:	fb03 6711 	mls	r7, r3, r1, r6
 80067ec:	5dc7      	ldrb	r7, [r0, r7]
 80067ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067f2:	4637      	mov	r7, r6
 80067f4:	42bb      	cmp	r3, r7
 80067f6:	460e      	mov	r6, r1
 80067f8:	d9f4      	bls.n	80067e4 <_printf_i+0x118>
 80067fa:	2b08      	cmp	r3, #8
 80067fc:	d10b      	bne.n	8006816 <_printf_i+0x14a>
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	07de      	lsls	r6, r3, #31
 8006802:	d508      	bpl.n	8006816 <_printf_i+0x14a>
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	6861      	ldr	r1, [r4, #4]
 8006808:	4299      	cmp	r1, r3
 800680a:	bfde      	ittt	le
 800680c:	2330      	movle	r3, #48	; 0x30
 800680e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006812:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006816:	1b52      	subs	r2, r2, r5
 8006818:	6122      	str	r2, [r4, #16]
 800681a:	464b      	mov	r3, r9
 800681c:	4621      	mov	r1, r4
 800681e:	4640      	mov	r0, r8
 8006820:	f8cd a000 	str.w	sl, [sp]
 8006824:	aa03      	add	r2, sp, #12
 8006826:	f7ff fedf 	bl	80065e8 <_printf_common>
 800682a:	3001      	adds	r0, #1
 800682c:	d14a      	bne.n	80068c4 <_printf_i+0x1f8>
 800682e:	f04f 30ff 	mov.w	r0, #4294967295
 8006832:	b004      	add	sp, #16
 8006834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	f043 0320 	orr.w	r3, r3, #32
 800683e:	6023      	str	r3, [r4, #0]
 8006840:	2778      	movs	r7, #120	; 0x78
 8006842:	4832      	ldr	r0, [pc, #200]	; (800690c <_printf_i+0x240>)
 8006844:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	6829      	ldr	r1, [r5, #0]
 800684c:	061f      	lsls	r7, r3, #24
 800684e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006852:	d402      	bmi.n	800685a <_printf_i+0x18e>
 8006854:	065f      	lsls	r7, r3, #25
 8006856:	bf48      	it	mi
 8006858:	b2b6      	uxthmi	r6, r6
 800685a:	07df      	lsls	r7, r3, #31
 800685c:	bf48      	it	mi
 800685e:	f043 0320 	orrmi.w	r3, r3, #32
 8006862:	6029      	str	r1, [r5, #0]
 8006864:	bf48      	it	mi
 8006866:	6023      	strmi	r3, [r4, #0]
 8006868:	b91e      	cbnz	r6, 8006872 <_printf_i+0x1a6>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	f023 0320 	bic.w	r3, r3, #32
 8006870:	6023      	str	r3, [r4, #0]
 8006872:	2310      	movs	r3, #16
 8006874:	e7a6      	b.n	80067c4 <_printf_i+0xf8>
 8006876:	4824      	ldr	r0, [pc, #144]	; (8006908 <_printf_i+0x23c>)
 8006878:	e7e4      	b.n	8006844 <_printf_i+0x178>
 800687a:	4615      	mov	r5, r2
 800687c:	e7bd      	b.n	80067fa <_printf_i+0x12e>
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	6826      	ldr	r6, [r4, #0]
 8006882:	1d18      	adds	r0, r3, #4
 8006884:	6961      	ldr	r1, [r4, #20]
 8006886:	6028      	str	r0, [r5, #0]
 8006888:	0635      	lsls	r5, r6, #24
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	d501      	bpl.n	8006892 <_printf_i+0x1c6>
 800688e:	6019      	str	r1, [r3, #0]
 8006890:	e002      	b.n	8006898 <_printf_i+0x1cc>
 8006892:	0670      	lsls	r0, r6, #25
 8006894:	d5fb      	bpl.n	800688e <_printf_i+0x1c2>
 8006896:	8019      	strh	r1, [r3, #0]
 8006898:	2300      	movs	r3, #0
 800689a:	4615      	mov	r5, r2
 800689c:	6123      	str	r3, [r4, #16]
 800689e:	e7bc      	b.n	800681a <_printf_i+0x14e>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	2100      	movs	r1, #0
 80068a4:	1d1a      	adds	r2, r3, #4
 80068a6:	602a      	str	r2, [r5, #0]
 80068a8:	681d      	ldr	r5, [r3, #0]
 80068aa:	6862      	ldr	r2, [r4, #4]
 80068ac:	4628      	mov	r0, r5
 80068ae:	f000 fc57 	bl	8007160 <memchr>
 80068b2:	b108      	cbz	r0, 80068b8 <_printf_i+0x1ec>
 80068b4:	1b40      	subs	r0, r0, r5
 80068b6:	6060      	str	r0, [r4, #4]
 80068b8:	6863      	ldr	r3, [r4, #4]
 80068ba:	6123      	str	r3, [r4, #16]
 80068bc:	2300      	movs	r3, #0
 80068be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068c2:	e7aa      	b.n	800681a <_printf_i+0x14e>
 80068c4:	462a      	mov	r2, r5
 80068c6:	4649      	mov	r1, r9
 80068c8:	4640      	mov	r0, r8
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	47d0      	blx	sl
 80068ce:	3001      	adds	r0, #1
 80068d0:	d0ad      	beq.n	800682e <_printf_i+0x162>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	079b      	lsls	r3, r3, #30
 80068d6:	d413      	bmi.n	8006900 <_printf_i+0x234>
 80068d8:	68e0      	ldr	r0, [r4, #12]
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	4298      	cmp	r0, r3
 80068de:	bfb8      	it	lt
 80068e0:	4618      	movlt	r0, r3
 80068e2:	e7a6      	b.n	8006832 <_printf_i+0x166>
 80068e4:	2301      	movs	r3, #1
 80068e6:	4632      	mov	r2, r6
 80068e8:	4649      	mov	r1, r9
 80068ea:	4640      	mov	r0, r8
 80068ec:	47d0      	blx	sl
 80068ee:	3001      	adds	r0, #1
 80068f0:	d09d      	beq.n	800682e <_printf_i+0x162>
 80068f2:	3501      	adds	r5, #1
 80068f4:	68e3      	ldr	r3, [r4, #12]
 80068f6:	9903      	ldr	r1, [sp, #12]
 80068f8:	1a5b      	subs	r3, r3, r1
 80068fa:	42ab      	cmp	r3, r5
 80068fc:	dcf2      	bgt.n	80068e4 <_printf_i+0x218>
 80068fe:	e7eb      	b.n	80068d8 <_printf_i+0x20c>
 8006900:	2500      	movs	r5, #0
 8006902:	f104 0619 	add.w	r6, r4, #25
 8006906:	e7f5      	b.n	80068f4 <_printf_i+0x228>
 8006908:	0800b29e 	.word	0x0800b29e
 800690c:	0800b2af 	.word	0x0800b2af

08006910 <_scanf_float>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	b087      	sub	sp, #28
 8006916:	9303      	str	r3, [sp, #12]
 8006918:	688b      	ldr	r3, [r1, #8]
 800691a:	4617      	mov	r7, r2
 800691c:	1e5a      	subs	r2, r3, #1
 800691e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006922:	bf85      	ittet	hi
 8006924:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006928:	195b      	addhi	r3, r3, r5
 800692a:	2300      	movls	r3, #0
 800692c:	9302      	strhi	r3, [sp, #8]
 800692e:	bf88      	it	hi
 8006930:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006934:	468b      	mov	fp, r1
 8006936:	f04f 0500 	mov.w	r5, #0
 800693a:	bf8c      	ite	hi
 800693c:	608b      	strhi	r3, [r1, #8]
 800693e:	9302      	strls	r3, [sp, #8]
 8006940:	680b      	ldr	r3, [r1, #0]
 8006942:	4680      	mov	r8, r0
 8006944:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006948:	f84b 3b1c 	str.w	r3, [fp], #28
 800694c:	460c      	mov	r4, r1
 800694e:	465e      	mov	r6, fp
 8006950:	46aa      	mov	sl, r5
 8006952:	46a9      	mov	r9, r5
 8006954:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006958:	9501      	str	r5, [sp, #4]
 800695a:	68a2      	ldr	r2, [r4, #8]
 800695c:	b152      	cbz	r2, 8006974 <_scanf_float+0x64>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b4e      	cmp	r3, #78	; 0x4e
 8006964:	d864      	bhi.n	8006a30 <_scanf_float+0x120>
 8006966:	2b40      	cmp	r3, #64	; 0x40
 8006968:	d83c      	bhi.n	80069e4 <_scanf_float+0xd4>
 800696a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800696e:	b2c8      	uxtb	r0, r1
 8006970:	280e      	cmp	r0, #14
 8006972:	d93a      	bls.n	80069ea <_scanf_float+0xda>
 8006974:	f1b9 0f00 	cmp.w	r9, #0
 8006978:	d003      	beq.n	8006982 <_scanf_float+0x72>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006986:	f1ba 0f01 	cmp.w	sl, #1
 800698a:	f200 8113 	bhi.w	8006bb4 <_scanf_float+0x2a4>
 800698e:	455e      	cmp	r6, fp
 8006990:	f200 8105 	bhi.w	8006b9e <_scanf_float+0x28e>
 8006994:	2501      	movs	r5, #1
 8006996:	4628      	mov	r0, r5
 8006998:	b007      	add	sp, #28
 800699a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80069a2:	2a0d      	cmp	r2, #13
 80069a4:	d8e6      	bhi.n	8006974 <_scanf_float+0x64>
 80069a6:	a101      	add	r1, pc, #4	; (adr r1, 80069ac <_scanf_float+0x9c>)
 80069a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069ac:	08006aeb 	.word	0x08006aeb
 80069b0:	08006975 	.word	0x08006975
 80069b4:	08006975 	.word	0x08006975
 80069b8:	08006975 	.word	0x08006975
 80069bc:	08006b4b 	.word	0x08006b4b
 80069c0:	08006b23 	.word	0x08006b23
 80069c4:	08006975 	.word	0x08006975
 80069c8:	08006975 	.word	0x08006975
 80069cc:	08006af9 	.word	0x08006af9
 80069d0:	08006975 	.word	0x08006975
 80069d4:	08006975 	.word	0x08006975
 80069d8:	08006975 	.word	0x08006975
 80069dc:	08006975 	.word	0x08006975
 80069e0:	08006ab1 	.word	0x08006ab1
 80069e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80069e8:	e7db      	b.n	80069a2 <_scanf_float+0x92>
 80069ea:	290e      	cmp	r1, #14
 80069ec:	d8c2      	bhi.n	8006974 <_scanf_float+0x64>
 80069ee:	a001      	add	r0, pc, #4	; (adr r0, 80069f4 <_scanf_float+0xe4>)
 80069f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80069f4:	08006aa3 	.word	0x08006aa3
 80069f8:	08006975 	.word	0x08006975
 80069fc:	08006aa3 	.word	0x08006aa3
 8006a00:	08006b37 	.word	0x08006b37
 8006a04:	08006975 	.word	0x08006975
 8006a08:	08006a51 	.word	0x08006a51
 8006a0c:	08006a8d 	.word	0x08006a8d
 8006a10:	08006a8d 	.word	0x08006a8d
 8006a14:	08006a8d 	.word	0x08006a8d
 8006a18:	08006a8d 	.word	0x08006a8d
 8006a1c:	08006a8d 	.word	0x08006a8d
 8006a20:	08006a8d 	.word	0x08006a8d
 8006a24:	08006a8d 	.word	0x08006a8d
 8006a28:	08006a8d 	.word	0x08006a8d
 8006a2c:	08006a8d 	.word	0x08006a8d
 8006a30:	2b6e      	cmp	r3, #110	; 0x6e
 8006a32:	d809      	bhi.n	8006a48 <_scanf_float+0x138>
 8006a34:	2b60      	cmp	r3, #96	; 0x60
 8006a36:	d8b2      	bhi.n	800699e <_scanf_float+0x8e>
 8006a38:	2b54      	cmp	r3, #84	; 0x54
 8006a3a:	d077      	beq.n	8006b2c <_scanf_float+0x21c>
 8006a3c:	2b59      	cmp	r3, #89	; 0x59
 8006a3e:	d199      	bne.n	8006974 <_scanf_float+0x64>
 8006a40:	2d07      	cmp	r5, #7
 8006a42:	d197      	bne.n	8006974 <_scanf_float+0x64>
 8006a44:	2508      	movs	r5, #8
 8006a46:	e029      	b.n	8006a9c <_scanf_float+0x18c>
 8006a48:	2b74      	cmp	r3, #116	; 0x74
 8006a4a:	d06f      	beq.n	8006b2c <_scanf_float+0x21c>
 8006a4c:	2b79      	cmp	r3, #121	; 0x79
 8006a4e:	e7f6      	b.n	8006a3e <_scanf_float+0x12e>
 8006a50:	6821      	ldr	r1, [r4, #0]
 8006a52:	05c8      	lsls	r0, r1, #23
 8006a54:	d51a      	bpl.n	8006a8c <_scanf_float+0x17c>
 8006a56:	9b02      	ldr	r3, [sp, #8]
 8006a58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006a5c:	6021      	str	r1, [r4, #0]
 8006a5e:	f109 0901 	add.w	r9, r9, #1
 8006a62:	b11b      	cbz	r3, 8006a6c <_scanf_float+0x15c>
 8006a64:	3b01      	subs	r3, #1
 8006a66:	3201      	adds	r2, #1
 8006a68:	9302      	str	r3, [sp, #8]
 8006a6a:	60a2      	str	r2, [r4, #8]
 8006a6c:	68a3      	ldr	r3, [r4, #8]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	60a3      	str	r3, [r4, #8]
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	3301      	adds	r3, #1
 8006a76:	6123      	str	r3, [r4, #16]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	607b      	str	r3, [r7, #4]
 8006a80:	f340 8084 	ble.w	8006b8c <_scanf_float+0x27c>
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	3301      	adds	r3, #1
 8006a88:	603b      	str	r3, [r7, #0]
 8006a8a:	e766      	b.n	800695a <_scanf_float+0x4a>
 8006a8c:	eb1a 0f05 	cmn.w	sl, r5
 8006a90:	f47f af70 	bne.w	8006974 <_scanf_float+0x64>
 8006a94:	6822      	ldr	r2, [r4, #0]
 8006a96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006a9a:	6022      	str	r2, [r4, #0]
 8006a9c:	f806 3b01 	strb.w	r3, [r6], #1
 8006aa0:	e7e4      	b.n	8006a6c <_scanf_float+0x15c>
 8006aa2:	6822      	ldr	r2, [r4, #0]
 8006aa4:	0610      	lsls	r0, r2, #24
 8006aa6:	f57f af65 	bpl.w	8006974 <_scanf_float+0x64>
 8006aaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aae:	e7f4      	b.n	8006a9a <_scanf_float+0x18a>
 8006ab0:	f1ba 0f00 	cmp.w	sl, #0
 8006ab4:	d10e      	bne.n	8006ad4 <_scanf_float+0x1c4>
 8006ab6:	f1b9 0f00 	cmp.w	r9, #0
 8006aba:	d10e      	bne.n	8006ada <_scanf_float+0x1ca>
 8006abc:	6822      	ldr	r2, [r4, #0]
 8006abe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006ac2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006ac6:	d108      	bne.n	8006ada <_scanf_float+0x1ca>
 8006ac8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006acc:	f04f 0a01 	mov.w	sl, #1
 8006ad0:	6022      	str	r2, [r4, #0]
 8006ad2:	e7e3      	b.n	8006a9c <_scanf_float+0x18c>
 8006ad4:	f1ba 0f02 	cmp.w	sl, #2
 8006ad8:	d055      	beq.n	8006b86 <_scanf_float+0x276>
 8006ada:	2d01      	cmp	r5, #1
 8006adc:	d002      	beq.n	8006ae4 <_scanf_float+0x1d4>
 8006ade:	2d04      	cmp	r5, #4
 8006ae0:	f47f af48 	bne.w	8006974 <_scanf_float+0x64>
 8006ae4:	3501      	adds	r5, #1
 8006ae6:	b2ed      	uxtb	r5, r5
 8006ae8:	e7d8      	b.n	8006a9c <_scanf_float+0x18c>
 8006aea:	f1ba 0f01 	cmp.w	sl, #1
 8006aee:	f47f af41 	bne.w	8006974 <_scanf_float+0x64>
 8006af2:	f04f 0a02 	mov.w	sl, #2
 8006af6:	e7d1      	b.n	8006a9c <_scanf_float+0x18c>
 8006af8:	b97d      	cbnz	r5, 8006b1a <_scanf_float+0x20a>
 8006afa:	f1b9 0f00 	cmp.w	r9, #0
 8006afe:	f47f af3c 	bne.w	800697a <_scanf_float+0x6a>
 8006b02:	6822      	ldr	r2, [r4, #0]
 8006b04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b0c:	f47f af39 	bne.w	8006982 <_scanf_float+0x72>
 8006b10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b14:	2501      	movs	r5, #1
 8006b16:	6022      	str	r2, [r4, #0]
 8006b18:	e7c0      	b.n	8006a9c <_scanf_float+0x18c>
 8006b1a:	2d03      	cmp	r5, #3
 8006b1c:	d0e2      	beq.n	8006ae4 <_scanf_float+0x1d4>
 8006b1e:	2d05      	cmp	r5, #5
 8006b20:	e7de      	b.n	8006ae0 <_scanf_float+0x1d0>
 8006b22:	2d02      	cmp	r5, #2
 8006b24:	f47f af26 	bne.w	8006974 <_scanf_float+0x64>
 8006b28:	2503      	movs	r5, #3
 8006b2a:	e7b7      	b.n	8006a9c <_scanf_float+0x18c>
 8006b2c:	2d06      	cmp	r5, #6
 8006b2e:	f47f af21 	bne.w	8006974 <_scanf_float+0x64>
 8006b32:	2507      	movs	r5, #7
 8006b34:	e7b2      	b.n	8006a9c <_scanf_float+0x18c>
 8006b36:	6822      	ldr	r2, [r4, #0]
 8006b38:	0591      	lsls	r1, r2, #22
 8006b3a:	f57f af1b 	bpl.w	8006974 <_scanf_float+0x64>
 8006b3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006b42:	6022      	str	r2, [r4, #0]
 8006b44:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b48:	e7a8      	b.n	8006a9c <_scanf_float+0x18c>
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006b50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006b54:	d006      	beq.n	8006b64 <_scanf_float+0x254>
 8006b56:	0550      	lsls	r0, r2, #21
 8006b58:	f57f af0c 	bpl.w	8006974 <_scanf_float+0x64>
 8006b5c:	f1b9 0f00 	cmp.w	r9, #0
 8006b60:	f43f af0f 	beq.w	8006982 <_scanf_float+0x72>
 8006b64:	0591      	lsls	r1, r2, #22
 8006b66:	bf58      	it	pl
 8006b68:	9901      	ldrpl	r1, [sp, #4]
 8006b6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b6e:	bf58      	it	pl
 8006b70:	eba9 0101 	subpl.w	r1, r9, r1
 8006b74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006b78:	f04f 0900 	mov.w	r9, #0
 8006b7c:	bf58      	it	pl
 8006b7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006b82:	6022      	str	r2, [r4, #0]
 8006b84:	e78a      	b.n	8006a9c <_scanf_float+0x18c>
 8006b86:	f04f 0a03 	mov.w	sl, #3
 8006b8a:	e787      	b.n	8006a9c <_scanf_float+0x18c>
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	4640      	mov	r0, r8
 8006b90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b94:	4798      	blx	r3
 8006b96:	2800      	cmp	r0, #0
 8006b98:	f43f aedf 	beq.w	800695a <_scanf_float+0x4a>
 8006b9c:	e6ea      	b.n	8006974 <_scanf_float+0x64>
 8006b9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ba2:	463a      	mov	r2, r7
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006baa:	4798      	blx	r3
 8006bac:	6923      	ldr	r3, [r4, #16]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	6123      	str	r3, [r4, #16]
 8006bb2:	e6ec      	b.n	800698e <_scanf_float+0x7e>
 8006bb4:	1e6b      	subs	r3, r5, #1
 8006bb6:	2b06      	cmp	r3, #6
 8006bb8:	d825      	bhi.n	8006c06 <_scanf_float+0x2f6>
 8006bba:	2d02      	cmp	r5, #2
 8006bbc:	d836      	bhi.n	8006c2c <_scanf_float+0x31c>
 8006bbe:	455e      	cmp	r6, fp
 8006bc0:	f67f aee8 	bls.w	8006994 <_scanf_float+0x84>
 8006bc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bc8:	463a      	mov	r2, r7
 8006bca:	4640      	mov	r0, r8
 8006bcc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bd0:	4798      	blx	r3
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	6123      	str	r3, [r4, #16]
 8006bd8:	e7f1      	b.n	8006bbe <_scanf_float+0x2ae>
 8006bda:	9802      	ldr	r0, [sp, #8]
 8006bdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006be0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006be4:	463a      	mov	r2, r7
 8006be6:	9002      	str	r0, [sp, #8]
 8006be8:	4640      	mov	r0, r8
 8006bea:	4798      	blx	r3
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	6123      	str	r3, [r4, #16]
 8006bf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bf6:	fa5f fa8a 	uxtb.w	sl, sl
 8006bfa:	f1ba 0f02 	cmp.w	sl, #2
 8006bfe:	d1ec      	bne.n	8006bda <_scanf_float+0x2ca>
 8006c00:	3d03      	subs	r5, #3
 8006c02:	b2ed      	uxtb	r5, r5
 8006c04:	1b76      	subs	r6, r6, r5
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	05da      	lsls	r2, r3, #23
 8006c0a:	d52f      	bpl.n	8006c6c <_scanf_float+0x35c>
 8006c0c:	055b      	lsls	r3, r3, #21
 8006c0e:	d510      	bpl.n	8006c32 <_scanf_float+0x322>
 8006c10:	455e      	cmp	r6, fp
 8006c12:	f67f aebf 	bls.w	8006994 <_scanf_float+0x84>
 8006c16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c1a:	463a      	mov	r2, r7
 8006c1c:	4640      	mov	r0, r8
 8006c1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c22:	4798      	blx	r3
 8006c24:	6923      	ldr	r3, [r4, #16]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	6123      	str	r3, [r4, #16]
 8006c2a:	e7f1      	b.n	8006c10 <_scanf_float+0x300>
 8006c2c:	46aa      	mov	sl, r5
 8006c2e:	9602      	str	r6, [sp, #8]
 8006c30:	e7df      	b.n	8006bf2 <_scanf_float+0x2e2>
 8006c32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c36:	6923      	ldr	r3, [r4, #16]
 8006c38:	2965      	cmp	r1, #101	; 0x65
 8006c3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c42:	6123      	str	r3, [r4, #16]
 8006c44:	d00c      	beq.n	8006c60 <_scanf_float+0x350>
 8006c46:	2945      	cmp	r1, #69	; 0x45
 8006c48:	d00a      	beq.n	8006c60 <_scanf_float+0x350>
 8006c4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c4e:	463a      	mov	r2, r7
 8006c50:	4640      	mov	r0, r8
 8006c52:	4798      	blx	r3
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	1eb5      	subs	r5, r6, #2
 8006c5e:	6123      	str	r3, [r4, #16]
 8006c60:	463a      	mov	r2, r7
 8006c62:	4640      	mov	r0, r8
 8006c64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c68:	4798      	blx	r3
 8006c6a:	462e      	mov	r6, r5
 8006c6c:	6825      	ldr	r5, [r4, #0]
 8006c6e:	f015 0510 	ands.w	r5, r5, #16
 8006c72:	d155      	bne.n	8006d20 <_scanf_float+0x410>
 8006c74:	7035      	strb	r5, [r6, #0]
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c80:	d11d      	bne.n	8006cbe <_scanf_float+0x3ae>
 8006c82:	9b01      	ldr	r3, [sp, #4]
 8006c84:	454b      	cmp	r3, r9
 8006c86:	eba3 0209 	sub.w	r2, r3, r9
 8006c8a:	d125      	bne.n	8006cd8 <_scanf_float+0x3c8>
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	4659      	mov	r1, fp
 8006c90:	4640      	mov	r0, r8
 8006c92:	f002 fcb5 	bl	8009600 <_strtod_r>
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	f8d4 c000 	ldr.w	ip, [r4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f01c 0f02 	tst.w	ip, #2
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	460f      	mov	r7, r1
 8006ca6:	f103 0204 	add.w	r2, r3, #4
 8006caa:	d020      	beq.n	8006cee <_scanf_float+0x3de>
 8006cac:	9903      	ldr	r1, [sp, #12]
 8006cae:	600a      	str	r2, [r1, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	e9c3 6700 	strd	r6, r7, [r3]
 8006cb6:	68e3      	ldr	r3, [r4, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	60e3      	str	r3, [r4, #12]
 8006cbc:	e66b      	b.n	8006996 <_scanf_float+0x86>
 8006cbe:	9b04      	ldr	r3, [sp, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0e3      	beq.n	8006c8c <_scanf_float+0x37c>
 8006cc4:	9905      	ldr	r1, [sp, #20]
 8006cc6:	230a      	movs	r3, #10
 8006cc8:	462a      	mov	r2, r5
 8006cca:	4640      	mov	r0, r8
 8006ccc:	3101      	adds	r1, #1
 8006cce:	f002 fd1b 	bl	8009708 <_strtol_r>
 8006cd2:	9b04      	ldr	r3, [sp, #16]
 8006cd4:	9e05      	ldr	r6, [sp, #20]
 8006cd6:	1ac2      	subs	r2, r0, r3
 8006cd8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006cdc:	429e      	cmp	r6, r3
 8006cde:	bf28      	it	cs
 8006ce0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	490f      	ldr	r1, [pc, #60]	; (8006d24 <_scanf_float+0x414>)
 8006ce8:	f000 f8d0 	bl	8006e8c <siprintf>
 8006cec:	e7ce      	b.n	8006c8c <_scanf_float+0x37c>
 8006cee:	f01c 0f04 	tst.w	ip, #4
 8006cf2:	d1db      	bne.n	8006cac <_scanf_float+0x39c>
 8006cf4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006cf8:	f8cc 2000 	str.w	r2, [ip]
 8006cfc:	f8d3 8000 	ldr.w	r8, [r3]
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	f7f9 fe8c 	bl	8000a20 <__aeabi_dcmpun>
 8006d08:	b128      	cbz	r0, 8006d16 <_scanf_float+0x406>
 8006d0a:	4807      	ldr	r0, [pc, #28]	; (8006d28 <_scanf_float+0x418>)
 8006d0c:	f000 fa36 	bl	800717c <nanf>
 8006d10:	f8c8 0000 	str.w	r0, [r8]
 8006d14:	e7cf      	b.n	8006cb6 <_scanf_float+0x3a6>
 8006d16:	4630      	mov	r0, r6
 8006d18:	4639      	mov	r1, r7
 8006d1a:	f7f9 fedf 	bl	8000adc <__aeabi_d2f>
 8006d1e:	e7f7      	b.n	8006d10 <_scanf_float+0x400>
 8006d20:	2500      	movs	r5, #0
 8006d22:	e638      	b.n	8006996 <_scanf_float+0x86>
 8006d24:	0800b2c0 	.word	0x0800b2c0
 8006d28:	0800b371 	.word	0x0800b371

08006d2c <std>:
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	b510      	push	{r4, lr}
 8006d30:	4604      	mov	r4, r0
 8006d32:	e9c0 3300 	strd	r3, r3, [r0]
 8006d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d3a:	6083      	str	r3, [r0, #8]
 8006d3c:	8181      	strh	r1, [r0, #12]
 8006d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8006d40:	81c2      	strh	r2, [r0, #14]
 8006d42:	6183      	str	r3, [r0, #24]
 8006d44:	4619      	mov	r1, r3
 8006d46:	2208      	movs	r2, #8
 8006d48:	305c      	adds	r0, #92	; 0x5c
 8006d4a:	f000 f92e 	bl	8006faa <memset>
 8006d4e:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <std+0x38>)
 8006d50:	6224      	str	r4, [r4, #32]
 8006d52:	6263      	str	r3, [r4, #36]	; 0x24
 8006d54:	4b04      	ldr	r3, [pc, #16]	; (8006d68 <std+0x3c>)
 8006d56:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d58:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <std+0x40>)
 8006d5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d5c:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <std+0x44>)
 8006d5e:	6323      	str	r3, [r4, #48]	; 0x30
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	bf00      	nop
 8006d64:	08006f21 	.word	0x08006f21
 8006d68:	08006f47 	.word	0x08006f47
 8006d6c:	08006f7f 	.word	0x08006f7f
 8006d70:	08006fa3 	.word	0x08006fa3

08006d74 <stdio_exit_handler>:
 8006d74:	4a02      	ldr	r2, [pc, #8]	; (8006d80 <stdio_exit_handler+0xc>)
 8006d76:	4903      	ldr	r1, [pc, #12]	; (8006d84 <stdio_exit_handler+0x10>)
 8006d78:	4803      	ldr	r0, [pc, #12]	; (8006d88 <stdio_exit_handler+0x14>)
 8006d7a:	f000 b869 	b.w	8006e50 <_fwalk_sglue>
 8006d7e:	bf00      	nop
 8006d80:	20000034 	.word	0x20000034
 8006d84:	0800a0fd 	.word	0x0800a0fd
 8006d88:	20000040 	.word	0x20000040

08006d8c <cleanup_stdio>:
 8006d8c:	6841      	ldr	r1, [r0, #4]
 8006d8e:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <cleanup_stdio+0x34>)
 8006d90:	b510      	push	{r4, lr}
 8006d92:	4299      	cmp	r1, r3
 8006d94:	4604      	mov	r4, r0
 8006d96:	d001      	beq.n	8006d9c <cleanup_stdio+0x10>
 8006d98:	f003 f9b0 	bl	800a0fc <_fflush_r>
 8006d9c:	68a1      	ldr	r1, [r4, #8]
 8006d9e:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <cleanup_stdio+0x38>)
 8006da0:	4299      	cmp	r1, r3
 8006da2:	d002      	beq.n	8006daa <cleanup_stdio+0x1e>
 8006da4:	4620      	mov	r0, r4
 8006da6:	f003 f9a9 	bl	800a0fc <_fflush_r>
 8006daa:	68e1      	ldr	r1, [r4, #12]
 8006dac:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <cleanup_stdio+0x3c>)
 8006dae:	4299      	cmp	r1, r3
 8006db0:	d004      	beq.n	8006dbc <cleanup_stdio+0x30>
 8006db2:	4620      	mov	r0, r4
 8006db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db8:	f003 b9a0 	b.w	800a0fc <_fflush_r>
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	bf00      	nop
 8006dc0:	200004c4 	.word	0x200004c4
 8006dc4:	2000052c 	.word	0x2000052c
 8006dc8:	20000594 	.word	0x20000594

08006dcc <global_stdio_init.part.0>:
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <global_stdio_init.part.0+0x30>)
 8006dd0:	4c0b      	ldr	r4, [pc, #44]	; (8006e00 <global_stdio_init.part.0+0x34>)
 8006dd2:	4a0c      	ldr	r2, [pc, #48]	; (8006e04 <global_stdio_init.part.0+0x38>)
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	2104      	movs	r1, #4
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f7ff ffa6 	bl	8006d2c <std>
 8006de0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006de4:	2201      	movs	r2, #1
 8006de6:	2109      	movs	r1, #9
 8006de8:	f7ff ffa0 	bl	8006d2c <std>
 8006dec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006df0:	2202      	movs	r2, #2
 8006df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df6:	2112      	movs	r1, #18
 8006df8:	f7ff bf98 	b.w	8006d2c <std>
 8006dfc:	200005fc 	.word	0x200005fc
 8006e00:	200004c4 	.word	0x200004c4
 8006e04:	08006d75 	.word	0x08006d75

08006e08 <__sfp_lock_acquire>:
 8006e08:	4801      	ldr	r0, [pc, #4]	; (8006e10 <__sfp_lock_acquire+0x8>)
 8006e0a:	f000 b9a7 	b.w	800715c <__retarget_lock_acquire_recursive>
 8006e0e:	bf00      	nop
 8006e10:	20000605 	.word	0x20000605

08006e14 <__sfp_lock_release>:
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <__sfp_lock_release+0x8>)
 8006e16:	f000 b9a2 	b.w	800715e <__retarget_lock_release_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	20000605 	.word	0x20000605

08006e20 <__sinit>:
 8006e20:	b510      	push	{r4, lr}
 8006e22:	4604      	mov	r4, r0
 8006e24:	f7ff fff0 	bl	8006e08 <__sfp_lock_acquire>
 8006e28:	6a23      	ldr	r3, [r4, #32]
 8006e2a:	b11b      	cbz	r3, 8006e34 <__sinit+0x14>
 8006e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e30:	f7ff bff0 	b.w	8006e14 <__sfp_lock_release>
 8006e34:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <__sinit+0x28>)
 8006e36:	6223      	str	r3, [r4, #32]
 8006e38:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <__sinit+0x2c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1f5      	bne.n	8006e2c <__sinit+0xc>
 8006e40:	f7ff ffc4 	bl	8006dcc <global_stdio_init.part.0>
 8006e44:	e7f2      	b.n	8006e2c <__sinit+0xc>
 8006e46:	bf00      	nop
 8006e48:	08006d8d 	.word	0x08006d8d
 8006e4c:	200005fc 	.word	0x200005fc

08006e50 <_fwalk_sglue>:
 8006e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e54:	4607      	mov	r7, r0
 8006e56:	4688      	mov	r8, r1
 8006e58:	4614      	mov	r4, r2
 8006e5a:	2600      	movs	r6, #0
 8006e5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e60:	f1b9 0901 	subs.w	r9, r9, #1
 8006e64:	d505      	bpl.n	8006e72 <_fwalk_sglue+0x22>
 8006e66:	6824      	ldr	r4, [r4, #0]
 8006e68:	2c00      	cmp	r4, #0
 8006e6a:	d1f7      	bne.n	8006e5c <_fwalk_sglue+0xc>
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e72:	89ab      	ldrh	r3, [r5, #12]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d907      	bls.n	8006e88 <_fwalk_sglue+0x38>
 8006e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	d003      	beq.n	8006e88 <_fwalk_sglue+0x38>
 8006e80:	4629      	mov	r1, r5
 8006e82:	4638      	mov	r0, r7
 8006e84:	47c0      	blx	r8
 8006e86:	4306      	orrs	r6, r0
 8006e88:	3568      	adds	r5, #104	; 0x68
 8006e8a:	e7e9      	b.n	8006e60 <_fwalk_sglue+0x10>

08006e8c <siprintf>:
 8006e8c:	b40e      	push	{r1, r2, r3}
 8006e8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e92:	b500      	push	{lr}
 8006e94:	b09c      	sub	sp, #112	; 0x70
 8006e96:	ab1d      	add	r3, sp, #116	; 0x74
 8006e98:	9002      	str	r0, [sp, #8]
 8006e9a:	9006      	str	r0, [sp, #24]
 8006e9c:	9107      	str	r1, [sp, #28]
 8006e9e:	9104      	str	r1, [sp, #16]
 8006ea0:	4808      	ldr	r0, [pc, #32]	; (8006ec4 <siprintf+0x38>)
 8006ea2:	4909      	ldr	r1, [pc, #36]	; (8006ec8 <siprintf+0x3c>)
 8006ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea8:	9105      	str	r1, [sp, #20]
 8006eaa:	6800      	ldr	r0, [r0, #0]
 8006eac:	a902      	add	r1, sp, #8
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	f002 fc86 	bl	80097c0 <_svfiprintf_r>
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	9b02      	ldr	r3, [sp, #8]
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	b01c      	add	sp, #112	; 0x70
 8006ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec0:	b003      	add	sp, #12
 8006ec2:	4770      	bx	lr
 8006ec4:	2000008c 	.word	0x2000008c
 8006ec8:	ffff0208 	.word	0xffff0208

08006ecc <siscanf>:
 8006ecc:	b40e      	push	{r1, r2, r3}
 8006ece:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006ed2:	b530      	push	{r4, r5, lr}
 8006ed4:	b09c      	sub	sp, #112	; 0x70
 8006ed6:	ac1f      	add	r4, sp, #124	; 0x7c
 8006ed8:	f854 5b04 	ldr.w	r5, [r4], #4
 8006edc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006ee0:	9002      	str	r0, [sp, #8]
 8006ee2:	9006      	str	r0, [sp, #24]
 8006ee4:	f7f9 f93e 	bl	8000164 <strlen>
 8006ee8:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <siscanf+0x4c>)
 8006eea:	9003      	str	r0, [sp, #12]
 8006eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eee:	2300      	movs	r3, #0
 8006ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ef2:	9314      	str	r3, [sp, #80]	; 0x50
 8006ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ef8:	9007      	str	r0, [sp, #28]
 8006efa:	4808      	ldr	r0, [pc, #32]	; (8006f1c <siscanf+0x50>)
 8006efc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f00:	462a      	mov	r2, r5
 8006f02:	4623      	mov	r3, r4
 8006f04:	a902      	add	r1, sp, #8
 8006f06:	6800      	ldr	r0, [r0, #0]
 8006f08:	9401      	str	r4, [sp, #4]
 8006f0a:	f002 fdb1 	bl	8009a70 <__ssvfiscanf_r>
 8006f0e:	b01c      	add	sp, #112	; 0x70
 8006f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f14:	b003      	add	sp, #12
 8006f16:	4770      	bx	lr
 8006f18:	08006f43 	.word	0x08006f43
 8006f1c:	2000008c 	.word	0x2000008c

08006f20 <__sread>:
 8006f20:	b510      	push	{r4, lr}
 8006f22:	460c      	mov	r4, r1
 8006f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f28:	f000 f8ca 	bl	80070c0 <_read_r>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	bfab      	itete	ge
 8006f30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f32:	89a3      	ldrhlt	r3, [r4, #12]
 8006f34:	181b      	addge	r3, r3, r0
 8006f36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f3a:	bfac      	ite	ge
 8006f3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f3e:	81a3      	strhlt	r3, [r4, #12]
 8006f40:	bd10      	pop	{r4, pc}

08006f42 <__seofread>:
 8006f42:	2000      	movs	r0, #0
 8006f44:	4770      	bx	lr

08006f46 <__swrite>:
 8006f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4a:	461f      	mov	r7, r3
 8006f4c:	898b      	ldrh	r3, [r1, #12]
 8006f4e:	4605      	mov	r5, r0
 8006f50:	05db      	lsls	r3, r3, #23
 8006f52:	460c      	mov	r4, r1
 8006f54:	4616      	mov	r6, r2
 8006f56:	d505      	bpl.n	8006f64 <__swrite+0x1e>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f60:	f000 f89c 	bl	800709c <_lseek_r>
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	4632      	mov	r2, r6
 8006f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f6c:	81a3      	strh	r3, [r4, #12]
 8006f6e:	4628      	mov	r0, r5
 8006f70:	463b      	mov	r3, r7
 8006f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7a:	f000 b8b3 	b.w	80070e4 <_write_r>

08006f7e <__sseek>:
 8006f7e:	b510      	push	{r4, lr}
 8006f80:	460c      	mov	r4, r1
 8006f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f86:	f000 f889 	bl	800709c <_lseek_r>
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	bf15      	itete	ne
 8006f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f9a:	81a3      	strheq	r3, [r4, #12]
 8006f9c:	bf18      	it	ne
 8006f9e:	81a3      	strhne	r3, [r4, #12]
 8006fa0:	bd10      	pop	{r4, pc}

08006fa2 <__sclose>:
 8006fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa6:	f000 b869 	b.w	800707c <_close_r>

08006faa <memset>:
 8006faa:	4603      	mov	r3, r0
 8006fac:	4402      	add	r2, r0
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d100      	bne.n	8006fb4 <memset+0xa>
 8006fb2:	4770      	bx	lr
 8006fb4:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb8:	e7f9      	b.n	8006fae <memset+0x4>
	...

08006fbc <strtok>:
 8006fbc:	4b16      	ldr	r3, [pc, #88]	; (8007018 <strtok+0x5c>)
 8006fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc2:	681f      	ldr	r7, [r3, #0]
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8006fc8:	460e      	mov	r6, r1
 8006fca:	b9ec      	cbnz	r4, 8007008 <strtok+0x4c>
 8006fcc:	2050      	movs	r0, #80	; 0x50
 8006fce:	f000 ffaf 	bl	8007f30 <malloc>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	6478      	str	r0, [r7, #68]	; 0x44
 8006fd6:	b920      	cbnz	r0, 8006fe2 <strtok+0x26>
 8006fd8:	215b      	movs	r1, #91	; 0x5b
 8006fda:	4b10      	ldr	r3, [pc, #64]	; (800701c <strtok+0x60>)
 8006fdc:	4810      	ldr	r0, [pc, #64]	; (8007020 <strtok+0x64>)
 8006fde:	f000 f8d1 	bl	8007184 <__assert_func>
 8006fe2:	e9c0 4400 	strd	r4, r4, [r0]
 8006fe6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006fea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006fee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006ff2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006ff6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006ffa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006ffe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007002:	6184      	str	r4, [r0, #24]
 8007004:	7704      	strb	r4, [r0, #28]
 8007006:	6244      	str	r4, [r0, #36]	; 0x24
 8007008:	4631      	mov	r1, r6
 800700a:	4628      	mov	r0, r5
 800700c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800700e:	2301      	movs	r3, #1
 8007010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007014:	f000 b806 	b.w	8007024 <__strtok_r>
 8007018:	2000008c 	.word	0x2000008c
 800701c:	0800b2c5 	.word	0x0800b2c5
 8007020:	0800b2dc 	.word	0x0800b2dc

08007024 <__strtok_r>:
 8007024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007026:	b908      	cbnz	r0, 800702c <__strtok_r+0x8>
 8007028:	6810      	ldr	r0, [r2, #0]
 800702a:	b188      	cbz	r0, 8007050 <__strtok_r+0x2c>
 800702c:	4604      	mov	r4, r0
 800702e:	460f      	mov	r7, r1
 8007030:	4620      	mov	r0, r4
 8007032:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007036:	f817 6b01 	ldrb.w	r6, [r7], #1
 800703a:	b91e      	cbnz	r6, 8007044 <__strtok_r+0x20>
 800703c:	b965      	cbnz	r5, 8007058 <__strtok_r+0x34>
 800703e:	4628      	mov	r0, r5
 8007040:	6015      	str	r5, [r2, #0]
 8007042:	e005      	b.n	8007050 <__strtok_r+0x2c>
 8007044:	42b5      	cmp	r5, r6
 8007046:	d1f6      	bne.n	8007036 <__strtok_r+0x12>
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f0      	bne.n	800702e <__strtok_r+0xa>
 800704c:	6014      	str	r4, [r2, #0]
 800704e:	7003      	strb	r3, [r0, #0]
 8007050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007052:	461c      	mov	r4, r3
 8007054:	e00c      	b.n	8007070 <__strtok_r+0x4c>
 8007056:	b915      	cbnz	r5, 800705e <__strtok_r+0x3a>
 8007058:	460e      	mov	r6, r1
 800705a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800705e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007062:	42ab      	cmp	r3, r5
 8007064:	d1f7      	bne.n	8007056 <__strtok_r+0x32>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f3      	beq.n	8007052 <__strtok_r+0x2e>
 800706a:	2300      	movs	r3, #0
 800706c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007070:	6014      	str	r4, [r2, #0]
 8007072:	e7ed      	b.n	8007050 <__strtok_r+0x2c>

08007074 <_localeconv_r>:
 8007074:	4800      	ldr	r0, [pc, #0]	; (8007078 <_localeconv_r+0x4>)
 8007076:	4770      	bx	lr
 8007078:	20000180 	.word	0x20000180

0800707c <_close_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	2300      	movs	r3, #0
 8007080:	4d05      	ldr	r5, [pc, #20]	; (8007098 <_close_r+0x1c>)
 8007082:	4604      	mov	r4, r0
 8007084:	4608      	mov	r0, r1
 8007086:	602b      	str	r3, [r5, #0]
 8007088:	f7fc f846 	bl	8003118 <_close>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_close_r+0x1a>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b103      	cbz	r3, 8007096 <_close_r+0x1a>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	20000600 	.word	0x20000600

0800709c <_lseek_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4604      	mov	r4, r0
 80070a0:	4608      	mov	r0, r1
 80070a2:	4611      	mov	r1, r2
 80070a4:	2200      	movs	r2, #0
 80070a6:	4d05      	ldr	r5, [pc, #20]	; (80070bc <_lseek_r+0x20>)
 80070a8:	602a      	str	r2, [r5, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f7fc f858 	bl	8003160 <_lseek>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d102      	bne.n	80070ba <_lseek_r+0x1e>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	b103      	cbz	r3, 80070ba <_lseek_r+0x1e>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	20000600 	.word	0x20000600

080070c0 <_read_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4604      	mov	r4, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	4611      	mov	r1, r2
 80070c8:	2200      	movs	r2, #0
 80070ca:	4d05      	ldr	r5, [pc, #20]	; (80070e0 <_read_r+0x20>)
 80070cc:	602a      	str	r2, [r5, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f7fb ffe9 	bl	80030a6 <_read>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d102      	bne.n	80070de <_read_r+0x1e>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	b103      	cbz	r3, 80070de <_read_r+0x1e>
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	20000600 	.word	0x20000600

080070e4 <_write_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4604      	mov	r4, r0
 80070e8:	4608      	mov	r0, r1
 80070ea:	4611      	mov	r1, r2
 80070ec:	2200      	movs	r2, #0
 80070ee:	4d05      	ldr	r5, [pc, #20]	; (8007104 <_write_r+0x20>)
 80070f0:	602a      	str	r2, [r5, #0]
 80070f2:	461a      	mov	r2, r3
 80070f4:	f7fb fff4 	bl	80030e0 <_write>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d102      	bne.n	8007102 <_write_r+0x1e>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	b103      	cbz	r3, 8007102 <_write_r+0x1e>
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	20000600 	.word	0x20000600

08007108 <__errno>:
 8007108:	4b01      	ldr	r3, [pc, #4]	; (8007110 <__errno+0x8>)
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	2000008c 	.word	0x2000008c

08007114 <__libc_init_array>:
 8007114:	b570      	push	{r4, r5, r6, lr}
 8007116:	2600      	movs	r6, #0
 8007118:	4d0c      	ldr	r5, [pc, #48]	; (800714c <__libc_init_array+0x38>)
 800711a:	4c0d      	ldr	r4, [pc, #52]	; (8007150 <__libc_init_array+0x3c>)
 800711c:	1b64      	subs	r4, r4, r5
 800711e:	10a4      	asrs	r4, r4, #2
 8007120:	42a6      	cmp	r6, r4
 8007122:	d109      	bne.n	8007138 <__libc_init_array+0x24>
 8007124:	f003 ffc4 	bl	800b0b0 <_init>
 8007128:	2600      	movs	r6, #0
 800712a:	4d0a      	ldr	r5, [pc, #40]	; (8007154 <__libc_init_array+0x40>)
 800712c:	4c0a      	ldr	r4, [pc, #40]	; (8007158 <__libc_init_array+0x44>)
 800712e:	1b64      	subs	r4, r4, r5
 8007130:	10a4      	asrs	r4, r4, #2
 8007132:	42a6      	cmp	r6, r4
 8007134:	d105      	bne.n	8007142 <__libc_init_array+0x2e>
 8007136:	bd70      	pop	{r4, r5, r6, pc}
 8007138:	f855 3b04 	ldr.w	r3, [r5], #4
 800713c:	4798      	blx	r3
 800713e:	3601      	adds	r6, #1
 8007140:	e7ee      	b.n	8007120 <__libc_init_array+0xc>
 8007142:	f855 3b04 	ldr.w	r3, [r5], #4
 8007146:	4798      	blx	r3
 8007148:	3601      	adds	r6, #1
 800714a:	e7f2      	b.n	8007132 <__libc_init_array+0x1e>
 800714c:	0800b730 	.word	0x0800b730
 8007150:	0800b730 	.word	0x0800b730
 8007154:	0800b730 	.word	0x0800b730
 8007158:	0800b734 	.word	0x0800b734

0800715c <__retarget_lock_acquire_recursive>:
 800715c:	4770      	bx	lr

0800715e <__retarget_lock_release_recursive>:
 800715e:	4770      	bx	lr

08007160 <memchr>:
 8007160:	4603      	mov	r3, r0
 8007162:	b510      	push	{r4, lr}
 8007164:	b2c9      	uxtb	r1, r1
 8007166:	4402      	add	r2, r0
 8007168:	4293      	cmp	r3, r2
 800716a:	4618      	mov	r0, r3
 800716c:	d101      	bne.n	8007172 <memchr+0x12>
 800716e:	2000      	movs	r0, #0
 8007170:	e003      	b.n	800717a <memchr+0x1a>
 8007172:	7804      	ldrb	r4, [r0, #0]
 8007174:	3301      	adds	r3, #1
 8007176:	428c      	cmp	r4, r1
 8007178:	d1f6      	bne.n	8007168 <memchr+0x8>
 800717a:	bd10      	pop	{r4, pc}

0800717c <nanf>:
 800717c:	4800      	ldr	r0, [pc, #0]	; (8007180 <nanf+0x4>)
 800717e:	4770      	bx	lr
 8007180:	7fc00000 	.word	0x7fc00000

08007184 <__assert_func>:
 8007184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007186:	4614      	mov	r4, r2
 8007188:	461a      	mov	r2, r3
 800718a:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <__assert_func+0x2c>)
 800718c:	4605      	mov	r5, r0
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68d8      	ldr	r0, [r3, #12]
 8007192:	b14c      	cbz	r4, 80071a8 <__assert_func+0x24>
 8007194:	4b07      	ldr	r3, [pc, #28]	; (80071b4 <__assert_func+0x30>)
 8007196:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800719a:	9100      	str	r1, [sp, #0]
 800719c:	462b      	mov	r3, r5
 800719e:	4906      	ldr	r1, [pc, #24]	; (80071b8 <__assert_func+0x34>)
 80071a0:	f002 ffd4 	bl	800a14c <fiprintf>
 80071a4:	f003 f8a6 	bl	800a2f4 <abort>
 80071a8:	4b04      	ldr	r3, [pc, #16]	; (80071bc <__assert_func+0x38>)
 80071aa:	461c      	mov	r4, r3
 80071ac:	e7f3      	b.n	8007196 <__assert_func+0x12>
 80071ae:	bf00      	nop
 80071b0:	2000008c 	.word	0x2000008c
 80071b4:	0800b336 	.word	0x0800b336
 80071b8:	0800b343 	.word	0x0800b343
 80071bc:	0800b371 	.word	0x0800b371

080071c0 <quorem>:
 80071c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	6903      	ldr	r3, [r0, #16]
 80071c6:	690c      	ldr	r4, [r1, #16]
 80071c8:	4607      	mov	r7, r0
 80071ca:	42a3      	cmp	r3, r4
 80071cc:	db7f      	blt.n	80072ce <quorem+0x10e>
 80071ce:	3c01      	subs	r4, #1
 80071d0:	f100 0514 	add.w	r5, r0, #20
 80071d4:	f101 0814 	add.w	r8, r1, #20
 80071d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071e6:	3301      	adds	r3, #1
 80071e8:	429a      	cmp	r2, r3
 80071ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80071ee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80071f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071f6:	d331      	bcc.n	800725c <quorem+0x9c>
 80071f8:	f04f 0e00 	mov.w	lr, #0
 80071fc:	4640      	mov	r0, r8
 80071fe:	46ac      	mov	ip, r5
 8007200:	46f2      	mov	sl, lr
 8007202:	f850 2b04 	ldr.w	r2, [r0], #4
 8007206:	b293      	uxth	r3, r2
 8007208:	fb06 e303 	mla	r3, r6, r3, lr
 800720c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007210:	0c1a      	lsrs	r2, r3, #16
 8007212:	b29b      	uxth	r3, r3
 8007214:	fb06 220e 	mla	r2, r6, lr, r2
 8007218:	ebaa 0303 	sub.w	r3, sl, r3
 800721c:	f8dc a000 	ldr.w	sl, [ip]
 8007220:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007224:	fa1f fa8a 	uxth.w	sl, sl
 8007228:	4453      	add	r3, sl
 800722a:	f8dc a000 	ldr.w	sl, [ip]
 800722e:	b292      	uxth	r2, r2
 8007230:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007238:	b29b      	uxth	r3, r3
 800723a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800723e:	4581      	cmp	r9, r0
 8007240:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007244:	f84c 3b04 	str.w	r3, [ip], #4
 8007248:	d2db      	bcs.n	8007202 <quorem+0x42>
 800724a:	f855 300b 	ldr.w	r3, [r5, fp]
 800724e:	b92b      	cbnz	r3, 800725c <quorem+0x9c>
 8007250:	9b01      	ldr	r3, [sp, #4]
 8007252:	3b04      	subs	r3, #4
 8007254:	429d      	cmp	r5, r3
 8007256:	461a      	mov	r2, r3
 8007258:	d32d      	bcc.n	80072b6 <quorem+0xf6>
 800725a:	613c      	str	r4, [r7, #16]
 800725c:	4638      	mov	r0, r7
 800725e:	f001 f9df 	bl	8008620 <__mcmp>
 8007262:	2800      	cmp	r0, #0
 8007264:	db23      	blt.n	80072ae <quorem+0xee>
 8007266:	4629      	mov	r1, r5
 8007268:	2000      	movs	r0, #0
 800726a:	3601      	adds	r6, #1
 800726c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007270:	f8d1 c000 	ldr.w	ip, [r1]
 8007274:	b293      	uxth	r3, r2
 8007276:	1ac3      	subs	r3, r0, r3
 8007278:	0c12      	lsrs	r2, r2, #16
 800727a:	fa1f f08c 	uxth.w	r0, ip
 800727e:	4403      	add	r3, r0
 8007280:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007288:	b29b      	uxth	r3, r3
 800728a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800728e:	45c1      	cmp	r9, r8
 8007290:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007294:	f841 3b04 	str.w	r3, [r1], #4
 8007298:	d2e8      	bcs.n	800726c <quorem+0xac>
 800729a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800729e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072a2:	b922      	cbnz	r2, 80072ae <quorem+0xee>
 80072a4:	3b04      	subs	r3, #4
 80072a6:	429d      	cmp	r5, r3
 80072a8:	461a      	mov	r2, r3
 80072aa:	d30a      	bcc.n	80072c2 <quorem+0x102>
 80072ac:	613c      	str	r4, [r7, #16]
 80072ae:	4630      	mov	r0, r6
 80072b0:	b003      	add	sp, #12
 80072b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	3b04      	subs	r3, #4
 80072ba:	2a00      	cmp	r2, #0
 80072bc:	d1cd      	bne.n	800725a <quorem+0x9a>
 80072be:	3c01      	subs	r4, #1
 80072c0:	e7c8      	b.n	8007254 <quorem+0x94>
 80072c2:	6812      	ldr	r2, [r2, #0]
 80072c4:	3b04      	subs	r3, #4
 80072c6:	2a00      	cmp	r2, #0
 80072c8:	d1f0      	bne.n	80072ac <quorem+0xec>
 80072ca:	3c01      	subs	r4, #1
 80072cc:	e7eb      	b.n	80072a6 <quorem+0xe6>
 80072ce:	2000      	movs	r0, #0
 80072d0:	e7ee      	b.n	80072b0 <quorem+0xf0>
 80072d2:	0000      	movs	r0, r0
 80072d4:	0000      	movs	r0, r0
	...

080072d8 <_dtoa_r>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	4616      	mov	r6, r2
 80072de:	461f      	mov	r7, r3
 80072e0:	69c4      	ldr	r4, [r0, #28]
 80072e2:	b099      	sub	sp, #100	; 0x64
 80072e4:	4605      	mov	r5, r0
 80072e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80072ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80072ee:	b974      	cbnz	r4, 800730e <_dtoa_r+0x36>
 80072f0:	2010      	movs	r0, #16
 80072f2:	f000 fe1d 	bl	8007f30 <malloc>
 80072f6:	4602      	mov	r2, r0
 80072f8:	61e8      	str	r0, [r5, #28]
 80072fa:	b920      	cbnz	r0, 8007306 <_dtoa_r+0x2e>
 80072fc:	21ef      	movs	r1, #239	; 0xef
 80072fe:	4bac      	ldr	r3, [pc, #688]	; (80075b0 <_dtoa_r+0x2d8>)
 8007300:	48ac      	ldr	r0, [pc, #688]	; (80075b4 <_dtoa_r+0x2dc>)
 8007302:	f7ff ff3f 	bl	8007184 <__assert_func>
 8007306:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800730a:	6004      	str	r4, [r0, #0]
 800730c:	60c4      	str	r4, [r0, #12]
 800730e:	69eb      	ldr	r3, [r5, #28]
 8007310:	6819      	ldr	r1, [r3, #0]
 8007312:	b151      	cbz	r1, 800732a <_dtoa_r+0x52>
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	2301      	movs	r3, #1
 8007318:	4093      	lsls	r3, r2
 800731a:	604a      	str	r2, [r1, #4]
 800731c:	608b      	str	r3, [r1, #8]
 800731e:	4628      	mov	r0, r5
 8007320:	f000 fefa 	bl	8008118 <_Bfree>
 8007324:	2200      	movs	r2, #0
 8007326:	69eb      	ldr	r3, [r5, #28]
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	1e3b      	subs	r3, r7, #0
 800732c:	bfaf      	iteee	ge
 800732e:	2300      	movge	r3, #0
 8007330:	2201      	movlt	r2, #1
 8007332:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007336:	9305      	strlt	r3, [sp, #20]
 8007338:	bfa8      	it	ge
 800733a:	f8c8 3000 	strge.w	r3, [r8]
 800733e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007342:	4b9d      	ldr	r3, [pc, #628]	; (80075b8 <_dtoa_r+0x2e0>)
 8007344:	bfb8      	it	lt
 8007346:	f8c8 2000 	strlt.w	r2, [r8]
 800734a:	ea33 0309 	bics.w	r3, r3, r9
 800734e:	d119      	bne.n	8007384 <_dtoa_r+0xac>
 8007350:	f242 730f 	movw	r3, #9999	; 0x270f
 8007354:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800735c:	4333      	orrs	r3, r6
 800735e:	f000 8589 	beq.w	8007e74 <_dtoa_r+0xb9c>
 8007362:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007364:	b953      	cbnz	r3, 800737c <_dtoa_r+0xa4>
 8007366:	4b95      	ldr	r3, [pc, #596]	; (80075bc <_dtoa_r+0x2e4>)
 8007368:	e023      	b.n	80073b2 <_dtoa_r+0xda>
 800736a:	4b95      	ldr	r3, [pc, #596]	; (80075c0 <_dtoa_r+0x2e8>)
 800736c:	9303      	str	r3, [sp, #12]
 800736e:	3308      	adds	r3, #8
 8007370:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	9803      	ldr	r0, [sp, #12]
 8007376:	b019      	add	sp, #100	; 0x64
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737c:	4b8f      	ldr	r3, [pc, #572]	; (80075bc <_dtoa_r+0x2e4>)
 800737e:	9303      	str	r3, [sp, #12]
 8007380:	3303      	adds	r3, #3
 8007382:	e7f5      	b.n	8007370 <_dtoa_r+0x98>
 8007384:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007388:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800738c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007390:	2200      	movs	r2, #0
 8007392:	2300      	movs	r3, #0
 8007394:	f7f9 fb12 	bl	80009bc <__aeabi_dcmpeq>
 8007398:	4680      	mov	r8, r0
 800739a:	b160      	cbz	r0, 80073b6 <_dtoa_r+0xde>
 800739c:	2301      	movs	r3, #1
 800739e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8562 	beq.w	8007e6e <_dtoa_r+0xb96>
 80073aa:	4b86      	ldr	r3, [pc, #536]	; (80075c4 <_dtoa_r+0x2ec>)
 80073ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	9303      	str	r3, [sp, #12]
 80073b4:	e7de      	b.n	8007374 <_dtoa_r+0x9c>
 80073b6:	ab16      	add	r3, sp, #88	; 0x58
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	ab17      	add	r3, sp, #92	; 0x5c
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	4628      	mov	r0, r5
 80073c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80073c4:	f001 fa3c 	bl	8008840 <__d2b>
 80073c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80073cc:	4682      	mov	sl, r0
 80073ce:	2c00      	cmp	r4, #0
 80073d0:	d07e      	beq.n	80074d0 <_dtoa_r+0x1f8>
 80073d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80073dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073e0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80073e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80073e8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80073ec:	4619      	mov	r1, r3
 80073ee:	2200      	movs	r2, #0
 80073f0:	4b75      	ldr	r3, [pc, #468]	; (80075c8 <_dtoa_r+0x2f0>)
 80073f2:	f7f8 fec3 	bl	800017c <__aeabi_dsub>
 80073f6:	a368      	add	r3, pc, #416	; (adr r3, 8007598 <_dtoa_r+0x2c0>)
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	f7f9 f876 	bl	80004ec <__aeabi_dmul>
 8007400:	a367      	add	r3, pc, #412	; (adr r3, 80075a0 <_dtoa_r+0x2c8>)
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	f7f8 febb 	bl	8000180 <__adddf3>
 800740a:	4606      	mov	r6, r0
 800740c:	4620      	mov	r0, r4
 800740e:	460f      	mov	r7, r1
 8007410:	f7f9 f802 	bl	8000418 <__aeabi_i2d>
 8007414:	a364      	add	r3, pc, #400	; (adr r3, 80075a8 <_dtoa_r+0x2d0>)
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	f7f9 f867 	bl	80004ec <__aeabi_dmul>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	4630      	mov	r0, r6
 8007424:	4639      	mov	r1, r7
 8007426:	f7f8 feab 	bl	8000180 <__adddf3>
 800742a:	4606      	mov	r6, r0
 800742c:	460f      	mov	r7, r1
 800742e:	f7f9 fb0d 	bl	8000a4c <__aeabi_d2iz>
 8007432:	2200      	movs	r2, #0
 8007434:	4683      	mov	fp, r0
 8007436:	2300      	movs	r3, #0
 8007438:	4630      	mov	r0, r6
 800743a:	4639      	mov	r1, r7
 800743c:	f7f9 fac8 	bl	80009d0 <__aeabi_dcmplt>
 8007440:	b148      	cbz	r0, 8007456 <_dtoa_r+0x17e>
 8007442:	4658      	mov	r0, fp
 8007444:	f7f8 ffe8 	bl	8000418 <__aeabi_i2d>
 8007448:	4632      	mov	r2, r6
 800744a:	463b      	mov	r3, r7
 800744c:	f7f9 fab6 	bl	80009bc <__aeabi_dcmpeq>
 8007450:	b908      	cbnz	r0, 8007456 <_dtoa_r+0x17e>
 8007452:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007456:	f1bb 0f16 	cmp.w	fp, #22
 800745a:	d857      	bhi.n	800750c <_dtoa_r+0x234>
 800745c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007460:	4b5a      	ldr	r3, [pc, #360]	; (80075cc <_dtoa_r+0x2f4>)
 8007462:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746a:	f7f9 fab1 	bl	80009d0 <__aeabi_dcmplt>
 800746e:	2800      	cmp	r0, #0
 8007470:	d04e      	beq.n	8007510 <_dtoa_r+0x238>
 8007472:	2300      	movs	r3, #0
 8007474:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007478:	930f      	str	r3, [sp, #60]	; 0x3c
 800747a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800747c:	1b1b      	subs	r3, r3, r4
 800747e:	1e5a      	subs	r2, r3, #1
 8007480:	bf46      	itte	mi
 8007482:	f1c3 0901 	rsbmi	r9, r3, #1
 8007486:	2300      	movmi	r3, #0
 8007488:	f04f 0900 	movpl.w	r9, #0
 800748c:	9209      	str	r2, [sp, #36]	; 0x24
 800748e:	bf48      	it	mi
 8007490:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007492:	f1bb 0f00 	cmp.w	fp, #0
 8007496:	db3d      	blt.n	8007514 <_dtoa_r+0x23c>
 8007498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800749a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800749e:	445b      	add	r3, fp
 80074a0:	9309      	str	r3, [sp, #36]	; 0x24
 80074a2:	2300      	movs	r3, #0
 80074a4:	930a      	str	r3, [sp, #40]	; 0x28
 80074a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074a8:	2b09      	cmp	r3, #9
 80074aa:	d867      	bhi.n	800757c <_dtoa_r+0x2a4>
 80074ac:	2b05      	cmp	r3, #5
 80074ae:	bfc4      	itt	gt
 80074b0:	3b04      	subgt	r3, #4
 80074b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80074b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074b6:	bfc8      	it	gt
 80074b8:	2400      	movgt	r4, #0
 80074ba:	f1a3 0302 	sub.w	r3, r3, #2
 80074be:	bfd8      	it	le
 80074c0:	2401      	movle	r4, #1
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	f200 8086 	bhi.w	80075d4 <_dtoa_r+0x2fc>
 80074c8:	e8df f003 	tbb	[pc, r3]
 80074cc:	5637392c 	.word	0x5637392c
 80074d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80074d4:	441c      	add	r4, r3
 80074d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80074da:	2b20      	cmp	r3, #32
 80074dc:	bfc1      	itttt	gt
 80074de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80074e2:	fa09 f903 	lslgt.w	r9, r9, r3
 80074e6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80074ea:	fa26 f303 	lsrgt.w	r3, r6, r3
 80074ee:	bfd6      	itet	le
 80074f0:	f1c3 0320 	rsble	r3, r3, #32
 80074f4:	ea49 0003 	orrgt.w	r0, r9, r3
 80074f8:	fa06 f003 	lslle.w	r0, r6, r3
 80074fc:	f7f8 ff7c 	bl	80003f8 <__aeabi_ui2d>
 8007500:	2201      	movs	r2, #1
 8007502:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007506:	3c01      	subs	r4, #1
 8007508:	9213      	str	r2, [sp, #76]	; 0x4c
 800750a:	e76f      	b.n	80073ec <_dtoa_r+0x114>
 800750c:	2301      	movs	r3, #1
 800750e:	e7b3      	b.n	8007478 <_dtoa_r+0x1a0>
 8007510:	900f      	str	r0, [sp, #60]	; 0x3c
 8007512:	e7b2      	b.n	800747a <_dtoa_r+0x1a2>
 8007514:	f1cb 0300 	rsb	r3, fp, #0
 8007518:	930a      	str	r3, [sp, #40]	; 0x28
 800751a:	2300      	movs	r3, #0
 800751c:	eba9 090b 	sub.w	r9, r9, fp
 8007520:	930e      	str	r3, [sp, #56]	; 0x38
 8007522:	e7c0      	b.n	80074a6 <_dtoa_r+0x1ce>
 8007524:	2300      	movs	r3, #0
 8007526:	930b      	str	r3, [sp, #44]	; 0x2c
 8007528:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800752a:	2b00      	cmp	r3, #0
 800752c:	dc55      	bgt.n	80075da <_dtoa_r+0x302>
 800752e:	2301      	movs	r3, #1
 8007530:	461a      	mov	r2, r3
 8007532:	9306      	str	r3, [sp, #24]
 8007534:	9308      	str	r3, [sp, #32]
 8007536:	9223      	str	r2, [sp, #140]	; 0x8c
 8007538:	e00b      	b.n	8007552 <_dtoa_r+0x27a>
 800753a:	2301      	movs	r3, #1
 800753c:	e7f3      	b.n	8007526 <_dtoa_r+0x24e>
 800753e:	2300      	movs	r3, #0
 8007540:	930b      	str	r3, [sp, #44]	; 0x2c
 8007542:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007544:	445b      	add	r3, fp
 8007546:	9306      	str	r3, [sp, #24]
 8007548:	3301      	adds	r3, #1
 800754a:	2b01      	cmp	r3, #1
 800754c:	9308      	str	r3, [sp, #32]
 800754e:	bfb8      	it	lt
 8007550:	2301      	movlt	r3, #1
 8007552:	2100      	movs	r1, #0
 8007554:	2204      	movs	r2, #4
 8007556:	69e8      	ldr	r0, [r5, #28]
 8007558:	f102 0614 	add.w	r6, r2, #20
 800755c:	429e      	cmp	r6, r3
 800755e:	d940      	bls.n	80075e2 <_dtoa_r+0x30a>
 8007560:	6041      	str	r1, [r0, #4]
 8007562:	4628      	mov	r0, r5
 8007564:	f000 fd98 	bl	8008098 <_Balloc>
 8007568:	9003      	str	r0, [sp, #12]
 800756a:	2800      	cmp	r0, #0
 800756c:	d13c      	bne.n	80075e8 <_dtoa_r+0x310>
 800756e:	4602      	mov	r2, r0
 8007570:	f240 11af 	movw	r1, #431	; 0x1af
 8007574:	4b16      	ldr	r3, [pc, #88]	; (80075d0 <_dtoa_r+0x2f8>)
 8007576:	e6c3      	b.n	8007300 <_dtoa_r+0x28>
 8007578:	2301      	movs	r3, #1
 800757a:	e7e1      	b.n	8007540 <_dtoa_r+0x268>
 800757c:	2401      	movs	r4, #1
 800757e:	2300      	movs	r3, #0
 8007580:	940b      	str	r4, [sp, #44]	; 0x2c
 8007582:	9322      	str	r3, [sp, #136]	; 0x88
 8007584:	f04f 33ff 	mov.w	r3, #4294967295
 8007588:	2200      	movs	r2, #0
 800758a:	9306      	str	r3, [sp, #24]
 800758c:	9308      	str	r3, [sp, #32]
 800758e:	2312      	movs	r3, #18
 8007590:	e7d1      	b.n	8007536 <_dtoa_r+0x25e>
 8007592:	bf00      	nop
 8007594:	f3af 8000 	nop.w
 8007598:	636f4361 	.word	0x636f4361
 800759c:	3fd287a7 	.word	0x3fd287a7
 80075a0:	8b60c8b3 	.word	0x8b60c8b3
 80075a4:	3fc68a28 	.word	0x3fc68a28
 80075a8:	509f79fb 	.word	0x509f79fb
 80075ac:	3fd34413 	.word	0x3fd34413
 80075b0:	0800b2c5 	.word	0x0800b2c5
 80075b4:	0800b37f 	.word	0x0800b37f
 80075b8:	7ff00000 	.word	0x7ff00000
 80075bc:	0800b37b 	.word	0x0800b37b
 80075c0:	0800b372 	.word	0x0800b372
 80075c4:	0800b6c1 	.word	0x0800b6c1
 80075c8:	3ff80000 	.word	0x3ff80000
 80075cc:	0800b470 	.word	0x0800b470
 80075d0:	0800b3d7 	.word	0x0800b3d7
 80075d4:	2301      	movs	r3, #1
 80075d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075d8:	e7d4      	b.n	8007584 <_dtoa_r+0x2ac>
 80075da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075dc:	9306      	str	r3, [sp, #24]
 80075de:	9308      	str	r3, [sp, #32]
 80075e0:	e7b7      	b.n	8007552 <_dtoa_r+0x27a>
 80075e2:	3101      	adds	r1, #1
 80075e4:	0052      	lsls	r2, r2, #1
 80075e6:	e7b7      	b.n	8007558 <_dtoa_r+0x280>
 80075e8:	69eb      	ldr	r3, [r5, #28]
 80075ea:	9a03      	ldr	r2, [sp, #12]
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	9b08      	ldr	r3, [sp, #32]
 80075f0:	2b0e      	cmp	r3, #14
 80075f2:	f200 80a8 	bhi.w	8007746 <_dtoa_r+0x46e>
 80075f6:	2c00      	cmp	r4, #0
 80075f8:	f000 80a5 	beq.w	8007746 <_dtoa_r+0x46e>
 80075fc:	f1bb 0f00 	cmp.w	fp, #0
 8007600:	dd34      	ble.n	800766c <_dtoa_r+0x394>
 8007602:	4b9a      	ldr	r3, [pc, #616]	; (800786c <_dtoa_r+0x594>)
 8007604:	f00b 020f 	and.w	r2, fp, #15
 8007608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800760c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007610:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007614:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007618:	ea4f 142b 	mov.w	r4, fp, asr #4
 800761c:	d016      	beq.n	800764c <_dtoa_r+0x374>
 800761e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007622:	4b93      	ldr	r3, [pc, #588]	; (8007870 <_dtoa_r+0x598>)
 8007624:	2703      	movs	r7, #3
 8007626:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800762a:	f7f9 f889 	bl	8000740 <__aeabi_ddiv>
 800762e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007632:	f004 040f 	and.w	r4, r4, #15
 8007636:	4e8e      	ldr	r6, [pc, #568]	; (8007870 <_dtoa_r+0x598>)
 8007638:	b954      	cbnz	r4, 8007650 <_dtoa_r+0x378>
 800763a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800763e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007642:	f7f9 f87d 	bl	8000740 <__aeabi_ddiv>
 8007646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800764a:	e029      	b.n	80076a0 <_dtoa_r+0x3c8>
 800764c:	2702      	movs	r7, #2
 800764e:	e7f2      	b.n	8007636 <_dtoa_r+0x35e>
 8007650:	07e1      	lsls	r1, r4, #31
 8007652:	d508      	bpl.n	8007666 <_dtoa_r+0x38e>
 8007654:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007658:	e9d6 2300 	ldrd	r2, r3, [r6]
 800765c:	f7f8 ff46 	bl	80004ec <__aeabi_dmul>
 8007660:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007664:	3701      	adds	r7, #1
 8007666:	1064      	asrs	r4, r4, #1
 8007668:	3608      	adds	r6, #8
 800766a:	e7e5      	b.n	8007638 <_dtoa_r+0x360>
 800766c:	f000 80a5 	beq.w	80077ba <_dtoa_r+0x4e2>
 8007670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007674:	f1cb 0400 	rsb	r4, fp, #0
 8007678:	4b7c      	ldr	r3, [pc, #496]	; (800786c <_dtoa_r+0x594>)
 800767a:	f004 020f 	and.w	r2, r4, #15
 800767e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	f7f8 ff31 	bl	80004ec <__aeabi_dmul>
 800768a:	2702      	movs	r7, #2
 800768c:	2300      	movs	r3, #0
 800768e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007692:	4e77      	ldr	r6, [pc, #476]	; (8007870 <_dtoa_r+0x598>)
 8007694:	1124      	asrs	r4, r4, #4
 8007696:	2c00      	cmp	r4, #0
 8007698:	f040 8084 	bne.w	80077a4 <_dtoa_r+0x4cc>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1d2      	bne.n	8007646 <_dtoa_r+0x36e>
 80076a0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80076a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80076a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 8087 	beq.w	80077be <_dtoa_r+0x4e6>
 80076b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076b4:	2200      	movs	r2, #0
 80076b6:	4b6f      	ldr	r3, [pc, #444]	; (8007874 <_dtoa_r+0x59c>)
 80076b8:	f7f9 f98a 	bl	80009d0 <__aeabi_dcmplt>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d07e      	beq.n	80077be <_dtoa_r+0x4e6>
 80076c0:	9b08      	ldr	r3, [sp, #32]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d07b      	beq.n	80077be <_dtoa_r+0x4e6>
 80076c6:	9b06      	ldr	r3, [sp, #24]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	dd38      	ble.n	800773e <_dtoa_r+0x466>
 80076cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076d0:	2200      	movs	r2, #0
 80076d2:	4b69      	ldr	r3, [pc, #420]	; (8007878 <_dtoa_r+0x5a0>)
 80076d4:	f7f8 ff0a 	bl	80004ec <__aeabi_dmul>
 80076d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076dc:	9c06      	ldr	r4, [sp, #24]
 80076de:	f10b 38ff 	add.w	r8, fp, #4294967295
 80076e2:	3701      	adds	r7, #1
 80076e4:	4638      	mov	r0, r7
 80076e6:	f7f8 fe97 	bl	8000418 <__aeabi_i2d>
 80076ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076ee:	f7f8 fefd 	bl	80004ec <__aeabi_dmul>
 80076f2:	2200      	movs	r2, #0
 80076f4:	4b61      	ldr	r3, [pc, #388]	; (800787c <_dtoa_r+0x5a4>)
 80076f6:	f7f8 fd43 	bl	8000180 <__adddf3>
 80076fa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80076fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007702:	9611      	str	r6, [sp, #68]	; 0x44
 8007704:	2c00      	cmp	r4, #0
 8007706:	d15d      	bne.n	80077c4 <_dtoa_r+0x4ec>
 8007708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800770c:	2200      	movs	r2, #0
 800770e:	4b5c      	ldr	r3, [pc, #368]	; (8007880 <_dtoa_r+0x5a8>)
 8007710:	f7f8 fd34 	bl	800017c <__aeabi_dsub>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800771c:	4633      	mov	r3, r6
 800771e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007720:	f7f9 f974 	bl	8000a0c <__aeabi_dcmpgt>
 8007724:	2800      	cmp	r0, #0
 8007726:	f040 8295 	bne.w	8007c54 <_dtoa_r+0x97c>
 800772a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800772e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007730:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007734:	f7f9 f94c 	bl	80009d0 <__aeabi_dcmplt>
 8007738:	2800      	cmp	r0, #0
 800773a:	f040 8289 	bne.w	8007c50 <_dtoa_r+0x978>
 800773e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007742:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007746:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007748:	2b00      	cmp	r3, #0
 800774a:	f2c0 8151 	blt.w	80079f0 <_dtoa_r+0x718>
 800774e:	f1bb 0f0e 	cmp.w	fp, #14
 8007752:	f300 814d 	bgt.w	80079f0 <_dtoa_r+0x718>
 8007756:	4b45      	ldr	r3, [pc, #276]	; (800786c <_dtoa_r+0x594>)
 8007758:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800775c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007760:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007764:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007766:	2b00      	cmp	r3, #0
 8007768:	f280 80da 	bge.w	8007920 <_dtoa_r+0x648>
 800776c:	9b08      	ldr	r3, [sp, #32]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f300 80d6 	bgt.w	8007920 <_dtoa_r+0x648>
 8007774:	f040 826b 	bne.w	8007c4e <_dtoa_r+0x976>
 8007778:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800777c:	2200      	movs	r2, #0
 800777e:	4b40      	ldr	r3, [pc, #256]	; (8007880 <_dtoa_r+0x5a8>)
 8007780:	f7f8 feb4 	bl	80004ec <__aeabi_dmul>
 8007784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007788:	f7f9 f936 	bl	80009f8 <__aeabi_dcmpge>
 800778c:	9c08      	ldr	r4, [sp, #32]
 800778e:	4626      	mov	r6, r4
 8007790:	2800      	cmp	r0, #0
 8007792:	f040 8241 	bne.w	8007c18 <_dtoa_r+0x940>
 8007796:	2331      	movs	r3, #49	; 0x31
 8007798:	9f03      	ldr	r7, [sp, #12]
 800779a:	f10b 0b01 	add.w	fp, fp, #1
 800779e:	f807 3b01 	strb.w	r3, [r7], #1
 80077a2:	e23d      	b.n	8007c20 <_dtoa_r+0x948>
 80077a4:	07e2      	lsls	r2, r4, #31
 80077a6:	d505      	bpl.n	80077b4 <_dtoa_r+0x4dc>
 80077a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077ac:	f7f8 fe9e 	bl	80004ec <__aeabi_dmul>
 80077b0:	2301      	movs	r3, #1
 80077b2:	3701      	adds	r7, #1
 80077b4:	1064      	asrs	r4, r4, #1
 80077b6:	3608      	adds	r6, #8
 80077b8:	e76d      	b.n	8007696 <_dtoa_r+0x3be>
 80077ba:	2702      	movs	r7, #2
 80077bc:	e770      	b.n	80076a0 <_dtoa_r+0x3c8>
 80077be:	46d8      	mov	r8, fp
 80077c0:	9c08      	ldr	r4, [sp, #32]
 80077c2:	e78f      	b.n	80076e4 <_dtoa_r+0x40c>
 80077c4:	9903      	ldr	r1, [sp, #12]
 80077c6:	4b29      	ldr	r3, [pc, #164]	; (800786c <_dtoa_r+0x594>)
 80077c8:	4421      	add	r1, r4
 80077ca:	9112      	str	r1, [sp, #72]	; 0x48
 80077cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077d2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80077d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077da:	2900      	cmp	r1, #0
 80077dc:	d054      	beq.n	8007888 <_dtoa_r+0x5b0>
 80077de:	2000      	movs	r0, #0
 80077e0:	4928      	ldr	r1, [pc, #160]	; (8007884 <_dtoa_r+0x5ac>)
 80077e2:	f7f8 ffad 	bl	8000740 <__aeabi_ddiv>
 80077e6:	463b      	mov	r3, r7
 80077e8:	4632      	mov	r2, r6
 80077ea:	f7f8 fcc7 	bl	800017c <__aeabi_dsub>
 80077ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077f2:	9f03      	ldr	r7, [sp, #12]
 80077f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077f8:	f7f9 f928 	bl	8000a4c <__aeabi_d2iz>
 80077fc:	4604      	mov	r4, r0
 80077fe:	f7f8 fe0b 	bl	8000418 <__aeabi_i2d>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800780a:	f7f8 fcb7 	bl	800017c <__aeabi_dsub>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	3430      	adds	r4, #48	; 0x30
 8007814:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007818:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800781c:	f807 4b01 	strb.w	r4, [r7], #1
 8007820:	f7f9 f8d6 	bl	80009d0 <__aeabi_dcmplt>
 8007824:	2800      	cmp	r0, #0
 8007826:	d173      	bne.n	8007910 <_dtoa_r+0x638>
 8007828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800782c:	2000      	movs	r0, #0
 800782e:	4911      	ldr	r1, [pc, #68]	; (8007874 <_dtoa_r+0x59c>)
 8007830:	f7f8 fca4 	bl	800017c <__aeabi_dsub>
 8007834:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007838:	f7f9 f8ca 	bl	80009d0 <__aeabi_dcmplt>
 800783c:	2800      	cmp	r0, #0
 800783e:	f040 80b6 	bne.w	80079ae <_dtoa_r+0x6d6>
 8007842:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007844:	429f      	cmp	r7, r3
 8007846:	f43f af7a 	beq.w	800773e <_dtoa_r+0x466>
 800784a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800784e:	2200      	movs	r2, #0
 8007850:	4b09      	ldr	r3, [pc, #36]	; (8007878 <_dtoa_r+0x5a0>)
 8007852:	f7f8 fe4b 	bl	80004ec <__aeabi_dmul>
 8007856:	2200      	movs	r2, #0
 8007858:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800785c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007860:	4b05      	ldr	r3, [pc, #20]	; (8007878 <_dtoa_r+0x5a0>)
 8007862:	f7f8 fe43 	bl	80004ec <__aeabi_dmul>
 8007866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800786a:	e7c3      	b.n	80077f4 <_dtoa_r+0x51c>
 800786c:	0800b470 	.word	0x0800b470
 8007870:	0800b448 	.word	0x0800b448
 8007874:	3ff00000 	.word	0x3ff00000
 8007878:	40240000 	.word	0x40240000
 800787c:	401c0000 	.word	0x401c0000
 8007880:	40140000 	.word	0x40140000
 8007884:	3fe00000 	.word	0x3fe00000
 8007888:	4630      	mov	r0, r6
 800788a:	4639      	mov	r1, r7
 800788c:	f7f8 fe2e 	bl	80004ec <__aeabi_dmul>
 8007890:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007892:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007896:	9c03      	ldr	r4, [sp, #12]
 8007898:	9314      	str	r3, [sp, #80]	; 0x50
 800789a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800789e:	f7f9 f8d5 	bl	8000a4c <__aeabi_d2iz>
 80078a2:	9015      	str	r0, [sp, #84]	; 0x54
 80078a4:	f7f8 fdb8 	bl	8000418 <__aeabi_i2d>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078b0:	f7f8 fc64 	bl	800017c <__aeabi_dsub>
 80078b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078b6:	4606      	mov	r6, r0
 80078b8:	3330      	adds	r3, #48	; 0x30
 80078ba:	f804 3b01 	strb.w	r3, [r4], #1
 80078be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078c0:	460f      	mov	r7, r1
 80078c2:	429c      	cmp	r4, r3
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	d124      	bne.n	8007914 <_dtoa_r+0x63c>
 80078ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078ce:	4baf      	ldr	r3, [pc, #700]	; (8007b8c <_dtoa_r+0x8b4>)
 80078d0:	f7f8 fc56 	bl	8000180 <__adddf3>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4630      	mov	r0, r6
 80078da:	4639      	mov	r1, r7
 80078dc:	f7f9 f896 	bl	8000a0c <__aeabi_dcmpgt>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d163      	bne.n	80079ac <_dtoa_r+0x6d4>
 80078e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078e8:	2000      	movs	r0, #0
 80078ea:	49a8      	ldr	r1, [pc, #672]	; (8007b8c <_dtoa_r+0x8b4>)
 80078ec:	f7f8 fc46 	bl	800017c <__aeabi_dsub>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4630      	mov	r0, r6
 80078f6:	4639      	mov	r1, r7
 80078f8:	f7f9 f86a 	bl	80009d0 <__aeabi_dcmplt>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	f43f af1e 	beq.w	800773e <_dtoa_r+0x466>
 8007902:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007904:	1e7b      	subs	r3, r7, #1
 8007906:	9314      	str	r3, [sp, #80]	; 0x50
 8007908:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800790c:	2b30      	cmp	r3, #48	; 0x30
 800790e:	d0f8      	beq.n	8007902 <_dtoa_r+0x62a>
 8007910:	46c3      	mov	fp, r8
 8007912:	e03b      	b.n	800798c <_dtoa_r+0x6b4>
 8007914:	4b9e      	ldr	r3, [pc, #632]	; (8007b90 <_dtoa_r+0x8b8>)
 8007916:	f7f8 fde9 	bl	80004ec <__aeabi_dmul>
 800791a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800791e:	e7bc      	b.n	800789a <_dtoa_r+0x5c2>
 8007920:	9f03      	ldr	r7, [sp, #12]
 8007922:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007926:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800792a:	4640      	mov	r0, r8
 800792c:	4649      	mov	r1, r9
 800792e:	f7f8 ff07 	bl	8000740 <__aeabi_ddiv>
 8007932:	f7f9 f88b 	bl	8000a4c <__aeabi_d2iz>
 8007936:	4604      	mov	r4, r0
 8007938:	f7f8 fd6e 	bl	8000418 <__aeabi_i2d>
 800793c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007940:	f7f8 fdd4 	bl	80004ec <__aeabi_dmul>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4640      	mov	r0, r8
 800794a:	4649      	mov	r1, r9
 800794c:	f7f8 fc16 	bl	800017c <__aeabi_dsub>
 8007950:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007954:	f807 6b01 	strb.w	r6, [r7], #1
 8007958:	9e03      	ldr	r6, [sp, #12]
 800795a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800795e:	1bbe      	subs	r6, r7, r6
 8007960:	45b4      	cmp	ip, r6
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	d136      	bne.n	80079d6 <_dtoa_r+0x6fe>
 8007968:	f7f8 fc0a 	bl	8000180 <__adddf3>
 800796c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007970:	4680      	mov	r8, r0
 8007972:	4689      	mov	r9, r1
 8007974:	f7f9 f84a 	bl	8000a0c <__aeabi_dcmpgt>
 8007978:	bb58      	cbnz	r0, 80079d2 <_dtoa_r+0x6fa>
 800797a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800797e:	4640      	mov	r0, r8
 8007980:	4649      	mov	r1, r9
 8007982:	f7f9 f81b 	bl	80009bc <__aeabi_dcmpeq>
 8007986:	b108      	cbz	r0, 800798c <_dtoa_r+0x6b4>
 8007988:	07e3      	lsls	r3, r4, #31
 800798a:	d422      	bmi.n	80079d2 <_dtoa_r+0x6fa>
 800798c:	4651      	mov	r1, sl
 800798e:	4628      	mov	r0, r5
 8007990:	f000 fbc2 	bl	8008118 <_Bfree>
 8007994:	2300      	movs	r3, #0
 8007996:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007998:	703b      	strb	r3, [r7, #0]
 800799a:	f10b 0301 	add.w	r3, fp, #1
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f43f ace6 	beq.w	8007374 <_dtoa_r+0x9c>
 80079a8:	601f      	str	r7, [r3, #0]
 80079aa:	e4e3      	b.n	8007374 <_dtoa_r+0x9c>
 80079ac:	4627      	mov	r7, r4
 80079ae:	463b      	mov	r3, r7
 80079b0:	461f      	mov	r7, r3
 80079b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079b6:	2a39      	cmp	r2, #57	; 0x39
 80079b8:	d107      	bne.n	80079ca <_dtoa_r+0x6f2>
 80079ba:	9a03      	ldr	r2, [sp, #12]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d1f7      	bne.n	80079b0 <_dtoa_r+0x6d8>
 80079c0:	2230      	movs	r2, #48	; 0x30
 80079c2:	9903      	ldr	r1, [sp, #12]
 80079c4:	f108 0801 	add.w	r8, r8, #1
 80079c8:	700a      	strb	r2, [r1, #0]
 80079ca:	781a      	ldrb	r2, [r3, #0]
 80079cc:	3201      	adds	r2, #1
 80079ce:	701a      	strb	r2, [r3, #0]
 80079d0:	e79e      	b.n	8007910 <_dtoa_r+0x638>
 80079d2:	46d8      	mov	r8, fp
 80079d4:	e7eb      	b.n	80079ae <_dtoa_r+0x6d6>
 80079d6:	2200      	movs	r2, #0
 80079d8:	4b6d      	ldr	r3, [pc, #436]	; (8007b90 <_dtoa_r+0x8b8>)
 80079da:	f7f8 fd87 	bl	80004ec <__aeabi_dmul>
 80079de:	2200      	movs	r2, #0
 80079e0:	2300      	movs	r3, #0
 80079e2:	4680      	mov	r8, r0
 80079e4:	4689      	mov	r9, r1
 80079e6:	f7f8 ffe9 	bl	80009bc <__aeabi_dcmpeq>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d09b      	beq.n	8007926 <_dtoa_r+0x64e>
 80079ee:	e7cd      	b.n	800798c <_dtoa_r+0x6b4>
 80079f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079f2:	2a00      	cmp	r2, #0
 80079f4:	f000 80c4 	beq.w	8007b80 <_dtoa_r+0x8a8>
 80079f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80079fa:	2a01      	cmp	r2, #1
 80079fc:	f300 80a8 	bgt.w	8007b50 <_dtoa_r+0x878>
 8007a00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a02:	2a00      	cmp	r2, #0
 8007a04:	f000 80a0 	beq.w	8007b48 <_dtoa_r+0x870>
 8007a08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a0c:	464f      	mov	r7, r9
 8007a0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a12:	2101      	movs	r1, #1
 8007a14:	441a      	add	r2, r3
 8007a16:	4628      	mov	r0, r5
 8007a18:	4499      	add	r9, r3
 8007a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8007a1c:	f000 fc7c 	bl	8008318 <__i2b>
 8007a20:	4606      	mov	r6, r0
 8007a22:	b15f      	cbz	r7, 8007a3c <_dtoa_r+0x764>
 8007a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	dd08      	ble.n	8007a3c <_dtoa_r+0x764>
 8007a2a:	42bb      	cmp	r3, r7
 8007a2c:	bfa8      	it	ge
 8007a2e:	463b      	movge	r3, r7
 8007a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a32:	eba9 0903 	sub.w	r9, r9, r3
 8007a36:	1aff      	subs	r7, r7, r3
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a3e:	b1f3      	cbz	r3, 8007a7e <_dtoa_r+0x7a6>
 8007a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 80a0 	beq.w	8007b88 <_dtoa_r+0x8b0>
 8007a48:	2c00      	cmp	r4, #0
 8007a4a:	dd10      	ble.n	8007a6e <_dtoa_r+0x796>
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4622      	mov	r2, r4
 8007a50:	4628      	mov	r0, r5
 8007a52:	f000 fd1f 	bl	8008494 <__pow5mult>
 8007a56:	4652      	mov	r2, sl
 8007a58:	4601      	mov	r1, r0
 8007a5a:	4606      	mov	r6, r0
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	f000 fc71 	bl	8008344 <__multiply>
 8007a62:	4680      	mov	r8, r0
 8007a64:	4651      	mov	r1, sl
 8007a66:	4628      	mov	r0, r5
 8007a68:	f000 fb56 	bl	8008118 <_Bfree>
 8007a6c:	46c2      	mov	sl, r8
 8007a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a70:	1b1a      	subs	r2, r3, r4
 8007a72:	d004      	beq.n	8007a7e <_dtoa_r+0x7a6>
 8007a74:	4651      	mov	r1, sl
 8007a76:	4628      	mov	r0, r5
 8007a78:	f000 fd0c 	bl	8008494 <__pow5mult>
 8007a7c:	4682      	mov	sl, r0
 8007a7e:	2101      	movs	r1, #1
 8007a80:	4628      	mov	r0, r5
 8007a82:	f000 fc49 	bl	8008318 <__i2b>
 8007a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a88:	4604      	mov	r4, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f340 8082 	ble.w	8007b94 <_dtoa_r+0x8bc>
 8007a90:	461a      	mov	r2, r3
 8007a92:	4601      	mov	r1, r0
 8007a94:	4628      	mov	r0, r5
 8007a96:	f000 fcfd 	bl	8008494 <__pow5mult>
 8007a9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	dd7b      	ble.n	8007b9a <_dtoa_r+0x8c2>
 8007aa2:	f04f 0800 	mov.w	r8, #0
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007aac:	6918      	ldr	r0, [r3, #16]
 8007aae:	f000 fbe5 	bl	800827c <__hi0bits>
 8007ab2:	f1c0 0020 	rsb	r0, r0, #32
 8007ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab8:	4418      	add	r0, r3
 8007aba:	f010 001f 	ands.w	r0, r0, #31
 8007abe:	f000 8092 	beq.w	8007be6 <_dtoa_r+0x90e>
 8007ac2:	f1c0 0320 	rsb	r3, r0, #32
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	f340 8085 	ble.w	8007bd6 <_dtoa_r+0x8fe>
 8007acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ace:	f1c0 001c 	rsb	r0, r0, #28
 8007ad2:	4403      	add	r3, r0
 8007ad4:	4481      	add	r9, r0
 8007ad6:	4407      	add	r7, r0
 8007ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8007ada:	f1b9 0f00 	cmp.w	r9, #0
 8007ade:	dd05      	ble.n	8007aec <_dtoa_r+0x814>
 8007ae0:	4651      	mov	r1, sl
 8007ae2:	464a      	mov	r2, r9
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f000 fd2f 	bl	8008548 <__lshift>
 8007aea:	4682      	mov	sl, r0
 8007aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	dd05      	ble.n	8007afe <_dtoa_r+0x826>
 8007af2:	4621      	mov	r1, r4
 8007af4:	461a      	mov	r2, r3
 8007af6:	4628      	mov	r0, r5
 8007af8:	f000 fd26 	bl	8008548 <__lshift>
 8007afc:	4604      	mov	r4, r0
 8007afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d072      	beq.n	8007bea <_dtoa_r+0x912>
 8007b04:	4621      	mov	r1, r4
 8007b06:	4650      	mov	r0, sl
 8007b08:	f000 fd8a 	bl	8008620 <__mcmp>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	da6c      	bge.n	8007bea <_dtoa_r+0x912>
 8007b10:	2300      	movs	r3, #0
 8007b12:	4651      	mov	r1, sl
 8007b14:	220a      	movs	r2, #10
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 fb20 	bl	800815c <__multadd>
 8007b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b1e:	4682      	mov	sl, r0
 8007b20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 81ac 	beq.w	8007e82 <_dtoa_r+0xbaa>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	220a      	movs	r2, #10
 8007b30:	4628      	mov	r0, r5
 8007b32:	f000 fb13 	bl	800815c <__multadd>
 8007b36:	9b06      	ldr	r3, [sp, #24]
 8007b38:	4606      	mov	r6, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f300 8093 	bgt.w	8007c66 <_dtoa_r+0x98e>
 8007b40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	dc59      	bgt.n	8007bfa <_dtoa_r+0x922>
 8007b46:	e08e      	b.n	8007c66 <_dtoa_r+0x98e>
 8007b48:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b4e:	e75d      	b.n	8007a0c <_dtoa_r+0x734>
 8007b50:	9b08      	ldr	r3, [sp, #32]
 8007b52:	1e5c      	subs	r4, r3, #1
 8007b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b56:	42a3      	cmp	r3, r4
 8007b58:	bfbf      	itttt	lt
 8007b5a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b5c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007b5e:	1ae3      	sublt	r3, r4, r3
 8007b60:	18d2      	addlt	r2, r2, r3
 8007b62:	bfa8      	it	ge
 8007b64:	1b1c      	subge	r4, r3, r4
 8007b66:	9b08      	ldr	r3, [sp, #32]
 8007b68:	bfbe      	ittt	lt
 8007b6a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007b6c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007b6e:	2400      	movlt	r4, #0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	bfb5      	itete	lt
 8007b74:	eba9 0703 	sublt.w	r7, r9, r3
 8007b78:	464f      	movge	r7, r9
 8007b7a:	2300      	movlt	r3, #0
 8007b7c:	9b08      	ldrge	r3, [sp, #32]
 8007b7e:	e747      	b.n	8007a10 <_dtoa_r+0x738>
 8007b80:	464f      	mov	r7, r9
 8007b82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007b86:	e74c      	b.n	8007a22 <_dtoa_r+0x74a>
 8007b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b8a:	e773      	b.n	8007a74 <_dtoa_r+0x79c>
 8007b8c:	3fe00000 	.word	0x3fe00000
 8007b90:	40240000 	.word	0x40240000
 8007b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	dc18      	bgt.n	8007bcc <_dtoa_r+0x8f4>
 8007b9a:	9b04      	ldr	r3, [sp, #16]
 8007b9c:	b9b3      	cbnz	r3, 8007bcc <_dtoa_r+0x8f4>
 8007b9e:	9b05      	ldr	r3, [sp, #20]
 8007ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ba4:	b993      	cbnz	r3, 8007bcc <_dtoa_r+0x8f4>
 8007ba6:	9b05      	ldr	r3, [sp, #20]
 8007ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bac:	0d1b      	lsrs	r3, r3, #20
 8007bae:	051b      	lsls	r3, r3, #20
 8007bb0:	b17b      	cbz	r3, 8007bd2 <_dtoa_r+0x8fa>
 8007bb2:	f04f 0801 	mov.w	r8, #1
 8007bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb8:	f109 0901 	add.w	r9, r9, #1
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f47f af6f 	bne.w	8007aa6 <_dtoa_r+0x7ce>
 8007bc8:	2001      	movs	r0, #1
 8007bca:	e774      	b.n	8007ab6 <_dtoa_r+0x7de>
 8007bcc:	f04f 0800 	mov.w	r8, #0
 8007bd0:	e7f6      	b.n	8007bc0 <_dtoa_r+0x8e8>
 8007bd2:	4698      	mov	r8, r3
 8007bd4:	e7f4      	b.n	8007bc0 <_dtoa_r+0x8e8>
 8007bd6:	d080      	beq.n	8007ada <_dtoa_r+0x802>
 8007bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bda:	331c      	adds	r3, #28
 8007bdc:	441a      	add	r2, r3
 8007bde:	4499      	add	r9, r3
 8007be0:	441f      	add	r7, r3
 8007be2:	9209      	str	r2, [sp, #36]	; 0x24
 8007be4:	e779      	b.n	8007ada <_dtoa_r+0x802>
 8007be6:	4603      	mov	r3, r0
 8007be8:	e7f6      	b.n	8007bd8 <_dtoa_r+0x900>
 8007bea:	9b08      	ldr	r3, [sp, #32]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	dc34      	bgt.n	8007c5a <_dtoa_r+0x982>
 8007bf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	dd31      	ble.n	8007c5a <_dtoa_r+0x982>
 8007bf6:	9b08      	ldr	r3, [sp, #32]
 8007bf8:	9306      	str	r3, [sp, #24]
 8007bfa:	9b06      	ldr	r3, [sp, #24]
 8007bfc:	b963      	cbnz	r3, 8007c18 <_dtoa_r+0x940>
 8007bfe:	4621      	mov	r1, r4
 8007c00:	2205      	movs	r2, #5
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 faaa 	bl	800815c <__multadd>
 8007c08:	4601      	mov	r1, r0
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	4650      	mov	r0, sl
 8007c0e:	f000 fd07 	bl	8008620 <__mcmp>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f73f adbf 	bgt.w	8007796 <_dtoa_r+0x4be>
 8007c18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c1a:	9f03      	ldr	r7, [sp, #12]
 8007c1c:	ea6f 0b03 	mvn.w	fp, r3
 8007c20:	f04f 0800 	mov.w	r8, #0
 8007c24:	4621      	mov	r1, r4
 8007c26:	4628      	mov	r0, r5
 8007c28:	f000 fa76 	bl	8008118 <_Bfree>
 8007c2c:	2e00      	cmp	r6, #0
 8007c2e:	f43f aead 	beq.w	800798c <_dtoa_r+0x6b4>
 8007c32:	f1b8 0f00 	cmp.w	r8, #0
 8007c36:	d005      	beq.n	8007c44 <_dtoa_r+0x96c>
 8007c38:	45b0      	cmp	r8, r6
 8007c3a:	d003      	beq.n	8007c44 <_dtoa_r+0x96c>
 8007c3c:	4641      	mov	r1, r8
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 fa6a 	bl	8008118 <_Bfree>
 8007c44:	4631      	mov	r1, r6
 8007c46:	4628      	mov	r0, r5
 8007c48:	f000 fa66 	bl	8008118 <_Bfree>
 8007c4c:	e69e      	b.n	800798c <_dtoa_r+0x6b4>
 8007c4e:	2400      	movs	r4, #0
 8007c50:	4626      	mov	r6, r4
 8007c52:	e7e1      	b.n	8007c18 <_dtoa_r+0x940>
 8007c54:	46c3      	mov	fp, r8
 8007c56:	4626      	mov	r6, r4
 8007c58:	e59d      	b.n	8007796 <_dtoa_r+0x4be>
 8007c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 80c8 	beq.w	8007df2 <_dtoa_r+0xb1a>
 8007c62:	9b08      	ldr	r3, [sp, #32]
 8007c64:	9306      	str	r3, [sp, #24]
 8007c66:	2f00      	cmp	r7, #0
 8007c68:	dd05      	ble.n	8007c76 <_dtoa_r+0x99e>
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	463a      	mov	r2, r7
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f000 fc6a 	bl	8008548 <__lshift>
 8007c74:	4606      	mov	r6, r0
 8007c76:	f1b8 0f00 	cmp.w	r8, #0
 8007c7a:	d05b      	beq.n	8007d34 <_dtoa_r+0xa5c>
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	6871      	ldr	r1, [r6, #4]
 8007c80:	f000 fa0a 	bl	8008098 <_Balloc>
 8007c84:	4607      	mov	r7, r0
 8007c86:	b928      	cbnz	r0, 8007c94 <_dtoa_r+0x9bc>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007c8e:	4b81      	ldr	r3, [pc, #516]	; (8007e94 <_dtoa_r+0xbbc>)
 8007c90:	f7ff bb36 	b.w	8007300 <_dtoa_r+0x28>
 8007c94:	6932      	ldr	r2, [r6, #16]
 8007c96:	f106 010c 	add.w	r1, r6, #12
 8007c9a:	3202      	adds	r2, #2
 8007c9c:	0092      	lsls	r2, r2, #2
 8007c9e:	300c      	adds	r0, #12
 8007ca0:	f002 fb14 	bl	800a2cc <memcpy>
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	4628      	mov	r0, r5
 8007caa:	f000 fc4d 	bl	8008548 <__lshift>
 8007cae:	46b0      	mov	r8, r6
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	9b03      	ldr	r3, [sp, #12]
 8007cb4:	9a03      	ldr	r2, [sp, #12]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	9308      	str	r3, [sp, #32]
 8007cba:	9b06      	ldr	r3, [sp, #24]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cc0:	9b04      	ldr	r3, [sp, #16]
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8007cc8:	9b08      	ldr	r3, [sp, #32]
 8007cca:	4621      	mov	r1, r4
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	4650      	mov	r0, sl
 8007cd0:	9304      	str	r3, [sp, #16]
 8007cd2:	f7ff fa75 	bl	80071c0 <quorem>
 8007cd6:	4641      	mov	r1, r8
 8007cd8:	9006      	str	r0, [sp, #24]
 8007cda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007cde:	4650      	mov	r0, sl
 8007ce0:	f000 fc9e 	bl	8008620 <__mcmp>
 8007ce4:	4632      	mov	r2, r6
 8007ce6:	9009      	str	r0, [sp, #36]	; 0x24
 8007ce8:	4621      	mov	r1, r4
 8007cea:	4628      	mov	r0, r5
 8007cec:	f000 fcb4 	bl	8008658 <__mdiff>
 8007cf0:	68c2      	ldr	r2, [r0, #12]
 8007cf2:	4607      	mov	r7, r0
 8007cf4:	bb02      	cbnz	r2, 8007d38 <_dtoa_r+0xa60>
 8007cf6:	4601      	mov	r1, r0
 8007cf8:	4650      	mov	r0, sl
 8007cfa:	f000 fc91 	bl	8008620 <__mcmp>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	4639      	mov	r1, r7
 8007d02:	4628      	mov	r0, r5
 8007d04:	920c      	str	r2, [sp, #48]	; 0x30
 8007d06:	f000 fa07 	bl	8008118 <_Bfree>
 8007d0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d0e:	9f08      	ldr	r7, [sp, #32]
 8007d10:	ea43 0102 	orr.w	r1, r3, r2
 8007d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d16:	4319      	orrs	r1, r3
 8007d18:	d110      	bne.n	8007d3c <_dtoa_r+0xa64>
 8007d1a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d1e:	d029      	beq.n	8007d74 <_dtoa_r+0xa9c>
 8007d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	dd02      	ble.n	8007d2c <_dtoa_r+0xa54>
 8007d26:	9b06      	ldr	r3, [sp, #24]
 8007d28:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007d2c:	9b04      	ldr	r3, [sp, #16]
 8007d2e:	f883 9000 	strb.w	r9, [r3]
 8007d32:	e777      	b.n	8007c24 <_dtoa_r+0x94c>
 8007d34:	4630      	mov	r0, r6
 8007d36:	e7ba      	b.n	8007cae <_dtoa_r+0x9d6>
 8007d38:	2201      	movs	r2, #1
 8007d3a:	e7e1      	b.n	8007d00 <_dtoa_r+0xa28>
 8007d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	db04      	blt.n	8007d4c <_dtoa_r+0xa74>
 8007d42:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007d44:	430b      	orrs	r3, r1
 8007d46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007d48:	430b      	orrs	r3, r1
 8007d4a:	d120      	bne.n	8007d8e <_dtoa_r+0xab6>
 8007d4c:	2a00      	cmp	r2, #0
 8007d4e:	dded      	ble.n	8007d2c <_dtoa_r+0xa54>
 8007d50:	4651      	mov	r1, sl
 8007d52:	2201      	movs	r2, #1
 8007d54:	4628      	mov	r0, r5
 8007d56:	f000 fbf7 	bl	8008548 <__lshift>
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	f000 fc5f 	bl	8008620 <__mcmp>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	dc03      	bgt.n	8007d6e <_dtoa_r+0xa96>
 8007d66:	d1e1      	bne.n	8007d2c <_dtoa_r+0xa54>
 8007d68:	f019 0f01 	tst.w	r9, #1
 8007d6c:	d0de      	beq.n	8007d2c <_dtoa_r+0xa54>
 8007d6e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d72:	d1d8      	bne.n	8007d26 <_dtoa_r+0xa4e>
 8007d74:	2339      	movs	r3, #57	; 0x39
 8007d76:	9a04      	ldr	r2, [sp, #16]
 8007d78:	7013      	strb	r3, [r2, #0]
 8007d7a:	463b      	mov	r3, r7
 8007d7c:	461f      	mov	r7, r3
 8007d7e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	2a39      	cmp	r2, #57	; 0x39
 8007d86:	d06b      	beq.n	8007e60 <_dtoa_r+0xb88>
 8007d88:	3201      	adds	r2, #1
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	e74a      	b.n	8007c24 <_dtoa_r+0x94c>
 8007d8e:	2a00      	cmp	r2, #0
 8007d90:	dd07      	ble.n	8007da2 <_dtoa_r+0xaca>
 8007d92:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d96:	d0ed      	beq.n	8007d74 <_dtoa_r+0xa9c>
 8007d98:	9a04      	ldr	r2, [sp, #16]
 8007d9a:	f109 0301 	add.w	r3, r9, #1
 8007d9e:	7013      	strb	r3, [r2, #0]
 8007da0:	e740      	b.n	8007c24 <_dtoa_r+0x94c>
 8007da2:	9b08      	ldr	r3, [sp, #32]
 8007da4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007da6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d042      	beq.n	8007e34 <_dtoa_r+0xb5c>
 8007dae:	4651      	mov	r1, sl
 8007db0:	2300      	movs	r3, #0
 8007db2:	220a      	movs	r2, #10
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 f9d1 	bl	800815c <__multadd>
 8007dba:	45b0      	cmp	r8, r6
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	f04f 0300 	mov.w	r3, #0
 8007dc2:	f04f 020a 	mov.w	r2, #10
 8007dc6:	4641      	mov	r1, r8
 8007dc8:	4628      	mov	r0, r5
 8007dca:	d107      	bne.n	8007ddc <_dtoa_r+0xb04>
 8007dcc:	f000 f9c6 	bl	800815c <__multadd>
 8007dd0:	4680      	mov	r8, r0
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	9b08      	ldr	r3, [sp, #32]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	9308      	str	r3, [sp, #32]
 8007dda:	e775      	b.n	8007cc8 <_dtoa_r+0x9f0>
 8007ddc:	f000 f9be 	bl	800815c <__multadd>
 8007de0:	4631      	mov	r1, r6
 8007de2:	4680      	mov	r8, r0
 8007de4:	2300      	movs	r3, #0
 8007de6:	220a      	movs	r2, #10
 8007de8:	4628      	mov	r0, r5
 8007dea:	f000 f9b7 	bl	800815c <__multadd>
 8007dee:	4606      	mov	r6, r0
 8007df0:	e7f0      	b.n	8007dd4 <_dtoa_r+0xafc>
 8007df2:	9b08      	ldr	r3, [sp, #32]
 8007df4:	9306      	str	r3, [sp, #24]
 8007df6:	9f03      	ldr	r7, [sp, #12]
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4650      	mov	r0, sl
 8007dfc:	f7ff f9e0 	bl	80071c0 <quorem>
 8007e00:	9b03      	ldr	r3, [sp, #12]
 8007e02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e06:	f807 9b01 	strb.w	r9, [r7], #1
 8007e0a:	1afa      	subs	r2, r7, r3
 8007e0c:	9b06      	ldr	r3, [sp, #24]
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	dd07      	ble.n	8007e22 <_dtoa_r+0xb4a>
 8007e12:	4651      	mov	r1, sl
 8007e14:	2300      	movs	r3, #0
 8007e16:	220a      	movs	r2, #10
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f000 f99f 	bl	800815c <__multadd>
 8007e1e:	4682      	mov	sl, r0
 8007e20:	e7ea      	b.n	8007df8 <_dtoa_r+0xb20>
 8007e22:	9b06      	ldr	r3, [sp, #24]
 8007e24:	f04f 0800 	mov.w	r8, #0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bfcc      	ite	gt
 8007e2c:	461f      	movgt	r7, r3
 8007e2e:	2701      	movle	r7, #1
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	441f      	add	r7, r3
 8007e34:	4651      	mov	r1, sl
 8007e36:	2201      	movs	r2, #1
 8007e38:	4628      	mov	r0, r5
 8007e3a:	f000 fb85 	bl	8008548 <__lshift>
 8007e3e:	4621      	mov	r1, r4
 8007e40:	4682      	mov	sl, r0
 8007e42:	f000 fbed 	bl	8008620 <__mcmp>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	dc97      	bgt.n	8007d7a <_dtoa_r+0xaa2>
 8007e4a:	d102      	bne.n	8007e52 <_dtoa_r+0xb7a>
 8007e4c:	f019 0f01 	tst.w	r9, #1
 8007e50:	d193      	bne.n	8007d7a <_dtoa_r+0xaa2>
 8007e52:	463b      	mov	r3, r7
 8007e54:	461f      	mov	r7, r3
 8007e56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e5a:	2a30      	cmp	r2, #48	; 0x30
 8007e5c:	d0fa      	beq.n	8007e54 <_dtoa_r+0xb7c>
 8007e5e:	e6e1      	b.n	8007c24 <_dtoa_r+0x94c>
 8007e60:	9a03      	ldr	r2, [sp, #12]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d18a      	bne.n	8007d7c <_dtoa_r+0xaa4>
 8007e66:	2331      	movs	r3, #49	; 0x31
 8007e68:	f10b 0b01 	add.w	fp, fp, #1
 8007e6c:	e797      	b.n	8007d9e <_dtoa_r+0xac6>
 8007e6e:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <_dtoa_r+0xbc0>)
 8007e70:	f7ff ba9f 	b.w	80073b2 <_dtoa_r+0xda>
 8007e74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f47f aa77 	bne.w	800736a <_dtoa_r+0x92>
 8007e7c:	4b07      	ldr	r3, [pc, #28]	; (8007e9c <_dtoa_r+0xbc4>)
 8007e7e:	f7ff ba98 	b.w	80073b2 <_dtoa_r+0xda>
 8007e82:	9b06      	ldr	r3, [sp, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dcb6      	bgt.n	8007df6 <_dtoa_r+0xb1e>
 8007e88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	f73f aeb5 	bgt.w	8007bfa <_dtoa_r+0x922>
 8007e90:	e7b1      	b.n	8007df6 <_dtoa_r+0xb1e>
 8007e92:	bf00      	nop
 8007e94:	0800b3d7 	.word	0x0800b3d7
 8007e98:	0800b6c0 	.word	0x0800b6c0
 8007e9c:	0800b372 	.word	0x0800b372

08007ea0 <_free_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	d040      	beq.n	8007f2a <_free_r+0x8a>
 8007ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eac:	1f0c      	subs	r4, r1, #4
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bfb8      	it	lt
 8007eb2:	18e4      	addlt	r4, r4, r3
 8007eb4:	f000 f8e4 	bl	8008080 <__malloc_lock>
 8007eb8:	4a1c      	ldr	r2, [pc, #112]	; (8007f2c <_free_r+0x8c>)
 8007eba:	6813      	ldr	r3, [r2, #0]
 8007ebc:	b933      	cbnz	r3, 8007ecc <_free_r+0x2c>
 8007ebe:	6063      	str	r3, [r4, #4]
 8007ec0:	6014      	str	r4, [r2, #0]
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec8:	f000 b8e0 	b.w	800808c <__malloc_unlock>
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	d908      	bls.n	8007ee2 <_free_r+0x42>
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	1821      	adds	r1, r4, r0
 8007ed4:	428b      	cmp	r3, r1
 8007ed6:	bf01      	itttt	eq
 8007ed8:	6819      	ldreq	r1, [r3, #0]
 8007eda:	685b      	ldreq	r3, [r3, #4]
 8007edc:	1809      	addeq	r1, r1, r0
 8007ede:	6021      	streq	r1, [r4, #0]
 8007ee0:	e7ed      	b.n	8007ebe <_free_r+0x1e>
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	b10b      	cbz	r3, 8007eec <_free_r+0x4c>
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	d9fa      	bls.n	8007ee2 <_free_r+0x42>
 8007eec:	6811      	ldr	r1, [r2, #0]
 8007eee:	1850      	adds	r0, r2, r1
 8007ef0:	42a0      	cmp	r0, r4
 8007ef2:	d10b      	bne.n	8007f0c <_free_r+0x6c>
 8007ef4:	6820      	ldr	r0, [r4, #0]
 8007ef6:	4401      	add	r1, r0
 8007ef8:	1850      	adds	r0, r2, r1
 8007efa:	4283      	cmp	r3, r0
 8007efc:	6011      	str	r1, [r2, #0]
 8007efe:	d1e0      	bne.n	8007ec2 <_free_r+0x22>
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	4408      	add	r0, r1
 8007f06:	6010      	str	r0, [r2, #0]
 8007f08:	6053      	str	r3, [r2, #4]
 8007f0a:	e7da      	b.n	8007ec2 <_free_r+0x22>
 8007f0c:	d902      	bls.n	8007f14 <_free_r+0x74>
 8007f0e:	230c      	movs	r3, #12
 8007f10:	602b      	str	r3, [r5, #0]
 8007f12:	e7d6      	b.n	8007ec2 <_free_r+0x22>
 8007f14:	6820      	ldr	r0, [r4, #0]
 8007f16:	1821      	adds	r1, r4, r0
 8007f18:	428b      	cmp	r3, r1
 8007f1a:	bf01      	itttt	eq
 8007f1c:	6819      	ldreq	r1, [r3, #0]
 8007f1e:	685b      	ldreq	r3, [r3, #4]
 8007f20:	1809      	addeq	r1, r1, r0
 8007f22:	6021      	streq	r1, [r4, #0]
 8007f24:	6063      	str	r3, [r4, #4]
 8007f26:	6054      	str	r4, [r2, #4]
 8007f28:	e7cb      	b.n	8007ec2 <_free_r+0x22>
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	20000608 	.word	0x20000608

08007f30 <malloc>:
 8007f30:	4b02      	ldr	r3, [pc, #8]	; (8007f3c <malloc+0xc>)
 8007f32:	4601      	mov	r1, r0
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	f000 b823 	b.w	8007f80 <_malloc_r>
 8007f3a:	bf00      	nop
 8007f3c:	2000008c 	.word	0x2000008c

08007f40 <sbrk_aligned>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	4e0e      	ldr	r6, [pc, #56]	; (8007f7c <sbrk_aligned+0x3c>)
 8007f44:	460c      	mov	r4, r1
 8007f46:	6831      	ldr	r1, [r6, #0]
 8007f48:	4605      	mov	r5, r0
 8007f4a:	b911      	cbnz	r1, 8007f52 <sbrk_aligned+0x12>
 8007f4c:	f002 f9ae 	bl	800a2ac <_sbrk_r>
 8007f50:	6030      	str	r0, [r6, #0]
 8007f52:	4621      	mov	r1, r4
 8007f54:	4628      	mov	r0, r5
 8007f56:	f002 f9a9 	bl	800a2ac <_sbrk_r>
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d00a      	beq.n	8007f74 <sbrk_aligned+0x34>
 8007f5e:	1cc4      	adds	r4, r0, #3
 8007f60:	f024 0403 	bic.w	r4, r4, #3
 8007f64:	42a0      	cmp	r0, r4
 8007f66:	d007      	beq.n	8007f78 <sbrk_aligned+0x38>
 8007f68:	1a21      	subs	r1, r4, r0
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f002 f99e 	bl	800a2ac <_sbrk_r>
 8007f70:	3001      	adds	r0, #1
 8007f72:	d101      	bne.n	8007f78 <sbrk_aligned+0x38>
 8007f74:	f04f 34ff 	mov.w	r4, #4294967295
 8007f78:	4620      	mov	r0, r4
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	2000060c 	.word	0x2000060c

08007f80 <_malloc_r>:
 8007f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	1ccd      	adds	r5, r1, #3
 8007f86:	f025 0503 	bic.w	r5, r5, #3
 8007f8a:	3508      	adds	r5, #8
 8007f8c:	2d0c      	cmp	r5, #12
 8007f8e:	bf38      	it	cc
 8007f90:	250c      	movcc	r5, #12
 8007f92:	2d00      	cmp	r5, #0
 8007f94:	4607      	mov	r7, r0
 8007f96:	db01      	blt.n	8007f9c <_malloc_r+0x1c>
 8007f98:	42a9      	cmp	r1, r5
 8007f9a:	d905      	bls.n	8007fa8 <_malloc_r+0x28>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	2600      	movs	r6, #0
 8007fa0:	603b      	str	r3, [r7, #0]
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800807c <_malloc_r+0xfc>
 8007fac:	f000 f868 	bl	8008080 <__malloc_lock>
 8007fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb4:	461c      	mov	r4, r3
 8007fb6:	bb5c      	cbnz	r4, 8008010 <_malloc_r+0x90>
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f7ff ffc0 	bl	8007f40 <sbrk_aligned>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	d155      	bne.n	8008072 <_malloc_r+0xf2>
 8007fc6:	f8d8 4000 	ldr.w	r4, [r8]
 8007fca:	4626      	mov	r6, r4
 8007fcc:	2e00      	cmp	r6, #0
 8007fce:	d145      	bne.n	800805c <_malloc_r+0xdc>
 8007fd0:	2c00      	cmp	r4, #0
 8007fd2:	d048      	beq.n	8008066 <_malloc_r+0xe6>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4638      	mov	r0, r7
 8007fda:	eb04 0903 	add.w	r9, r4, r3
 8007fde:	f002 f965 	bl	800a2ac <_sbrk_r>
 8007fe2:	4581      	cmp	r9, r0
 8007fe4:	d13f      	bne.n	8008066 <_malloc_r+0xe6>
 8007fe6:	6821      	ldr	r1, [r4, #0]
 8007fe8:	4638      	mov	r0, r7
 8007fea:	1a6d      	subs	r5, r5, r1
 8007fec:	4629      	mov	r1, r5
 8007fee:	f7ff ffa7 	bl	8007f40 <sbrk_aligned>
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d037      	beq.n	8008066 <_malloc_r+0xe6>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	442b      	add	r3, r5
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d038      	beq.n	8008076 <_malloc_r+0xf6>
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	42a2      	cmp	r2, r4
 8008008:	d12b      	bne.n	8008062 <_malloc_r+0xe2>
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
 800800e:	e00f      	b.n	8008030 <_malloc_r+0xb0>
 8008010:	6822      	ldr	r2, [r4, #0]
 8008012:	1b52      	subs	r2, r2, r5
 8008014:	d41f      	bmi.n	8008056 <_malloc_r+0xd6>
 8008016:	2a0b      	cmp	r2, #11
 8008018:	d917      	bls.n	800804a <_malloc_r+0xca>
 800801a:	1961      	adds	r1, r4, r5
 800801c:	42a3      	cmp	r3, r4
 800801e:	6025      	str	r5, [r4, #0]
 8008020:	bf18      	it	ne
 8008022:	6059      	strne	r1, [r3, #4]
 8008024:	6863      	ldr	r3, [r4, #4]
 8008026:	bf08      	it	eq
 8008028:	f8c8 1000 	streq.w	r1, [r8]
 800802c:	5162      	str	r2, [r4, r5]
 800802e:	604b      	str	r3, [r1, #4]
 8008030:	4638      	mov	r0, r7
 8008032:	f104 060b 	add.w	r6, r4, #11
 8008036:	f000 f829 	bl	800808c <__malloc_unlock>
 800803a:	f026 0607 	bic.w	r6, r6, #7
 800803e:	1d23      	adds	r3, r4, #4
 8008040:	1af2      	subs	r2, r6, r3
 8008042:	d0ae      	beq.n	8007fa2 <_malloc_r+0x22>
 8008044:	1b9b      	subs	r3, r3, r6
 8008046:	50a3      	str	r3, [r4, r2]
 8008048:	e7ab      	b.n	8007fa2 <_malloc_r+0x22>
 800804a:	42a3      	cmp	r3, r4
 800804c:	6862      	ldr	r2, [r4, #4]
 800804e:	d1dd      	bne.n	800800c <_malloc_r+0x8c>
 8008050:	f8c8 2000 	str.w	r2, [r8]
 8008054:	e7ec      	b.n	8008030 <_malloc_r+0xb0>
 8008056:	4623      	mov	r3, r4
 8008058:	6864      	ldr	r4, [r4, #4]
 800805a:	e7ac      	b.n	8007fb6 <_malloc_r+0x36>
 800805c:	4634      	mov	r4, r6
 800805e:	6876      	ldr	r6, [r6, #4]
 8008060:	e7b4      	b.n	8007fcc <_malloc_r+0x4c>
 8008062:	4613      	mov	r3, r2
 8008064:	e7cc      	b.n	8008000 <_malloc_r+0x80>
 8008066:	230c      	movs	r3, #12
 8008068:	4638      	mov	r0, r7
 800806a:	603b      	str	r3, [r7, #0]
 800806c:	f000 f80e 	bl	800808c <__malloc_unlock>
 8008070:	e797      	b.n	8007fa2 <_malloc_r+0x22>
 8008072:	6025      	str	r5, [r4, #0]
 8008074:	e7dc      	b.n	8008030 <_malloc_r+0xb0>
 8008076:	605b      	str	r3, [r3, #4]
 8008078:	deff      	udf	#255	; 0xff
 800807a:	bf00      	nop
 800807c:	20000608 	.word	0x20000608

08008080 <__malloc_lock>:
 8008080:	4801      	ldr	r0, [pc, #4]	; (8008088 <__malloc_lock+0x8>)
 8008082:	f7ff b86b 	b.w	800715c <__retarget_lock_acquire_recursive>
 8008086:	bf00      	nop
 8008088:	20000604 	.word	0x20000604

0800808c <__malloc_unlock>:
 800808c:	4801      	ldr	r0, [pc, #4]	; (8008094 <__malloc_unlock+0x8>)
 800808e:	f7ff b866 	b.w	800715e <__retarget_lock_release_recursive>
 8008092:	bf00      	nop
 8008094:	20000604 	.word	0x20000604

08008098 <_Balloc>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	69c6      	ldr	r6, [r0, #28]
 800809c:	4604      	mov	r4, r0
 800809e:	460d      	mov	r5, r1
 80080a0:	b976      	cbnz	r6, 80080c0 <_Balloc+0x28>
 80080a2:	2010      	movs	r0, #16
 80080a4:	f7ff ff44 	bl	8007f30 <malloc>
 80080a8:	4602      	mov	r2, r0
 80080aa:	61e0      	str	r0, [r4, #28]
 80080ac:	b920      	cbnz	r0, 80080b8 <_Balloc+0x20>
 80080ae:	216b      	movs	r1, #107	; 0x6b
 80080b0:	4b17      	ldr	r3, [pc, #92]	; (8008110 <_Balloc+0x78>)
 80080b2:	4818      	ldr	r0, [pc, #96]	; (8008114 <_Balloc+0x7c>)
 80080b4:	f7ff f866 	bl	8007184 <__assert_func>
 80080b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080bc:	6006      	str	r6, [r0, #0]
 80080be:	60c6      	str	r6, [r0, #12]
 80080c0:	69e6      	ldr	r6, [r4, #28]
 80080c2:	68f3      	ldr	r3, [r6, #12]
 80080c4:	b183      	cbz	r3, 80080e8 <_Balloc+0x50>
 80080c6:	69e3      	ldr	r3, [r4, #28]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ce:	b9b8      	cbnz	r0, 8008100 <_Balloc+0x68>
 80080d0:	2101      	movs	r1, #1
 80080d2:	fa01 f605 	lsl.w	r6, r1, r5
 80080d6:	1d72      	adds	r2, r6, #5
 80080d8:	4620      	mov	r0, r4
 80080da:	0092      	lsls	r2, r2, #2
 80080dc:	f002 f911 	bl	800a302 <_calloc_r>
 80080e0:	b160      	cbz	r0, 80080fc <_Balloc+0x64>
 80080e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080e6:	e00e      	b.n	8008106 <_Balloc+0x6e>
 80080e8:	2221      	movs	r2, #33	; 0x21
 80080ea:	2104      	movs	r1, #4
 80080ec:	4620      	mov	r0, r4
 80080ee:	f002 f908 	bl	800a302 <_calloc_r>
 80080f2:	69e3      	ldr	r3, [r4, #28]
 80080f4:	60f0      	str	r0, [r6, #12]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e4      	bne.n	80080c6 <_Balloc+0x2e>
 80080fc:	2000      	movs	r0, #0
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
 8008100:	6802      	ldr	r2, [r0, #0]
 8008102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008106:	2300      	movs	r3, #0
 8008108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800810c:	e7f7      	b.n	80080fe <_Balloc+0x66>
 800810e:	bf00      	nop
 8008110:	0800b2c5 	.word	0x0800b2c5
 8008114:	0800b3e8 	.word	0x0800b3e8

08008118 <_Bfree>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	69c6      	ldr	r6, [r0, #28]
 800811c:	4605      	mov	r5, r0
 800811e:	460c      	mov	r4, r1
 8008120:	b976      	cbnz	r6, 8008140 <_Bfree+0x28>
 8008122:	2010      	movs	r0, #16
 8008124:	f7ff ff04 	bl	8007f30 <malloc>
 8008128:	4602      	mov	r2, r0
 800812a:	61e8      	str	r0, [r5, #28]
 800812c:	b920      	cbnz	r0, 8008138 <_Bfree+0x20>
 800812e:	218f      	movs	r1, #143	; 0x8f
 8008130:	4b08      	ldr	r3, [pc, #32]	; (8008154 <_Bfree+0x3c>)
 8008132:	4809      	ldr	r0, [pc, #36]	; (8008158 <_Bfree+0x40>)
 8008134:	f7ff f826 	bl	8007184 <__assert_func>
 8008138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800813c:	6006      	str	r6, [r0, #0]
 800813e:	60c6      	str	r6, [r0, #12]
 8008140:	b13c      	cbz	r4, 8008152 <_Bfree+0x3a>
 8008142:	69eb      	ldr	r3, [r5, #28]
 8008144:	6862      	ldr	r2, [r4, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800814c:	6021      	str	r1, [r4, #0]
 800814e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	0800b2c5 	.word	0x0800b2c5
 8008158:	0800b3e8 	.word	0x0800b3e8

0800815c <__multadd>:
 800815c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008160:	4607      	mov	r7, r0
 8008162:	460c      	mov	r4, r1
 8008164:	461e      	mov	r6, r3
 8008166:	2000      	movs	r0, #0
 8008168:	690d      	ldr	r5, [r1, #16]
 800816a:	f101 0c14 	add.w	ip, r1, #20
 800816e:	f8dc 3000 	ldr.w	r3, [ip]
 8008172:	3001      	adds	r0, #1
 8008174:	b299      	uxth	r1, r3
 8008176:	fb02 6101 	mla	r1, r2, r1, r6
 800817a:	0c1e      	lsrs	r6, r3, #16
 800817c:	0c0b      	lsrs	r3, r1, #16
 800817e:	fb02 3306 	mla	r3, r2, r6, r3
 8008182:	b289      	uxth	r1, r1
 8008184:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008188:	4285      	cmp	r5, r0
 800818a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800818e:	f84c 1b04 	str.w	r1, [ip], #4
 8008192:	dcec      	bgt.n	800816e <__multadd+0x12>
 8008194:	b30e      	cbz	r6, 80081da <__multadd+0x7e>
 8008196:	68a3      	ldr	r3, [r4, #8]
 8008198:	42ab      	cmp	r3, r5
 800819a:	dc19      	bgt.n	80081d0 <__multadd+0x74>
 800819c:	6861      	ldr	r1, [r4, #4]
 800819e:	4638      	mov	r0, r7
 80081a0:	3101      	adds	r1, #1
 80081a2:	f7ff ff79 	bl	8008098 <_Balloc>
 80081a6:	4680      	mov	r8, r0
 80081a8:	b928      	cbnz	r0, 80081b6 <__multadd+0x5a>
 80081aa:	4602      	mov	r2, r0
 80081ac:	21ba      	movs	r1, #186	; 0xba
 80081ae:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <__multadd+0x84>)
 80081b0:	480c      	ldr	r0, [pc, #48]	; (80081e4 <__multadd+0x88>)
 80081b2:	f7fe ffe7 	bl	8007184 <__assert_func>
 80081b6:	6922      	ldr	r2, [r4, #16]
 80081b8:	f104 010c 	add.w	r1, r4, #12
 80081bc:	3202      	adds	r2, #2
 80081be:	0092      	lsls	r2, r2, #2
 80081c0:	300c      	adds	r0, #12
 80081c2:	f002 f883 	bl	800a2cc <memcpy>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4638      	mov	r0, r7
 80081ca:	f7ff ffa5 	bl	8008118 <_Bfree>
 80081ce:	4644      	mov	r4, r8
 80081d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081d4:	3501      	adds	r5, #1
 80081d6:	615e      	str	r6, [r3, #20]
 80081d8:	6125      	str	r5, [r4, #16]
 80081da:	4620      	mov	r0, r4
 80081dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e0:	0800b3d7 	.word	0x0800b3d7
 80081e4:	0800b3e8 	.word	0x0800b3e8

080081e8 <__s2b>:
 80081e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081ec:	4615      	mov	r5, r2
 80081ee:	2209      	movs	r2, #9
 80081f0:	461f      	mov	r7, r3
 80081f2:	3308      	adds	r3, #8
 80081f4:	460c      	mov	r4, r1
 80081f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80081fa:	4606      	mov	r6, r0
 80081fc:	2201      	movs	r2, #1
 80081fe:	2100      	movs	r1, #0
 8008200:	429a      	cmp	r2, r3
 8008202:	db09      	blt.n	8008218 <__s2b+0x30>
 8008204:	4630      	mov	r0, r6
 8008206:	f7ff ff47 	bl	8008098 <_Balloc>
 800820a:	b940      	cbnz	r0, 800821e <__s2b+0x36>
 800820c:	4602      	mov	r2, r0
 800820e:	21d3      	movs	r1, #211	; 0xd3
 8008210:	4b18      	ldr	r3, [pc, #96]	; (8008274 <__s2b+0x8c>)
 8008212:	4819      	ldr	r0, [pc, #100]	; (8008278 <__s2b+0x90>)
 8008214:	f7fe ffb6 	bl	8007184 <__assert_func>
 8008218:	0052      	lsls	r2, r2, #1
 800821a:	3101      	adds	r1, #1
 800821c:	e7f0      	b.n	8008200 <__s2b+0x18>
 800821e:	9b08      	ldr	r3, [sp, #32]
 8008220:	2d09      	cmp	r5, #9
 8008222:	6143      	str	r3, [r0, #20]
 8008224:	f04f 0301 	mov.w	r3, #1
 8008228:	6103      	str	r3, [r0, #16]
 800822a:	dd16      	ble.n	800825a <__s2b+0x72>
 800822c:	f104 0909 	add.w	r9, r4, #9
 8008230:	46c8      	mov	r8, r9
 8008232:	442c      	add	r4, r5
 8008234:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008238:	4601      	mov	r1, r0
 800823a:	220a      	movs	r2, #10
 800823c:	4630      	mov	r0, r6
 800823e:	3b30      	subs	r3, #48	; 0x30
 8008240:	f7ff ff8c 	bl	800815c <__multadd>
 8008244:	45a0      	cmp	r8, r4
 8008246:	d1f5      	bne.n	8008234 <__s2b+0x4c>
 8008248:	f1a5 0408 	sub.w	r4, r5, #8
 800824c:	444c      	add	r4, r9
 800824e:	1b2d      	subs	r5, r5, r4
 8008250:	1963      	adds	r3, r4, r5
 8008252:	42bb      	cmp	r3, r7
 8008254:	db04      	blt.n	8008260 <__s2b+0x78>
 8008256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800825a:	2509      	movs	r5, #9
 800825c:	340a      	adds	r4, #10
 800825e:	e7f6      	b.n	800824e <__s2b+0x66>
 8008260:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008264:	4601      	mov	r1, r0
 8008266:	220a      	movs	r2, #10
 8008268:	4630      	mov	r0, r6
 800826a:	3b30      	subs	r3, #48	; 0x30
 800826c:	f7ff ff76 	bl	800815c <__multadd>
 8008270:	e7ee      	b.n	8008250 <__s2b+0x68>
 8008272:	bf00      	nop
 8008274:	0800b3d7 	.word	0x0800b3d7
 8008278:	0800b3e8 	.word	0x0800b3e8

0800827c <__hi0bits>:
 800827c:	0c02      	lsrs	r2, r0, #16
 800827e:	0412      	lsls	r2, r2, #16
 8008280:	4603      	mov	r3, r0
 8008282:	b9ca      	cbnz	r2, 80082b8 <__hi0bits+0x3c>
 8008284:	0403      	lsls	r3, r0, #16
 8008286:	2010      	movs	r0, #16
 8008288:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800828c:	bf04      	itt	eq
 800828e:	021b      	lsleq	r3, r3, #8
 8008290:	3008      	addeq	r0, #8
 8008292:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008296:	bf04      	itt	eq
 8008298:	011b      	lsleq	r3, r3, #4
 800829a:	3004      	addeq	r0, #4
 800829c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80082a0:	bf04      	itt	eq
 80082a2:	009b      	lsleq	r3, r3, #2
 80082a4:	3002      	addeq	r0, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	db05      	blt.n	80082b6 <__hi0bits+0x3a>
 80082aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80082ae:	f100 0001 	add.w	r0, r0, #1
 80082b2:	bf08      	it	eq
 80082b4:	2020      	moveq	r0, #32
 80082b6:	4770      	bx	lr
 80082b8:	2000      	movs	r0, #0
 80082ba:	e7e5      	b.n	8008288 <__hi0bits+0xc>

080082bc <__lo0bits>:
 80082bc:	6803      	ldr	r3, [r0, #0]
 80082be:	4602      	mov	r2, r0
 80082c0:	f013 0007 	ands.w	r0, r3, #7
 80082c4:	d00b      	beq.n	80082de <__lo0bits+0x22>
 80082c6:	07d9      	lsls	r1, r3, #31
 80082c8:	d421      	bmi.n	800830e <__lo0bits+0x52>
 80082ca:	0798      	lsls	r0, r3, #30
 80082cc:	bf49      	itett	mi
 80082ce:	085b      	lsrmi	r3, r3, #1
 80082d0:	089b      	lsrpl	r3, r3, #2
 80082d2:	2001      	movmi	r0, #1
 80082d4:	6013      	strmi	r3, [r2, #0]
 80082d6:	bf5c      	itt	pl
 80082d8:	2002      	movpl	r0, #2
 80082da:	6013      	strpl	r3, [r2, #0]
 80082dc:	4770      	bx	lr
 80082de:	b299      	uxth	r1, r3
 80082e0:	b909      	cbnz	r1, 80082e6 <__lo0bits+0x2a>
 80082e2:	2010      	movs	r0, #16
 80082e4:	0c1b      	lsrs	r3, r3, #16
 80082e6:	b2d9      	uxtb	r1, r3
 80082e8:	b909      	cbnz	r1, 80082ee <__lo0bits+0x32>
 80082ea:	3008      	adds	r0, #8
 80082ec:	0a1b      	lsrs	r3, r3, #8
 80082ee:	0719      	lsls	r1, r3, #28
 80082f0:	bf04      	itt	eq
 80082f2:	091b      	lsreq	r3, r3, #4
 80082f4:	3004      	addeq	r0, #4
 80082f6:	0799      	lsls	r1, r3, #30
 80082f8:	bf04      	itt	eq
 80082fa:	089b      	lsreq	r3, r3, #2
 80082fc:	3002      	addeq	r0, #2
 80082fe:	07d9      	lsls	r1, r3, #31
 8008300:	d403      	bmi.n	800830a <__lo0bits+0x4e>
 8008302:	085b      	lsrs	r3, r3, #1
 8008304:	f100 0001 	add.w	r0, r0, #1
 8008308:	d003      	beq.n	8008312 <__lo0bits+0x56>
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	4770      	bx	lr
 800830e:	2000      	movs	r0, #0
 8008310:	4770      	bx	lr
 8008312:	2020      	movs	r0, #32
 8008314:	4770      	bx	lr
	...

08008318 <__i2b>:
 8008318:	b510      	push	{r4, lr}
 800831a:	460c      	mov	r4, r1
 800831c:	2101      	movs	r1, #1
 800831e:	f7ff febb 	bl	8008098 <_Balloc>
 8008322:	4602      	mov	r2, r0
 8008324:	b928      	cbnz	r0, 8008332 <__i2b+0x1a>
 8008326:	f240 1145 	movw	r1, #325	; 0x145
 800832a:	4b04      	ldr	r3, [pc, #16]	; (800833c <__i2b+0x24>)
 800832c:	4804      	ldr	r0, [pc, #16]	; (8008340 <__i2b+0x28>)
 800832e:	f7fe ff29 	bl	8007184 <__assert_func>
 8008332:	2301      	movs	r3, #1
 8008334:	6144      	str	r4, [r0, #20]
 8008336:	6103      	str	r3, [r0, #16]
 8008338:	bd10      	pop	{r4, pc}
 800833a:	bf00      	nop
 800833c:	0800b3d7 	.word	0x0800b3d7
 8008340:	0800b3e8 	.word	0x0800b3e8

08008344 <__multiply>:
 8008344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	4691      	mov	r9, r2
 800834a:	690a      	ldr	r2, [r1, #16]
 800834c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008350:	460c      	mov	r4, r1
 8008352:	429a      	cmp	r2, r3
 8008354:	bfbe      	ittt	lt
 8008356:	460b      	movlt	r3, r1
 8008358:	464c      	movlt	r4, r9
 800835a:	4699      	movlt	r9, r3
 800835c:	6927      	ldr	r7, [r4, #16]
 800835e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008362:	68a3      	ldr	r3, [r4, #8]
 8008364:	6861      	ldr	r1, [r4, #4]
 8008366:	eb07 060a 	add.w	r6, r7, sl
 800836a:	42b3      	cmp	r3, r6
 800836c:	b085      	sub	sp, #20
 800836e:	bfb8      	it	lt
 8008370:	3101      	addlt	r1, #1
 8008372:	f7ff fe91 	bl	8008098 <_Balloc>
 8008376:	b930      	cbnz	r0, 8008386 <__multiply+0x42>
 8008378:	4602      	mov	r2, r0
 800837a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800837e:	4b43      	ldr	r3, [pc, #268]	; (800848c <__multiply+0x148>)
 8008380:	4843      	ldr	r0, [pc, #268]	; (8008490 <__multiply+0x14c>)
 8008382:	f7fe feff 	bl	8007184 <__assert_func>
 8008386:	f100 0514 	add.w	r5, r0, #20
 800838a:	462b      	mov	r3, r5
 800838c:	2200      	movs	r2, #0
 800838e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008392:	4543      	cmp	r3, r8
 8008394:	d321      	bcc.n	80083da <__multiply+0x96>
 8008396:	f104 0314 	add.w	r3, r4, #20
 800839a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800839e:	f109 0314 	add.w	r3, r9, #20
 80083a2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083a6:	9202      	str	r2, [sp, #8]
 80083a8:	1b3a      	subs	r2, r7, r4
 80083aa:	3a15      	subs	r2, #21
 80083ac:	f022 0203 	bic.w	r2, r2, #3
 80083b0:	3204      	adds	r2, #4
 80083b2:	f104 0115 	add.w	r1, r4, #21
 80083b6:	428f      	cmp	r7, r1
 80083b8:	bf38      	it	cc
 80083ba:	2204      	movcc	r2, #4
 80083bc:	9201      	str	r2, [sp, #4]
 80083be:	9a02      	ldr	r2, [sp, #8]
 80083c0:	9303      	str	r3, [sp, #12]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d80c      	bhi.n	80083e0 <__multiply+0x9c>
 80083c6:	2e00      	cmp	r6, #0
 80083c8:	dd03      	ble.n	80083d2 <__multiply+0x8e>
 80083ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d05a      	beq.n	8008488 <__multiply+0x144>
 80083d2:	6106      	str	r6, [r0, #16]
 80083d4:	b005      	add	sp, #20
 80083d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083da:	f843 2b04 	str.w	r2, [r3], #4
 80083de:	e7d8      	b.n	8008392 <__multiply+0x4e>
 80083e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80083e4:	f1ba 0f00 	cmp.w	sl, #0
 80083e8:	d023      	beq.n	8008432 <__multiply+0xee>
 80083ea:	46a9      	mov	r9, r5
 80083ec:	f04f 0c00 	mov.w	ip, #0
 80083f0:	f104 0e14 	add.w	lr, r4, #20
 80083f4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80083f8:	f8d9 1000 	ldr.w	r1, [r9]
 80083fc:	fa1f fb82 	uxth.w	fp, r2
 8008400:	b289      	uxth	r1, r1
 8008402:	fb0a 110b 	mla	r1, sl, fp, r1
 8008406:	4461      	add	r1, ip
 8008408:	f8d9 c000 	ldr.w	ip, [r9]
 800840c:	0c12      	lsrs	r2, r2, #16
 800840e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008412:	fb0a c202 	mla	r2, sl, r2, ip
 8008416:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800841a:	b289      	uxth	r1, r1
 800841c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008420:	4577      	cmp	r7, lr
 8008422:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008426:	f849 1b04 	str.w	r1, [r9], #4
 800842a:	d8e3      	bhi.n	80083f4 <__multiply+0xb0>
 800842c:	9a01      	ldr	r2, [sp, #4]
 800842e:	f845 c002 	str.w	ip, [r5, r2]
 8008432:	9a03      	ldr	r2, [sp, #12]
 8008434:	3304      	adds	r3, #4
 8008436:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800843a:	f1b9 0f00 	cmp.w	r9, #0
 800843e:	d021      	beq.n	8008484 <__multiply+0x140>
 8008440:	46ae      	mov	lr, r5
 8008442:	f04f 0a00 	mov.w	sl, #0
 8008446:	6829      	ldr	r1, [r5, #0]
 8008448:	f104 0c14 	add.w	ip, r4, #20
 800844c:	f8bc b000 	ldrh.w	fp, [ip]
 8008450:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008454:	b289      	uxth	r1, r1
 8008456:	fb09 220b 	mla	r2, r9, fp, r2
 800845a:	4452      	add	r2, sl
 800845c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008460:	f84e 1b04 	str.w	r1, [lr], #4
 8008464:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008468:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800846c:	f8be 1000 	ldrh.w	r1, [lr]
 8008470:	4567      	cmp	r7, ip
 8008472:	fb09 110a 	mla	r1, r9, sl, r1
 8008476:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800847a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800847e:	d8e5      	bhi.n	800844c <__multiply+0x108>
 8008480:	9a01      	ldr	r2, [sp, #4]
 8008482:	50a9      	str	r1, [r5, r2]
 8008484:	3504      	adds	r5, #4
 8008486:	e79a      	b.n	80083be <__multiply+0x7a>
 8008488:	3e01      	subs	r6, #1
 800848a:	e79c      	b.n	80083c6 <__multiply+0x82>
 800848c:	0800b3d7 	.word	0x0800b3d7
 8008490:	0800b3e8 	.word	0x0800b3e8

08008494 <__pow5mult>:
 8008494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008498:	4615      	mov	r5, r2
 800849a:	f012 0203 	ands.w	r2, r2, #3
 800849e:	4606      	mov	r6, r0
 80084a0:	460f      	mov	r7, r1
 80084a2:	d007      	beq.n	80084b4 <__pow5mult+0x20>
 80084a4:	4c25      	ldr	r4, [pc, #148]	; (800853c <__pow5mult+0xa8>)
 80084a6:	3a01      	subs	r2, #1
 80084a8:	2300      	movs	r3, #0
 80084aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084ae:	f7ff fe55 	bl	800815c <__multadd>
 80084b2:	4607      	mov	r7, r0
 80084b4:	10ad      	asrs	r5, r5, #2
 80084b6:	d03d      	beq.n	8008534 <__pow5mult+0xa0>
 80084b8:	69f4      	ldr	r4, [r6, #28]
 80084ba:	b97c      	cbnz	r4, 80084dc <__pow5mult+0x48>
 80084bc:	2010      	movs	r0, #16
 80084be:	f7ff fd37 	bl	8007f30 <malloc>
 80084c2:	4602      	mov	r2, r0
 80084c4:	61f0      	str	r0, [r6, #28]
 80084c6:	b928      	cbnz	r0, 80084d4 <__pow5mult+0x40>
 80084c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80084cc:	4b1c      	ldr	r3, [pc, #112]	; (8008540 <__pow5mult+0xac>)
 80084ce:	481d      	ldr	r0, [pc, #116]	; (8008544 <__pow5mult+0xb0>)
 80084d0:	f7fe fe58 	bl	8007184 <__assert_func>
 80084d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084d8:	6004      	str	r4, [r0, #0]
 80084da:	60c4      	str	r4, [r0, #12]
 80084dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80084e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084e4:	b94c      	cbnz	r4, 80084fa <__pow5mult+0x66>
 80084e6:	f240 2171 	movw	r1, #625	; 0x271
 80084ea:	4630      	mov	r0, r6
 80084ec:	f7ff ff14 	bl	8008318 <__i2b>
 80084f0:	2300      	movs	r3, #0
 80084f2:	4604      	mov	r4, r0
 80084f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80084f8:	6003      	str	r3, [r0, #0]
 80084fa:	f04f 0900 	mov.w	r9, #0
 80084fe:	07eb      	lsls	r3, r5, #31
 8008500:	d50a      	bpl.n	8008518 <__pow5mult+0x84>
 8008502:	4639      	mov	r1, r7
 8008504:	4622      	mov	r2, r4
 8008506:	4630      	mov	r0, r6
 8008508:	f7ff ff1c 	bl	8008344 <__multiply>
 800850c:	4680      	mov	r8, r0
 800850e:	4639      	mov	r1, r7
 8008510:	4630      	mov	r0, r6
 8008512:	f7ff fe01 	bl	8008118 <_Bfree>
 8008516:	4647      	mov	r7, r8
 8008518:	106d      	asrs	r5, r5, #1
 800851a:	d00b      	beq.n	8008534 <__pow5mult+0xa0>
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	b938      	cbnz	r0, 8008530 <__pow5mult+0x9c>
 8008520:	4622      	mov	r2, r4
 8008522:	4621      	mov	r1, r4
 8008524:	4630      	mov	r0, r6
 8008526:	f7ff ff0d 	bl	8008344 <__multiply>
 800852a:	6020      	str	r0, [r4, #0]
 800852c:	f8c0 9000 	str.w	r9, [r0]
 8008530:	4604      	mov	r4, r0
 8008532:	e7e4      	b.n	80084fe <__pow5mult+0x6a>
 8008534:	4638      	mov	r0, r7
 8008536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800853a:	bf00      	nop
 800853c:	0800b538 	.word	0x0800b538
 8008540:	0800b2c5 	.word	0x0800b2c5
 8008544:	0800b3e8 	.word	0x0800b3e8

08008548 <__lshift>:
 8008548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800854c:	460c      	mov	r4, r1
 800854e:	4607      	mov	r7, r0
 8008550:	4691      	mov	r9, r2
 8008552:	6923      	ldr	r3, [r4, #16]
 8008554:	6849      	ldr	r1, [r1, #4]
 8008556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800855a:	68a3      	ldr	r3, [r4, #8]
 800855c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008560:	f108 0601 	add.w	r6, r8, #1
 8008564:	42b3      	cmp	r3, r6
 8008566:	db0b      	blt.n	8008580 <__lshift+0x38>
 8008568:	4638      	mov	r0, r7
 800856a:	f7ff fd95 	bl	8008098 <_Balloc>
 800856e:	4605      	mov	r5, r0
 8008570:	b948      	cbnz	r0, 8008586 <__lshift+0x3e>
 8008572:	4602      	mov	r2, r0
 8008574:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008578:	4b27      	ldr	r3, [pc, #156]	; (8008618 <__lshift+0xd0>)
 800857a:	4828      	ldr	r0, [pc, #160]	; (800861c <__lshift+0xd4>)
 800857c:	f7fe fe02 	bl	8007184 <__assert_func>
 8008580:	3101      	adds	r1, #1
 8008582:	005b      	lsls	r3, r3, #1
 8008584:	e7ee      	b.n	8008564 <__lshift+0x1c>
 8008586:	2300      	movs	r3, #0
 8008588:	f100 0114 	add.w	r1, r0, #20
 800858c:	f100 0210 	add.w	r2, r0, #16
 8008590:	4618      	mov	r0, r3
 8008592:	4553      	cmp	r3, sl
 8008594:	db33      	blt.n	80085fe <__lshift+0xb6>
 8008596:	6920      	ldr	r0, [r4, #16]
 8008598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800859c:	f104 0314 	add.w	r3, r4, #20
 80085a0:	f019 091f 	ands.w	r9, r9, #31
 80085a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085ac:	d02b      	beq.n	8008606 <__lshift+0xbe>
 80085ae:	468a      	mov	sl, r1
 80085b0:	2200      	movs	r2, #0
 80085b2:	f1c9 0e20 	rsb	lr, r9, #32
 80085b6:	6818      	ldr	r0, [r3, #0]
 80085b8:	fa00 f009 	lsl.w	r0, r0, r9
 80085bc:	4310      	orrs	r0, r2
 80085be:	f84a 0b04 	str.w	r0, [sl], #4
 80085c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085c6:	459c      	cmp	ip, r3
 80085c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80085cc:	d8f3      	bhi.n	80085b6 <__lshift+0x6e>
 80085ce:	ebac 0304 	sub.w	r3, ip, r4
 80085d2:	3b15      	subs	r3, #21
 80085d4:	f023 0303 	bic.w	r3, r3, #3
 80085d8:	3304      	adds	r3, #4
 80085da:	f104 0015 	add.w	r0, r4, #21
 80085de:	4584      	cmp	ip, r0
 80085e0:	bf38      	it	cc
 80085e2:	2304      	movcc	r3, #4
 80085e4:	50ca      	str	r2, [r1, r3]
 80085e6:	b10a      	cbz	r2, 80085ec <__lshift+0xa4>
 80085e8:	f108 0602 	add.w	r6, r8, #2
 80085ec:	3e01      	subs	r6, #1
 80085ee:	4638      	mov	r0, r7
 80085f0:	4621      	mov	r1, r4
 80085f2:	612e      	str	r6, [r5, #16]
 80085f4:	f7ff fd90 	bl	8008118 <_Bfree>
 80085f8:	4628      	mov	r0, r5
 80085fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008602:	3301      	adds	r3, #1
 8008604:	e7c5      	b.n	8008592 <__lshift+0x4a>
 8008606:	3904      	subs	r1, #4
 8008608:	f853 2b04 	ldr.w	r2, [r3], #4
 800860c:	459c      	cmp	ip, r3
 800860e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008612:	d8f9      	bhi.n	8008608 <__lshift+0xc0>
 8008614:	e7ea      	b.n	80085ec <__lshift+0xa4>
 8008616:	bf00      	nop
 8008618:	0800b3d7 	.word	0x0800b3d7
 800861c:	0800b3e8 	.word	0x0800b3e8

08008620 <__mcmp>:
 8008620:	4603      	mov	r3, r0
 8008622:	690a      	ldr	r2, [r1, #16]
 8008624:	6900      	ldr	r0, [r0, #16]
 8008626:	b530      	push	{r4, r5, lr}
 8008628:	1a80      	subs	r0, r0, r2
 800862a:	d10d      	bne.n	8008648 <__mcmp+0x28>
 800862c:	3314      	adds	r3, #20
 800862e:	3114      	adds	r1, #20
 8008630:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008634:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008638:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800863c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008640:	4295      	cmp	r5, r2
 8008642:	d002      	beq.n	800864a <__mcmp+0x2a>
 8008644:	d304      	bcc.n	8008650 <__mcmp+0x30>
 8008646:	2001      	movs	r0, #1
 8008648:	bd30      	pop	{r4, r5, pc}
 800864a:	42a3      	cmp	r3, r4
 800864c:	d3f4      	bcc.n	8008638 <__mcmp+0x18>
 800864e:	e7fb      	b.n	8008648 <__mcmp+0x28>
 8008650:	f04f 30ff 	mov.w	r0, #4294967295
 8008654:	e7f8      	b.n	8008648 <__mcmp+0x28>
	...

08008658 <__mdiff>:
 8008658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	460d      	mov	r5, r1
 800865e:	4607      	mov	r7, r0
 8008660:	4611      	mov	r1, r2
 8008662:	4628      	mov	r0, r5
 8008664:	4614      	mov	r4, r2
 8008666:	f7ff ffdb 	bl	8008620 <__mcmp>
 800866a:	1e06      	subs	r6, r0, #0
 800866c:	d111      	bne.n	8008692 <__mdiff+0x3a>
 800866e:	4631      	mov	r1, r6
 8008670:	4638      	mov	r0, r7
 8008672:	f7ff fd11 	bl	8008098 <_Balloc>
 8008676:	4602      	mov	r2, r0
 8008678:	b928      	cbnz	r0, 8008686 <__mdiff+0x2e>
 800867a:	f240 2137 	movw	r1, #567	; 0x237
 800867e:	4b3a      	ldr	r3, [pc, #232]	; (8008768 <__mdiff+0x110>)
 8008680:	483a      	ldr	r0, [pc, #232]	; (800876c <__mdiff+0x114>)
 8008682:	f7fe fd7f 	bl	8007184 <__assert_func>
 8008686:	2301      	movs	r3, #1
 8008688:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800868c:	4610      	mov	r0, r2
 800868e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008692:	bfa4      	itt	ge
 8008694:	4623      	movge	r3, r4
 8008696:	462c      	movge	r4, r5
 8008698:	4638      	mov	r0, r7
 800869a:	6861      	ldr	r1, [r4, #4]
 800869c:	bfa6      	itte	ge
 800869e:	461d      	movge	r5, r3
 80086a0:	2600      	movge	r6, #0
 80086a2:	2601      	movlt	r6, #1
 80086a4:	f7ff fcf8 	bl	8008098 <_Balloc>
 80086a8:	4602      	mov	r2, r0
 80086aa:	b918      	cbnz	r0, 80086b4 <__mdiff+0x5c>
 80086ac:	f240 2145 	movw	r1, #581	; 0x245
 80086b0:	4b2d      	ldr	r3, [pc, #180]	; (8008768 <__mdiff+0x110>)
 80086b2:	e7e5      	b.n	8008680 <__mdiff+0x28>
 80086b4:	f102 0814 	add.w	r8, r2, #20
 80086b8:	46c2      	mov	sl, r8
 80086ba:	f04f 0c00 	mov.w	ip, #0
 80086be:	6927      	ldr	r7, [r4, #16]
 80086c0:	60c6      	str	r6, [r0, #12]
 80086c2:	692e      	ldr	r6, [r5, #16]
 80086c4:	f104 0014 	add.w	r0, r4, #20
 80086c8:	f105 0914 	add.w	r9, r5, #20
 80086cc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80086d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086d4:	3410      	adds	r4, #16
 80086d6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80086da:	f859 3b04 	ldr.w	r3, [r9], #4
 80086de:	fa1f f18b 	uxth.w	r1, fp
 80086e2:	4461      	add	r1, ip
 80086e4:	fa1f fc83 	uxth.w	ip, r3
 80086e8:	0c1b      	lsrs	r3, r3, #16
 80086ea:	eba1 010c 	sub.w	r1, r1, ip
 80086ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80086f6:	b289      	uxth	r1, r1
 80086f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80086fc:	454e      	cmp	r6, r9
 80086fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008702:	f84a 1b04 	str.w	r1, [sl], #4
 8008706:	d8e6      	bhi.n	80086d6 <__mdiff+0x7e>
 8008708:	1b73      	subs	r3, r6, r5
 800870a:	3b15      	subs	r3, #21
 800870c:	f023 0303 	bic.w	r3, r3, #3
 8008710:	3515      	adds	r5, #21
 8008712:	3304      	adds	r3, #4
 8008714:	42ae      	cmp	r6, r5
 8008716:	bf38      	it	cc
 8008718:	2304      	movcc	r3, #4
 800871a:	4418      	add	r0, r3
 800871c:	4443      	add	r3, r8
 800871e:	461e      	mov	r6, r3
 8008720:	4605      	mov	r5, r0
 8008722:	4575      	cmp	r5, lr
 8008724:	d30e      	bcc.n	8008744 <__mdiff+0xec>
 8008726:	f10e 0103 	add.w	r1, lr, #3
 800872a:	1a09      	subs	r1, r1, r0
 800872c:	f021 0103 	bic.w	r1, r1, #3
 8008730:	3803      	subs	r0, #3
 8008732:	4586      	cmp	lr, r0
 8008734:	bf38      	it	cc
 8008736:	2100      	movcc	r1, #0
 8008738:	440b      	add	r3, r1
 800873a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800873e:	b189      	cbz	r1, 8008764 <__mdiff+0x10c>
 8008740:	6117      	str	r7, [r2, #16]
 8008742:	e7a3      	b.n	800868c <__mdiff+0x34>
 8008744:	f855 8b04 	ldr.w	r8, [r5], #4
 8008748:	fa1f f188 	uxth.w	r1, r8
 800874c:	4461      	add	r1, ip
 800874e:	140c      	asrs	r4, r1, #16
 8008750:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008754:	b289      	uxth	r1, r1
 8008756:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800875a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800875e:	f846 1b04 	str.w	r1, [r6], #4
 8008762:	e7de      	b.n	8008722 <__mdiff+0xca>
 8008764:	3f01      	subs	r7, #1
 8008766:	e7e8      	b.n	800873a <__mdiff+0xe2>
 8008768:	0800b3d7 	.word	0x0800b3d7
 800876c:	0800b3e8 	.word	0x0800b3e8

08008770 <__ulp>:
 8008770:	4b0e      	ldr	r3, [pc, #56]	; (80087ac <__ulp+0x3c>)
 8008772:	400b      	ands	r3, r1
 8008774:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008778:	2b00      	cmp	r3, #0
 800877a:	dc08      	bgt.n	800878e <__ulp+0x1e>
 800877c:	425b      	negs	r3, r3
 800877e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008782:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008786:	da04      	bge.n	8008792 <__ulp+0x22>
 8008788:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800878c:	4113      	asrs	r3, r2
 800878e:	2200      	movs	r2, #0
 8008790:	e008      	b.n	80087a4 <__ulp+0x34>
 8008792:	f1a2 0314 	sub.w	r3, r2, #20
 8008796:	2b1e      	cmp	r3, #30
 8008798:	bfd6      	itet	le
 800879a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800879e:	2201      	movgt	r2, #1
 80087a0:	40da      	lsrle	r2, r3
 80087a2:	2300      	movs	r3, #0
 80087a4:	4619      	mov	r1, r3
 80087a6:	4610      	mov	r0, r2
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	7ff00000 	.word	0x7ff00000

080087b0 <__b2d>:
 80087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b2:	6905      	ldr	r5, [r0, #16]
 80087b4:	f100 0714 	add.w	r7, r0, #20
 80087b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80087bc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80087c0:	1f2e      	subs	r6, r5, #4
 80087c2:	4620      	mov	r0, r4
 80087c4:	f7ff fd5a 	bl	800827c <__hi0bits>
 80087c8:	f1c0 0220 	rsb	r2, r0, #32
 80087cc:	280a      	cmp	r0, #10
 80087ce:	4603      	mov	r3, r0
 80087d0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800883c <__b2d+0x8c>
 80087d4:	600a      	str	r2, [r1, #0]
 80087d6:	dc12      	bgt.n	80087fe <__b2d+0x4e>
 80087d8:	f1c0 0e0b 	rsb	lr, r0, #11
 80087dc:	fa24 f20e 	lsr.w	r2, r4, lr
 80087e0:	42b7      	cmp	r7, r6
 80087e2:	ea42 010c 	orr.w	r1, r2, ip
 80087e6:	bf2c      	ite	cs
 80087e8:	2200      	movcs	r2, #0
 80087ea:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80087ee:	3315      	adds	r3, #21
 80087f0:	fa04 f303 	lsl.w	r3, r4, r3
 80087f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80087f8:	431a      	orrs	r2, r3
 80087fa:	4610      	mov	r0, r2
 80087fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087fe:	42b7      	cmp	r7, r6
 8008800:	bf2e      	itee	cs
 8008802:	2200      	movcs	r2, #0
 8008804:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008808:	f1a5 0608 	subcc.w	r6, r5, #8
 800880c:	3b0b      	subs	r3, #11
 800880e:	d012      	beq.n	8008836 <__b2d+0x86>
 8008810:	f1c3 0520 	rsb	r5, r3, #32
 8008814:	fa22 f105 	lsr.w	r1, r2, r5
 8008818:	409c      	lsls	r4, r3
 800881a:	430c      	orrs	r4, r1
 800881c:	42be      	cmp	r6, r7
 800881e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8008822:	bf94      	ite	ls
 8008824:	2400      	movls	r4, #0
 8008826:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800882a:	409a      	lsls	r2, r3
 800882c:	40ec      	lsrs	r4, r5
 800882e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008832:	4322      	orrs	r2, r4
 8008834:	e7e1      	b.n	80087fa <__b2d+0x4a>
 8008836:	ea44 010c 	orr.w	r1, r4, ip
 800883a:	e7de      	b.n	80087fa <__b2d+0x4a>
 800883c:	3ff00000 	.word	0x3ff00000

08008840 <__d2b>:
 8008840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008842:	2101      	movs	r1, #1
 8008844:	4617      	mov	r7, r2
 8008846:	461c      	mov	r4, r3
 8008848:	9e08      	ldr	r6, [sp, #32]
 800884a:	f7ff fc25 	bl	8008098 <_Balloc>
 800884e:	4605      	mov	r5, r0
 8008850:	b930      	cbnz	r0, 8008860 <__d2b+0x20>
 8008852:	4602      	mov	r2, r0
 8008854:	f240 310f 	movw	r1, #783	; 0x30f
 8008858:	4b22      	ldr	r3, [pc, #136]	; (80088e4 <__d2b+0xa4>)
 800885a:	4823      	ldr	r0, [pc, #140]	; (80088e8 <__d2b+0xa8>)
 800885c:	f7fe fc92 	bl	8007184 <__assert_func>
 8008860:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008864:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008868:	bb24      	cbnz	r4, 80088b4 <__d2b+0x74>
 800886a:	2f00      	cmp	r7, #0
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	d026      	beq.n	80088be <__d2b+0x7e>
 8008870:	4668      	mov	r0, sp
 8008872:	9700      	str	r7, [sp, #0]
 8008874:	f7ff fd22 	bl	80082bc <__lo0bits>
 8008878:	e9dd 1200 	ldrd	r1, r2, [sp]
 800887c:	b1e8      	cbz	r0, 80088ba <__d2b+0x7a>
 800887e:	f1c0 0320 	rsb	r3, r0, #32
 8008882:	fa02 f303 	lsl.w	r3, r2, r3
 8008886:	430b      	orrs	r3, r1
 8008888:	40c2      	lsrs	r2, r0
 800888a:	616b      	str	r3, [r5, #20]
 800888c:	9201      	str	r2, [sp, #4]
 800888e:	9b01      	ldr	r3, [sp, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	bf14      	ite	ne
 8008894:	2102      	movne	r1, #2
 8008896:	2101      	moveq	r1, #1
 8008898:	61ab      	str	r3, [r5, #24]
 800889a:	6129      	str	r1, [r5, #16]
 800889c:	b1bc      	cbz	r4, 80088ce <__d2b+0x8e>
 800889e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80088a2:	4404      	add	r4, r0
 80088a4:	6034      	str	r4, [r6, #0]
 80088a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ac:	6018      	str	r0, [r3, #0]
 80088ae:	4628      	mov	r0, r5
 80088b0:	b003      	add	sp, #12
 80088b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088b8:	e7d7      	b.n	800886a <__d2b+0x2a>
 80088ba:	6169      	str	r1, [r5, #20]
 80088bc:	e7e7      	b.n	800888e <__d2b+0x4e>
 80088be:	a801      	add	r0, sp, #4
 80088c0:	f7ff fcfc 	bl	80082bc <__lo0bits>
 80088c4:	9b01      	ldr	r3, [sp, #4]
 80088c6:	2101      	movs	r1, #1
 80088c8:	616b      	str	r3, [r5, #20]
 80088ca:	3020      	adds	r0, #32
 80088cc:	e7e5      	b.n	800889a <__d2b+0x5a>
 80088ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088d2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80088d6:	6030      	str	r0, [r6, #0]
 80088d8:	6918      	ldr	r0, [r3, #16]
 80088da:	f7ff fccf 	bl	800827c <__hi0bits>
 80088de:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80088e2:	e7e2      	b.n	80088aa <__d2b+0x6a>
 80088e4:	0800b3d7 	.word	0x0800b3d7
 80088e8:	0800b3e8 	.word	0x0800b3e8

080088ec <__ratio>:
 80088ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f0:	4688      	mov	r8, r1
 80088f2:	4669      	mov	r1, sp
 80088f4:	4681      	mov	r9, r0
 80088f6:	f7ff ff5b 	bl	80087b0 <__b2d>
 80088fa:	460f      	mov	r7, r1
 80088fc:	4604      	mov	r4, r0
 80088fe:	460d      	mov	r5, r1
 8008900:	4640      	mov	r0, r8
 8008902:	a901      	add	r1, sp, #4
 8008904:	f7ff ff54 	bl	80087b0 <__b2d>
 8008908:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800890c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008910:	468b      	mov	fp, r1
 8008912:	eba3 0c02 	sub.w	ip, r3, r2
 8008916:	e9dd 3200 	ldrd	r3, r2, [sp]
 800891a:	1a9b      	subs	r3, r3, r2
 800891c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008920:	2b00      	cmp	r3, #0
 8008922:	bfd5      	itete	le
 8008924:	460a      	movle	r2, r1
 8008926:	462a      	movgt	r2, r5
 8008928:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800892c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008930:	bfd8      	it	le
 8008932:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008936:	465b      	mov	r3, fp
 8008938:	4602      	mov	r2, r0
 800893a:	4639      	mov	r1, r7
 800893c:	4620      	mov	r0, r4
 800893e:	f7f7 feff 	bl	8000740 <__aeabi_ddiv>
 8008942:	b003      	add	sp, #12
 8008944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008948 <__copybits>:
 8008948:	3901      	subs	r1, #1
 800894a:	b570      	push	{r4, r5, r6, lr}
 800894c:	1149      	asrs	r1, r1, #5
 800894e:	6914      	ldr	r4, [r2, #16]
 8008950:	3101      	adds	r1, #1
 8008952:	f102 0314 	add.w	r3, r2, #20
 8008956:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800895a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800895e:	1f05      	subs	r5, r0, #4
 8008960:	42a3      	cmp	r3, r4
 8008962:	d30c      	bcc.n	800897e <__copybits+0x36>
 8008964:	1aa3      	subs	r3, r4, r2
 8008966:	3b11      	subs	r3, #17
 8008968:	f023 0303 	bic.w	r3, r3, #3
 800896c:	3211      	adds	r2, #17
 800896e:	42a2      	cmp	r2, r4
 8008970:	bf88      	it	hi
 8008972:	2300      	movhi	r3, #0
 8008974:	4418      	add	r0, r3
 8008976:	2300      	movs	r3, #0
 8008978:	4288      	cmp	r0, r1
 800897a:	d305      	bcc.n	8008988 <__copybits+0x40>
 800897c:	bd70      	pop	{r4, r5, r6, pc}
 800897e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008982:	f845 6f04 	str.w	r6, [r5, #4]!
 8008986:	e7eb      	b.n	8008960 <__copybits+0x18>
 8008988:	f840 3b04 	str.w	r3, [r0], #4
 800898c:	e7f4      	b.n	8008978 <__copybits+0x30>

0800898e <__any_on>:
 800898e:	f100 0214 	add.w	r2, r0, #20
 8008992:	6900      	ldr	r0, [r0, #16]
 8008994:	114b      	asrs	r3, r1, #5
 8008996:	4298      	cmp	r0, r3
 8008998:	b510      	push	{r4, lr}
 800899a:	db11      	blt.n	80089c0 <__any_on+0x32>
 800899c:	dd0a      	ble.n	80089b4 <__any_on+0x26>
 800899e:	f011 011f 	ands.w	r1, r1, #31
 80089a2:	d007      	beq.n	80089b4 <__any_on+0x26>
 80089a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80089a8:	fa24 f001 	lsr.w	r0, r4, r1
 80089ac:	fa00 f101 	lsl.w	r1, r0, r1
 80089b0:	428c      	cmp	r4, r1
 80089b2:	d10b      	bne.n	80089cc <__any_on+0x3e>
 80089b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d803      	bhi.n	80089c4 <__any_on+0x36>
 80089bc:	2000      	movs	r0, #0
 80089be:	bd10      	pop	{r4, pc}
 80089c0:	4603      	mov	r3, r0
 80089c2:	e7f7      	b.n	80089b4 <__any_on+0x26>
 80089c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089c8:	2900      	cmp	r1, #0
 80089ca:	d0f5      	beq.n	80089b8 <__any_on+0x2a>
 80089cc:	2001      	movs	r0, #1
 80089ce:	e7f6      	b.n	80089be <__any_on+0x30>

080089d0 <sulp>:
 80089d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d4:	460f      	mov	r7, r1
 80089d6:	4690      	mov	r8, r2
 80089d8:	f7ff feca 	bl	8008770 <__ulp>
 80089dc:	4604      	mov	r4, r0
 80089de:	460d      	mov	r5, r1
 80089e0:	f1b8 0f00 	cmp.w	r8, #0
 80089e4:	d011      	beq.n	8008a0a <sulp+0x3a>
 80089e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80089ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	dd0b      	ble.n	8008a0a <sulp+0x3a>
 80089f2:	2400      	movs	r4, #0
 80089f4:	051b      	lsls	r3, r3, #20
 80089f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80089fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80089fe:	4622      	mov	r2, r4
 8008a00:	462b      	mov	r3, r5
 8008a02:	f7f7 fd73 	bl	80004ec <__aeabi_dmul>
 8008a06:	4604      	mov	r4, r0
 8008a08:	460d      	mov	r5, r1
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a12:	0000      	movs	r0, r0
 8008a14:	0000      	movs	r0, r0
	...

08008a18 <_strtod_l>:
 8008a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	b09f      	sub	sp, #124	; 0x7c
 8008a1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a20:	2200      	movs	r2, #0
 8008a22:	4604      	mov	r4, r0
 8008a24:	921a      	str	r2, [sp, #104]	; 0x68
 8008a26:	460d      	mov	r5, r1
 8008a28:	f04f 0800 	mov.w	r8, #0
 8008a2c:	f04f 0900 	mov.w	r9, #0
 8008a30:	460a      	mov	r2, r1
 8008a32:	9219      	str	r2, [sp, #100]	; 0x64
 8008a34:	7811      	ldrb	r1, [r2, #0]
 8008a36:	292b      	cmp	r1, #43	; 0x2b
 8008a38:	d04a      	beq.n	8008ad0 <_strtod_l+0xb8>
 8008a3a:	d838      	bhi.n	8008aae <_strtod_l+0x96>
 8008a3c:	290d      	cmp	r1, #13
 8008a3e:	d832      	bhi.n	8008aa6 <_strtod_l+0x8e>
 8008a40:	2908      	cmp	r1, #8
 8008a42:	d832      	bhi.n	8008aaa <_strtod_l+0x92>
 8008a44:	2900      	cmp	r1, #0
 8008a46:	d03b      	beq.n	8008ac0 <_strtod_l+0xa8>
 8008a48:	2200      	movs	r2, #0
 8008a4a:	920e      	str	r2, [sp, #56]	; 0x38
 8008a4c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008a4e:	7832      	ldrb	r2, [r6, #0]
 8008a50:	2a30      	cmp	r2, #48	; 0x30
 8008a52:	f040 80b2 	bne.w	8008bba <_strtod_l+0x1a2>
 8008a56:	7872      	ldrb	r2, [r6, #1]
 8008a58:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008a5c:	2a58      	cmp	r2, #88	; 0x58
 8008a5e:	d16e      	bne.n	8008b3e <_strtod_l+0x126>
 8008a60:	9302      	str	r3, [sp, #8]
 8008a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a64:	4620      	mov	r0, r4
 8008a66:	9301      	str	r3, [sp, #4]
 8008a68:	ab1a      	add	r3, sp, #104	; 0x68
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	4a8c      	ldr	r2, [pc, #560]	; (8008ca0 <_strtod_l+0x288>)
 8008a6e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008a70:	a919      	add	r1, sp, #100	; 0x64
 8008a72:	f001 fcc3 	bl	800a3fc <__gethex>
 8008a76:	f010 070f 	ands.w	r7, r0, #15
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	d005      	beq.n	8008a8a <_strtod_l+0x72>
 8008a7e:	2f06      	cmp	r7, #6
 8008a80:	d128      	bne.n	8008ad4 <_strtod_l+0xbc>
 8008a82:	2300      	movs	r3, #0
 8008a84:	3601      	adds	r6, #1
 8008a86:	9619      	str	r6, [sp, #100]	; 0x64
 8008a88:	930e      	str	r3, [sp, #56]	; 0x38
 8008a8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f040 85a0 	bne.w	80095d2 <_strtod_l+0xbba>
 8008a92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a94:	b1cb      	cbz	r3, 8008aca <_strtod_l+0xb2>
 8008a96:	4642      	mov	r2, r8
 8008a98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	b01f      	add	sp, #124	; 0x7c
 8008aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa6:	2920      	cmp	r1, #32
 8008aa8:	d1ce      	bne.n	8008a48 <_strtod_l+0x30>
 8008aaa:	3201      	adds	r2, #1
 8008aac:	e7c1      	b.n	8008a32 <_strtod_l+0x1a>
 8008aae:	292d      	cmp	r1, #45	; 0x2d
 8008ab0:	d1ca      	bne.n	8008a48 <_strtod_l+0x30>
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	910e      	str	r1, [sp, #56]	; 0x38
 8008ab6:	1c51      	adds	r1, r2, #1
 8008ab8:	9119      	str	r1, [sp, #100]	; 0x64
 8008aba:	7852      	ldrb	r2, [r2, #1]
 8008abc:	2a00      	cmp	r2, #0
 8008abe:	d1c5      	bne.n	8008a4c <_strtod_l+0x34>
 8008ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ac2:	9519      	str	r5, [sp, #100]	; 0x64
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f040 8582 	bne.w	80095ce <_strtod_l+0xbb6>
 8008aca:	4642      	mov	r2, r8
 8008acc:	464b      	mov	r3, r9
 8008ace:	e7e5      	b.n	8008a9c <_strtod_l+0x84>
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	e7ef      	b.n	8008ab4 <_strtod_l+0x9c>
 8008ad4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ad6:	b13a      	cbz	r2, 8008ae8 <_strtod_l+0xd0>
 8008ad8:	2135      	movs	r1, #53	; 0x35
 8008ada:	a81c      	add	r0, sp, #112	; 0x70
 8008adc:	f7ff ff34 	bl	8008948 <__copybits>
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008ae4:	f7ff fb18 	bl	8008118 <_Bfree>
 8008ae8:	3f01      	subs	r7, #1
 8008aea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008aec:	2f04      	cmp	r7, #4
 8008aee:	d806      	bhi.n	8008afe <_strtod_l+0xe6>
 8008af0:	e8df f007 	tbb	[pc, r7]
 8008af4:	201d0314 	.word	0x201d0314
 8008af8:	14          	.byte	0x14
 8008af9:	00          	.byte	0x00
 8008afa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008afe:	05e9      	lsls	r1, r5, #23
 8008b00:	bf48      	it	mi
 8008b02:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008b06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b0a:	0d1b      	lsrs	r3, r3, #20
 8008b0c:	051b      	lsls	r3, r3, #20
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1bb      	bne.n	8008a8a <_strtod_l+0x72>
 8008b12:	f7fe faf9 	bl	8007108 <__errno>
 8008b16:	2322      	movs	r3, #34	; 0x22
 8008b18:	6003      	str	r3, [r0, #0]
 8008b1a:	e7b6      	b.n	8008a8a <_strtod_l+0x72>
 8008b1c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b20:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008b24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008b2c:	e7e7      	b.n	8008afe <_strtod_l+0xe6>
 8008b2e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008ca4 <_strtod_l+0x28c>
 8008b32:	e7e4      	b.n	8008afe <_strtod_l+0xe6>
 8008b34:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008b38:	f04f 38ff 	mov.w	r8, #4294967295
 8008b3c:	e7df      	b.n	8008afe <_strtod_l+0xe6>
 8008b3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	9219      	str	r2, [sp, #100]	; 0x64
 8008b44:	785b      	ldrb	r3, [r3, #1]
 8008b46:	2b30      	cmp	r3, #48	; 0x30
 8008b48:	d0f9      	beq.n	8008b3e <_strtod_l+0x126>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d09d      	beq.n	8008a8a <_strtod_l+0x72>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	f04f 0a00 	mov.w	sl, #0
 8008b54:	220a      	movs	r2, #10
 8008b56:	46d3      	mov	fp, sl
 8008b58:	9305      	str	r3, [sp, #20]
 8008b5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b5c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b62:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008b64:	7806      	ldrb	r6, [r0, #0]
 8008b66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b6a:	b2d9      	uxtb	r1, r3
 8008b6c:	2909      	cmp	r1, #9
 8008b6e:	d926      	bls.n	8008bbe <_strtod_l+0x1a6>
 8008b70:	2201      	movs	r2, #1
 8008b72:	494d      	ldr	r1, [pc, #308]	; (8008ca8 <_strtod_l+0x290>)
 8008b74:	f001 fb87 	bl	800a286 <strncmp>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d030      	beq.n	8008bde <_strtod_l+0x1c6>
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	4632      	mov	r2, r6
 8008b80:	4603      	mov	r3, r0
 8008b82:	465e      	mov	r6, fp
 8008b84:	9008      	str	r0, [sp, #32]
 8008b86:	2a65      	cmp	r2, #101	; 0x65
 8008b88:	d001      	beq.n	8008b8e <_strtod_l+0x176>
 8008b8a:	2a45      	cmp	r2, #69	; 0x45
 8008b8c:	d113      	bne.n	8008bb6 <_strtod_l+0x19e>
 8008b8e:	b91e      	cbnz	r6, 8008b98 <_strtod_l+0x180>
 8008b90:	9a05      	ldr	r2, [sp, #20]
 8008b92:	4302      	orrs	r2, r0
 8008b94:	d094      	beq.n	8008ac0 <_strtod_l+0xa8>
 8008b96:	2600      	movs	r6, #0
 8008b98:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008b9a:	1c6a      	adds	r2, r5, #1
 8008b9c:	9219      	str	r2, [sp, #100]	; 0x64
 8008b9e:	786a      	ldrb	r2, [r5, #1]
 8008ba0:	2a2b      	cmp	r2, #43	; 0x2b
 8008ba2:	d074      	beq.n	8008c8e <_strtod_l+0x276>
 8008ba4:	2a2d      	cmp	r2, #45	; 0x2d
 8008ba6:	d078      	beq.n	8008c9a <_strtod_l+0x282>
 8008ba8:	f04f 0c00 	mov.w	ip, #0
 8008bac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008bb0:	2909      	cmp	r1, #9
 8008bb2:	d97f      	bls.n	8008cb4 <_strtod_l+0x29c>
 8008bb4:	9519      	str	r5, [sp, #100]	; 0x64
 8008bb6:	2700      	movs	r7, #0
 8008bb8:	e09e      	b.n	8008cf8 <_strtod_l+0x2e0>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e7c8      	b.n	8008b50 <_strtod_l+0x138>
 8008bbe:	f1bb 0f08 	cmp.w	fp, #8
 8008bc2:	bfd8      	it	le
 8008bc4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008bc6:	f100 0001 	add.w	r0, r0, #1
 8008bca:	bfd6      	itet	le
 8008bcc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008bd0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008bd4:	930a      	strle	r3, [sp, #40]	; 0x28
 8008bd6:	f10b 0b01 	add.w	fp, fp, #1
 8008bda:	9019      	str	r0, [sp, #100]	; 0x64
 8008bdc:	e7c1      	b.n	8008b62 <_strtod_l+0x14a>
 8008bde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	9219      	str	r2, [sp, #100]	; 0x64
 8008be4:	785a      	ldrb	r2, [r3, #1]
 8008be6:	f1bb 0f00 	cmp.w	fp, #0
 8008bea:	d037      	beq.n	8008c5c <_strtod_l+0x244>
 8008bec:	465e      	mov	r6, fp
 8008bee:	9008      	str	r0, [sp, #32]
 8008bf0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008bf4:	2b09      	cmp	r3, #9
 8008bf6:	d912      	bls.n	8008c1e <_strtod_l+0x206>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e7c4      	b.n	8008b86 <_strtod_l+0x16e>
 8008bfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bfe:	3001      	adds	r0, #1
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	9219      	str	r2, [sp, #100]	; 0x64
 8008c04:	785a      	ldrb	r2, [r3, #1]
 8008c06:	2a30      	cmp	r2, #48	; 0x30
 8008c08:	d0f8      	beq.n	8008bfc <_strtod_l+0x1e4>
 8008c0a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008c0e:	2b08      	cmp	r3, #8
 8008c10:	f200 84e4 	bhi.w	80095dc <_strtod_l+0xbc4>
 8008c14:	9008      	str	r0, [sp, #32]
 8008c16:	2000      	movs	r0, #0
 8008c18:	4606      	mov	r6, r0
 8008c1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c1e:	3a30      	subs	r2, #48	; 0x30
 8008c20:	f100 0301 	add.w	r3, r0, #1
 8008c24:	d014      	beq.n	8008c50 <_strtod_l+0x238>
 8008c26:	9908      	ldr	r1, [sp, #32]
 8008c28:	eb00 0c06 	add.w	ip, r0, r6
 8008c2c:	4419      	add	r1, r3
 8008c2e:	9108      	str	r1, [sp, #32]
 8008c30:	4633      	mov	r3, r6
 8008c32:	210a      	movs	r1, #10
 8008c34:	4563      	cmp	r3, ip
 8008c36:	d113      	bne.n	8008c60 <_strtod_l+0x248>
 8008c38:	1833      	adds	r3, r6, r0
 8008c3a:	2b08      	cmp	r3, #8
 8008c3c:	f106 0601 	add.w	r6, r6, #1
 8008c40:	4406      	add	r6, r0
 8008c42:	dc1a      	bgt.n	8008c7a <_strtod_l+0x262>
 8008c44:	230a      	movs	r3, #10
 8008c46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c48:	fb03 2301 	mla	r3, r3, r1, r2
 8008c4c:	930a      	str	r3, [sp, #40]	; 0x28
 8008c4e:	2300      	movs	r3, #0
 8008c50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c52:	4618      	mov	r0, r3
 8008c54:	1c51      	adds	r1, r2, #1
 8008c56:	9119      	str	r1, [sp, #100]	; 0x64
 8008c58:	7852      	ldrb	r2, [r2, #1]
 8008c5a:	e7c9      	b.n	8008bf0 <_strtod_l+0x1d8>
 8008c5c:	4658      	mov	r0, fp
 8008c5e:	e7d2      	b.n	8008c06 <_strtod_l+0x1ee>
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	f103 0301 	add.w	r3, r3, #1
 8008c66:	dc03      	bgt.n	8008c70 <_strtod_l+0x258>
 8008c68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008c6a:	434f      	muls	r7, r1
 8008c6c:	970a      	str	r7, [sp, #40]	; 0x28
 8008c6e:	e7e1      	b.n	8008c34 <_strtod_l+0x21c>
 8008c70:	2b10      	cmp	r3, #16
 8008c72:	bfd8      	it	le
 8008c74:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008c78:	e7dc      	b.n	8008c34 <_strtod_l+0x21c>
 8008c7a:	2e10      	cmp	r6, #16
 8008c7c:	bfdc      	itt	le
 8008c7e:	230a      	movle	r3, #10
 8008c80:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008c84:	e7e3      	b.n	8008c4e <_strtod_l+0x236>
 8008c86:	2300      	movs	r3, #0
 8008c88:	9308      	str	r3, [sp, #32]
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e780      	b.n	8008b90 <_strtod_l+0x178>
 8008c8e:	f04f 0c00 	mov.w	ip, #0
 8008c92:	1caa      	adds	r2, r5, #2
 8008c94:	9219      	str	r2, [sp, #100]	; 0x64
 8008c96:	78aa      	ldrb	r2, [r5, #2]
 8008c98:	e788      	b.n	8008bac <_strtod_l+0x194>
 8008c9a:	f04f 0c01 	mov.w	ip, #1
 8008c9e:	e7f8      	b.n	8008c92 <_strtod_l+0x27a>
 8008ca0:	0800b548 	.word	0x0800b548
 8008ca4:	7ff00000 	.word	0x7ff00000
 8008ca8:	0800b544 	.word	0x0800b544
 8008cac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008cae:	1c51      	adds	r1, r2, #1
 8008cb0:	9119      	str	r1, [sp, #100]	; 0x64
 8008cb2:	7852      	ldrb	r2, [r2, #1]
 8008cb4:	2a30      	cmp	r2, #48	; 0x30
 8008cb6:	d0f9      	beq.n	8008cac <_strtod_l+0x294>
 8008cb8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008cbc:	2908      	cmp	r1, #8
 8008cbe:	f63f af7a 	bhi.w	8008bb6 <_strtod_l+0x19e>
 8008cc2:	3a30      	subs	r2, #48	; 0x30
 8008cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8008cc6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008cc8:	920c      	str	r2, [sp, #48]	; 0x30
 8008cca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ccc:	1c57      	adds	r7, r2, #1
 8008cce:	9719      	str	r7, [sp, #100]	; 0x64
 8008cd0:	7852      	ldrb	r2, [r2, #1]
 8008cd2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008cd6:	f1be 0f09 	cmp.w	lr, #9
 8008cda:	d938      	bls.n	8008d4e <_strtod_l+0x336>
 8008cdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cde:	1a7f      	subs	r7, r7, r1
 8008ce0:	2f08      	cmp	r7, #8
 8008ce2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008ce6:	dc03      	bgt.n	8008cf0 <_strtod_l+0x2d8>
 8008ce8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cea:	428f      	cmp	r7, r1
 8008cec:	bfa8      	it	ge
 8008cee:	460f      	movge	r7, r1
 8008cf0:	f1bc 0f00 	cmp.w	ip, #0
 8008cf4:	d000      	beq.n	8008cf8 <_strtod_l+0x2e0>
 8008cf6:	427f      	negs	r7, r7
 8008cf8:	2e00      	cmp	r6, #0
 8008cfa:	d14f      	bne.n	8008d9c <_strtod_l+0x384>
 8008cfc:	9905      	ldr	r1, [sp, #20]
 8008cfe:	4301      	orrs	r1, r0
 8008d00:	f47f aec3 	bne.w	8008a8a <_strtod_l+0x72>
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f47f aedb 	bne.w	8008ac0 <_strtod_l+0xa8>
 8008d0a:	2a69      	cmp	r2, #105	; 0x69
 8008d0c:	d029      	beq.n	8008d62 <_strtod_l+0x34a>
 8008d0e:	dc26      	bgt.n	8008d5e <_strtod_l+0x346>
 8008d10:	2a49      	cmp	r2, #73	; 0x49
 8008d12:	d026      	beq.n	8008d62 <_strtod_l+0x34a>
 8008d14:	2a4e      	cmp	r2, #78	; 0x4e
 8008d16:	f47f aed3 	bne.w	8008ac0 <_strtod_l+0xa8>
 8008d1a:	499a      	ldr	r1, [pc, #616]	; (8008f84 <_strtod_l+0x56c>)
 8008d1c:	a819      	add	r0, sp, #100	; 0x64
 8008d1e:	f001 fdaf 	bl	800a880 <__match>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	f43f aecc 	beq.w	8008ac0 <_strtod_l+0xa8>
 8008d28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2b28      	cmp	r3, #40	; 0x28
 8008d2e:	d12f      	bne.n	8008d90 <_strtod_l+0x378>
 8008d30:	4995      	ldr	r1, [pc, #596]	; (8008f88 <_strtod_l+0x570>)
 8008d32:	aa1c      	add	r2, sp, #112	; 0x70
 8008d34:	a819      	add	r0, sp, #100	; 0x64
 8008d36:	f001 fdb7 	bl	800a8a8 <__hexnan>
 8008d3a:	2805      	cmp	r0, #5
 8008d3c:	d128      	bne.n	8008d90 <_strtod_l+0x378>
 8008d3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d40:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008d44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008d48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008d4c:	e69d      	b.n	8008a8a <_strtod_l+0x72>
 8008d4e:	210a      	movs	r1, #10
 8008d50:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008d52:	fb01 2107 	mla	r1, r1, r7, r2
 8008d56:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d5c:	e7b5      	b.n	8008cca <_strtod_l+0x2b2>
 8008d5e:	2a6e      	cmp	r2, #110	; 0x6e
 8008d60:	e7d9      	b.n	8008d16 <_strtod_l+0x2fe>
 8008d62:	498a      	ldr	r1, [pc, #552]	; (8008f8c <_strtod_l+0x574>)
 8008d64:	a819      	add	r0, sp, #100	; 0x64
 8008d66:	f001 fd8b 	bl	800a880 <__match>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	f43f aea8 	beq.w	8008ac0 <_strtod_l+0xa8>
 8008d70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d72:	4987      	ldr	r1, [pc, #540]	; (8008f90 <_strtod_l+0x578>)
 8008d74:	3b01      	subs	r3, #1
 8008d76:	a819      	add	r0, sp, #100	; 0x64
 8008d78:	9319      	str	r3, [sp, #100]	; 0x64
 8008d7a:	f001 fd81 	bl	800a880 <__match>
 8008d7e:	b910      	cbnz	r0, 8008d86 <_strtod_l+0x36e>
 8008d80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d82:	3301      	adds	r3, #1
 8008d84:	9319      	str	r3, [sp, #100]	; 0x64
 8008d86:	f04f 0800 	mov.w	r8, #0
 8008d8a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008f94 <_strtod_l+0x57c>
 8008d8e:	e67c      	b.n	8008a8a <_strtod_l+0x72>
 8008d90:	4881      	ldr	r0, [pc, #516]	; (8008f98 <_strtod_l+0x580>)
 8008d92:	f001 faa9 	bl	800a2e8 <nan>
 8008d96:	4680      	mov	r8, r0
 8008d98:	4689      	mov	r9, r1
 8008d9a:	e676      	b.n	8008a8a <_strtod_l+0x72>
 8008d9c:	9b08      	ldr	r3, [sp, #32]
 8008d9e:	f1bb 0f00 	cmp.w	fp, #0
 8008da2:	bf08      	it	eq
 8008da4:	46b3      	moveq	fp, r6
 8008da6:	1afb      	subs	r3, r7, r3
 8008da8:	2e10      	cmp	r6, #16
 8008daa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008dac:	4635      	mov	r5, r6
 8008dae:	9309      	str	r3, [sp, #36]	; 0x24
 8008db0:	bfa8      	it	ge
 8008db2:	2510      	movge	r5, #16
 8008db4:	f7f7 fb20 	bl	80003f8 <__aeabi_ui2d>
 8008db8:	2e09      	cmp	r6, #9
 8008dba:	4680      	mov	r8, r0
 8008dbc:	4689      	mov	r9, r1
 8008dbe:	dd13      	ble.n	8008de8 <_strtod_l+0x3d0>
 8008dc0:	4b76      	ldr	r3, [pc, #472]	; (8008f9c <_strtod_l+0x584>)
 8008dc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008dc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008dca:	f7f7 fb8f 	bl	80004ec <__aeabi_dmul>
 8008dce:	4680      	mov	r8, r0
 8008dd0:	4650      	mov	r0, sl
 8008dd2:	4689      	mov	r9, r1
 8008dd4:	f7f7 fb10 	bl	80003f8 <__aeabi_ui2d>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4640      	mov	r0, r8
 8008dde:	4649      	mov	r1, r9
 8008de0:	f7f7 f9ce 	bl	8000180 <__adddf3>
 8008de4:	4680      	mov	r8, r0
 8008de6:	4689      	mov	r9, r1
 8008de8:	2e0f      	cmp	r6, #15
 8008dea:	dc36      	bgt.n	8008e5a <_strtod_l+0x442>
 8008dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f43f ae4b 	beq.w	8008a8a <_strtod_l+0x72>
 8008df4:	dd22      	ble.n	8008e3c <_strtod_l+0x424>
 8008df6:	2b16      	cmp	r3, #22
 8008df8:	dc09      	bgt.n	8008e0e <_strtod_l+0x3f6>
 8008dfa:	4968      	ldr	r1, [pc, #416]	; (8008f9c <_strtod_l+0x584>)
 8008dfc:	4642      	mov	r2, r8
 8008dfe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e02:	464b      	mov	r3, r9
 8008e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e08:	f7f7 fb70 	bl	80004ec <__aeabi_dmul>
 8008e0c:	e7c3      	b.n	8008d96 <_strtod_l+0x37e>
 8008e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e10:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008e14:	4293      	cmp	r3, r2
 8008e16:	db20      	blt.n	8008e5a <_strtod_l+0x442>
 8008e18:	4c60      	ldr	r4, [pc, #384]	; (8008f9c <_strtod_l+0x584>)
 8008e1a:	f1c6 060f 	rsb	r6, r6, #15
 8008e1e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008e22:	4642      	mov	r2, r8
 8008e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e28:	464b      	mov	r3, r9
 8008e2a:	f7f7 fb5f 	bl	80004ec <__aeabi_dmul>
 8008e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e30:	1b9e      	subs	r6, r3, r6
 8008e32:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008e36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e3a:	e7e5      	b.n	8008e08 <_strtod_l+0x3f0>
 8008e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3e:	3316      	adds	r3, #22
 8008e40:	db0b      	blt.n	8008e5a <_strtod_l+0x442>
 8008e42:	9b08      	ldr	r3, [sp, #32]
 8008e44:	4640      	mov	r0, r8
 8008e46:	1bdf      	subs	r7, r3, r7
 8008e48:	4b54      	ldr	r3, [pc, #336]	; (8008f9c <_strtod_l+0x584>)
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e54:	f7f7 fc74 	bl	8000740 <__aeabi_ddiv>
 8008e58:	e79d      	b.n	8008d96 <_strtod_l+0x37e>
 8008e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e5c:	1b75      	subs	r5, r6, r5
 8008e5e:	441d      	add	r5, r3
 8008e60:	2d00      	cmp	r5, #0
 8008e62:	dd70      	ble.n	8008f46 <_strtod_l+0x52e>
 8008e64:	f015 030f 	ands.w	r3, r5, #15
 8008e68:	d00a      	beq.n	8008e80 <_strtod_l+0x468>
 8008e6a:	494c      	ldr	r1, [pc, #304]	; (8008f9c <_strtod_l+0x584>)
 8008e6c:	4642      	mov	r2, r8
 8008e6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e76:	464b      	mov	r3, r9
 8008e78:	f7f7 fb38 	bl	80004ec <__aeabi_dmul>
 8008e7c:	4680      	mov	r8, r0
 8008e7e:	4689      	mov	r9, r1
 8008e80:	f035 050f 	bics.w	r5, r5, #15
 8008e84:	d04d      	beq.n	8008f22 <_strtod_l+0x50a>
 8008e86:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008e8a:	dd22      	ble.n	8008ed2 <_strtod_l+0x4ba>
 8008e8c:	2600      	movs	r6, #0
 8008e8e:	46b3      	mov	fp, r6
 8008e90:	960b      	str	r6, [sp, #44]	; 0x2c
 8008e92:	9608      	str	r6, [sp, #32]
 8008e94:	2322      	movs	r3, #34	; 0x22
 8008e96:	f04f 0800 	mov.w	r8, #0
 8008e9a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008f94 <_strtod_l+0x57c>
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f43f adf1 	beq.w	8008a8a <_strtod_l+0x72>
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008eac:	f7ff f934 	bl	8008118 <_Bfree>
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	9908      	ldr	r1, [sp, #32]
 8008eb4:	f7ff f930 	bl	8008118 <_Bfree>
 8008eb8:	4659      	mov	r1, fp
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f7ff f92c 	bl	8008118 <_Bfree>
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ec4:	f7ff f928 	bl	8008118 <_Bfree>
 8008ec8:	4631      	mov	r1, r6
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f7ff f924 	bl	8008118 <_Bfree>
 8008ed0:	e5db      	b.n	8008a8a <_strtod_l+0x72>
 8008ed2:	4b33      	ldr	r3, [pc, #204]	; (8008fa0 <_strtod_l+0x588>)
 8008ed4:	4640      	mov	r0, r8
 8008ed6:	9305      	str	r3, [sp, #20]
 8008ed8:	2300      	movs	r3, #0
 8008eda:	4649      	mov	r1, r9
 8008edc:	469a      	mov	sl, r3
 8008ede:	112d      	asrs	r5, r5, #4
 8008ee0:	2d01      	cmp	r5, #1
 8008ee2:	dc21      	bgt.n	8008f28 <_strtod_l+0x510>
 8008ee4:	b10b      	cbz	r3, 8008eea <_strtod_l+0x4d2>
 8008ee6:	4680      	mov	r8, r0
 8008ee8:	4689      	mov	r9, r1
 8008eea:	492d      	ldr	r1, [pc, #180]	; (8008fa0 <_strtod_l+0x588>)
 8008eec:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008ef0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008ef4:	4642      	mov	r2, r8
 8008ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008efa:	464b      	mov	r3, r9
 8008efc:	f7f7 faf6 	bl	80004ec <__aeabi_dmul>
 8008f00:	4b24      	ldr	r3, [pc, #144]	; (8008f94 <_strtod_l+0x57c>)
 8008f02:	460a      	mov	r2, r1
 8008f04:	400b      	ands	r3, r1
 8008f06:	4927      	ldr	r1, [pc, #156]	; (8008fa4 <_strtod_l+0x58c>)
 8008f08:	4680      	mov	r8, r0
 8008f0a:	428b      	cmp	r3, r1
 8008f0c:	d8be      	bhi.n	8008e8c <_strtod_l+0x474>
 8008f0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f12:	428b      	cmp	r3, r1
 8008f14:	bf86      	itte	hi
 8008f16:	f04f 38ff 	movhi.w	r8, #4294967295
 8008f1a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008fa8 <_strtod_l+0x590>
 8008f1e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008f22:	2300      	movs	r3, #0
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	e07b      	b.n	8009020 <_strtod_l+0x608>
 8008f28:	07ea      	lsls	r2, r5, #31
 8008f2a:	d505      	bpl.n	8008f38 <_strtod_l+0x520>
 8008f2c:	9b05      	ldr	r3, [sp, #20]
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	f7f7 fadb 	bl	80004ec <__aeabi_dmul>
 8008f36:	2301      	movs	r3, #1
 8008f38:	9a05      	ldr	r2, [sp, #20]
 8008f3a:	f10a 0a01 	add.w	sl, sl, #1
 8008f3e:	3208      	adds	r2, #8
 8008f40:	106d      	asrs	r5, r5, #1
 8008f42:	9205      	str	r2, [sp, #20]
 8008f44:	e7cc      	b.n	8008ee0 <_strtod_l+0x4c8>
 8008f46:	d0ec      	beq.n	8008f22 <_strtod_l+0x50a>
 8008f48:	426d      	negs	r5, r5
 8008f4a:	f015 020f 	ands.w	r2, r5, #15
 8008f4e:	d00a      	beq.n	8008f66 <_strtod_l+0x54e>
 8008f50:	4b12      	ldr	r3, [pc, #72]	; (8008f9c <_strtod_l+0x584>)
 8008f52:	4640      	mov	r0, r8
 8008f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f58:	4649      	mov	r1, r9
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f7f7 fbef 	bl	8000740 <__aeabi_ddiv>
 8008f62:	4680      	mov	r8, r0
 8008f64:	4689      	mov	r9, r1
 8008f66:	112d      	asrs	r5, r5, #4
 8008f68:	d0db      	beq.n	8008f22 <_strtod_l+0x50a>
 8008f6a:	2d1f      	cmp	r5, #31
 8008f6c:	dd1e      	ble.n	8008fac <_strtod_l+0x594>
 8008f6e:	2600      	movs	r6, #0
 8008f70:	46b3      	mov	fp, r6
 8008f72:	960b      	str	r6, [sp, #44]	; 0x2c
 8008f74:	9608      	str	r6, [sp, #32]
 8008f76:	2322      	movs	r3, #34	; 0x22
 8008f78:	f04f 0800 	mov.w	r8, #0
 8008f7c:	f04f 0900 	mov.w	r9, #0
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	e78d      	b.n	8008ea0 <_strtod_l+0x488>
 8008f84:	0800b29b 	.word	0x0800b29b
 8008f88:	0800b55c 	.word	0x0800b55c
 8008f8c:	0800b293 	.word	0x0800b293
 8008f90:	0800b375 	.word	0x0800b375
 8008f94:	7ff00000 	.word	0x7ff00000
 8008f98:	0800b371 	.word	0x0800b371
 8008f9c:	0800b470 	.word	0x0800b470
 8008fa0:	0800b448 	.word	0x0800b448
 8008fa4:	7ca00000 	.word	0x7ca00000
 8008fa8:	7fefffff 	.word	0x7fefffff
 8008fac:	f015 0310 	ands.w	r3, r5, #16
 8008fb0:	bf18      	it	ne
 8008fb2:	236a      	movne	r3, #106	; 0x6a
 8008fb4:	4640      	mov	r0, r8
 8008fb6:	9305      	str	r3, [sp, #20]
 8008fb8:	4649      	mov	r1, r9
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009288 <_strtod_l+0x870>
 8008fc0:	07ea      	lsls	r2, r5, #31
 8008fc2:	d504      	bpl.n	8008fce <_strtod_l+0x5b6>
 8008fc4:	e9da 2300 	ldrd	r2, r3, [sl]
 8008fc8:	f7f7 fa90 	bl	80004ec <__aeabi_dmul>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	106d      	asrs	r5, r5, #1
 8008fd0:	f10a 0a08 	add.w	sl, sl, #8
 8008fd4:	d1f4      	bne.n	8008fc0 <_strtod_l+0x5a8>
 8008fd6:	b10b      	cbz	r3, 8008fdc <_strtod_l+0x5c4>
 8008fd8:	4680      	mov	r8, r0
 8008fda:	4689      	mov	r9, r1
 8008fdc:	9b05      	ldr	r3, [sp, #20]
 8008fde:	b1bb      	cbz	r3, 8009010 <_strtod_l+0x5f8>
 8008fe0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008fe4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	4649      	mov	r1, r9
 8008fec:	dd10      	ble.n	8009010 <_strtod_l+0x5f8>
 8008fee:	2b1f      	cmp	r3, #31
 8008ff0:	f340 8128 	ble.w	8009244 <_strtod_l+0x82c>
 8008ff4:	2b34      	cmp	r3, #52	; 0x34
 8008ff6:	bfd8      	it	le
 8008ff8:	f04f 33ff 	movle.w	r3, #4294967295
 8008ffc:	f04f 0800 	mov.w	r8, #0
 8009000:	bfcf      	iteee	gt
 8009002:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009006:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800900a:	4093      	lslle	r3, r2
 800900c:	ea03 0901 	andle.w	r9, r3, r1
 8009010:	2200      	movs	r2, #0
 8009012:	2300      	movs	r3, #0
 8009014:	4640      	mov	r0, r8
 8009016:	4649      	mov	r1, r9
 8009018:	f7f7 fcd0 	bl	80009bc <__aeabi_dcmpeq>
 800901c:	2800      	cmp	r0, #0
 800901e:	d1a6      	bne.n	8008f6e <_strtod_l+0x556>
 8009020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009022:	465a      	mov	r2, fp
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	4620      	mov	r0, r4
 8009028:	4633      	mov	r3, r6
 800902a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800902c:	f7ff f8dc 	bl	80081e8 <__s2b>
 8009030:	900b      	str	r0, [sp, #44]	; 0x2c
 8009032:	2800      	cmp	r0, #0
 8009034:	f43f af2a 	beq.w	8008e8c <_strtod_l+0x474>
 8009038:	2600      	movs	r6, #0
 800903a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800903c:	9b08      	ldr	r3, [sp, #32]
 800903e:	2a00      	cmp	r2, #0
 8009040:	eba3 0307 	sub.w	r3, r3, r7
 8009044:	bfa8      	it	ge
 8009046:	2300      	movge	r3, #0
 8009048:	46b3      	mov	fp, r6
 800904a:	9312      	str	r3, [sp, #72]	; 0x48
 800904c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009050:	9316      	str	r3, [sp, #88]	; 0x58
 8009052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009054:	4620      	mov	r0, r4
 8009056:	6859      	ldr	r1, [r3, #4]
 8009058:	f7ff f81e 	bl	8008098 <_Balloc>
 800905c:	9008      	str	r0, [sp, #32]
 800905e:	2800      	cmp	r0, #0
 8009060:	f43f af18 	beq.w	8008e94 <_strtod_l+0x47c>
 8009064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009066:	300c      	adds	r0, #12
 8009068:	691a      	ldr	r2, [r3, #16]
 800906a:	f103 010c 	add.w	r1, r3, #12
 800906e:	3202      	adds	r2, #2
 8009070:	0092      	lsls	r2, r2, #2
 8009072:	f001 f92b 	bl	800a2cc <memcpy>
 8009076:	ab1c      	add	r3, sp, #112	; 0x70
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	ab1b      	add	r3, sp, #108	; 0x6c
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	4642      	mov	r2, r8
 8009080:	464b      	mov	r3, r9
 8009082:	4620      	mov	r0, r4
 8009084:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009088:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800908c:	f7ff fbd8 	bl	8008840 <__d2b>
 8009090:	901a      	str	r0, [sp, #104]	; 0x68
 8009092:	2800      	cmp	r0, #0
 8009094:	f43f aefe 	beq.w	8008e94 <_strtod_l+0x47c>
 8009098:	2101      	movs	r1, #1
 800909a:	4620      	mov	r0, r4
 800909c:	f7ff f93c 	bl	8008318 <__i2b>
 80090a0:	4683      	mov	fp, r0
 80090a2:	2800      	cmp	r0, #0
 80090a4:	f43f aef6 	beq.w	8008e94 <_strtod_l+0x47c>
 80090a8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80090aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80090ac:	2f00      	cmp	r7, #0
 80090ae:	bfab      	itete	ge
 80090b0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80090b2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80090b4:	eb07 0a03 	addge.w	sl, r7, r3
 80090b8:	1bdd      	sublt	r5, r3, r7
 80090ba:	9b05      	ldr	r3, [sp, #20]
 80090bc:	bfa8      	it	ge
 80090be:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80090c0:	eba7 0703 	sub.w	r7, r7, r3
 80090c4:	4417      	add	r7, r2
 80090c6:	4b71      	ldr	r3, [pc, #452]	; (800928c <_strtod_l+0x874>)
 80090c8:	f107 37ff 	add.w	r7, r7, #4294967295
 80090cc:	bfb8      	it	lt
 80090ce:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80090d2:	429f      	cmp	r7, r3
 80090d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090d8:	f280 80c7 	bge.w	800926a <_strtod_l+0x852>
 80090dc:	1bdb      	subs	r3, r3, r7
 80090de:	2b1f      	cmp	r3, #31
 80090e0:	f04f 0101 	mov.w	r1, #1
 80090e4:	eba2 0203 	sub.w	r2, r2, r3
 80090e8:	f300 80b3 	bgt.w	8009252 <_strtod_l+0x83a>
 80090ec:	fa01 f303 	lsl.w	r3, r1, r3
 80090f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80090f2:	2300      	movs	r3, #0
 80090f4:	9310      	str	r3, [sp, #64]	; 0x40
 80090f6:	eb0a 0702 	add.w	r7, sl, r2
 80090fa:	9b05      	ldr	r3, [sp, #20]
 80090fc:	45ba      	cmp	sl, r7
 80090fe:	4415      	add	r5, r2
 8009100:	441d      	add	r5, r3
 8009102:	4653      	mov	r3, sl
 8009104:	bfa8      	it	ge
 8009106:	463b      	movge	r3, r7
 8009108:	42ab      	cmp	r3, r5
 800910a:	bfa8      	it	ge
 800910c:	462b      	movge	r3, r5
 800910e:	2b00      	cmp	r3, #0
 8009110:	bfc2      	ittt	gt
 8009112:	1aff      	subgt	r7, r7, r3
 8009114:	1aed      	subgt	r5, r5, r3
 8009116:	ebaa 0a03 	subgt.w	sl, sl, r3
 800911a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800911c:	2b00      	cmp	r3, #0
 800911e:	dd17      	ble.n	8009150 <_strtod_l+0x738>
 8009120:	4659      	mov	r1, fp
 8009122:	461a      	mov	r2, r3
 8009124:	4620      	mov	r0, r4
 8009126:	f7ff f9b5 	bl	8008494 <__pow5mult>
 800912a:	4683      	mov	fp, r0
 800912c:	2800      	cmp	r0, #0
 800912e:	f43f aeb1 	beq.w	8008e94 <_strtod_l+0x47c>
 8009132:	4601      	mov	r1, r0
 8009134:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009136:	4620      	mov	r0, r4
 8009138:	f7ff f904 	bl	8008344 <__multiply>
 800913c:	900a      	str	r0, [sp, #40]	; 0x28
 800913e:	2800      	cmp	r0, #0
 8009140:	f43f aea8 	beq.w	8008e94 <_strtod_l+0x47c>
 8009144:	4620      	mov	r0, r4
 8009146:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009148:	f7fe ffe6 	bl	8008118 <_Bfree>
 800914c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800914e:	931a      	str	r3, [sp, #104]	; 0x68
 8009150:	2f00      	cmp	r7, #0
 8009152:	f300 808f 	bgt.w	8009274 <_strtod_l+0x85c>
 8009156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009158:	2b00      	cmp	r3, #0
 800915a:	dd08      	ble.n	800916e <_strtod_l+0x756>
 800915c:	4620      	mov	r0, r4
 800915e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009160:	9908      	ldr	r1, [sp, #32]
 8009162:	f7ff f997 	bl	8008494 <__pow5mult>
 8009166:	9008      	str	r0, [sp, #32]
 8009168:	2800      	cmp	r0, #0
 800916a:	f43f ae93 	beq.w	8008e94 <_strtod_l+0x47c>
 800916e:	2d00      	cmp	r5, #0
 8009170:	dd08      	ble.n	8009184 <_strtod_l+0x76c>
 8009172:	462a      	mov	r2, r5
 8009174:	4620      	mov	r0, r4
 8009176:	9908      	ldr	r1, [sp, #32]
 8009178:	f7ff f9e6 	bl	8008548 <__lshift>
 800917c:	9008      	str	r0, [sp, #32]
 800917e:	2800      	cmp	r0, #0
 8009180:	f43f ae88 	beq.w	8008e94 <_strtod_l+0x47c>
 8009184:	f1ba 0f00 	cmp.w	sl, #0
 8009188:	dd08      	ble.n	800919c <_strtod_l+0x784>
 800918a:	4659      	mov	r1, fp
 800918c:	4652      	mov	r2, sl
 800918e:	4620      	mov	r0, r4
 8009190:	f7ff f9da 	bl	8008548 <__lshift>
 8009194:	4683      	mov	fp, r0
 8009196:	2800      	cmp	r0, #0
 8009198:	f43f ae7c 	beq.w	8008e94 <_strtod_l+0x47c>
 800919c:	4620      	mov	r0, r4
 800919e:	9a08      	ldr	r2, [sp, #32]
 80091a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80091a2:	f7ff fa59 	bl	8008658 <__mdiff>
 80091a6:	4606      	mov	r6, r0
 80091a8:	2800      	cmp	r0, #0
 80091aa:	f43f ae73 	beq.w	8008e94 <_strtod_l+0x47c>
 80091ae:	2500      	movs	r5, #0
 80091b0:	68c3      	ldr	r3, [r0, #12]
 80091b2:	4659      	mov	r1, fp
 80091b4:	60c5      	str	r5, [r0, #12]
 80091b6:	930a      	str	r3, [sp, #40]	; 0x28
 80091b8:	f7ff fa32 	bl	8008620 <__mcmp>
 80091bc:	42a8      	cmp	r0, r5
 80091be:	da6b      	bge.n	8009298 <_strtod_l+0x880>
 80091c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c2:	ea53 0308 	orrs.w	r3, r3, r8
 80091c6:	f040 808f 	bne.w	80092e8 <_strtod_l+0x8d0>
 80091ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f040 808a 	bne.w	80092e8 <_strtod_l+0x8d0>
 80091d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091d8:	0d1b      	lsrs	r3, r3, #20
 80091da:	051b      	lsls	r3, r3, #20
 80091dc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80091e0:	f240 8082 	bls.w	80092e8 <_strtod_l+0x8d0>
 80091e4:	6973      	ldr	r3, [r6, #20]
 80091e6:	b913      	cbnz	r3, 80091ee <_strtod_l+0x7d6>
 80091e8:	6933      	ldr	r3, [r6, #16]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	dd7c      	ble.n	80092e8 <_strtod_l+0x8d0>
 80091ee:	4631      	mov	r1, r6
 80091f0:	2201      	movs	r2, #1
 80091f2:	4620      	mov	r0, r4
 80091f4:	f7ff f9a8 	bl	8008548 <__lshift>
 80091f8:	4659      	mov	r1, fp
 80091fa:	4606      	mov	r6, r0
 80091fc:	f7ff fa10 	bl	8008620 <__mcmp>
 8009200:	2800      	cmp	r0, #0
 8009202:	dd71      	ble.n	80092e8 <_strtod_l+0x8d0>
 8009204:	9905      	ldr	r1, [sp, #20]
 8009206:	464b      	mov	r3, r9
 8009208:	4a21      	ldr	r2, [pc, #132]	; (8009290 <_strtod_l+0x878>)
 800920a:	2900      	cmp	r1, #0
 800920c:	f000 808d 	beq.w	800932a <_strtod_l+0x912>
 8009210:	ea02 0109 	and.w	r1, r2, r9
 8009214:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009218:	f300 8087 	bgt.w	800932a <_strtod_l+0x912>
 800921c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009220:	f77f aea9 	ble.w	8008f76 <_strtod_l+0x55e>
 8009224:	4640      	mov	r0, r8
 8009226:	4649      	mov	r1, r9
 8009228:	4b1a      	ldr	r3, [pc, #104]	; (8009294 <_strtod_l+0x87c>)
 800922a:	2200      	movs	r2, #0
 800922c:	f7f7 f95e 	bl	80004ec <__aeabi_dmul>
 8009230:	4b17      	ldr	r3, [pc, #92]	; (8009290 <_strtod_l+0x878>)
 8009232:	4680      	mov	r8, r0
 8009234:	400b      	ands	r3, r1
 8009236:	4689      	mov	r9, r1
 8009238:	2b00      	cmp	r3, #0
 800923a:	f47f ae35 	bne.w	8008ea8 <_strtod_l+0x490>
 800923e:	2322      	movs	r3, #34	; 0x22
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	e631      	b.n	8008ea8 <_strtod_l+0x490>
 8009244:	f04f 32ff 	mov.w	r2, #4294967295
 8009248:	fa02 f303 	lsl.w	r3, r2, r3
 800924c:	ea03 0808 	and.w	r8, r3, r8
 8009250:	e6de      	b.n	8009010 <_strtod_l+0x5f8>
 8009252:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8009256:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800925a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800925e:	37e2      	adds	r7, #226	; 0xe2
 8009260:	fa01 f307 	lsl.w	r3, r1, r7
 8009264:	9310      	str	r3, [sp, #64]	; 0x40
 8009266:	9113      	str	r1, [sp, #76]	; 0x4c
 8009268:	e745      	b.n	80090f6 <_strtod_l+0x6de>
 800926a:	2300      	movs	r3, #0
 800926c:	9310      	str	r3, [sp, #64]	; 0x40
 800926e:	2301      	movs	r3, #1
 8009270:	9313      	str	r3, [sp, #76]	; 0x4c
 8009272:	e740      	b.n	80090f6 <_strtod_l+0x6de>
 8009274:	463a      	mov	r2, r7
 8009276:	4620      	mov	r0, r4
 8009278:	991a      	ldr	r1, [sp, #104]	; 0x68
 800927a:	f7ff f965 	bl	8008548 <__lshift>
 800927e:	901a      	str	r0, [sp, #104]	; 0x68
 8009280:	2800      	cmp	r0, #0
 8009282:	f47f af68 	bne.w	8009156 <_strtod_l+0x73e>
 8009286:	e605      	b.n	8008e94 <_strtod_l+0x47c>
 8009288:	0800b570 	.word	0x0800b570
 800928c:	fffffc02 	.word	0xfffffc02
 8009290:	7ff00000 	.word	0x7ff00000
 8009294:	39500000 	.word	0x39500000
 8009298:	46ca      	mov	sl, r9
 800929a:	d165      	bne.n	8009368 <_strtod_l+0x950>
 800929c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800929e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092a2:	b352      	cbz	r2, 80092fa <_strtod_l+0x8e2>
 80092a4:	4a9e      	ldr	r2, [pc, #632]	; (8009520 <_strtod_l+0xb08>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d12a      	bne.n	8009300 <_strtod_l+0x8e8>
 80092aa:	9b05      	ldr	r3, [sp, #20]
 80092ac:	4641      	mov	r1, r8
 80092ae:	b1fb      	cbz	r3, 80092f0 <_strtod_l+0x8d8>
 80092b0:	4b9c      	ldr	r3, [pc, #624]	; (8009524 <_strtod_l+0xb0c>)
 80092b2:	f04f 32ff 	mov.w	r2, #4294967295
 80092b6:	ea09 0303 	and.w	r3, r9, r3
 80092ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80092be:	d81a      	bhi.n	80092f6 <_strtod_l+0x8de>
 80092c0:	0d1b      	lsrs	r3, r3, #20
 80092c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092c6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ca:	4299      	cmp	r1, r3
 80092cc:	d118      	bne.n	8009300 <_strtod_l+0x8e8>
 80092ce:	4b96      	ldr	r3, [pc, #600]	; (8009528 <_strtod_l+0xb10>)
 80092d0:	459a      	cmp	sl, r3
 80092d2:	d102      	bne.n	80092da <_strtod_l+0x8c2>
 80092d4:	3101      	adds	r1, #1
 80092d6:	f43f addd 	beq.w	8008e94 <_strtod_l+0x47c>
 80092da:	f04f 0800 	mov.w	r8, #0
 80092de:	4b91      	ldr	r3, [pc, #580]	; (8009524 <_strtod_l+0xb0c>)
 80092e0:	ea0a 0303 	and.w	r3, sl, r3
 80092e4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80092e8:	9b05      	ldr	r3, [sp, #20]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d19a      	bne.n	8009224 <_strtod_l+0x80c>
 80092ee:	e5db      	b.n	8008ea8 <_strtod_l+0x490>
 80092f0:	f04f 33ff 	mov.w	r3, #4294967295
 80092f4:	e7e9      	b.n	80092ca <_strtod_l+0x8b2>
 80092f6:	4613      	mov	r3, r2
 80092f8:	e7e7      	b.n	80092ca <_strtod_l+0x8b2>
 80092fa:	ea53 0308 	orrs.w	r3, r3, r8
 80092fe:	d081      	beq.n	8009204 <_strtod_l+0x7ec>
 8009300:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009302:	b1e3      	cbz	r3, 800933e <_strtod_l+0x926>
 8009304:	ea13 0f0a 	tst.w	r3, sl
 8009308:	d0ee      	beq.n	80092e8 <_strtod_l+0x8d0>
 800930a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800930c:	4640      	mov	r0, r8
 800930e:	4649      	mov	r1, r9
 8009310:	9a05      	ldr	r2, [sp, #20]
 8009312:	b1c3      	cbz	r3, 8009346 <_strtod_l+0x92e>
 8009314:	f7ff fb5c 	bl	80089d0 <sulp>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800931e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009320:	f7f6 ff2e 	bl	8000180 <__adddf3>
 8009324:	4680      	mov	r8, r0
 8009326:	4689      	mov	r9, r1
 8009328:	e7de      	b.n	80092e8 <_strtod_l+0x8d0>
 800932a:	4013      	ands	r3, r2
 800932c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009330:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009334:	f04f 38ff 	mov.w	r8, #4294967295
 8009338:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800933c:	e7d4      	b.n	80092e8 <_strtod_l+0x8d0>
 800933e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009340:	ea13 0f08 	tst.w	r3, r8
 8009344:	e7e0      	b.n	8009308 <_strtod_l+0x8f0>
 8009346:	f7ff fb43 	bl	80089d0 <sulp>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009350:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009352:	f7f6 ff13 	bl	800017c <__aeabi_dsub>
 8009356:	2200      	movs	r2, #0
 8009358:	2300      	movs	r3, #0
 800935a:	4680      	mov	r8, r0
 800935c:	4689      	mov	r9, r1
 800935e:	f7f7 fb2d 	bl	80009bc <__aeabi_dcmpeq>
 8009362:	2800      	cmp	r0, #0
 8009364:	d0c0      	beq.n	80092e8 <_strtod_l+0x8d0>
 8009366:	e606      	b.n	8008f76 <_strtod_l+0x55e>
 8009368:	4659      	mov	r1, fp
 800936a:	4630      	mov	r0, r6
 800936c:	f7ff fabe 	bl	80088ec <__ratio>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009378:	2200      	movs	r2, #0
 800937a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800937e:	f7f7 fb31 	bl	80009e4 <__aeabi_dcmple>
 8009382:	2800      	cmp	r0, #0
 8009384:	d06f      	beq.n	8009466 <_strtod_l+0xa4e>
 8009386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009388:	2b00      	cmp	r3, #0
 800938a:	d17c      	bne.n	8009486 <_strtod_l+0xa6e>
 800938c:	f1b8 0f00 	cmp.w	r8, #0
 8009390:	d159      	bne.n	8009446 <_strtod_l+0xa2e>
 8009392:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009396:	2b00      	cmp	r3, #0
 8009398:	d17b      	bne.n	8009492 <_strtod_l+0xa7a>
 800939a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800939e:	2200      	movs	r2, #0
 80093a0:	4b62      	ldr	r3, [pc, #392]	; (800952c <_strtod_l+0xb14>)
 80093a2:	f7f7 fb15 	bl	80009d0 <__aeabi_dcmplt>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d15a      	bne.n	8009460 <_strtod_l+0xa48>
 80093aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80093ae:	2200      	movs	r2, #0
 80093b0:	4b5f      	ldr	r3, [pc, #380]	; (8009530 <_strtod_l+0xb18>)
 80093b2:	f7f7 f89b 	bl	80004ec <__aeabi_dmul>
 80093b6:	4605      	mov	r5, r0
 80093b8:	460f      	mov	r7, r1
 80093ba:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80093be:	9506      	str	r5, [sp, #24]
 80093c0:	9307      	str	r3, [sp, #28]
 80093c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80093ca:	4b56      	ldr	r3, [pc, #344]	; (8009524 <_strtod_l+0xb0c>)
 80093cc:	4a55      	ldr	r2, [pc, #340]	; (8009524 <_strtod_l+0xb0c>)
 80093ce:	ea0a 0303 	and.w	r3, sl, r3
 80093d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80093d4:	4b57      	ldr	r3, [pc, #348]	; (8009534 <_strtod_l+0xb1c>)
 80093d6:	ea0a 0202 	and.w	r2, sl, r2
 80093da:	429a      	cmp	r2, r3
 80093dc:	f040 80b0 	bne.w	8009540 <_strtod_l+0xb28>
 80093e0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80093e4:	4640      	mov	r0, r8
 80093e6:	4649      	mov	r1, r9
 80093e8:	f7ff f9c2 	bl	8008770 <__ulp>
 80093ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093f0:	f7f7 f87c 	bl	80004ec <__aeabi_dmul>
 80093f4:	4642      	mov	r2, r8
 80093f6:	464b      	mov	r3, r9
 80093f8:	f7f6 fec2 	bl	8000180 <__adddf3>
 80093fc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8009524 <_strtod_l+0xb0c>
 8009400:	4a4d      	ldr	r2, [pc, #308]	; (8009538 <_strtod_l+0xb20>)
 8009402:	ea01 0a0a 	and.w	sl, r1, sl
 8009406:	4592      	cmp	sl, r2
 8009408:	4680      	mov	r8, r0
 800940a:	d948      	bls.n	800949e <_strtod_l+0xa86>
 800940c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800940e:	4b46      	ldr	r3, [pc, #280]	; (8009528 <_strtod_l+0xb10>)
 8009410:	429a      	cmp	r2, r3
 8009412:	d103      	bne.n	800941c <_strtod_l+0xa04>
 8009414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009416:	3301      	adds	r3, #1
 8009418:	f43f ad3c 	beq.w	8008e94 <_strtod_l+0x47c>
 800941c:	f04f 38ff 	mov.w	r8, #4294967295
 8009420:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009528 <_strtod_l+0xb10>
 8009424:	4620      	mov	r0, r4
 8009426:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009428:	f7fe fe76 	bl	8008118 <_Bfree>
 800942c:	4620      	mov	r0, r4
 800942e:	9908      	ldr	r1, [sp, #32]
 8009430:	f7fe fe72 	bl	8008118 <_Bfree>
 8009434:	4659      	mov	r1, fp
 8009436:	4620      	mov	r0, r4
 8009438:	f7fe fe6e 	bl	8008118 <_Bfree>
 800943c:	4631      	mov	r1, r6
 800943e:	4620      	mov	r0, r4
 8009440:	f7fe fe6a 	bl	8008118 <_Bfree>
 8009444:	e605      	b.n	8009052 <_strtod_l+0x63a>
 8009446:	f1b8 0f01 	cmp.w	r8, #1
 800944a:	d103      	bne.n	8009454 <_strtod_l+0xa3c>
 800944c:	f1b9 0f00 	cmp.w	r9, #0
 8009450:	f43f ad91 	beq.w	8008f76 <_strtod_l+0x55e>
 8009454:	2200      	movs	r2, #0
 8009456:	4b39      	ldr	r3, [pc, #228]	; (800953c <_strtod_l+0xb24>)
 8009458:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800945a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800945e:	e016      	b.n	800948e <_strtod_l+0xa76>
 8009460:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009462:	4f33      	ldr	r7, [pc, #204]	; (8009530 <_strtod_l+0xb18>)
 8009464:	e7a9      	b.n	80093ba <_strtod_l+0x9a2>
 8009466:	4b32      	ldr	r3, [pc, #200]	; (8009530 <_strtod_l+0xb18>)
 8009468:	2200      	movs	r2, #0
 800946a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800946e:	f7f7 f83d 	bl	80004ec <__aeabi_dmul>
 8009472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009474:	4605      	mov	r5, r0
 8009476:	460f      	mov	r7, r1
 8009478:	2b00      	cmp	r3, #0
 800947a:	d09e      	beq.n	80093ba <_strtod_l+0x9a2>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009484:	e79d      	b.n	80093c2 <_strtod_l+0x9aa>
 8009486:	2200      	movs	r2, #0
 8009488:	4b28      	ldr	r3, [pc, #160]	; (800952c <_strtod_l+0xb14>)
 800948a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800948e:	4f27      	ldr	r7, [pc, #156]	; (800952c <_strtod_l+0xb14>)
 8009490:	e797      	b.n	80093c2 <_strtod_l+0x9aa>
 8009492:	2200      	movs	r2, #0
 8009494:	4b29      	ldr	r3, [pc, #164]	; (800953c <_strtod_l+0xb24>)
 8009496:	4645      	mov	r5, r8
 8009498:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800949c:	e7f7      	b.n	800948e <_strtod_l+0xa76>
 800949e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80094a2:	9b05      	ldr	r3, [sp, #20]
 80094a4:	46ca      	mov	sl, r9
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1bc      	bne.n	8009424 <_strtod_l+0xa0c>
 80094aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094b0:	0d1b      	lsrs	r3, r3, #20
 80094b2:	051b      	lsls	r3, r3, #20
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d1b5      	bne.n	8009424 <_strtod_l+0xa0c>
 80094b8:	4628      	mov	r0, r5
 80094ba:	4639      	mov	r1, r7
 80094bc:	f7f7 fb5e 	bl	8000b7c <__aeabi_d2lz>
 80094c0:	f7f6 ffe6 	bl	8000490 <__aeabi_l2d>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4628      	mov	r0, r5
 80094ca:	4639      	mov	r1, r7
 80094cc:	f7f6 fe56 	bl	800017c <__aeabi_dsub>
 80094d0:	460b      	mov	r3, r1
 80094d2:	4602      	mov	r2, r0
 80094d4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80094d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80094dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094de:	ea4a 0a08 	orr.w	sl, sl, r8
 80094e2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80094e6:	d06c      	beq.n	80095c2 <_strtod_l+0xbaa>
 80094e8:	a309      	add	r3, pc, #36	; (adr r3, 8009510 <_strtod_l+0xaf8>)
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	f7f7 fa6f 	bl	80009d0 <__aeabi_dcmplt>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	f47f acd8 	bne.w	8008ea8 <_strtod_l+0x490>
 80094f8:	a307      	add	r3, pc, #28	; (adr r3, 8009518 <_strtod_l+0xb00>)
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009502:	f7f7 fa83 	bl	8000a0c <__aeabi_dcmpgt>
 8009506:	2800      	cmp	r0, #0
 8009508:	d08c      	beq.n	8009424 <_strtod_l+0xa0c>
 800950a:	e4cd      	b.n	8008ea8 <_strtod_l+0x490>
 800950c:	f3af 8000 	nop.w
 8009510:	94a03595 	.word	0x94a03595
 8009514:	3fdfffff 	.word	0x3fdfffff
 8009518:	35afe535 	.word	0x35afe535
 800951c:	3fe00000 	.word	0x3fe00000
 8009520:	000fffff 	.word	0x000fffff
 8009524:	7ff00000 	.word	0x7ff00000
 8009528:	7fefffff 	.word	0x7fefffff
 800952c:	3ff00000 	.word	0x3ff00000
 8009530:	3fe00000 	.word	0x3fe00000
 8009534:	7fe00000 	.word	0x7fe00000
 8009538:	7c9fffff 	.word	0x7c9fffff
 800953c:	bff00000 	.word	0xbff00000
 8009540:	9b05      	ldr	r3, [sp, #20]
 8009542:	b333      	cbz	r3, 8009592 <_strtod_l+0xb7a>
 8009544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009546:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800954a:	d822      	bhi.n	8009592 <_strtod_l+0xb7a>
 800954c:	a328      	add	r3, pc, #160	; (adr r3, 80095f0 <_strtod_l+0xbd8>)
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	4628      	mov	r0, r5
 8009554:	4639      	mov	r1, r7
 8009556:	f7f7 fa45 	bl	80009e4 <__aeabi_dcmple>
 800955a:	b1a0      	cbz	r0, 8009586 <_strtod_l+0xb6e>
 800955c:	4639      	mov	r1, r7
 800955e:	4628      	mov	r0, r5
 8009560:	f7f7 fa9c 	bl	8000a9c <__aeabi_d2uiz>
 8009564:	2801      	cmp	r0, #1
 8009566:	bf38      	it	cc
 8009568:	2001      	movcc	r0, #1
 800956a:	f7f6 ff45 	bl	80003f8 <__aeabi_ui2d>
 800956e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009570:	4605      	mov	r5, r0
 8009572:	460f      	mov	r7, r1
 8009574:	bb03      	cbnz	r3, 80095b8 <_strtod_l+0xba0>
 8009576:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800957a:	9014      	str	r0, [sp, #80]	; 0x50
 800957c:	9315      	str	r3, [sp, #84]	; 0x54
 800957e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009582:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009588:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800958a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800958e:	1a9b      	subs	r3, r3, r2
 8009590:	9311      	str	r3, [sp, #68]	; 0x44
 8009592:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009594:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009596:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800959a:	f7ff f8e9 	bl	8008770 <__ulp>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4640      	mov	r0, r8
 80095a4:	4649      	mov	r1, r9
 80095a6:	f7f6 ffa1 	bl	80004ec <__aeabi_dmul>
 80095aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095ae:	f7f6 fde7 	bl	8000180 <__adddf3>
 80095b2:	4680      	mov	r8, r0
 80095b4:	4689      	mov	r9, r1
 80095b6:	e774      	b.n	80094a2 <_strtod_l+0xa8a>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80095c0:	e7dd      	b.n	800957e <_strtod_l+0xb66>
 80095c2:	a30d      	add	r3, pc, #52	; (adr r3, 80095f8 <_strtod_l+0xbe0>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	f7f7 fa02 	bl	80009d0 <__aeabi_dcmplt>
 80095cc:	e79b      	b.n	8009506 <_strtod_l+0xaee>
 80095ce:	2300      	movs	r3, #0
 80095d0:	930e      	str	r3, [sp, #56]	; 0x38
 80095d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	f7ff ba5b 	b.w	8008a92 <_strtod_l+0x7a>
 80095dc:	2a65      	cmp	r2, #101	; 0x65
 80095de:	f43f ab52 	beq.w	8008c86 <_strtod_l+0x26e>
 80095e2:	2a45      	cmp	r2, #69	; 0x45
 80095e4:	f43f ab4f 	beq.w	8008c86 <_strtod_l+0x26e>
 80095e8:	2301      	movs	r3, #1
 80095ea:	f7ff bb87 	b.w	8008cfc <_strtod_l+0x2e4>
 80095ee:	bf00      	nop
 80095f0:	ffc00000 	.word	0xffc00000
 80095f4:	41dfffff 	.word	0x41dfffff
 80095f8:	94a03595 	.word	0x94a03595
 80095fc:	3fcfffff 	.word	0x3fcfffff

08009600 <_strtod_r>:
 8009600:	4b01      	ldr	r3, [pc, #4]	; (8009608 <_strtod_r+0x8>)
 8009602:	f7ff ba09 	b.w	8008a18 <_strtod_l>
 8009606:	bf00      	nop
 8009608:	20000090 	.word	0x20000090

0800960c <_strtol_l.constprop.0>:
 800960c:	2b01      	cmp	r3, #1
 800960e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009612:	4686      	mov	lr, r0
 8009614:	4690      	mov	r8, r2
 8009616:	d001      	beq.n	800961c <_strtol_l.constprop.0+0x10>
 8009618:	2b24      	cmp	r3, #36	; 0x24
 800961a:	d906      	bls.n	800962a <_strtol_l.constprop.0+0x1e>
 800961c:	f7fd fd74 	bl	8007108 <__errno>
 8009620:	2316      	movs	r3, #22
 8009622:	6003      	str	r3, [r0, #0]
 8009624:	2000      	movs	r0, #0
 8009626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962a:	460d      	mov	r5, r1
 800962c:	4835      	ldr	r0, [pc, #212]	; (8009704 <_strtol_l.constprop.0+0xf8>)
 800962e:	462a      	mov	r2, r5
 8009630:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009634:	5d06      	ldrb	r6, [r0, r4]
 8009636:	f016 0608 	ands.w	r6, r6, #8
 800963a:	d1f8      	bne.n	800962e <_strtol_l.constprop.0+0x22>
 800963c:	2c2d      	cmp	r4, #45	; 0x2d
 800963e:	d12e      	bne.n	800969e <_strtol_l.constprop.0+0x92>
 8009640:	2601      	movs	r6, #1
 8009642:	782c      	ldrb	r4, [r5, #0]
 8009644:	1c95      	adds	r5, r2, #2
 8009646:	2b00      	cmp	r3, #0
 8009648:	d057      	beq.n	80096fa <_strtol_l.constprop.0+0xee>
 800964a:	2b10      	cmp	r3, #16
 800964c:	d109      	bne.n	8009662 <_strtol_l.constprop.0+0x56>
 800964e:	2c30      	cmp	r4, #48	; 0x30
 8009650:	d107      	bne.n	8009662 <_strtol_l.constprop.0+0x56>
 8009652:	782a      	ldrb	r2, [r5, #0]
 8009654:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009658:	2a58      	cmp	r2, #88	; 0x58
 800965a:	d149      	bne.n	80096f0 <_strtol_l.constprop.0+0xe4>
 800965c:	2310      	movs	r3, #16
 800965e:	786c      	ldrb	r4, [r5, #1]
 8009660:	3502      	adds	r5, #2
 8009662:	2200      	movs	r2, #0
 8009664:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009668:	f10c 3cff 	add.w	ip, ip, #4294967295
 800966c:	fbbc f9f3 	udiv	r9, ip, r3
 8009670:	4610      	mov	r0, r2
 8009672:	fb03 ca19 	mls	sl, r3, r9, ip
 8009676:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800967a:	2f09      	cmp	r7, #9
 800967c:	d814      	bhi.n	80096a8 <_strtol_l.constprop.0+0x9c>
 800967e:	463c      	mov	r4, r7
 8009680:	42a3      	cmp	r3, r4
 8009682:	dd20      	ble.n	80096c6 <_strtol_l.constprop.0+0xba>
 8009684:	1c57      	adds	r7, r2, #1
 8009686:	d007      	beq.n	8009698 <_strtol_l.constprop.0+0x8c>
 8009688:	4581      	cmp	r9, r0
 800968a:	d319      	bcc.n	80096c0 <_strtol_l.constprop.0+0xb4>
 800968c:	d101      	bne.n	8009692 <_strtol_l.constprop.0+0x86>
 800968e:	45a2      	cmp	sl, r4
 8009690:	db16      	blt.n	80096c0 <_strtol_l.constprop.0+0xb4>
 8009692:	2201      	movs	r2, #1
 8009694:	fb00 4003 	mla	r0, r0, r3, r4
 8009698:	f815 4b01 	ldrb.w	r4, [r5], #1
 800969c:	e7eb      	b.n	8009676 <_strtol_l.constprop.0+0x6a>
 800969e:	2c2b      	cmp	r4, #43	; 0x2b
 80096a0:	bf04      	itt	eq
 80096a2:	782c      	ldrbeq	r4, [r5, #0]
 80096a4:	1c95      	addeq	r5, r2, #2
 80096a6:	e7ce      	b.n	8009646 <_strtol_l.constprop.0+0x3a>
 80096a8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80096ac:	2f19      	cmp	r7, #25
 80096ae:	d801      	bhi.n	80096b4 <_strtol_l.constprop.0+0xa8>
 80096b0:	3c37      	subs	r4, #55	; 0x37
 80096b2:	e7e5      	b.n	8009680 <_strtol_l.constprop.0+0x74>
 80096b4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80096b8:	2f19      	cmp	r7, #25
 80096ba:	d804      	bhi.n	80096c6 <_strtol_l.constprop.0+0xba>
 80096bc:	3c57      	subs	r4, #87	; 0x57
 80096be:	e7df      	b.n	8009680 <_strtol_l.constprop.0+0x74>
 80096c0:	f04f 32ff 	mov.w	r2, #4294967295
 80096c4:	e7e8      	b.n	8009698 <_strtol_l.constprop.0+0x8c>
 80096c6:	1c53      	adds	r3, r2, #1
 80096c8:	d108      	bne.n	80096dc <_strtol_l.constprop.0+0xd0>
 80096ca:	2322      	movs	r3, #34	; 0x22
 80096cc:	4660      	mov	r0, ip
 80096ce:	f8ce 3000 	str.w	r3, [lr]
 80096d2:	f1b8 0f00 	cmp.w	r8, #0
 80096d6:	d0a6      	beq.n	8009626 <_strtol_l.constprop.0+0x1a>
 80096d8:	1e69      	subs	r1, r5, #1
 80096da:	e006      	b.n	80096ea <_strtol_l.constprop.0+0xde>
 80096dc:	b106      	cbz	r6, 80096e0 <_strtol_l.constprop.0+0xd4>
 80096de:	4240      	negs	r0, r0
 80096e0:	f1b8 0f00 	cmp.w	r8, #0
 80096e4:	d09f      	beq.n	8009626 <_strtol_l.constprop.0+0x1a>
 80096e6:	2a00      	cmp	r2, #0
 80096e8:	d1f6      	bne.n	80096d8 <_strtol_l.constprop.0+0xcc>
 80096ea:	f8c8 1000 	str.w	r1, [r8]
 80096ee:	e79a      	b.n	8009626 <_strtol_l.constprop.0+0x1a>
 80096f0:	2430      	movs	r4, #48	; 0x30
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1b5      	bne.n	8009662 <_strtol_l.constprop.0+0x56>
 80096f6:	2308      	movs	r3, #8
 80096f8:	e7b3      	b.n	8009662 <_strtol_l.constprop.0+0x56>
 80096fa:	2c30      	cmp	r4, #48	; 0x30
 80096fc:	d0a9      	beq.n	8009652 <_strtol_l.constprop.0+0x46>
 80096fe:	230a      	movs	r3, #10
 8009700:	e7af      	b.n	8009662 <_strtol_l.constprop.0+0x56>
 8009702:	bf00      	nop
 8009704:	0800b599 	.word	0x0800b599

08009708 <_strtol_r>:
 8009708:	f7ff bf80 	b.w	800960c <_strtol_l.constprop.0>

0800970c <__ssputs_r>:
 800970c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009710:	461f      	mov	r7, r3
 8009712:	688e      	ldr	r6, [r1, #8]
 8009714:	4682      	mov	sl, r0
 8009716:	42be      	cmp	r6, r7
 8009718:	460c      	mov	r4, r1
 800971a:	4690      	mov	r8, r2
 800971c:	680b      	ldr	r3, [r1, #0]
 800971e:	d82c      	bhi.n	800977a <__ssputs_r+0x6e>
 8009720:	898a      	ldrh	r2, [r1, #12]
 8009722:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009726:	d026      	beq.n	8009776 <__ssputs_r+0x6a>
 8009728:	6965      	ldr	r5, [r4, #20]
 800972a:	6909      	ldr	r1, [r1, #16]
 800972c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009730:	eba3 0901 	sub.w	r9, r3, r1
 8009734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009738:	1c7b      	adds	r3, r7, #1
 800973a:	444b      	add	r3, r9
 800973c:	106d      	asrs	r5, r5, #1
 800973e:	429d      	cmp	r5, r3
 8009740:	bf38      	it	cc
 8009742:	461d      	movcc	r5, r3
 8009744:	0553      	lsls	r3, r2, #21
 8009746:	d527      	bpl.n	8009798 <__ssputs_r+0x8c>
 8009748:	4629      	mov	r1, r5
 800974a:	f7fe fc19 	bl	8007f80 <_malloc_r>
 800974e:	4606      	mov	r6, r0
 8009750:	b360      	cbz	r0, 80097ac <__ssputs_r+0xa0>
 8009752:	464a      	mov	r2, r9
 8009754:	6921      	ldr	r1, [r4, #16]
 8009756:	f000 fdb9 	bl	800a2cc <memcpy>
 800975a:	89a3      	ldrh	r3, [r4, #12]
 800975c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	6126      	str	r6, [r4, #16]
 8009768:	444e      	add	r6, r9
 800976a:	6026      	str	r6, [r4, #0]
 800976c:	463e      	mov	r6, r7
 800976e:	6165      	str	r5, [r4, #20]
 8009770:	eba5 0509 	sub.w	r5, r5, r9
 8009774:	60a5      	str	r5, [r4, #8]
 8009776:	42be      	cmp	r6, r7
 8009778:	d900      	bls.n	800977c <__ssputs_r+0x70>
 800977a:	463e      	mov	r6, r7
 800977c:	4632      	mov	r2, r6
 800977e:	4641      	mov	r1, r8
 8009780:	6820      	ldr	r0, [r4, #0]
 8009782:	f000 fd66 	bl	800a252 <memmove>
 8009786:	2000      	movs	r0, #0
 8009788:	68a3      	ldr	r3, [r4, #8]
 800978a:	1b9b      	subs	r3, r3, r6
 800978c:	60a3      	str	r3, [r4, #8]
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	4433      	add	r3, r6
 8009792:	6023      	str	r3, [r4, #0]
 8009794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009798:	462a      	mov	r2, r5
 800979a:	f001 f932 	bl	800aa02 <_realloc_r>
 800979e:	4606      	mov	r6, r0
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d1e0      	bne.n	8009766 <__ssputs_r+0x5a>
 80097a4:	4650      	mov	r0, sl
 80097a6:	6921      	ldr	r1, [r4, #16]
 80097a8:	f7fe fb7a 	bl	8007ea0 <_free_r>
 80097ac:	230c      	movs	r3, #12
 80097ae:	f8ca 3000 	str.w	r3, [sl]
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	f04f 30ff 	mov.w	r0, #4294967295
 80097b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097bc:	81a3      	strh	r3, [r4, #12]
 80097be:	e7e9      	b.n	8009794 <__ssputs_r+0x88>

080097c0 <_svfiprintf_r>:
 80097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	4698      	mov	r8, r3
 80097c6:	898b      	ldrh	r3, [r1, #12]
 80097c8:	4607      	mov	r7, r0
 80097ca:	061b      	lsls	r3, r3, #24
 80097cc:	460d      	mov	r5, r1
 80097ce:	4614      	mov	r4, r2
 80097d0:	b09d      	sub	sp, #116	; 0x74
 80097d2:	d50e      	bpl.n	80097f2 <_svfiprintf_r+0x32>
 80097d4:	690b      	ldr	r3, [r1, #16]
 80097d6:	b963      	cbnz	r3, 80097f2 <_svfiprintf_r+0x32>
 80097d8:	2140      	movs	r1, #64	; 0x40
 80097da:	f7fe fbd1 	bl	8007f80 <_malloc_r>
 80097de:	6028      	str	r0, [r5, #0]
 80097e0:	6128      	str	r0, [r5, #16]
 80097e2:	b920      	cbnz	r0, 80097ee <_svfiprintf_r+0x2e>
 80097e4:	230c      	movs	r3, #12
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ec:	e0d0      	b.n	8009990 <_svfiprintf_r+0x1d0>
 80097ee:	2340      	movs	r3, #64	; 0x40
 80097f0:	616b      	str	r3, [r5, #20]
 80097f2:	2300      	movs	r3, #0
 80097f4:	9309      	str	r3, [sp, #36]	; 0x24
 80097f6:	2320      	movs	r3, #32
 80097f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097fc:	2330      	movs	r3, #48	; 0x30
 80097fe:	f04f 0901 	mov.w	r9, #1
 8009802:	f8cd 800c 	str.w	r8, [sp, #12]
 8009806:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80099a8 <_svfiprintf_r+0x1e8>
 800980a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800980e:	4623      	mov	r3, r4
 8009810:	469a      	mov	sl, r3
 8009812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009816:	b10a      	cbz	r2, 800981c <_svfiprintf_r+0x5c>
 8009818:	2a25      	cmp	r2, #37	; 0x25
 800981a:	d1f9      	bne.n	8009810 <_svfiprintf_r+0x50>
 800981c:	ebba 0b04 	subs.w	fp, sl, r4
 8009820:	d00b      	beq.n	800983a <_svfiprintf_r+0x7a>
 8009822:	465b      	mov	r3, fp
 8009824:	4622      	mov	r2, r4
 8009826:	4629      	mov	r1, r5
 8009828:	4638      	mov	r0, r7
 800982a:	f7ff ff6f 	bl	800970c <__ssputs_r>
 800982e:	3001      	adds	r0, #1
 8009830:	f000 80a9 	beq.w	8009986 <_svfiprintf_r+0x1c6>
 8009834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009836:	445a      	add	r2, fp
 8009838:	9209      	str	r2, [sp, #36]	; 0x24
 800983a:	f89a 3000 	ldrb.w	r3, [sl]
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 80a1 	beq.w	8009986 <_svfiprintf_r+0x1c6>
 8009844:	2300      	movs	r3, #0
 8009846:	f04f 32ff 	mov.w	r2, #4294967295
 800984a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800984e:	f10a 0a01 	add.w	sl, sl, #1
 8009852:	9304      	str	r3, [sp, #16]
 8009854:	9307      	str	r3, [sp, #28]
 8009856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800985a:	931a      	str	r3, [sp, #104]	; 0x68
 800985c:	4654      	mov	r4, sl
 800985e:	2205      	movs	r2, #5
 8009860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009864:	4850      	ldr	r0, [pc, #320]	; (80099a8 <_svfiprintf_r+0x1e8>)
 8009866:	f7fd fc7b 	bl	8007160 <memchr>
 800986a:	9a04      	ldr	r2, [sp, #16]
 800986c:	b9d8      	cbnz	r0, 80098a6 <_svfiprintf_r+0xe6>
 800986e:	06d0      	lsls	r0, r2, #27
 8009870:	bf44      	itt	mi
 8009872:	2320      	movmi	r3, #32
 8009874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009878:	0711      	lsls	r1, r2, #28
 800987a:	bf44      	itt	mi
 800987c:	232b      	movmi	r3, #43	; 0x2b
 800987e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009882:	f89a 3000 	ldrb.w	r3, [sl]
 8009886:	2b2a      	cmp	r3, #42	; 0x2a
 8009888:	d015      	beq.n	80098b6 <_svfiprintf_r+0xf6>
 800988a:	4654      	mov	r4, sl
 800988c:	2000      	movs	r0, #0
 800988e:	f04f 0c0a 	mov.w	ip, #10
 8009892:	9a07      	ldr	r2, [sp, #28]
 8009894:	4621      	mov	r1, r4
 8009896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800989a:	3b30      	subs	r3, #48	; 0x30
 800989c:	2b09      	cmp	r3, #9
 800989e:	d94d      	bls.n	800993c <_svfiprintf_r+0x17c>
 80098a0:	b1b0      	cbz	r0, 80098d0 <_svfiprintf_r+0x110>
 80098a2:	9207      	str	r2, [sp, #28]
 80098a4:	e014      	b.n	80098d0 <_svfiprintf_r+0x110>
 80098a6:	eba0 0308 	sub.w	r3, r0, r8
 80098aa:	fa09 f303 	lsl.w	r3, r9, r3
 80098ae:	4313      	orrs	r3, r2
 80098b0:	46a2      	mov	sl, r4
 80098b2:	9304      	str	r3, [sp, #16]
 80098b4:	e7d2      	b.n	800985c <_svfiprintf_r+0x9c>
 80098b6:	9b03      	ldr	r3, [sp, #12]
 80098b8:	1d19      	adds	r1, r3, #4
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	9103      	str	r1, [sp, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	bfbb      	ittet	lt
 80098c2:	425b      	neglt	r3, r3
 80098c4:	f042 0202 	orrlt.w	r2, r2, #2
 80098c8:	9307      	strge	r3, [sp, #28]
 80098ca:	9307      	strlt	r3, [sp, #28]
 80098cc:	bfb8      	it	lt
 80098ce:	9204      	strlt	r2, [sp, #16]
 80098d0:	7823      	ldrb	r3, [r4, #0]
 80098d2:	2b2e      	cmp	r3, #46	; 0x2e
 80098d4:	d10c      	bne.n	80098f0 <_svfiprintf_r+0x130>
 80098d6:	7863      	ldrb	r3, [r4, #1]
 80098d8:	2b2a      	cmp	r3, #42	; 0x2a
 80098da:	d134      	bne.n	8009946 <_svfiprintf_r+0x186>
 80098dc:	9b03      	ldr	r3, [sp, #12]
 80098de:	3402      	adds	r4, #2
 80098e0:	1d1a      	adds	r2, r3, #4
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	9203      	str	r2, [sp, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	bfb8      	it	lt
 80098ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80098ee:	9305      	str	r3, [sp, #20]
 80098f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80099ac <_svfiprintf_r+0x1ec>
 80098f4:	2203      	movs	r2, #3
 80098f6:	4650      	mov	r0, sl
 80098f8:	7821      	ldrb	r1, [r4, #0]
 80098fa:	f7fd fc31 	bl	8007160 <memchr>
 80098fe:	b138      	cbz	r0, 8009910 <_svfiprintf_r+0x150>
 8009900:	2240      	movs	r2, #64	; 0x40
 8009902:	9b04      	ldr	r3, [sp, #16]
 8009904:	eba0 000a 	sub.w	r0, r0, sl
 8009908:	4082      	lsls	r2, r0
 800990a:	4313      	orrs	r3, r2
 800990c:	3401      	adds	r4, #1
 800990e:	9304      	str	r3, [sp, #16]
 8009910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009914:	2206      	movs	r2, #6
 8009916:	4826      	ldr	r0, [pc, #152]	; (80099b0 <_svfiprintf_r+0x1f0>)
 8009918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800991c:	f7fd fc20 	bl	8007160 <memchr>
 8009920:	2800      	cmp	r0, #0
 8009922:	d038      	beq.n	8009996 <_svfiprintf_r+0x1d6>
 8009924:	4b23      	ldr	r3, [pc, #140]	; (80099b4 <_svfiprintf_r+0x1f4>)
 8009926:	bb1b      	cbnz	r3, 8009970 <_svfiprintf_r+0x1b0>
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	3307      	adds	r3, #7
 800992c:	f023 0307 	bic.w	r3, r3, #7
 8009930:	3308      	adds	r3, #8
 8009932:	9303      	str	r3, [sp, #12]
 8009934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009936:	4433      	add	r3, r6
 8009938:	9309      	str	r3, [sp, #36]	; 0x24
 800993a:	e768      	b.n	800980e <_svfiprintf_r+0x4e>
 800993c:	460c      	mov	r4, r1
 800993e:	2001      	movs	r0, #1
 8009940:	fb0c 3202 	mla	r2, ip, r2, r3
 8009944:	e7a6      	b.n	8009894 <_svfiprintf_r+0xd4>
 8009946:	2300      	movs	r3, #0
 8009948:	f04f 0c0a 	mov.w	ip, #10
 800994c:	4619      	mov	r1, r3
 800994e:	3401      	adds	r4, #1
 8009950:	9305      	str	r3, [sp, #20]
 8009952:	4620      	mov	r0, r4
 8009954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009958:	3a30      	subs	r2, #48	; 0x30
 800995a:	2a09      	cmp	r2, #9
 800995c:	d903      	bls.n	8009966 <_svfiprintf_r+0x1a6>
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0c6      	beq.n	80098f0 <_svfiprintf_r+0x130>
 8009962:	9105      	str	r1, [sp, #20]
 8009964:	e7c4      	b.n	80098f0 <_svfiprintf_r+0x130>
 8009966:	4604      	mov	r4, r0
 8009968:	2301      	movs	r3, #1
 800996a:	fb0c 2101 	mla	r1, ip, r1, r2
 800996e:	e7f0      	b.n	8009952 <_svfiprintf_r+0x192>
 8009970:	ab03      	add	r3, sp, #12
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	462a      	mov	r2, r5
 8009976:	4638      	mov	r0, r7
 8009978:	4b0f      	ldr	r3, [pc, #60]	; (80099b8 <_svfiprintf_r+0x1f8>)
 800997a:	a904      	add	r1, sp, #16
 800997c:	f7fc fc06 	bl	800618c <_printf_float>
 8009980:	1c42      	adds	r2, r0, #1
 8009982:	4606      	mov	r6, r0
 8009984:	d1d6      	bne.n	8009934 <_svfiprintf_r+0x174>
 8009986:	89ab      	ldrh	r3, [r5, #12]
 8009988:	065b      	lsls	r3, r3, #25
 800998a:	f53f af2d 	bmi.w	80097e8 <_svfiprintf_r+0x28>
 800998e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009990:	b01d      	add	sp, #116	; 0x74
 8009992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009996:	ab03      	add	r3, sp, #12
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	462a      	mov	r2, r5
 800999c:	4638      	mov	r0, r7
 800999e:	4b06      	ldr	r3, [pc, #24]	; (80099b8 <_svfiprintf_r+0x1f8>)
 80099a0:	a904      	add	r1, sp, #16
 80099a2:	f7fc fe93 	bl	80066cc <_printf_i>
 80099a6:	e7eb      	b.n	8009980 <_svfiprintf_r+0x1c0>
 80099a8:	0800b699 	.word	0x0800b699
 80099ac:	0800b69f 	.word	0x0800b69f
 80099b0:	0800b6a3 	.word	0x0800b6a3
 80099b4:	0800618d 	.word	0x0800618d
 80099b8:	0800970d 	.word	0x0800970d

080099bc <_sungetc_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	1c4b      	adds	r3, r1, #1
 80099c0:	4614      	mov	r4, r2
 80099c2:	d103      	bne.n	80099cc <_sungetc_r+0x10>
 80099c4:	f04f 35ff 	mov.w	r5, #4294967295
 80099c8:	4628      	mov	r0, r5
 80099ca:	bd38      	pop	{r3, r4, r5, pc}
 80099cc:	8993      	ldrh	r3, [r2, #12]
 80099ce:	b2cd      	uxtb	r5, r1
 80099d0:	f023 0320 	bic.w	r3, r3, #32
 80099d4:	8193      	strh	r3, [r2, #12]
 80099d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099d8:	6852      	ldr	r2, [r2, #4]
 80099da:	b18b      	cbz	r3, 8009a00 <_sungetc_r+0x44>
 80099dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80099de:	4293      	cmp	r3, r2
 80099e0:	dd08      	ble.n	80099f4 <_sungetc_r+0x38>
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	1e5a      	subs	r2, r3, #1
 80099e6:	6022      	str	r2, [r4, #0]
 80099e8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80099ec:	6863      	ldr	r3, [r4, #4]
 80099ee:	3301      	adds	r3, #1
 80099f0:	6063      	str	r3, [r4, #4]
 80099f2:	e7e9      	b.n	80099c8 <_sungetc_r+0xc>
 80099f4:	4621      	mov	r1, r4
 80099f6:	f000 fbf4 	bl	800a1e2 <__submore>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d0f1      	beq.n	80099e2 <_sungetc_r+0x26>
 80099fe:	e7e1      	b.n	80099c4 <_sungetc_r+0x8>
 8009a00:	6921      	ldr	r1, [r4, #16]
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	b151      	cbz	r1, 8009a1c <_sungetc_r+0x60>
 8009a06:	4299      	cmp	r1, r3
 8009a08:	d208      	bcs.n	8009a1c <_sungetc_r+0x60>
 8009a0a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009a0e:	42a9      	cmp	r1, r5
 8009a10:	d104      	bne.n	8009a1c <_sungetc_r+0x60>
 8009a12:	3b01      	subs	r3, #1
 8009a14:	3201      	adds	r2, #1
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	6062      	str	r2, [r4, #4]
 8009a1a:	e7d5      	b.n	80099c8 <_sungetc_r+0xc>
 8009a1c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009a20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a24:	6363      	str	r3, [r4, #52]	; 0x34
 8009a26:	2303      	movs	r3, #3
 8009a28:	63a3      	str	r3, [r4, #56]	; 0x38
 8009a2a:	4623      	mov	r3, r4
 8009a2c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	2301      	movs	r3, #1
 8009a34:	e7dc      	b.n	80099f0 <_sungetc_r+0x34>

08009a36 <__ssrefill_r>:
 8009a36:	b510      	push	{r4, lr}
 8009a38:	460c      	mov	r4, r1
 8009a3a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009a3c:	b169      	cbz	r1, 8009a5a <__ssrefill_r+0x24>
 8009a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a42:	4299      	cmp	r1, r3
 8009a44:	d001      	beq.n	8009a4a <__ssrefill_r+0x14>
 8009a46:	f7fe fa2b 	bl	8007ea0 <_free_r>
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a4e:	6360      	str	r0, [r4, #52]	; 0x34
 8009a50:	6063      	str	r3, [r4, #4]
 8009a52:	b113      	cbz	r3, 8009a5a <__ssrefill_r+0x24>
 8009a54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009a56:	6023      	str	r3, [r4, #0]
 8009a58:	bd10      	pop	{r4, pc}
 8009a5a:	6923      	ldr	r3, [r4, #16]
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	2300      	movs	r3, #0
 8009a64:	6063      	str	r3, [r4, #4]
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	f043 0320 	orr.w	r3, r3, #32
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	e7f3      	b.n	8009a58 <__ssrefill_r+0x22>

08009a70 <__ssvfiscanf_r>:
 8009a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a74:	460c      	mov	r4, r1
 8009a76:	2100      	movs	r1, #0
 8009a78:	4606      	mov	r6, r0
 8009a7a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009a7e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009a82:	49a6      	ldr	r1, [pc, #664]	; (8009d1c <__ssvfiscanf_r+0x2ac>)
 8009a84:	f10d 0804 	add.w	r8, sp, #4
 8009a88:	91a0      	str	r1, [sp, #640]	; 0x280
 8009a8a:	49a5      	ldr	r1, [pc, #660]	; (8009d20 <__ssvfiscanf_r+0x2b0>)
 8009a8c:	4fa5      	ldr	r7, [pc, #660]	; (8009d24 <__ssvfiscanf_r+0x2b4>)
 8009a8e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009d28 <__ssvfiscanf_r+0x2b8>
 8009a92:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009a96:	91a1      	str	r1, [sp, #644]	; 0x284
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	7813      	ldrb	r3, [r2, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 815a 	beq.w	8009d56 <__ssvfiscanf_r+0x2e6>
 8009aa2:	5cf9      	ldrb	r1, [r7, r3]
 8009aa4:	1c55      	adds	r5, r2, #1
 8009aa6:	f011 0108 	ands.w	r1, r1, #8
 8009aaa:	d019      	beq.n	8009ae0 <__ssvfiscanf_r+0x70>
 8009aac:	6863      	ldr	r3, [r4, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	dd0f      	ble.n	8009ad2 <__ssvfiscanf_r+0x62>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	781a      	ldrb	r2, [r3, #0]
 8009ab6:	5cba      	ldrb	r2, [r7, r2]
 8009ab8:	0712      	lsls	r2, r2, #28
 8009aba:	d401      	bmi.n	8009ac0 <__ssvfiscanf_r+0x50>
 8009abc:	462a      	mov	r2, r5
 8009abe:	e7ec      	b.n	8009a9a <__ssvfiscanf_r+0x2a>
 8009ac0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	3201      	adds	r2, #1
 8009ac6:	9245      	str	r2, [sp, #276]	; 0x114
 8009ac8:	6862      	ldr	r2, [r4, #4]
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	3a01      	subs	r2, #1
 8009ace:	6062      	str	r2, [r4, #4]
 8009ad0:	e7ec      	b.n	8009aac <__ssvfiscanf_r+0x3c>
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ad8:	4798      	blx	r3
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d0e9      	beq.n	8009ab2 <__ssvfiscanf_r+0x42>
 8009ade:	e7ed      	b.n	8009abc <__ssvfiscanf_r+0x4c>
 8009ae0:	2b25      	cmp	r3, #37	; 0x25
 8009ae2:	d012      	beq.n	8009b0a <__ssvfiscanf_r+0x9a>
 8009ae4:	469a      	mov	sl, r3
 8009ae6:	6863      	ldr	r3, [r4, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f340 8092 	ble.w	8009c12 <__ssvfiscanf_r+0x1a2>
 8009aee:	6822      	ldr	r2, [r4, #0]
 8009af0:	7813      	ldrb	r3, [r2, #0]
 8009af2:	4553      	cmp	r3, sl
 8009af4:	f040 812f 	bne.w	8009d56 <__ssvfiscanf_r+0x2e6>
 8009af8:	6863      	ldr	r3, [r4, #4]
 8009afa:	3201      	adds	r2, #1
 8009afc:	3b01      	subs	r3, #1
 8009afe:	6063      	str	r3, [r4, #4]
 8009b00:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009b02:	6022      	str	r2, [r4, #0]
 8009b04:	3301      	adds	r3, #1
 8009b06:	9345      	str	r3, [sp, #276]	; 0x114
 8009b08:	e7d8      	b.n	8009abc <__ssvfiscanf_r+0x4c>
 8009b0a:	9141      	str	r1, [sp, #260]	; 0x104
 8009b0c:	9143      	str	r1, [sp, #268]	; 0x10c
 8009b0e:	7853      	ldrb	r3, [r2, #1]
 8009b10:	2b2a      	cmp	r3, #42	; 0x2a
 8009b12:	bf04      	itt	eq
 8009b14:	2310      	moveq	r3, #16
 8009b16:	1c95      	addeq	r5, r2, #2
 8009b18:	f04f 020a 	mov.w	r2, #10
 8009b1c:	bf08      	it	eq
 8009b1e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009b20:	46aa      	mov	sl, r5
 8009b22:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009b26:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009b2a:	2b09      	cmp	r3, #9
 8009b2c:	d91c      	bls.n	8009b68 <__ssvfiscanf_r+0xf8>
 8009b2e:	2203      	movs	r2, #3
 8009b30:	487d      	ldr	r0, [pc, #500]	; (8009d28 <__ssvfiscanf_r+0x2b8>)
 8009b32:	f7fd fb15 	bl	8007160 <memchr>
 8009b36:	b138      	cbz	r0, 8009b48 <__ssvfiscanf_r+0xd8>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	4655      	mov	r5, sl
 8009b3c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009b3e:	eba0 0009 	sub.w	r0, r0, r9
 8009b42:	4083      	lsls	r3, r0
 8009b44:	4313      	orrs	r3, r2
 8009b46:	9341      	str	r3, [sp, #260]	; 0x104
 8009b48:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009b4c:	2b78      	cmp	r3, #120	; 0x78
 8009b4e:	d806      	bhi.n	8009b5e <__ssvfiscanf_r+0xee>
 8009b50:	2b57      	cmp	r3, #87	; 0x57
 8009b52:	d810      	bhi.n	8009b76 <__ssvfiscanf_r+0x106>
 8009b54:	2b25      	cmp	r3, #37	; 0x25
 8009b56:	d0c5      	beq.n	8009ae4 <__ssvfiscanf_r+0x74>
 8009b58:	d856      	bhi.n	8009c08 <__ssvfiscanf_r+0x198>
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d064      	beq.n	8009c28 <__ssvfiscanf_r+0x1b8>
 8009b5e:	2303      	movs	r3, #3
 8009b60:	9347      	str	r3, [sp, #284]	; 0x11c
 8009b62:	230a      	movs	r3, #10
 8009b64:	9342      	str	r3, [sp, #264]	; 0x108
 8009b66:	e075      	b.n	8009c54 <__ssvfiscanf_r+0x1e4>
 8009b68:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009b6a:	4655      	mov	r5, sl
 8009b6c:	fb02 1103 	mla	r1, r2, r3, r1
 8009b70:	3930      	subs	r1, #48	; 0x30
 8009b72:	9143      	str	r1, [sp, #268]	; 0x10c
 8009b74:	e7d4      	b.n	8009b20 <__ssvfiscanf_r+0xb0>
 8009b76:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009b7a:	2a20      	cmp	r2, #32
 8009b7c:	d8ef      	bhi.n	8009b5e <__ssvfiscanf_r+0xee>
 8009b7e:	a101      	add	r1, pc, #4	; (adr r1, 8009b84 <__ssvfiscanf_r+0x114>)
 8009b80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009b84:	08009c37 	.word	0x08009c37
 8009b88:	08009b5f 	.word	0x08009b5f
 8009b8c:	08009b5f 	.word	0x08009b5f
 8009b90:	08009c95 	.word	0x08009c95
 8009b94:	08009b5f 	.word	0x08009b5f
 8009b98:	08009b5f 	.word	0x08009b5f
 8009b9c:	08009b5f 	.word	0x08009b5f
 8009ba0:	08009b5f 	.word	0x08009b5f
 8009ba4:	08009b5f 	.word	0x08009b5f
 8009ba8:	08009b5f 	.word	0x08009b5f
 8009bac:	08009b5f 	.word	0x08009b5f
 8009bb0:	08009cab 	.word	0x08009cab
 8009bb4:	08009c91 	.word	0x08009c91
 8009bb8:	08009c0f 	.word	0x08009c0f
 8009bbc:	08009c0f 	.word	0x08009c0f
 8009bc0:	08009c0f 	.word	0x08009c0f
 8009bc4:	08009b5f 	.word	0x08009b5f
 8009bc8:	08009c4d 	.word	0x08009c4d
 8009bcc:	08009b5f 	.word	0x08009b5f
 8009bd0:	08009b5f 	.word	0x08009b5f
 8009bd4:	08009b5f 	.word	0x08009b5f
 8009bd8:	08009b5f 	.word	0x08009b5f
 8009bdc:	08009cbb 	.word	0x08009cbb
 8009be0:	08009c89 	.word	0x08009c89
 8009be4:	08009c2f 	.word	0x08009c2f
 8009be8:	08009b5f 	.word	0x08009b5f
 8009bec:	08009b5f 	.word	0x08009b5f
 8009bf0:	08009cb7 	.word	0x08009cb7
 8009bf4:	08009b5f 	.word	0x08009b5f
 8009bf8:	08009c91 	.word	0x08009c91
 8009bfc:	08009b5f 	.word	0x08009b5f
 8009c00:	08009b5f 	.word	0x08009b5f
 8009c04:	08009c37 	.word	0x08009c37
 8009c08:	3b45      	subs	r3, #69	; 0x45
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d8a7      	bhi.n	8009b5e <__ssvfiscanf_r+0xee>
 8009c0e:	2305      	movs	r3, #5
 8009c10:	e01f      	b.n	8009c52 <__ssvfiscanf_r+0x1e2>
 8009c12:	4621      	mov	r1, r4
 8009c14:	4630      	mov	r0, r6
 8009c16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009c18:	4798      	blx	r3
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	f43f af67 	beq.w	8009aee <__ssvfiscanf_r+0x7e>
 8009c20:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009c22:	2800      	cmp	r0, #0
 8009c24:	f040 808d 	bne.w	8009d42 <__ssvfiscanf_r+0x2d2>
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	e08f      	b.n	8009d4e <__ssvfiscanf_r+0x2de>
 8009c2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009c30:	f042 0220 	orr.w	r2, r2, #32
 8009c34:	9241      	str	r2, [sp, #260]	; 0x104
 8009c36:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c3c:	9241      	str	r2, [sp, #260]	; 0x104
 8009c3e:	2210      	movs	r2, #16
 8009c40:	2b6f      	cmp	r3, #111	; 0x6f
 8009c42:	bf34      	ite	cc
 8009c44:	2303      	movcc	r3, #3
 8009c46:	2304      	movcs	r3, #4
 8009c48:	9242      	str	r2, [sp, #264]	; 0x108
 8009c4a:	e002      	b.n	8009c52 <__ssvfiscanf_r+0x1e2>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	9342      	str	r3, [sp, #264]	; 0x108
 8009c50:	2303      	movs	r3, #3
 8009c52:	9347      	str	r3, [sp, #284]	; 0x11c
 8009c54:	6863      	ldr	r3, [r4, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	dd3d      	ble.n	8009cd6 <__ssvfiscanf_r+0x266>
 8009c5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009c5c:	0659      	lsls	r1, r3, #25
 8009c5e:	d404      	bmi.n	8009c6a <__ssvfiscanf_r+0x1fa>
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	781a      	ldrb	r2, [r3, #0]
 8009c64:	5cba      	ldrb	r2, [r7, r2]
 8009c66:	0712      	lsls	r2, r2, #28
 8009c68:	d43c      	bmi.n	8009ce4 <__ssvfiscanf_r+0x274>
 8009c6a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	dc4b      	bgt.n	8009d08 <__ssvfiscanf_r+0x298>
 8009c70:	466b      	mov	r3, sp
 8009c72:	4622      	mov	r2, r4
 8009c74:	4630      	mov	r0, r6
 8009c76:	a941      	add	r1, sp, #260	; 0x104
 8009c78:	f000 f872 	bl	8009d60 <_scanf_chars>
 8009c7c:	2801      	cmp	r0, #1
 8009c7e:	d06a      	beq.n	8009d56 <__ssvfiscanf_r+0x2e6>
 8009c80:	2802      	cmp	r0, #2
 8009c82:	f47f af1b 	bne.w	8009abc <__ssvfiscanf_r+0x4c>
 8009c86:	e7cb      	b.n	8009c20 <__ssvfiscanf_r+0x1b0>
 8009c88:	2308      	movs	r3, #8
 8009c8a:	9342      	str	r3, [sp, #264]	; 0x108
 8009c8c:	2304      	movs	r3, #4
 8009c8e:	e7e0      	b.n	8009c52 <__ssvfiscanf_r+0x1e2>
 8009c90:	220a      	movs	r2, #10
 8009c92:	e7d5      	b.n	8009c40 <__ssvfiscanf_r+0x1d0>
 8009c94:	4629      	mov	r1, r5
 8009c96:	4640      	mov	r0, r8
 8009c98:	f000 fa6a 	bl	800a170 <__sccl>
 8009c9c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca4:	9341      	str	r3, [sp, #260]	; 0x104
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e7d3      	b.n	8009c52 <__ssvfiscanf_r+0x1e2>
 8009caa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cb0:	9341      	str	r3, [sp, #260]	; 0x104
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	e7cd      	b.n	8009c52 <__ssvfiscanf_r+0x1e2>
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	e7cb      	b.n	8009c52 <__ssvfiscanf_r+0x1e2>
 8009cba:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009cbc:	06c3      	lsls	r3, r0, #27
 8009cbe:	f53f aefd 	bmi.w	8009abc <__ssvfiscanf_r+0x4c>
 8009cc2:	9b00      	ldr	r3, [sp, #0]
 8009cc4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009cc6:	1d19      	adds	r1, r3, #4
 8009cc8:	9100      	str	r1, [sp, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	07c0      	lsls	r0, r0, #31
 8009cce:	bf4c      	ite	mi
 8009cd0:	801a      	strhmi	r2, [r3, #0]
 8009cd2:	601a      	strpl	r2, [r3, #0]
 8009cd4:	e6f2      	b.n	8009abc <__ssvfiscanf_r+0x4c>
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	4630      	mov	r0, r6
 8009cda:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009cdc:	4798      	blx	r3
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d0bb      	beq.n	8009c5a <__ssvfiscanf_r+0x1ea>
 8009ce2:	e79d      	b.n	8009c20 <__ssvfiscanf_r+0x1b0>
 8009ce4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009ce6:	3201      	adds	r2, #1
 8009ce8:	9245      	str	r2, [sp, #276]	; 0x114
 8009cea:	6862      	ldr	r2, [r4, #4]
 8009cec:	3a01      	subs	r2, #1
 8009cee:	2a00      	cmp	r2, #0
 8009cf0:	6062      	str	r2, [r4, #4]
 8009cf2:	dd02      	ble.n	8009cfa <__ssvfiscanf_r+0x28a>
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	e7b2      	b.n	8009c60 <__ssvfiscanf_r+0x1f0>
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009d00:	4798      	blx	r3
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d0ac      	beq.n	8009c60 <__ssvfiscanf_r+0x1f0>
 8009d06:	e78b      	b.n	8009c20 <__ssvfiscanf_r+0x1b0>
 8009d08:	2b04      	cmp	r3, #4
 8009d0a:	dc0f      	bgt.n	8009d2c <__ssvfiscanf_r+0x2bc>
 8009d0c:	466b      	mov	r3, sp
 8009d0e:	4622      	mov	r2, r4
 8009d10:	4630      	mov	r0, r6
 8009d12:	a941      	add	r1, sp, #260	; 0x104
 8009d14:	f000 f87e 	bl	8009e14 <_scanf_i>
 8009d18:	e7b0      	b.n	8009c7c <__ssvfiscanf_r+0x20c>
 8009d1a:	bf00      	nop
 8009d1c:	080099bd 	.word	0x080099bd
 8009d20:	08009a37 	.word	0x08009a37
 8009d24:	0800b599 	.word	0x0800b599
 8009d28:	0800b69f 	.word	0x0800b69f
 8009d2c:	4b0b      	ldr	r3, [pc, #44]	; (8009d5c <__ssvfiscanf_r+0x2ec>)
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f43f aec4 	beq.w	8009abc <__ssvfiscanf_r+0x4c>
 8009d34:	466b      	mov	r3, sp
 8009d36:	4622      	mov	r2, r4
 8009d38:	4630      	mov	r0, r6
 8009d3a:	a941      	add	r1, sp, #260	; 0x104
 8009d3c:	f7fc fde8 	bl	8006910 <_scanf_float>
 8009d40:	e79c      	b.n	8009c7c <__ssvfiscanf_r+0x20c>
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009d48:	bf18      	it	ne
 8009d4a:	f04f 30ff 	movne.w	r0, #4294967295
 8009d4e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d56:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009d58:	e7f9      	b.n	8009d4e <__ssvfiscanf_r+0x2de>
 8009d5a:	bf00      	nop
 8009d5c:	08006911 	.word	0x08006911

08009d60 <_scanf_chars>:
 8009d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	4615      	mov	r5, r2
 8009d66:	688a      	ldr	r2, [r1, #8]
 8009d68:	4680      	mov	r8, r0
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	b932      	cbnz	r2, 8009d7c <_scanf_chars+0x1c>
 8009d6e:	698a      	ldr	r2, [r1, #24]
 8009d70:	2a00      	cmp	r2, #0
 8009d72:	bf0c      	ite	eq
 8009d74:	2201      	moveq	r2, #1
 8009d76:	f04f 32ff 	movne.w	r2, #4294967295
 8009d7a:	608a      	str	r2, [r1, #8]
 8009d7c:	2700      	movs	r7, #0
 8009d7e:	6822      	ldr	r2, [r4, #0]
 8009d80:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009e10 <_scanf_chars+0xb0>
 8009d84:	06d1      	lsls	r1, r2, #27
 8009d86:	bf5f      	itttt	pl
 8009d88:	681a      	ldrpl	r2, [r3, #0]
 8009d8a:	1d11      	addpl	r1, r2, #4
 8009d8c:	6019      	strpl	r1, [r3, #0]
 8009d8e:	6816      	ldrpl	r6, [r2, #0]
 8009d90:	69a0      	ldr	r0, [r4, #24]
 8009d92:	b188      	cbz	r0, 8009db8 <_scanf_chars+0x58>
 8009d94:	2801      	cmp	r0, #1
 8009d96:	d107      	bne.n	8009da8 <_scanf_chars+0x48>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	781a      	ldrb	r2, [r3, #0]
 8009d9c:	6963      	ldr	r3, [r4, #20]
 8009d9e:	5c9b      	ldrb	r3, [r3, r2]
 8009da0:	b953      	cbnz	r3, 8009db8 <_scanf_chars+0x58>
 8009da2:	2f00      	cmp	r7, #0
 8009da4:	d031      	beq.n	8009e0a <_scanf_chars+0xaa>
 8009da6:	e022      	b.n	8009dee <_scanf_chars+0x8e>
 8009da8:	2802      	cmp	r0, #2
 8009daa:	d120      	bne.n	8009dee <_scanf_chars+0x8e>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009db4:	071b      	lsls	r3, r3, #28
 8009db6:	d41a      	bmi.n	8009dee <_scanf_chars+0x8e>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	3701      	adds	r7, #1
 8009dbc:	06da      	lsls	r2, r3, #27
 8009dbe:	bf5e      	ittt	pl
 8009dc0:	682b      	ldrpl	r3, [r5, #0]
 8009dc2:	781b      	ldrbpl	r3, [r3, #0]
 8009dc4:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009dc8:	682a      	ldr	r2, [r5, #0]
 8009dca:	686b      	ldr	r3, [r5, #4]
 8009dcc:	3201      	adds	r2, #1
 8009dce:	602a      	str	r2, [r5, #0]
 8009dd0:	68a2      	ldr	r2, [r4, #8]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	3a01      	subs	r2, #1
 8009dd6:	606b      	str	r3, [r5, #4]
 8009dd8:	60a2      	str	r2, [r4, #8]
 8009dda:	b142      	cbz	r2, 8009dee <_scanf_chars+0x8e>
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	dcd7      	bgt.n	8009d90 <_scanf_chars+0x30>
 8009de0:	4629      	mov	r1, r5
 8009de2:	4640      	mov	r0, r8
 8009de4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009de8:	4798      	blx	r3
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d0d0      	beq.n	8009d90 <_scanf_chars+0x30>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	f013 0310 	ands.w	r3, r3, #16
 8009df4:	d105      	bne.n	8009e02 <_scanf_chars+0xa2>
 8009df6:	68e2      	ldr	r2, [r4, #12]
 8009df8:	3201      	adds	r2, #1
 8009dfa:	60e2      	str	r2, [r4, #12]
 8009dfc:	69a2      	ldr	r2, [r4, #24]
 8009dfe:	b102      	cbz	r2, 8009e02 <_scanf_chars+0xa2>
 8009e00:	7033      	strb	r3, [r6, #0]
 8009e02:	2000      	movs	r0, #0
 8009e04:	6923      	ldr	r3, [r4, #16]
 8009e06:	443b      	add	r3, r7
 8009e08:	6123      	str	r3, [r4, #16]
 8009e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e0e:	bf00      	nop
 8009e10:	0800b599 	.word	0x0800b599

08009e14 <_scanf_i>:
 8009e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e18:	460c      	mov	r4, r1
 8009e1a:	4698      	mov	r8, r3
 8009e1c:	4b72      	ldr	r3, [pc, #456]	; (8009fe8 <_scanf_i+0x1d4>)
 8009e1e:	b087      	sub	sp, #28
 8009e20:	4682      	mov	sl, r0
 8009e22:	4616      	mov	r6, r2
 8009e24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e28:	ab03      	add	r3, sp, #12
 8009e2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009e2e:	4b6f      	ldr	r3, [pc, #444]	; (8009fec <_scanf_i+0x1d8>)
 8009e30:	69a1      	ldr	r1, [r4, #24]
 8009e32:	4a6f      	ldr	r2, [pc, #444]	; (8009ff0 <_scanf_i+0x1dc>)
 8009e34:	4627      	mov	r7, r4
 8009e36:	2903      	cmp	r1, #3
 8009e38:	bf18      	it	ne
 8009e3a:	461a      	movne	r2, r3
 8009e3c:	68a3      	ldr	r3, [r4, #8]
 8009e3e:	9201      	str	r2, [sp, #4]
 8009e40:	1e5a      	subs	r2, r3, #1
 8009e42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009e46:	bf81      	itttt	hi
 8009e48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009e4c:	eb03 0905 	addhi.w	r9, r3, r5
 8009e50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009e54:	60a3      	strhi	r3, [r4, #8]
 8009e56:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009e5a:	bf98      	it	ls
 8009e5c:	f04f 0900 	movls.w	r9, #0
 8009e60:	463d      	mov	r5, r7
 8009e62:	f04f 0b00 	mov.w	fp, #0
 8009e66:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009e6a:	6023      	str	r3, [r4, #0]
 8009e6c:	6831      	ldr	r1, [r6, #0]
 8009e6e:	ab03      	add	r3, sp, #12
 8009e70:	2202      	movs	r2, #2
 8009e72:	7809      	ldrb	r1, [r1, #0]
 8009e74:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009e78:	f7fd f972 	bl	8007160 <memchr>
 8009e7c:	b328      	cbz	r0, 8009eca <_scanf_i+0xb6>
 8009e7e:	f1bb 0f01 	cmp.w	fp, #1
 8009e82:	d159      	bne.n	8009f38 <_scanf_i+0x124>
 8009e84:	6862      	ldr	r2, [r4, #4]
 8009e86:	b92a      	cbnz	r2, 8009e94 <_scanf_i+0x80>
 8009e88:	2308      	movs	r3, #8
 8009e8a:	6822      	ldr	r2, [r4, #0]
 8009e8c:	6063      	str	r3, [r4, #4]
 8009e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e92:	6022      	str	r2, [r4, #0]
 8009e94:	6822      	ldr	r2, [r4, #0]
 8009e96:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009e9a:	6022      	str	r2, [r4, #0]
 8009e9c:	68a2      	ldr	r2, [r4, #8]
 8009e9e:	1e51      	subs	r1, r2, #1
 8009ea0:	60a1      	str	r1, [r4, #8]
 8009ea2:	b192      	cbz	r2, 8009eca <_scanf_i+0xb6>
 8009ea4:	6832      	ldr	r2, [r6, #0]
 8009ea6:	1c51      	adds	r1, r2, #1
 8009ea8:	6031      	str	r1, [r6, #0]
 8009eaa:	7812      	ldrb	r2, [r2, #0]
 8009eac:	f805 2b01 	strb.w	r2, [r5], #1
 8009eb0:	6872      	ldr	r2, [r6, #4]
 8009eb2:	3a01      	subs	r2, #1
 8009eb4:	2a00      	cmp	r2, #0
 8009eb6:	6072      	str	r2, [r6, #4]
 8009eb8:	dc07      	bgt.n	8009eca <_scanf_i+0xb6>
 8009eba:	4631      	mov	r1, r6
 8009ebc:	4650      	mov	r0, sl
 8009ebe:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009ec2:	4790      	blx	r2
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	f040 8085 	bne.w	8009fd4 <_scanf_i+0x1c0>
 8009eca:	f10b 0b01 	add.w	fp, fp, #1
 8009ece:	f1bb 0f03 	cmp.w	fp, #3
 8009ed2:	d1cb      	bne.n	8009e6c <_scanf_i+0x58>
 8009ed4:	6863      	ldr	r3, [r4, #4]
 8009ed6:	b90b      	cbnz	r3, 8009edc <_scanf_i+0xc8>
 8009ed8:	230a      	movs	r3, #10
 8009eda:	6063      	str	r3, [r4, #4]
 8009edc:	6863      	ldr	r3, [r4, #4]
 8009ede:	4945      	ldr	r1, [pc, #276]	; (8009ff4 <_scanf_i+0x1e0>)
 8009ee0:	6960      	ldr	r0, [r4, #20]
 8009ee2:	1ac9      	subs	r1, r1, r3
 8009ee4:	f000 f944 	bl	800a170 <__sccl>
 8009ee8:	f04f 0b00 	mov.w	fp, #0
 8009eec:	68a3      	ldr	r3, [r4, #8]
 8009eee:	6822      	ldr	r2, [r4, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d03d      	beq.n	8009f70 <_scanf_i+0x15c>
 8009ef4:	6831      	ldr	r1, [r6, #0]
 8009ef6:	6960      	ldr	r0, [r4, #20]
 8009ef8:	f891 c000 	ldrb.w	ip, [r1]
 8009efc:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d035      	beq.n	8009f70 <_scanf_i+0x15c>
 8009f04:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009f08:	d124      	bne.n	8009f54 <_scanf_i+0x140>
 8009f0a:	0510      	lsls	r0, r2, #20
 8009f0c:	d522      	bpl.n	8009f54 <_scanf_i+0x140>
 8009f0e:	f10b 0b01 	add.w	fp, fp, #1
 8009f12:	f1b9 0f00 	cmp.w	r9, #0
 8009f16:	d003      	beq.n	8009f20 <_scanf_i+0x10c>
 8009f18:	3301      	adds	r3, #1
 8009f1a:	f109 39ff 	add.w	r9, r9, #4294967295
 8009f1e:	60a3      	str	r3, [r4, #8]
 8009f20:	6873      	ldr	r3, [r6, #4]
 8009f22:	3b01      	subs	r3, #1
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	6073      	str	r3, [r6, #4]
 8009f28:	dd1b      	ble.n	8009f62 <_scanf_i+0x14e>
 8009f2a:	6833      	ldr	r3, [r6, #0]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	6033      	str	r3, [r6, #0]
 8009f30:	68a3      	ldr	r3, [r4, #8]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	60a3      	str	r3, [r4, #8]
 8009f36:	e7d9      	b.n	8009eec <_scanf_i+0xd8>
 8009f38:	f1bb 0f02 	cmp.w	fp, #2
 8009f3c:	d1ae      	bne.n	8009e9c <_scanf_i+0x88>
 8009f3e:	6822      	ldr	r2, [r4, #0]
 8009f40:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009f44:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009f48:	d1bf      	bne.n	8009eca <_scanf_i+0xb6>
 8009f4a:	2310      	movs	r3, #16
 8009f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f50:	6063      	str	r3, [r4, #4]
 8009f52:	e7a2      	b.n	8009e9a <_scanf_i+0x86>
 8009f54:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009f58:	6022      	str	r2, [r4, #0]
 8009f5a:	780b      	ldrb	r3, [r1, #0]
 8009f5c:	f805 3b01 	strb.w	r3, [r5], #1
 8009f60:	e7de      	b.n	8009f20 <_scanf_i+0x10c>
 8009f62:	4631      	mov	r1, r6
 8009f64:	4650      	mov	r0, sl
 8009f66:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009f6a:	4798      	blx	r3
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d0df      	beq.n	8009f30 <_scanf_i+0x11c>
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	05d9      	lsls	r1, r3, #23
 8009f74:	d50d      	bpl.n	8009f92 <_scanf_i+0x17e>
 8009f76:	42bd      	cmp	r5, r7
 8009f78:	d909      	bls.n	8009f8e <_scanf_i+0x17a>
 8009f7a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009f7e:	4632      	mov	r2, r6
 8009f80:	4650      	mov	r0, sl
 8009f82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f86:	f105 39ff 	add.w	r9, r5, #4294967295
 8009f8a:	4798      	blx	r3
 8009f8c:	464d      	mov	r5, r9
 8009f8e:	42bd      	cmp	r5, r7
 8009f90:	d028      	beq.n	8009fe4 <_scanf_i+0x1d0>
 8009f92:	6822      	ldr	r2, [r4, #0]
 8009f94:	f012 0210 	ands.w	r2, r2, #16
 8009f98:	d113      	bne.n	8009fc2 <_scanf_i+0x1ae>
 8009f9a:	702a      	strb	r2, [r5, #0]
 8009f9c:	4639      	mov	r1, r7
 8009f9e:	6863      	ldr	r3, [r4, #4]
 8009fa0:	4650      	mov	r0, sl
 8009fa2:	9e01      	ldr	r6, [sp, #4]
 8009fa4:	47b0      	blx	r6
 8009fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8009faa:	6821      	ldr	r1, [r4, #0]
 8009fac:	1d1a      	adds	r2, r3, #4
 8009fae:	f8c8 2000 	str.w	r2, [r8]
 8009fb2:	f011 0f20 	tst.w	r1, #32
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	d00f      	beq.n	8009fda <_scanf_i+0x1c6>
 8009fba:	6018      	str	r0, [r3, #0]
 8009fbc:	68e3      	ldr	r3, [r4, #12]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	60e3      	str	r3, [r4, #12]
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	6923      	ldr	r3, [r4, #16]
 8009fc6:	1bed      	subs	r5, r5, r7
 8009fc8:	445d      	add	r5, fp
 8009fca:	442b      	add	r3, r5
 8009fcc:	6123      	str	r3, [r4, #16]
 8009fce:	b007      	add	sp, #28
 8009fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd4:	f04f 0b00 	mov.w	fp, #0
 8009fd8:	e7ca      	b.n	8009f70 <_scanf_i+0x15c>
 8009fda:	07ca      	lsls	r2, r1, #31
 8009fdc:	bf4c      	ite	mi
 8009fde:	8018      	strhmi	r0, [r3, #0]
 8009fe0:	6018      	strpl	r0, [r3, #0]
 8009fe2:	e7eb      	b.n	8009fbc <_scanf_i+0x1a8>
 8009fe4:	2001      	movs	r0, #1
 8009fe6:	e7f2      	b.n	8009fce <_scanf_i+0x1ba>
 8009fe8:	0800b258 	.word	0x0800b258
 8009fec:	0800ab45 	.word	0x0800ab45
 8009ff0:	08009709 	.word	0x08009709
 8009ff4:	0800b6ba 	.word	0x0800b6ba

08009ff8 <__sflush_r>:
 8009ff8:	898a      	ldrh	r2, [r1, #12]
 8009ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	0710      	lsls	r0, r2, #28
 800a000:	460c      	mov	r4, r1
 800a002:	d457      	bmi.n	800a0b4 <__sflush_r+0xbc>
 800a004:	684b      	ldr	r3, [r1, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	dc04      	bgt.n	800a014 <__sflush_r+0x1c>
 800a00a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	dc01      	bgt.n	800a014 <__sflush_r+0x1c>
 800a010:	2000      	movs	r0, #0
 800a012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a016:	2e00      	cmp	r6, #0
 800a018:	d0fa      	beq.n	800a010 <__sflush_r+0x18>
 800a01a:	2300      	movs	r3, #0
 800a01c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a020:	682f      	ldr	r7, [r5, #0]
 800a022:	6a21      	ldr	r1, [r4, #32]
 800a024:	602b      	str	r3, [r5, #0]
 800a026:	d032      	beq.n	800a08e <__sflush_r+0x96>
 800a028:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	075a      	lsls	r2, r3, #29
 800a02e:	d505      	bpl.n	800a03c <__sflush_r+0x44>
 800a030:	6863      	ldr	r3, [r4, #4]
 800a032:	1ac0      	subs	r0, r0, r3
 800a034:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a036:	b10b      	cbz	r3, 800a03c <__sflush_r+0x44>
 800a038:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a03a:	1ac0      	subs	r0, r0, r3
 800a03c:	2300      	movs	r3, #0
 800a03e:	4602      	mov	r2, r0
 800a040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a042:	4628      	mov	r0, r5
 800a044:	6a21      	ldr	r1, [r4, #32]
 800a046:	47b0      	blx	r6
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	89a3      	ldrh	r3, [r4, #12]
 800a04c:	d106      	bne.n	800a05c <__sflush_r+0x64>
 800a04e:	6829      	ldr	r1, [r5, #0]
 800a050:	291d      	cmp	r1, #29
 800a052:	d82b      	bhi.n	800a0ac <__sflush_r+0xb4>
 800a054:	4a28      	ldr	r2, [pc, #160]	; (800a0f8 <__sflush_r+0x100>)
 800a056:	410a      	asrs	r2, r1
 800a058:	07d6      	lsls	r6, r2, #31
 800a05a:	d427      	bmi.n	800a0ac <__sflush_r+0xb4>
 800a05c:	2200      	movs	r2, #0
 800a05e:	6062      	str	r2, [r4, #4]
 800a060:	6922      	ldr	r2, [r4, #16]
 800a062:	04d9      	lsls	r1, r3, #19
 800a064:	6022      	str	r2, [r4, #0]
 800a066:	d504      	bpl.n	800a072 <__sflush_r+0x7a>
 800a068:	1c42      	adds	r2, r0, #1
 800a06a:	d101      	bne.n	800a070 <__sflush_r+0x78>
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	b903      	cbnz	r3, 800a072 <__sflush_r+0x7a>
 800a070:	6560      	str	r0, [r4, #84]	; 0x54
 800a072:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a074:	602f      	str	r7, [r5, #0]
 800a076:	2900      	cmp	r1, #0
 800a078:	d0ca      	beq.n	800a010 <__sflush_r+0x18>
 800a07a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a07e:	4299      	cmp	r1, r3
 800a080:	d002      	beq.n	800a088 <__sflush_r+0x90>
 800a082:	4628      	mov	r0, r5
 800a084:	f7fd ff0c 	bl	8007ea0 <_free_r>
 800a088:	2000      	movs	r0, #0
 800a08a:	6360      	str	r0, [r4, #52]	; 0x34
 800a08c:	e7c1      	b.n	800a012 <__sflush_r+0x1a>
 800a08e:	2301      	movs	r3, #1
 800a090:	4628      	mov	r0, r5
 800a092:	47b0      	blx	r6
 800a094:	1c41      	adds	r1, r0, #1
 800a096:	d1c8      	bne.n	800a02a <__sflush_r+0x32>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0c5      	beq.n	800a02a <__sflush_r+0x32>
 800a09e:	2b1d      	cmp	r3, #29
 800a0a0:	d001      	beq.n	800a0a6 <__sflush_r+0xae>
 800a0a2:	2b16      	cmp	r3, #22
 800a0a4:	d101      	bne.n	800a0aa <__sflush_r+0xb2>
 800a0a6:	602f      	str	r7, [r5, #0]
 800a0a8:	e7b2      	b.n	800a010 <__sflush_r+0x18>
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b0:	81a3      	strh	r3, [r4, #12]
 800a0b2:	e7ae      	b.n	800a012 <__sflush_r+0x1a>
 800a0b4:	690f      	ldr	r7, [r1, #16]
 800a0b6:	2f00      	cmp	r7, #0
 800a0b8:	d0aa      	beq.n	800a010 <__sflush_r+0x18>
 800a0ba:	0793      	lsls	r3, r2, #30
 800a0bc:	bf18      	it	ne
 800a0be:	2300      	movne	r3, #0
 800a0c0:	680e      	ldr	r6, [r1, #0]
 800a0c2:	bf08      	it	eq
 800a0c4:	694b      	ldreq	r3, [r1, #20]
 800a0c6:	1bf6      	subs	r6, r6, r7
 800a0c8:	600f      	str	r7, [r1, #0]
 800a0ca:	608b      	str	r3, [r1, #8]
 800a0cc:	2e00      	cmp	r6, #0
 800a0ce:	dd9f      	ble.n	800a010 <__sflush_r+0x18>
 800a0d0:	4633      	mov	r3, r6
 800a0d2:	463a      	mov	r2, r7
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	6a21      	ldr	r1, [r4, #32]
 800a0d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a0dc:	47e0      	blx	ip
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	dc06      	bgt.n	800a0f0 <__sflush_r+0xf8>
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ec:	81a3      	strh	r3, [r4, #12]
 800a0ee:	e790      	b.n	800a012 <__sflush_r+0x1a>
 800a0f0:	4407      	add	r7, r0
 800a0f2:	1a36      	subs	r6, r6, r0
 800a0f4:	e7ea      	b.n	800a0cc <__sflush_r+0xd4>
 800a0f6:	bf00      	nop
 800a0f8:	dfbffffe 	.word	0xdfbffffe

0800a0fc <_fflush_r>:
 800a0fc:	b538      	push	{r3, r4, r5, lr}
 800a0fe:	690b      	ldr	r3, [r1, #16]
 800a100:	4605      	mov	r5, r0
 800a102:	460c      	mov	r4, r1
 800a104:	b913      	cbnz	r3, 800a10c <_fflush_r+0x10>
 800a106:	2500      	movs	r5, #0
 800a108:	4628      	mov	r0, r5
 800a10a:	bd38      	pop	{r3, r4, r5, pc}
 800a10c:	b118      	cbz	r0, 800a116 <_fflush_r+0x1a>
 800a10e:	6a03      	ldr	r3, [r0, #32]
 800a110:	b90b      	cbnz	r3, 800a116 <_fflush_r+0x1a>
 800a112:	f7fc fe85 	bl	8006e20 <__sinit>
 800a116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0f3      	beq.n	800a106 <_fflush_r+0xa>
 800a11e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a120:	07d0      	lsls	r0, r2, #31
 800a122:	d404      	bmi.n	800a12e <_fflush_r+0x32>
 800a124:	0599      	lsls	r1, r3, #22
 800a126:	d402      	bmi.n	800a12e <_fflush_r+0x32>
 800a128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a12a:	f7fd f817 	bl	800715c <__retarget_lock_acquire_recursive>
 800a12e:	4628      	mov	r0, r5
 800a130:	4621      	mov	r1, r4
 800a132:	f7ff ff61 	bl	8009ff8 <__sflush_r>
 800a136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a138:	4605      	mov	r5, r0
 800a13a:	07da      	lsls	r2, r3, #31
 800a13c:	d4e4      	bmi.n	800a108 <_fflush_r+0xc>
 800a13e:	89a3      	ldrh	r3, [r4, #12]
 800a140:	059b      	lsls	r3, r3, #22
 800a142:	d4e1      	bmi.n	800a108 <_fflush_r+0xc>
 800a144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a146:	f7fd f80a 	bl	800715e <__retarget_lock_release_recursive>
 800a14a:	e7dd      	b.n	800a108 <_fflush_r+0xc>

0800a14c <fiprintf>:
 800a14c:	b40e      	push	{r1, r2, r3}
 800a14e:	b503      	push	{r0, r1, lr}
 800a150:	4601      	mov	r1, r0
 800a152:	ab03      	add	r3, sp, #12
 800a154:	4805      	ldr	r0, [pc, #20]	; (800a16c <fiprintf+0x20>)
 800a156:	f853 2b04 	ldr.w	r2, [r3], #4
 800a15a:	6800      	ldr	r0, [r0, #0]
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	f000 fd27 	bl	800abb0 <_vfiprintf_r>
 800a162:	b002      	add	sp, #8
 800a164:	f85d eb04 	ldr.w	lr, [sp], #4
 800a168:	b003      	add	sp, #12
 800a16a:	4770      	bx	lr
 800a16c:	2000008c 	.word	0x2000008c

0800a170 <__sccl>:
 800a170:	b570      	push	{r4, r5, r6, lr}
 800a172:	780b      	ldrb	r3, [r1, #0]
 800a174:	4604      	mov	r4, r0
 800a176:	2b5e      	cmp	r3, #94	; 0x5e
 800a178:	bf0b      	itete	eq
 800a17a:	784b      	ldrbeq	r3, [r1, #1]
 800a17c:	1c4a      	addne	r2, r1, #1
 800a17e:	1c8a      	addeq	r2, r1, #2
 800a180:	2100      	movne	r1, #0
 800a182:	bf08      	it	eq
 800a184:	2101      	moveq	r1, #1
 800a186:	3801      	subs	r0, #1
 800a188:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a18c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a190:	42a8      	cmp	r0, r5
 800a192:	d1fb      	bne.n	800a18c <__sccl+0x1c>
 800a194:	b90b      	cbnz	r3, 800a19a <__sccl+0x2a>
 800a196:	1e50      	subs	r0, r2, #1
 800a198:	bd70      	pop	{r4, r5, r6, pc}
 800a19a:	f081 0101 	eor.w	r1, r1, #1
 800a19e:	4610      	mov	r0, r2
 800a1a0:	54e1      	strb	r1, [r4, r3]
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a1a8:	2d2d      	cmp	r5, #45	; 0x2d
 800a1aa:	d005      	beq.n	800a1b8 <__sccl+0x48>
 800a1ac:	2d5d      	cmp	r5, #93	; 0x5d
 800a1ae:	d016      	beq.n	800a1de <__sccl+0x6e>
 800a1b0:	2d00      	cmp	r5, #0
 800a1b2:	d0f1      	beq.n	800a198 <__sccl+0x28>
 800a1b4:	462b      	mov	r3, r5
 800a1b6:	e7f2      	b.n	800a19e <__sccl+0x2e>
 800a1b8:	7846      	ldrb	r6, [r0, #1]
 800a1ba:	2e5d      	cmp	r6, #93	; 0x5d
 800a1bc:	d0fa      	beq.n	800a1b4 <__sccl+0x44>
 800a1be:	42b3      	cmp	r3, r6
 800a1c0:	dcf8      	bgt.n	800a1b4 <__sccl+0x44>
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	3002      	adds	r0, #2
 800a1c6:	3201      	adds	r2, #1
 800a1c8:	4296      	cmp	r6, r2
 800a1ca:	54a1      	strb	r1, [r4, r2]
 800a1cc:	dcfb      	bgt.n	800a1c6 <__sccl+0x56>
 800a1ce:	1af2      	subs	r2, r6, r3
 800a1d0:	3a01      	subs	r2, #1
 800a1d2:	42b3      	cmp	r3, r6
 800a1d4:	bfa8      	it	ge
 800a1d6:	2200      	movge	r2, #0
 800a1d8:	1c5d      	adds	r5, r3, #1
 800a1da:	18ab      	adds	r3, r5, r2
 800a1dc:	e7e1      	b.n	800a1a2 <__sccl+0x32>
 800a1de:	4610      	mov	r0, r2
 800a1e0:	e7da      	b.n	800a198 <__sccl+0x28>

0800a1e2 <__submore>:
 800a1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a1ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1ee:	4299      	cmp	r1, r3
 800a1f0:	d11b      	bne.n	800a22a <__submore+0x48>
 800a1f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a1f6:	f7fd fec3 	bl	8007f80 <_malloc_r>
 800a1fa:	b918      	cbnz	r0, 800a204 <__submore+0x22>
 800a1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a208:	63a3      	str	r3, [r4, #56]	; 0x38
 800a20a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a20e:	6360      	str	r0, [r4, #52]	; 0x34
 800a210:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a214:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a218:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a21c:	7043      	strb	r3, [r0, #1]
 800a21e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a222:	7003      	strb	r3, [r0, #0]
 800a224:	6020      	str	r0, [r4, #0]
 800a226:	2000      	movs	r0, #0
 800a228:	e7ea      	b.n	800a200 <__submore+0x1e>
 800a22a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a22c:	0077      	lsls	r7, r6, #1
 800a22e:	463a      	mov	r2, r7
 800a230:	f000 fbe7 	bl	800aa02 <_realloc_r>
 800a234:	4605      	mov	r5, r0
 800a236:	2800      	cmp	r0, #0
 800a238:	d0e0      	beq.n	800a1fc <__submore+0x1a>
 800a23a:	eb00 0806 	add.w	r8, r0, r6
 800a23e:	4601      	mov	r1, r0
 800a240:	4632      	mov	r2, r6
 800a242:	4640      	mov	r0, r8
 800a244:	f000 f842 	bl	800a2cc <memcpy>
 800a248:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a24c:	f8c4 8000 	str.w	r8, [r4]
 800a250:	e7e9      	b.n	800a226 <__submore+0x44>

0800a252 <memmove>:
 800a252:	4288      	cmp	r0, r1
 800a254:	b510      	push	{r4, lr}
 800a256:	eb01 0402 	add.w	r4, r1, r2
 800a25a:	d902      	bls.n	800a262 <memmove+0x10>
 800a25c:	4284      	cmp	r4, r0
 800a25e:	4623      	mov	r3, r4
 800a260:	d807      	bhi.n	800a272 <memmove+0x20>
 800a262:	1e43      	subs	r3, r0, #1
 800a264:	42a1      	cmp	r1, r4
 800a266:	d008      	beq.n	800a27a <memmove+0x28>
 800a268:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a26c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a270:	e7f8      	b.n	800a264 <memmove+0x12>
 800a272:	4601      	mov	r1, r0
 800a274:	4402      	add	r2, r0
 800a276:	428a      	cmp	r2, r1
 800a278:	d100      	bne.n	800a27c <memmove+0x2a>
 800a27a:	bd10      	pop	{r4, pc}
 800a27c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a280:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a284:	e7f7      	b.n	800a276 <memmove+0x24>

0800a286 <strncmp>:
 800a286:	b510      	push	{r4, lr}
 800a288:	b16a      	cbz	r2, 800a2a6 <strncmp+0x20>
 800a28a:	3901      	subs	r1, #1
 800a28c:	1884      	adds	r4, r0, r2
 800a28e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a292:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a296:	429a      	cmp	r2, r3
 800a298:	d103      	bne.n	800a2a2 <strncmp+0x1c>
 800a29a:	42a0      	cmp	r0, r4
 800a29c:	d001      	beq.n	800a2a2 <strncmp+0x1c>
 800a29e:	2a00      	cmp	r2, #0
 800a2a0:	d1f5      	bne.n	800a28e <strncmp+0x8>
 800a2a2:	1ad0      	subs	r0, r2, r3
 800a2a4:	bd10      	pop	{r4, pc}
 800a2a6:	4610      	mov	r0, r2
 800a2a8:	e7fc      	b.n	800a2a4 <strncmp+0x1e>
	...

0800a2ac <_sbrk_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	4d05      	ldr	r5, [pc, #20]	; (800a2c8 <_sbrk_r+0x1c>)
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	602b      	str	r3, [r5, #0]
 800a2b8:	f7f8 ff5e 	bl	8003178 <_sbrk>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_sbrk_r+0x1a>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_sbrk_r+0x1a>
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	20000600 	.word	0x20000600

0800a2cc <memcpy>:
 800a2cc:	440a      	add	r2, r1
 800a2ce:	4291      	cmp	r1, r2
 800a2d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2d4:	d100      	bne.n	800a2d8 <memcpy+0xc>
 800a2d6:	4770      	bx	lr
 800a2d8:	b510      	push	{r4, lr}
 800a2da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2de:	4291      	cmp	r1, r2
 800a2e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2e4:	d1f9      	bne.n	800a2da <memcpy+0xe>
 800a2e6:	bd10      	pop	{r4, pc}

0800a2e8 <nan>:
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	4901      	ldr	r1, [pc, #4]	; (800a2f0 <nan+0x8>)
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	7ff80000 	.word	0x7ff80000

0800a2f4 <abort>:
 800a2f4:	2006      	movs	r0, #6
 800a2f6:	b508      	push	{r3, lr}
 800a2f8:	f000 fe32 	bl	800af60 <raise>
 800a2fc:	2001      	movs	r0, #1
 800a2fe:	f7f8 fec8 	bl	8003092 <_exit>

0800a302 <_calloc_r>:
 800a302:	b570      	push	{r4, r5, r6, lr}
 800a304:	fba1 5402 	umull	r5, r4, r1, r2
 800a308:	b934      	cbnz	r4, 800a318 <_calloc_r+0x16>
 800a30a:	4629      	mov	r1, r5
 800a30c:	f7fd fe38 	bl	8007f80 <_malloc_r>
 800a310:	4606      	mov	r6, r0
 800a312:	b928      	cbnz	r0, 800a320 <_calloc_r+0x1e>
 800a314:	4630      	mov	r0, r6
 800a316:	bd70      	pop	{r4, r5, r6, pc}
 800a318:	220c      	movs	r2, #12
 800a31a:	2600      	movs	r6, #0
 800a31c:	6002      	str	r2, [r0, #0]
 800a31e:	e7f9      	b.n	800a314 <_calloc_r+0x12>
 800a320:	462a      	mov	r2, r5
 800a322:	4621      	mov	r1, r4
 800a324:	f7fc fe41 	bl	8006faa <memset>
 800a328:	e7f4      	b.n	800a314 <_calloc_r+0x12>

0800a32a <rshift>:
 800a32a:	6903      	ldr	r3, [r0, #16]
 800a32c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a330:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a334:	f100 0414 	add.w	r4, r0, #20
 800a338:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a33c:	dd46      	ble.n	800a3cc <rshift+0xa2>
 800a33e:	f011 011f 	ands.w	r1, r1, #31
 800a342:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a346:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a34a:	d10c      	bne.n	800a366 <rshift+0x3c>
 800a34c:	4629      	mov	r1, r5
 800a34e:	f100 0710 	add.w	r7, r0, #16
 800a352:	42b1      	cmp	r1, r6
 800a354:	d335      	bcc.n	800a3c2 <rshift+0x98>
 800a356:	1a9b      	subs	r3, r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	1eea      	subs	r2, r5, #3
 800a35c:	4296      	cmp	r6, r2
 800a35e:	bf38      	it	cc
 800a360:	2300      	movcc	r3, #0
 800a362:	4423      	add	r3, r4
 800a364:	e015      	b.n	800a392 <rshift+0x68>
 800a366:	46a1      	mov	r9, r4
 800a368:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a36c:	f1c1 0820 	rsb	r8, r1, #32
 800a370:	40cf      	lsrs	r7, r1
 800a372:	f105 0e04 	add.w	lr, r5, #4
 800a376:	4576      	cmp	r6, lr
 800a378:	46f4      	mov	ip, lr
 800a37a:	d816      	bhi.n	800a3aa <rshift+0x80>
 800a37c:	1a9a      	subs	r2, r3, r2
 800a37e:	0092      	lsls	r2, r2, #2
 800a380:	3a04      	subs	r2, #4
 800a382:	3501      	adds	r5, #1
 800a384:	42ae      	cmp	r6, r5
 800a386:	bf38      	it	cc
 800a388:	2200      	movcc	r2, #0
 800a38a:	18a3      	adds	r3, r4, r2
 800a38c:	50a7      	str	r7, [r4, r2]
 800a38e:	b107      	cbz	r7, 800a392 <rshift+0x68>
 800a390:	3304      	adds	r3, #4
 800a392:	42a3      	cmp	r3, r4
 800a394:	eba3 0204 	sub.w	r2, r3, r4
 800a398:	bf08      	it	eq
 800a39a:	2300      	moveq	r3, #0
 800a39c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3a0:	6102      	str	r2, [r0, #16]
 800a3a2:	bf08      	it	eq
 800a3a4:	6143      	streq	r3, [r0, #20]
 800a3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3aa:	f8dc c000 	ldr.w	ip, [ip]
 800a3ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800a3b2:	ea4c 0707 	orr.w	r7, ip, r7
 800a3b6:	f849 7b04 	str.w	r7, [r9], #4
 800a3ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3be:	40cf      	lsrs	r7, r1
 800a3c0:	e7d9      	b.n	800a376 <rshift+0x4c>
 800a3c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a3c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a3ca:	e7c2      	b.n	800a352 <rshift+0x28>
 800a3cc:	4623      	mov	r3, r4
 800a3ce:	e7e0      	b.n	800a392 <rshift+0x68>

0800a3d0 <__hexdig_fun>:
 800a3d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a3d4:	2b09      	cmp	r3, #9
 800a3d6:	d802      	bhi.n	800a3de <__hexdig_fun+0xe>
 800a3d8:	3820      	subs	r0, #32
 800a3da:	b2c0      	uxtb	r0, r0
 800a3dc:	4770      	bx	lr
 800a3de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a3e2:	2b05      	cmp	r3, #5
 800a3e4:	d801      	bhi.n	800a3ea <__hexdig_fun+0x1a>
 800a3e6:	3847      	subs	r0, #71	; 0x47
 800a3e8:	e7f7      	b.n	800a3da <__hexdig_fun+0xa>
 800a3ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a3ee:	2b05      	cmp	r3, #5
 800a3f0:	d801      	bhi.n	800a3f6 <__hexdig_fun+0x26>
 800a3f2:	3827      	subs	r0, #39	; 0x27
 800a3f4:	e7f1      	b.n	800a3da <__hexdig_fun+0xa>
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	4770      	bx	lr
	...

0800a3fc <__gethex>:
 800a3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a400:	4681      	mov	r9, r0
 800a402:	468a      	mov	sl, r1
 800a404:	4617      	mov	r7, r2
 800a406:	680a      	ldr	r2, [r1, #0]
 800a408:	b085      	sub	sp, #20
 800a40a:	f102 0b02 	add.w	fp, r2, #2
 800a40e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a412:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a416:	9302      	str	r3, [sp, #8]
 800a418:	32fe      	adds	r2, #254	; 0xfe
 800a41a:	eb02 030b 	add.w	r3, r2, fp
 800a41e:	46d8      	mov	r8, fp
 800a420:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a424:	9301      	str	r3, [sp, #4]
 800a426:	2830      	cmp	r0, #48	; 0x30
 800a428:	d0f7      	beq.n	800a41a <__gethex+0x1e>
 800a42a:	f7ff ffd1 	bl	800a3d0 <__hexdig_fun>
 800a42e:	4604      	mov	r4, r0
 800a430:	2800      	cmp	r0, #0
 800a432:	d138      	bne.n	800a4a6 <__gethex+0xaa>
 800a434:	2201      	movs	r2, #1
 800a436:	4640      	mov	r0, r8
 800a438:	49a7      	ldr	r1, [pc, #668]	; (800a6d8 <__gethex+0x2dc>)
 800a43a:	f7ff ff24 	bl	800a286 <strncmp>
 800a43e:	4606      	mov	r6, r0
 800a440:	2800      	cmp	r0, #0
 800a442:	d169      	bne.n	800a518 <__gethex+0x11c>
 800a444:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a448:	465d      	mov	r5, fp
 800a44a:	f7ff ffc1 	bl	800a3d0 <__hexdig_fun>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d064      	beq.n	800a51c <__gethex+0x120>
 800a452:	465a      	mov	r2, fp
 800a454:	7810      	ldrb	r0, [r2, #0]
 800a456:	4690      	mov	r8, r2
 800a458:	2830      	cmp	r0, #48	; 0x30
 800a45a:	f102 0201 	add.w	r2, r2, #1
 800a45e:	d0f9      	beq.n	800a454 <__gethex+0x58>
 800a460:	f7ff ffb6 	bl	800a3d0 <__hexdig_fun>
 800a464:	2301      	movs	r3, #1
 800a466:	fab0 f480 	clz	r4, r0
 800a46a:	465e      	mov	r6, fp
 800a46c:	0964      	lsrs	r4, r4, #5
 800a46e:	9301      	str	r3, [sp, #4]
 800a470:	4642      	mov	r2, r8
 800a472:	4615      	mov	r5, r2
 800a474:	7828      	ldrb	r0, [r5, #0]
 800a476:	3201      	adds	r2, #1
 800a478:	f7ff ffaa 	bl	800a3d0 <__hexdig_fun>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d1f8      	bne.n	800a472 <__gethex+0x76>
 800a480:	2201      	movs	r2, #1
 800a482:	4628      	mov	r0, r5
 800a484:	4994      	ldr	r1, [pc, #592]	; (800a6d8 <__gethex+0x2dc>)
 800a486:	f7ff fefe 	bl	800a286 <strncmp>
 800a48a:	b978      	cbnz	r0, 800a4ac <__gethex+0xb0>
 800a48c:	b946      	cbnz	r6, 800a4a0 <__gethex+0xa4>
 800a48e:	1c6e      	adds	r6, r5, #1
 800a490:	4632      	mov	r2, r6
 800a492:	4615      	mov	r5, r2
 800a494:	7828      	ldrb	r0, [r5, #0]
 800a496:	3201      	adds	r2, #1
 800a498:	f7ff ff9a 	bl	800a3d0 <__hexdig_fun>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d1f8      	bne.n	800a492 <__gethex+0x96>
 800a4a0:	1b73      	subs	r3, r6, r5
 800a4a2:	009e      	lsls	r6, r3, #2
 800a4a4:	e004      	b.n	800a4b0 <__gethex+0xb4>
 800a4a6:	2400      	movs	r4, #0
 800a4a8:	4626      	mov	r6, r4
 800a4aa:	e7e1      	b.n	800a470 <__gethex+0x74>
 800a4ac:	2e00      	cmp	r6, #0
 800a4ae:	d1f7      	bne.n	800a4a0 <__gethex+0xa4>
 800a4b0:	782b      	ldrb	r3, [r5, #0]
 800a4b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a4b6:	2b50      	cmp	r3, #80	; 0x50
 800a4b8:	d13d      	bne.n	800a536 <__gethex+0x13a>
 800a4ba:	786b      	ldrb	r3, [r5, #1]
 800a4bc:	2b2b      	cmp	r3, #43	; 0x2b
 800a4be:	d02f      	beq.n	800a520 <__gethex+0x124>
 800a4c0:	2b2d      	cmp	r3, #45	; 0x2d
 800a4c2:	d031      	beq.n	800a528 <__gethex+0x12c>
 800a4c4:	f04f 0b00 	mov.w	fp, #0
 800a4c8:	1c69      	adds	r1, r5, #1
 800a4ca:	7808      	ldrb	r0, [r1, #0]
 800a4cc:	f7ff ff80 	bl	800a3d0 <__hexdig_fun>
 800a4d0:	1e42      	subs	r2, r0, #1
 800a4d2:	b2d2      	uxtb	r2, r2
 800a4d4:	2a18      	cmp	r2, #24
 800a4d6:	d82e      	bhi.n	800a536 <__gethex+0x13a>
 800a4d8:	f1a0 0210 	sub.w	r2, r0, #16
 800a4dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4e0:	f7ff ff76 	bl	800a3d0 <__hexdig_fun>
 800a4e4:	f100 3cff 	add.w	ip, r0, #4294967295
 800a4e8:	fa5f fc8c 	uxtb.w	ip, ip
 800a4ec:	f1bc 0f18 	cmp.w	ip, #24
 800a4f0:	d91d      	bls.n	800a52e <__gethex+0x132>
 800a4f2:	f1bb 0f00 	cmp.w	fp, #0
 800a4f6:	d000      	beq.n	800a4fa <__gethex+0xfe>
 800a4f8:	4252      	negs	r2, r2
 800a4fa:	4416      	add	r6, r2
 800a4fc:	f8ca 1000 	str.w	r1, [sl]
 800a500:	b1dc      	cbz	r4, 800a53a <__gethex+0x13e>
 800a502:	9b01      	ldr	r3, [sp, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	bf14      	ite	ne
 800a508:	f04f 0800 	movne.w	r8, #0
 800a50c:	f04f 0806 	moveq.w	r8, #6
 800a510:	4640      	mov	r0, r8
 800a512:	b005      	add	sp, #20
 800a514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a518:	4645      	mov	r5, r8
 800a51a:	4626      	mov	r6, r4
 800a51c:	2401      	movs	r4, #1
 800a51e:	e7c7      	b.n	800a4b0 <__gethex+0xb4>
 800a520:	f04f 0b00 	mov.w	fp, #0
 800a524:	1ca9      	adds	r1, r5, #2
 800a526:	e7d0      	b.n	800a4ca <__gethex+0xce>
 800a528:	f04f 0b01 	mov.w	fp, #1
 800a52c:	e7fa      	b.n	800a524 <__gethex+0x128>
 800a52e:	230a      	movs	r3, #10
 800a530:	fb03 0002 	mla	r0, r3, r2, r0
 800a534:	e7d0      	b.n	800a4d8 <__gethex+0xdc>
 800a536:	4629      	mov	r1, r5
 800a538:	e7e0      	b.n	800a4fc <__gethex+0x100>
 800a53a:	4621      	mov	r1, r4
 800a53c:	eba5 0308 	sub.w	r3, r5, r8
 800a540:	3b01      	subs	r3, #1
 800a542:	2b07      	cmp	r3, #7
 800a544:	dc0a      	bgt.n	800a55c <__gethex+0x160>
 800a546:	4648      	mov	r0, r9
 800a548:	f7fd fda6 	bl	8008098 <_Balloc>
 800a54c:	4604      	mov	r4, r0
 800a54e:	b940      	cbnz	r0, 800a562 <__gethex+0x166>
 800a550:	4602      	mov	r2, r0
 800a552:	21e4      	movs	r1, #228	; 0xe4
 800a554:	4b61      	ldr	r3, [pc, #388]	; (800a6dc <__gethex+0x2e0>)
 800a556:	4862      	ldr	r0, [pc, #392]	; (800a6e0 <__gethex+0x2e4>)
 800a558:	f7fc fe14 	bl	8007184 <__assert_func>
 800a55c:	3101      	adds	r1, #1
 800a55e:	105b      	asrs	r3, r3, #1
 800a560:	e7ef      	b.n	800a542 <__gethex+0x146>
 800a562:	2300      	movs	r3, #0
 800a564:	469b      	mov	fp, r3
 800a566:	f100 0a14 	add.w	sl, r0, #20
 800a56a:	f8cd a004 	str.w	sl, [sp, #4]
 800a56e:	45a8      	cmp	r8, r5
 800a570:	d344      	bcc.n	800a5fc <__gethex+0x200>
 800a572:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a576:	4658      	mov	r0, fp
 800a578:	f848 bb04 	str.w	fp, [r8], #4
 800a57c:	eba8 080a 	sub.w	r8, r8, sl
 800a580:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a584:	6122      	str	r2, [r4, #16]
 800a586:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a58a:	f7fd fe77 	bl	800827c <__hi0bits>
 800a58e:	683d      	ldr	r5, [r7, #0]
 800a590:	eba8 0800 	sub.w	r8, r8, r0
 800a594:	45a8      	cmp	r8, r5
 800a596:	dd59      	ble.n	800a64c <__gethex+0x250>
 800a598:	eba8 0805 	sub.w	r8, r8, r5
 800a59c:	4641      	mov	r1, r8
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f7fe f9f5 	bl	800898e <__any_on>
 800a5a4:	4683      	mov	fp, r0
 800a5a6:	b1b8      	cbz	r0, 800a5d8 <__gethex+0x1dc>
 800a5a8:	f04f 0b01 	mov.w	fp, #1
 800a5ac:	f108 33ff 	add.w	r3, r8, #4294967295
 800a5b0:	1159      	asrs	r1, r3, #5
 800a5b2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a5b6:	f003 021f 	and.w	r2, r3, #31
 800a5ba:	fa0b f202 	lsl.w	r2, fp, r2
 800a5be:	420a      	tst	r2, r1
 800a5c0:	d00a      	beq.n	800a5d8 <__gethex+0x1dc>
 800a5c2:	455b      	cmp	r3, fp
 800a5c4:	dd06      	ble.n	800a5d4 <__gethex+0x1d8>
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f1a8 0102 	sub.w	r1, r8, #2
 800a5cc:	f7fe f9df 	bl	800898e <__any_on>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d138      	bne.n	800a646 <__gethex+0x24a>
 800a5d4:	f04f 0b02 	mov.w	fp, #2
 800a5d8:	4641      	mov	r1, r8
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f7ff fea5 	bl	800a32a <rshift>
 800a5e0:	4446      	add	r6, r8
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	42b3      	cmp	r3, r6
 800a5e6:	da41      	bge.n	800a66c <__gethex+0x270>
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	4648      	mov	r0, r9
 800a5ec:	f7fd fd94 	bl	8008118 <_Bfree>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5f4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	e789      	b.n	800a510 <__gethex+0x114>
 800a5fc:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a600:	2a2e      	cmp	r2, #46	; 0x2e
 800a602:	d014      	beq.n	800a62e <__gethex+0x232>
 800a604:	2b20      	cmp	r3, #32
 800a606:	d106      	bne.n	800a616 <__gethex+0x21a>
 800a608:	9b01      	ldr	r3, [sp, #4]
 800a60a:	f843 bb04 	str.w	fp, [r3], #4
 800a60e:	f04f 0b00 	mov.w	fp, #0
 800a612:	9301      	str	r3, [sp, #4]
 800a614:	465b      	mov	r3, fp
 800a616:	7828      	ldrb	r0, [r5, #0]
 800a618:	9303      	str	r3, [sp, #12]
 800a61a:	f7ff fed9 	bl	800a3d0 <__hexdig_fun>
 800a61e:	9b03      	ldr	r3, [sp, #12]
 800a620:	f000 000f 	and.w	r0, r0, #15
 800a624:	4098      	lsls	r0, r3
 800a626:	ea4b 0b00 	orr.w	fp, fp, r0
 800a62a:	3304      	adds	r3, #4
 800a62c:	e79f      	b.n	800a56e <__gethex+0x172>
 800a62e:	45a8      	cmp	r8, r5
 800a630:	d8e8      	bhi.n	800a604 <__gethex+0x208>
 800a632:	2201      	movs	r2, #1
 800a634:	4628      	mov	r0, r5
 800a636:	4928      	ldr	r1, [pc, #160]	; (800a6d8 <__gethex+0x2dc>)
 800a638:	9303      	str	r3, [sp, #12]
 800a63a:	f7ff fe24 	bl	800a286 <strncmp>
 800a63e:	9b03      	ldr	r3, [sp, #12]
 800a640:	2800      	cmp	r0, #0
 800a642:	d1df      	bne.n	800a604 <__gethex+0x208>
 800a644:	e793      	b.n	800a56e <__gethex+0x172>
 800a646:	f04f 0b03 	mov.w	fp, #3
 800a64a:	e7c5      	b.n	800a5d8 <__gethex+0x1dc>
 800a64c:	da0b      	bge.n	800a666 <__gethex+0x26a>
 800a64e:	eba5 0808 	sub.w	r8, r5, r8
 800a652:	4621      	mov	r1, r4
 800a654:	4642      	mov	r2, r8
 800a656:	4648      	mov	r0, r9
 800a658:	f7fd ff76 	bl	8008548 <__lshift>
 800a65c:	4604      	mov	r4, r0
 800a65e:	eba6 0608 	sub.w	r6, r6, r8
 800a662:	f100 0a14 	add.w	sl, r0, #20
 800a666:	f04f 0b00 	mov.w	fp, #0
 800a66a:	e7ba      	b.n	800a5e2 <__gethex+0x1e6>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	42b3      	cmp	r3, r6
 800a670:	dd74      	ble.n	800a75c <__gethex+0x360>
 800a672:	1b9e      	subs	r6, r3, r6
 800a674:	42b5      	cmp	r5, r6
 800a676:	dc35      	bgt.n	800a6e4 <__gethex+0x2e8>
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d023      	beq.n	800a6c6 <__gethex+0x2ca>
 800a67e:	2b03      	cmp	r3, #3
 800a680:	d025      	beq.n	800a6ce <__gethex+0x2d2>
 800a682:	2b01      	cmp	r3, #1
 800a684:	d115      	bne.n	800a6b2 <__gethex+0x2b6>
 800a686:	42b5      	cmp	r5, r6
 800a688:	d113      	bne.n	800a6b2 <__gethex+0x2b6>
 800a68a:	2d01      	cmp	r5, #1
 800a68c:	d10b      	bne.n	800a6a6 <__gethex+0x2aa>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	9a02      	ldr	r2, [sp, #8]
 800a692:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	2301      	movs	r3, #1
 800a69a:	6123      	str	r3, [r4, #16]
 800a69c:	f8ca 3000 	str.w	r3, [sl]
 800a6a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6a2:	601c      	str	r4, [r3, #0]
 800a6a4:	e734      	b.n	800a510 <__gethex+0x114>
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	1e69      	subs	r1, r5, #1
 800a6aa:	f7fe f970 	bl	800898e <__any_on>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d1ed      	bne.n	800a68e <__gethex+0x292>
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	4648      	mov	r0, r9
 800a6b6:	f7fd fd2f 	bl	8008118 <_Bfree>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6be:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a6c2:	6013      	str	r3, [r2, #0]
 800a6c4:	e724      	b.n	800a510 <__gethex+0x114>
 800a6c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1f2      	bne.n	800a6b2 <__gethex+0x2b6>
 800a6cc:	e7df      	b.n	800a68e <__gethex+0x292>
 800a6ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1dc      	bne.n	800a68e <__gethex+0x292>
 800a6d4:	e7ed      	b.n	800a6b2 <__gethex+0x2b6>
 800a6d6:	bf00      	nop
 800a6d8:	0800b544 	.word	0x0800b544
 800a6dc:	0800b3d7 	.word	0x0800b3d7
 800a6e0:	0800b6cd 	.word	0x0800b6cd
 800a6e4:	f106 38ff 	add.w	r8, r6, #4294967295
 800a6e8:	f1bb 0f00 	cmp.w	fp, #0
 800a6ec:	d133      	bne.n	800a756 <__gethex+0x35a>
 800a6ee:	f1b8 0f00 	cmp.w	r8, #0
 800a6f2:	d004      	beq.n	800a6fe <__gethex+0x302>
 800a6f4:	4641      	mov	r1, r8
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f7fe f949 	bl	800898e <__any_on>
 800a6fc:	4683      	mov	fp, r0
 800a6fe:	2301      	movs	r3, #1
 800a700:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a704:	f008 081f 	and.w	r8, r8, #31
 800a708:	fa03 f308 	lsl.w	r3, r3, r8
 800a70c:	f04f 0802 	mov.w	r8, #2
 800a710:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a714:	4631      	mov	r1, r6
 800a716:	4213      	tst	r3, r2
 800a718:	4620      	mov	r0, r4
 800a71a:	bf18      	it	ne
 800a71c:	f04b 0b02 	orrne.w	fp, fp, #2
 800a720:	1bad      	subs	r5, r5, r6
 800a722:	f7ff fe02 	bl	800a32a <rshift>
 800a726:	687e      	ldr	r6, [r7, #4]
 800a728:	f1bb 0f00 	cmp.w	fp, #0
 800a72c:	d04a      	beq.n	800a7c4 <__gethex+0x3c8>
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2b02      	cmp	r3, #2
 800a732:	d016      	beq.n	800a762 <__gethex+0x366>
 800a734:	2b03      	cmp	r3, #3
 800a736:	d018      	beq.n	800a76a <__gethex+0x36e>
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d109      	bne.n	800a750 <__gethex+0x354>
 800a73c:	f01b 0f02 	tst.w	fp, #2
 800a740:	d006      	beq.n	800a750 <__gethex+0x354>
 800a742:	f8da 3000 	ldr.w	r3, [sl]
 800a746:	ea4b 0b03 	orr.w	fp, fp, r3
 800a74a:	f01b 0f01 	tst.w	fp, #1
 800a74e:	d10f      	bne.n	800a770 <__gethex+0x374>
 800a750:	f048 0810 	orr.w	r8, r8, #16
 800a754:	e036      	b.n	800a7c4 <__gethex+0x3c8>
 800a756:	f04f 0b01 	mov.w	fp, #1
 800a75a:	e7d0      	b.n	800a6fe <__gethex+0x302>
 800a75c:	f04f 0801 	mov.w	r8, #1
 800a760:	e7e2      	b.n	800a728 <__gethex+0x32c>
 800a762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a764:	f1c3 0301 	rsb	r3, r3, #1
 800a768:	930f      	str	r3, [sp, #60]	; 0x3c
 800a76a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0ef      	beq.n	800a750 <__gethex+0x354>
 800a770:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a774:	f104 0214 	add.w	r2, r4, #20
 800a778:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a77c:	9301      	str	r3, [sp, #4]
 800a77e:	2300      	movs	r3, #0
 800a780:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a784:	4694      	mov	ip, r2
 800a786:	f852 1b04 	ldr.w	r1, [r2], #4
 800a78a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a78e:	d01e      	beq.n	800a7ce <__gethex+0x3d2>
 800a790:	3101      	adds	r1, #1
 800a792:	f8cc 1000 	str.w	r1, [ip]
 800a796:	f1b8 0f02 	cmp.w	r8, #2
 800a79a:	f104 0214 	add.w	r2, r4, #20
 800a79e:	d13d      	bne.n	800a81c <__gethex+0x420>
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	42ab      	cmp	r3, r5
 800a7a6:	d10b      	bne.n	800a7c0 <__gethex+0x3c4>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	1169      	asrs	r1, r5, #5
 800a7ac:	f005 051f 	and.w	r5, r5, #31
 800a7b0:	fa03 f505 	lsl.w	r5, r3, r5
 800a7b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7b8:	421d      	tst	r5, r3
 800a7ba:	bf18      	it	ne
 800a7bc:	f04f 0801 	movne.w	r8, #1
 800a7c0:	f048 0820 	orr.w	r8, r8, #32
 800a7c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7c6:	601c      	str	r4, [r3, #0]
 800a7c8:	9b02      	ldr	r3, [sp, #8]
 800a7ca:	601e      	str	r6, [r3, #0]
 800a7cc:	e6a0      	b.n	800a510 <__gethex+0x114>
 800a7ce:	4290      	cmp	r0, r2
 800a7d0:	f842 3c04 	str.w	r3, [r2, #-4]
 800a7d4:	d8d6      	bhi.n	800a784 <__gethex+0x388>
 800a7d6:	68a2      	ldr	r2, [r4, #8]
 800a7d8:	4593      	cmp	fp, r2
 800a7da:	db17      	blt.n	800a80c <__gethex+0x410>
 800a7dc:	6861      	ldr	r1, [r4, #4]
 800a7de:	4648      	mov	r0, r9
 800a7e0:	3101      	adds	r1, #1
 800a7e2:	f7fd fc59 	bl	8008098 <_Balloc>
 800a7e6:	4682      	mov	sl, r0
 800a7e8:	b918      	cbnz	r0, 800a7f2 <__gethex+0x3f6>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	2184      	movs	r1, #132	; 0x84
 800a7ee:	4b1a      	ldr	r3, [pc, #104]	; (800a858 <__gethex+0x45c>)
 800a7f0:	e6b1      	b.n	800a556 <__gethex+0x15a>
 800a7f2:	6922      	ldr	r2, [r4, #16]
 800a7f4:	f104 010c 	add.w	r1, r4, #12
 800a7f8:	3202      	adds	r2, #2
 800a7fa:	0092      	lsls	r2, r2, #2
 800a7fc:	300c      	adds	r0, #12
 800a7fe:	f7ff fd65 	bl	800a2cc <memcpy>
 800a802:	4621      	mov	r1, r4
 800a804:	4648      	mov	r0, r9
 800a806:	f7fd fc87 	bl	8008118 <_Bfree>
 800a80a:	4654      	mov	r4, sl
 800a80c:	6922      	ldr	r2, [r4, #16]
 800a80e:	1c51      	adds	r1, r2, #1
 800a810:	6121      	str	r1, [r4, #16]
 800a812:	2101      	movs	r1, #1
 800a814:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a818:	6151      	str	r1, [r2, #20]
 800a81a:	e7bc      	b.n	800a796 <__gethex+0x39a>
 800a81c:	6921      	ldr	r1, [r4, #16]
 800a81e:	4559      	cmp	r1, fp
 800a820:	dd0b      	ble.n	800a83a <__gethex+0x43e>
 800a822:	2101      	movs	r1, #1
 800a824:	4620      	mov	r0, r4
 800a826:	f7ff fd80 	bl	800a32a <rshift>
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	3601      	adds	r6, #1
 800a82e:	42b3      	cmp	r3, r6
 800a830:	f6ff aeda 	blt.w	800a5e8 <__gethex+0x1ec>
 800a834:	f04f 0801 	mov.w	r8, #1
 800a838:	e7c2      	b.n	800a7c0 <__gethex+0x3c4>
 800a83a:	f015 051f 	ands.w	r5, r5, #31
 800a83e:	d0f9      	beq.n	800a834 <__gethex+0x438>
 800a840:	9b01      	ldr	r3, [sp, #4]
 800a842:	f1c5 0520 	rsb	r5, r5, #32
 800a846:	441a      	add	r2, r3
 800a848:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a84c:	f7fd fd16 	bl	800827c <__hi0bits>
 800a850:	42a8      	cmp	r0, r5
 800a852:	dbe6      	blt.n	800a822 <__gethex+0x426>
 800a854:	e7ee      	b.n	800a834 <__gethex+0x438>
 800a856:	bf00      	nop
 800a858:	0800b3d7 	.word	0x0800b3d7

0800a85c <L_shift>:
 800a85c:	f1c2 0208 	rsb	r2, r2, #8
 800a860:	0092      	lsls	r2, r2, #2
 800a862:	b570      	push	{r4, r5, r6, lr}
 800a864:	f1c2 0620 	rsb	r6, r2, #32
 800a868:	6843      	ldr	r3, [r0, #4]
 800a86a:	6804      	ldr	r4, [r0, #0]
 800a86c:	fa03 f506 	lsl.w	r5, r3, r6
 800a870:	432c      	orrs	r4, r5
 800a872:	40d3      	lsrs	r3, r2
 800a874:	6004      	str	r4, [r0, #0]
 800a876:	f840 3f04 	str.w	r3, [r0, #4]!
 800a87a:	4288      	cmp	r0, r1
 800a87c:	d3f4      	bcc.n	800a868 <L_shift+0xc>
 800a87e:	bd70      	pop	{r4, r5, r6, pc}

0800a880 <__match>:
 800a880:	b530      	push	{r4, r5, lr}
 800a882:	6803      	ldr	r3, [r0, #0]
 800a884:	3301      	adds	r3, #1
 800a886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a88a:	b914      	cbnz	r4, 800a892 <__match+0x12>
 800a88c:	6003      	str	r3, [r0, #0]
 800a88e:	2001      	movs	r0, #1
 800a890:	bd30      	pop	{r4, r5, pc}
 800a892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a896:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a89a:	2d19      	cmp	r5, #25
 800a89c:	bf98      	it	ls
 800a89e:	3220      	addls	r2, #32
 800a8a0:	42a2      	cmp	r2, r4
 800a8a2:	d0f0      	beq.n	800a886 <__match+0x6>
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	e7f3      	b.n	800a890 <__match+0x10>

0800a8a8 <__hexnan>:
 800a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	2500      	movs	r5, #0
 800a8ae:	680b      	ldr	r3, [r1, #0]
 800a8b0:	4682      	mov	sl, r0
 800a8b2:	115e      	asrs	r6, r3, #5
 800a8b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8b8:	f013 031f 	ands.w	r3, r3, #31
 800a8bc:	bf18      	it	ne
 800a8be:	3604      	addne	r6, #4
 800a8c0:	1f37      	subs	r7, r6, #4
 800a8c2:	4690      	mov	r8, r2
 800a8c4:	46b9      	mov	r9, r7
 800a8c6:	463c      	mov	r4, r7
 800a8c8:	46ab      	mov	fp, r5
 800a8ca:	b087      	sub	sp, #28
 800a8cc:	6801      	ldr	r1, [r0, #0]
 800a8ce:	9301      	str	r3, [sp, #4]
 800a8d0:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8d4:	9502      	str	r5, [sp, #8]
 800a8d6:	784a      	ldrb	r2, [r1, #1]
 800a8d8:	1c4b      	adds	r3, r1, #1
 800a8da:	9303      	str	r3, [sp, #12]
 800a8dc:	b342      	cbz	r2, 800a930 <__hexnan+0x88>
 800a8de:	4610      	mov	r0, r2
 800a8e0:	9105      	str	r1, [sp, #20]
 800a8e2:	9204      	str	r2, [sp, #16]
 800a8e4:	f7ff fd74 	bl	800a3d0 <__hexdig_fun>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d14f      	bne.n	800a98c <__hexnan+0xe4>
 800a8ec:	9a04      	ldr	r2, [sp, #16]
 800a8ee:	9905      	ldr	r1, [sp, #20]
 800a8f0:	2a20      	cmp	r2, #32
 800a8f2:	d818      	bhi.n	800a926 <__hexnan+0x7e>
 800a8f4:	9b02      	ldr	r3, [sp, #8]
 800a8f6:	459b      	cmp	fp, r3
 800a8f8:	dd13      	ble.n	800a922 <__hexnan+0x7a>
 800a8fa:	454c      	cmp	r4, r9
 800a8fc:	d206      	bcs.n	800a90c <__hexnan+0x64>
 800a8fe:	2d07      	cmp	r5, #7
 800a900:	dc04      	bgt.n	800a90c <__hexnan+0x64>
 800a902:	462a      	mov	r2, r5
 800a904:	4649      	mov	r1, r9
 800a906:	4620      	mov	r0, r4
 800a908:	f7ff ffa8 	bl	800a85c <L_shift>
 800a90c:	4544      	cmp	r4, r8
 800a90e:	d950      	bls.n	800a9b2 <__hexnan+0x10a>
 800a910:	2300      	movs	r3, #0
 800a912:	f1a4 0904 	sub.w	r9, r4, #4
 800a916:	f844 3c04 	str.w	r3, [r4, #-4]
 800a91a:	461d      	mov	r5, r3
 800a91c:	464c      	mov	r4, r9
 800a91e:	f8cd b008 	str.w	fp, [sp, #8]
 800a922:	9903      	ldr	r1, [sp, #12]
 800a924:	e7d7      	b.n	800a8d6 <__hexnan+0x2e>
 800a926:	2a29      	cmp	r2, #41	; 0x29
 800a928:	d155      	bne.n	800a9d6 <__hexnan+0x12e>
 800a92a:	3102      	adds	r1, #2
 800a92c:	f8ca 1000 	str.w	r1, [sl]
 800a930:	f1bb 0f00 	cmp.w	fp, #0
 800a934:	d04f      	beq.n	800a9d6 <__hexnan+0x12e>
 800a936:	454c      	cmp	r4, r9
 800a938:	d206      	bcs.n	800a948 <__hexnan+0xa0>
 800a93a:	2d07      	cmp	r5, #7
 800a93c:	dc04      	bgt.n	800a948 <__hexnan+0xa0>
 800a93e:	462a      	mov	r2, r5
 800a940:	4649      	mov	r1, r9
 800a942:	4620      	mov	r0, r4
 800a944:	f7ff ff8a 	bl	800a85c <L_shift>
 800a948:	4544      	cmp	r4, r8
 800a94a:	d934      	bls.n	800a9b6 <__hexnan+0x10e>
 800a94c:	4623      	mov	r3, r4
 800a94e:	f1a8 0204 	sub.w	r2, r8, #4
 800a952:	f853 1b04 	ldr.w	r1, [r3], #4
 800a956:	429f      	cmp	r7, r3
 800a958:	f842 1f04 	str.w	r1, [r2, #4]!
 800a95c:	d2f9      	bcs.n	800a952 <__hexnan+0xaa>
 800a95e:	1b3b      	subs	r3, r7, r4
 800a960:	f023 0303 	bic.w	r3, r3, #3
 800a964:	3304      	adds	r3, #4
 800a966:	3e03      	subs	r6, #3
 800a968:	3401      	adds	r4, #1
 800a96a:	42a6      	cmp	r6, r4
 800a96c:	bf38      	it	cc
 800a96e:	2304      	movcc	r3, #4
 800a970:	2200      	movs	r2, #0
 800a972:	4443      	add	r3, r8
 800a974:	f843 2b04 	str.w	r2, [r3], #4
 800a978:	429f      	cmp	r7, r3
 800a97a:	d2fb      	bcs.n	800a974 <__hexnan+0xcc>
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	b91b      	cbnz	r3, 800a988 <__hexnan+0xe0>
 800a980:	4547      	cmp	r7, r8
 800a982:	d126      	bne.n	800a9d2 <__hexnan+0x12a>
 800a984:	2301      	movs	r3, #1
 800a986:	603b      	str	r3, [r7, #0]
 800a988:	2005      	movs	r0, #5
 800a98a:	e025      	b.n	800a9d8 <__hexnan+0x130>
 800a98c:	3501      	adds	r5, #1
 800a98e:	2d08      	cmp	r5, #8
 800a990:	f10b 0b01 	add.w	fp, fp, #1
 800a994:	dd06      	ble.n	800a9a4 <__hexnan+0xfc>
 800a996:	4544      	cmp	r4, r8
 800a998:	d9c3      	bls.n	800a922 <__hexnan+0x7a>
 800a99a:	2300      	movs	r3, #0
 800a99c:	2501      	movs	r5, #1
 800a99e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9a2:	3c04      	subs	r4, #4
 800a9a4:	6822      	ldr	r2, [r4, #0]
 800a9a6:	f000 000f 	and.w	r0, r0, #15
 800a9aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a9ae:	6020      	str	r0, [r4, #0]
 800a9b0:	e7b7      	b.n	800a922 <__hexnan+0x7a>
 800a9b2:	2508      	movs	r5, #8
 800a9b4:	e7b5      	b.n	800a922 <__hexnan+0x7a>
 800a9b6:	9b01      	ldr	r3, [sp, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d0df      	beq.n	800a97c <__hexnan+0xd4>
 800a9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c0:	f1c3 0320 	rsb	r3, r3, #32
 800a9c4:	40da      	lsrs	r2, r3
 800a9c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	f846 3c04 	str.w	r3, [r6, #-4]
 800a9d0:	e7d4      	b.n	800a97c <__hexnan+0xd4>
 800a9d2:	3f04      	subs	r7, #4
 800a9d4:	e7d2      	b.n	800a97c <__hexnan+0xd4>
 800a9d6:	2004      	movs	r0, #4
 800a9d8:	b007      	add	sp, #28
 800a9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9de <__ascii_mbtowc>:
 800a9de:	b082      	sub	sp, #8
 800a9e0:	b901      	cbnz	r1, 800a9e4 <__ascii_mbtowc+0x6>
 800a9e2:	a901      	add	r1, sp, #4
 800a9e4:	b142      	cbz	r2, 800a9f8 <__ascii_mbtowc+0x1a>
 800a9e6:	b14b      	cbz	r3, 800a9fc <__ascii_mbtowc+0x1e>
 800a9e8:	7813      	ldrb	r3, [r2, #0]
 800a9ea:	600b      	str	r3, [r1, #0]
 800a9ec:	7812      	ldrb	r2, [r2, #0]
 800a9ee:	1e10      	subs	r0, r2, #0
 800a9f0:	bf18      	it	ne
 800a9f2:	2001      	movne	r0, #1
 800a9f4:	b002      	add	sp, #8
 800a9f6:	4770      	bx	lr
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	e7fb      	b.n	800a9f4 <__ascii_mbtowc+0x16>
 800a9fc:	f06f 0001 	mvn.w	r0, #1
 800aa00:	e7f8      	b.n	800a9f4 <__ascii_mbtowc+0x16>

0800aa02 <_realloc_r>:
 800aa02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa06:	4680      	mov	r8, r0
 800aa08:	4614      	mov	r4, r2
 800aa0a:	460e      	mov	r6, r1
 800aa0c:	b921      	cbnz	r1, 800aa18 <_realloc_r+0x16>
 800aa0e:	4611      	mov	r1, r2
 800aa10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa14:	f7fd bab4 	b.w	8007f80 <_malloc_r>
 800aa18:	b92a      	cbnz	r2, 800aa26 <_realloc_r+0x24>
 800aa1a:	f7fd fa41 	bl	8007ea0 <_free_r>
 800aa1e:	4625      	mov	r5, r4
 800aa20:	4628      	mov	r0, r5
 800aa22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa26:	f000 fab7 	bl	800af98 <_malloc_usable_size_r>
 800aa2a:	4284      	cmp	r4, r0
 800aa2c:	4607      	mov	r7, r0
 800aa2e:	d802      	bhi.n	800aa36 <_realloc_r+0x34>
 800aa30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa34:	d812      	bhi.n	800aa5c <_realloc_r+0x5a>
 800aa36:	4621      	mov	r1, r4
 800aa38:	4640      	mov	r0, r8
 800aa3a:	f7fd faa1 	bl	8007f80 <_malloc_r>
 800aa3e:	4605      	mov	r5, r0
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d0ed      	beq.n	800aa20 <_realloc_r+0x1e>
 800aa44:	42bc      	cmp	r4, r7
 800aa46:	4622      	mov	r2, r4
 800aa48:	4631      	mov	r1, r6
 800aa4a:	bf28      	it	cs
 800aa4c:	463a      	movcs	r2, r7
 800aa4e:	f7ff fc3d 	bl	800a2cc <memcpy>
 800aa52:	4631      	mov	r1, r6
 800aa54:	4640      	mov	r0, r8
 800aa56:	f7fd fa23 	bl	8007ea0 <_free_r>
 800aa5a:	e7e1      	b.n	800aa20 <_realloc_r+0x1e>
 800aa5c:	4635      	mov	r5, r6
 800aa5e:	e7df      	b.n	800aa20 <_realloc_r+0x1e>

0800aa60 <_strtoul_l.constprop.0>:
 800aa60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa64:	4686      	mov	lr, r0
 800aa66:	460d      	mov	r5, r1
 800aa68:	4f35      	ldr	r7, [pc, #212]	; (800ab40 <_strtoul_l.constprop.0+0xe0>)
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa70:	5d3e      	ldrb	r6, [r7, r4]
 800aa72:	f016 0608 	ands.w	r6, r6, #8
 800aa76:	d1f8      	bne.n	800aa6a <_strtoul_l.constprop.0+0xa>
 800aa78:	2c2d      	cmp	r4, #45	; 0x2d
 800aa7a:	d130      	bne.n	800aade <_strtoul_l.constprop.0+0x7e>
 800aa7c:	2601      	movs	r6, #1
 800aa7e:	782c      	ldrb	r4, [r5, #0]
 800aa80:	1c85      	adds	r5, r0, #2
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d057      	beq.n	800ab36 <_strtoul_l.constprop.0+0xd6>
 800aa86:	2b10      	cmp	r3, #16
 800aa88:	d109      	bne.n	800aa9e <_strtoul_l.constprop.0+0x3e>
 800aa8a:	2c30      	cmp	r4, #48	; 0x30
 800aa8c:	d107      	bne.n	800aa9e <_strtoul_l.constprop.0+0x3e>
 800aa8e:	7828      	ldrb	r0, [r5, #0]
 800aa90:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aa94:	2858      	cmp	r0, #88	; 0x58
 800aa96:	d149      	bne.n	800ab2c <_strtoul_l.constprop.0+0xcc>
 800aa98:	2310      	movs	r3, #16
 800aa9a:	786c      	ldrb	r4, [r5, #1]
 800aa9c:	3502      	adds	r5, #2
 800aa9e:	f04f 38ff 	mov.w	r8, #4294967295
 800aaa2:	fbb8 f8f3 	udiv	r8, r8, r3
 800aaa6:	2700      	movs	r7, #0
 800aaa8:	fb03 f908 	mul.w	r9, r3, r8
 800aaac:	4638      	mov	r0, r7
 800aaae:	ea6f 0909 	mvn.w	r9, r9
 800aab2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aab6:	f1bc 0f09 	cmp.w	ip, #9
 800aaba:	d815      	bhi.n	800aae8 <_strtoul_l.constprop.0+0x88>
 800aabc:	4664      	mov	r4, ip
 800aabe:	42a3      	cmp	r3, r4
 800aac0:	dd23      	ble.n	800ab0a <_strtoul_l.constprop.0+0xaa>
 800aac2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800aac6:	d007      	beq.n	800aad8 <_strtoul_l.constprop.0+0x78>
 800aac8:	4580      	cmp	r8, r0
 800aaca:	d31b      	bcc.n	800ab04 <_strtoul_l.constprop.0+0xa4>
 800aacc:	d101      	bne.n	800aad2 <_strtoul_l.constprop.0+0x72>
 800aace:	45a1      	cmp	r9, r4
 800aad0:	db18      	blt.n	800ab04 <_strtoul_l.constprop.0+0xa4>
 800aad2:	2701      	movs	r7, #1
 800aad4:	fb00 4003 	mla	r0, r0, r3, r4
 800aad8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aadc:	e7e9      	b.n	800aab2 <_strtoul_l.constprop.0+0x52>
 800aade:	2c2b      	cmp	r4, #43	; 0x2b
 800aae0:	bf04      	itt	eq
 800aae2:	782c      	ldrbeq	r4, [r5, #0]
 800aae4:	1c85      	addeq	r5, r0, #2
 800aae6:	e7cc      	b.n	800aa82 <_strtoul_l.constprop.0+0x22>
 800aae8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aaec:	f1bc 0f19 	cmp.w	ip, #25
 800aaf0:	d801      	bhi.n	800aaf6 <_strtoul_l.constprop.0+0x96>
 800aaf2:	3c37      	subs	r4, #55	; 0x37
 800aaf4:	e7e3      	b.n	800aabe <_strtoul_l.constprop.0+0x5e>
 800aaf6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aafa:	f1bc 0f19 	cmp.w	ip, #25
 800aafe:	d804      	bhi.n	800ab0a <_strtoul_l.constprop.0+0xaa>
 800ab00:	3c57      	subs	r4, #87	; 0x57
 800ab02:	e7dc      	b.n	800aabe <_strtoul_l.constprop.0+0x5e>
 800ab04:	f04f 37ff 	mov.w	r7, #4294967295
 800ab08:	e7e6      	b.n	800aad8 <_strtoul_l.constprop.0+0x78>
 800ab0a:	1c7b      	adds	r3, r7, #1
 800ab0c:	d106      	bne.n	800ab1c <_strtoul_l.constprop.0+0xbc>
 800ab0e:	2322      	movs	r3, #34	; 0x22
 800ab10:	4638      	mov	r0, r7
 800ab12:	f8ce 3000 	str.w	r3, [lr]
 800ab16:	b932      	cbnz	r2, 800ab26 <_strtoul_l.constprop.0+0xc6>
 800ab18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab1c:	b106      	cbz	r6, 800ab20 <_strtoul_l.constprop.0+0xc0>
 800ab1e:	4240      	negs	r0, r0
 800ab20:	2a00      	cmp	r2, #0
 800ab22:	d0f9      	beq.n	800ab18 <_strtoul_l.constprop.0+0xb8>
 800ab24:	b107      	cbz	r7, 800ab28 <_strtoul_l.constprop.0+0xc8>
 800ab26:	1e69      	subs	r1, r5, #1
 800ab28:	6011      	str	r1, [r2, #0]
 800ab2a:	e7f5      	b.n	800ab18 <_strtoul_l.constprop.0+0xb8>
 800ab2c:	2430      	movs	r4, #48	; 0x30
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1b5      	bne.n	800aa9e <_strtoul_l.constprop.0+0x3e>
 800ab32:	2308      	movs	r3, #8
 800ab34:	e7b3      	b.n	800aa9e <_strtoul_l.constprop.0+0x3e>
 800ab36:	2c30      	cmp	r4, #48	; 0x30
 800ab38:	d0a9      	beq.n	800aa8e <_strtoul_l.constprop.0+0x2e>
 800ab3a:	230a      	movs	r3, #10
 800ab3c:	e7af      	b.n	800aa9e <_strtoul_l.constprop.0+0x3e>
 800ab3e:	bf00      	nop
 800ab40:	0800b599 	.word	0x0800b599

0800ab44 <_strtoul_r>:
 800ab44:	f7ff bf8c 	b.w	800aa60 <_strtoul_l.constprop.0>

0800ab48 <__ascii_wctomb>:
 800ab48:	4603      	mov	r3, r0
 800ab4a:	4608      	mov	r0, r1
 800ab4c:	b141      	cbz	r1, 800ab60 <__ascii_wctomb+0x18>
 800ab4e:	2aff      	cmp	r2, #255	; 0xff
 800ab50:	d904      	bls.n	800ab5c <__ascii_wctomb+0x14>
 800ab52:	228a      	movs	r2, #138	; 0x8a
 800ab54:	f04f 30ff 	mov.w	r0, #4294967295
 800ab58:	601a      	str	r2, [r3, #0]
 800ab5a:	4770      	bx	lr
 800ab5c:	2001      	movs	r0, #1
 800ab5e:	700a      	strb	r2, [r1, #0]
 800ab60:	4770      	bx	lr

0800ab62 <__sfputc_r>:
 800ab62:	6893      	ldr	r3, [r2, #8]
 800ab64:	b410      	push	{r4}
 800ab66:	3b01      	subs	r3, #1
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	6093      	str	r3, [r2, #8]
 800ab6c:	da07      	bge.n	800ab7e <__sfputc_r+0x1c>
 800ab6e:	6994      	ldr	r4, [r2, #24]
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	db01      	blt.n	800ab78 <__sfputc_r+0x16>
 800ab74:	290a      	cmp	r1, #10
 800ab76:	d102      	bne.n	800ab7e <__sfputc_r+0x1c>
 800ab78:	bc10      	pop	{r4}
 800ab7a:	f000 b933 	b.w	800ade4 <__swbuf_r>
 800ab7e:	6813      	ldr	r3, [r2, #0]
 800ab80:	1c58      	adds	r0, r3, #1
 800ab82:	6010      	str	r0, [r2, #0]
 800ab84:	7019      	strb	r1, [r3, #0]
 800ab86:	4608      	mov	r0, r1
 800ab88:	bc10      	pop	{r4}
 800ab8a:	4770      	bx	lr

0800ab8c <__sfputs_r>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	4606      	mov	r6, r0
 800ab90:	460f      	mov	r7, r1
 800ab92:	4614      	mov	r4, r2
 800ab94:	18d5      	adds	r5, r2, r3
 800ab96:	42ac      	cmp	r4, r5
 800ab98:	d101      	bne.n	800ab9e <__sfputs_r+0x12>
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	e007      	b.n	800abae <__sfputs_r+0x22>
 800ab9e:	463a      	mov	r2, r7
 800aba0:	4630      	mov	r0, r6
 800aba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aba6:	f7ff ffdc 	bl	800ab62 <__sfputc_r>
 800abaa:	1c43      	adds	r3, r0, #1
 800abac:	d1f3      	bne.n	800ab96 <__sfputs_r+0xa>
 800abae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800abb0 <_vfiprintf_r>:
 800abb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	460d      	mov	r5, r1
 800abb6:	4614      	mov	r4, r2
 800abb8:	4698      	mov	r8, r3
 800abba:	4606      	mov	r6, r0
 800abbc:	b09d      	sub	sp, #116	; 0x74
 800abbe:	b118      	cbz	r0, 800abc8 <_vfiprintf_r+0x18>
 800abc0:	6a03      	ldr	r3, [r0, #32]
 800abc2:	b90b      	cbnz	r3, 800abc8 <_vfiprintf_r+0x18>
 800abc4:	f7fc f92c 	bl	8006e20 <__sinit>
 800abc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abca:	07d9      	lsls	r1, r3, #31
 800abcc:	d405      	bmi.n	800abda <_vfiprintf_r+0x2a>
 800abce:	89ab      	ldrh	r3, [r5, #12]
 800abd0:	059a      	lsls	r2, r3, #22
 800abd2:	d402      	bmi.n	800abda <_vfiprintf_r+0x2a>
 800abd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abd6:	f7fc fac1 	bl	800715c <__retarget_lock_acquire_recursive>
 800abda:	89ab      	ldrh	r3, [r5, #12]
 800abdc:	071b      	lsls	r3, r3, #28
 800abde:	d501      	bpl.n	800abe4 <_vfiprintf_r+0x34>
 800abe0:	692b      	ldr	r3, [r5, #16]
 800abe2:	b99b      	cbnz	r3, 800ac0c <_vfiprintf_r+0x5c>
 800abe4:	4629      	mov	r1, r5
 800abe6:	4630      	mov	r0, r6
 800abe8:	f000 f93a 	bl	800ae60 <__swsetup_r>
 800abec:	b170      	cbz	r0, 800ac0c <_vfiprintf_r+0x5c>
 800abee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abf0:	07dc      	lsls	r4, r3, #31
 800abf2:	d504      	bpl.n	800abfe <_vfiprintf_r+0x4e>
 800abf4:	f04f 30ff 	mov.w	r0, #4294967295
 800abf8:	b01d      	add	sp, #116	; 0x74
 800abfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfe:	89ab      	ldrh	r3, [r5, #12]
 800ac00:	0598      	lsls	r0, r3, #22
 800ac02:	d4f7      	bmi.n	800abf4 <_vfiprintf_r+0x44>
 800ac04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac06:	f7fc faaa 	bl	800715e <__retarget_lock_release_recursive>
 800ac0a:	e7f3      	b.n	800abf4 <_vfiprintf_r+0x44>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac10:	2320      	movs	r3, #32
 800ac12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac16:	2330      	movs	r3, #48	; 0x30
 800ac18:	f04f 0901 	mov.w	r9, #1
 800ac1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac20:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800add0 <_vfiprintf_r+0x220>
 800ac24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac28:	4623      	mov	r3, r4
 800ac2a:	469a      	mov	sl, r3
 800ac2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac30:	b10a      	cbz	r2, 800ac36 <_vfiprintf_r+0x86>
 800ac32:	2a25      	cmp	r2, #37	; 0x25
 800ac34:	d1f9      	bne.n	800ac2a <_vfiprintf_r+0x7a>
 800ac36:	ebba 0b04 	subs.w	fp, sl, r4
 800ac3a:	d00b      	beq.n	800ac54 <_vfiprintf_r+0xa4>
 800ac3c:	465b      	mov	r3, fp
 800ac3e:	4622      	mov	r2, r4
 800ac40:	4629      	mov	r1, r5
 800ac42:	4630      	mov	r0, r6
 800ac44:	f7ff ffa2 	bl	800ab8c <__sfputs_r>
 800ac48:	3001      	adds	r0, #1
 800ac4a:	f000 80a9 	beq.w	800ada0 <_vfiprintf_r+0x1f0>
 800ac4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac50:	445a      	add	r2, fp
 800ac52:	9209      	str	r2, [sp, #36]	; 0x24
 800ac54:	f89a 3000 	ldrb.w	r3, [sl]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f000 80a1 	beq.w	800ada0 <_vfiprintf_r+0x1f0>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f04f 32ff 	mov.w	r2, #4294967295
 800ac64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac68:	f10a 0a01 	add.w	sl, sl, #1
 800ac6c:	9304      	str	r3, [sp, #16]
 800ac6e:	9307      	str	r3, [sp, #28]
 800ac70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac74:	931a      	str	r3, [sp, #104]	; 0x68
 800ac76:	4654      	mov	r4, sl
 800ac78:	2205      	movs	r2, #5
 800ac7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac7e:	4854      	ldr	r0, [pc, #336]	; (800add0 <_vfiprintf_r+0x220>)
 800ac80:	f7fc fa6e 	bl	8007160 <memchr>
 800ac84:	9a04      	ldr	r2, [sp, #16]
 800ac86:	b9d8      	cbnz	r0, 800acc0 <_vfiprintf_r+0x110>
 800ac88:	06d1      	lsls	r1, r2, #27
 800ac8a:	bf44      	itt	mi
 800ac8c:	2320      	movmi	r3, #32
 800ac8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac92:	0713      	lsls	r3, r2, #28
 800ac94:	bf44      	itt	mi
 800ac96:	232b      	movmi	r3, #43	; 0x2b
 800ac98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac9c:	f89a 3000 	ldrb.w	r3, [sl]
 800aca0:	2b2a      	cmp	r3, #42	; 0x2a
 800aca2:	d015      	beq.n	800acd0 <_vfiprintf_r+0x120>
 800aca4:	4654      	mov	r4, sl
 800aca6:	2000      	movs	r0, #0
 800aca8:	f04f 0c0a 	mov.w	ip, #10
 800acac:	9a07      	ldr	r2, [sp, #28]
 800acae:	4621      	mov	r1, r4
 800acb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acb4:	3b30      	subs	r3, #48	; 0x30
 800acb6:	2b09      	cmp	r3, #9
 800acb8:	d94d      	bls.n	800ad56 <_vfiprintf_r+0x1a6>
 800acba:	b1b0      	cbz	r0, 800acea <_vfiprintf_r+0x13a>
 800acbc:	9207      	str	r2, [sp, #28]
 800acbe:	e014      	b.n	800acea <_vfiprintf_r+0x13a>
 800acc0:	eba0 0308 	sub.w	r3, r0, r8
 800acc4:	fa09 f303 	lsl.w	r3, r9, r3
 800acc8:	4313      	orrs	r3, r2
 800acca:	46a2      	mov	sl, r4
 800accc:	9304      	str	r3, [sp, #16]
 800acce:	e7d2      	b.n	800ac76 <_vfiprintf_r+0xc6>
 800acd0:	9b03      	ldr	r3, [sp, #12]
 800acd2:	1d19      	adds	r1, r3, #4
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	9103      	str	r1, [sp, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	bfbb      	ittet	lt
 800acdc:	425b      	neglt	r3, r3
 800acde:	f042 0202 	orrlt.w	r2, r2, #2
 800ace2:	9307      	strge	r3, [sp, #28]
 800ace4:	9307      	strlt	r3, [sp, #28]
 800ace6:	bfb8      	it	lt
 800ace8:	9204      	strlt	r2, [sp, #16]
 800acea:	7823      	ldrb	r3, [r4, #0]
 800acec:	2b2e      	cmp	r3, #46	; 0x2e
 800acee:	d10c      	bne.n	800ad0a <_vfiprintf_r+0x15a>
 800acf0:	7863      	ldrb	r3, [r4, #1]
 800acf2:	2b2a      	cmp	r3, #42	; 0x2a
 800acf4:	d134      	bne.n	800ad60 <_vfiprintf_r+0x1b0>
 800acf6:	9b03      	ldr	r3, [sp, #12]
 800acf8:	3402      	adds	r4, #2
 800acfa:	1d1a      	adds	r2, r3, #4
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	9203      	str	r2, [sp, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	bfb8      	it	lt
 800ad04:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad08:	9305      	str	r3, [sp, #20]
 800ad0a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800add4 <_vfiprintf_r+0x224>
 800ad0e:	2203      	movs	r2, #3
 800ad10:	4650      	mov	r0, sl
 800ad12:	7821      	ldrb	r1, [r4, #0]
 800ad14:	f7fc fa24 	bl	8007160 <memchr>
 800ad18:	b138      	cbz	r0, 800ad2a <_vfiprintf_r+0x17a>
 800ad1a:	2240      	movs	r2, #64	; 0x40
 800ad1c:	9b04      	ldr	r3, [sp, #16]
 800ad1e:	eba0 000a 	sub.w	r0, r0, sl
 800ad22:	4082      	lsls	r2, r0
 800ad24:	4313      	orrs	r3, r2
 800ad26:	3401      	adds	r4, #1
 800ad28:	9304      	str	r3, [sp, #16]
 800ad2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad2e:	2206      	movs	r2, #6
 800ad30:	4829      	ldr	r0, [pc, #164]	; (800add8 <_vfiprintf_r+0x228>)
 800ad32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad36:	f7fc fa13 	bl	8007160 <memchr>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d03f      	beq.n	800adbe <_vfiprintf_r+0x20e>
 800ad3e:	4b27      	ldr	r3, [pc, #156]	; (800addc <_vfiprintf_r+0x22c>)
 800ad40:	bb1b      	cbnz	r3, 800ad8a <_vfiprintf_r+0x1da>
 800ad42:	9b03      	ldr	r3, [sp, #12]
 800ad44:	3307      	adds	r3, #7
 800ad46:	f023 0307 	bic.w	r3, r3, #7
 800ad4a:	3308      	adds	r3, #8
 800ad4c:	9303      	str	r3, [sp, #12]
 800ad4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad50:	443b      	add	r3, r7
 800ad52:	9309      	str	r3, [sp, #36]	; 0x24
 800ad54:	e768      	b.n	800ac28 <_vfiprintf_r+0x78>
 800ad56:	460c      	mov	r4, r1
 800ad58:	2001      	movs	r0, #1
 800ad5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad5e:	e7a6      	b.n	800acae <_vfiprintf_r+0xfe>
 800ad60:	2300      	movs	r3, #0
 800ad62:	f04f 0c0a 	mov.w	ip, #10
 800ad66:	4619      	mov	r1, r3
 800ad68:	3401      	adds	r4, #1
 800ad6a:	9305      	str	r3, [sp, #20]
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad72:	3a30      	subs	r2, #48	; 0x30
 800ad74:	2a09      	cmp	r2, #9
 800ad76:	d903      	bls.n	800ad80 <_vfiprintf_r+0x1d0>
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d0c6      	beq.n	800ad0a <_vfiprintf_r+0x15a>
 800ad7c:	9105      	str	r1, [sp, #20]
 800ad7e:	e7c4      	b.n	800ad0a <_vfiprintf_r+0x15a>
 800ad80:	4604      	mov	r4, r0
 800ad82:	2301      	movs	r3, #1
 800ad84:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad88:	e7f0      	b.n	800ad6c <_vfiprintf_r+0x1bc>
 800ad8a:	ab03      	add	r3, sp, #12
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	462a      	mov	r2, r5
 800ad90:	4630      	mov	r0, r6
 800ad92:	4b13      	ldr	r3, [pc, #76]	; (800ade0 <_vfiprintf_r+0x230>)
 800ad94:	a904      	add	r1, sp, #16
 800ad96:	f7fb f9f9 	bl	800618c <_printf_float>
 800ad9a:	4607      	mov	r7, r0
 800ad9c:	1c78      	adds	r0, r7, #1
 800ad9e:	d1d6      	bne.n	800ad4e <_vfiprintf_r+0x19e>
 800ada0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ada2:	07d9      	lsls	r1, r3, #31
 800ada4:	d405      	bmi.n	800adb2 <_vfiprintf_r+0x202>
 800ada6:	89ab      	ldrh	r3, [r5, #12]
 800ada8:	059a      	lsls	r2, r3, #22
 800adaa:	d402      	bmi.n	800adb2 <_vfiprintf_r+0x202>
 800adac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adae:	f7fc f9d6 	bl	800715e <__retarget_lock_release_recursive>
 800adb2:	89ab      	ldrh	r3, [r5, #12]
 800adb4:	065b      	lsls	r3, r3, #25
 800adb6:	f53f af1d 	bmi.w	800abf4 <_vfiprintf_r+0x44>
 800adba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adbc:	e71c      	b.n	800abf8 <_vfiprintf_r+0x48>
 800adbe:	ab03      	add	r3, sp, #12
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	462a      	mov	r2, r5
 800adc4:	4630      	mov	r0, r6
 800adc6:	4b06      	ldr	r3, [pc, #24]	; (800ade0 <_vfiprintf_r+0x230>)
 800adc8:	a904      	add	r1, sp, #16
 800adca:	f7fb fc7f 	bl	80066cc <_printf_i>
 800adce:	e7e4      	b.n	800ad9a <_vfiprintf_r+0x1ea>
 800add0:	0800b699 	.word	0x0800b699
 800add4:	0800b69f 	.word	0x0800b69f
 800add8:	0800b6a3 	.word	0x0800b6a3
 800addc:	0800618d 	.word	0x0800618d
 800ade0:	0800ab8d 	.word	0x0800ab8d

0800ade4 <__swbuf_r>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	460e      	mov	r6, r1
 800ade8:	4614      	mov	r4, r2
 800adea:	4605      	mov	r5, r0
 800adec:	b118      	cbz	r0, 800adf6 <__swbuf_r+0x12>
 800adee:	6a03      	ldr	r3, [r0, #32]
 800adf0:	b90b      	cbnz	r3, 800adf6 <__swbuf_r+0x12>
 800adf2:	f7fc f815 	bl	8006e20 <__sinit>
 800adf6:	69a3      	ldr	r3, [r4, #24]
 800adf8:	60a3      	str	r3, [r4, #8]
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	071a      	lsls	r2, r3, #28
 800adfe:	d525      	bpl.n	800ae4c <__swbuf_r+0x68>
 800ae00:	6923      	ldr	r3, [r4, #16]
 800ae02:	b31b      	cbz	r3, 800ae4c <__swbuf_r+0x68>
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	6922      	ldr	r2, [r4, #16]
 800ae08:	b2f6      	uxtb	r6, r6
 800ae0a:	1a98      	subs	r0, r3, r2
 800ae0c:	6963      	ldr	r3, [r4, #20]
 800ae0e:	4637      	mov	r7, r6
 800ae10:	4283      	cmp	r3, r0
 800ae12:	dc04      	bgt.n	800ae1e <__swbuf_r+0x3a>
 800ae14:	4621      	mov	r1, r4
 800ae16:	4628      	mov	r0, r5
 800ae18:	f7ff f970 	bl	800a0fc <_fflush_r>
 800ae1c:	b9e0      	cbnz	r0, 800ae58 <__swbuf_r+0x74>
 800ae1e:	68a3      	ldr	r3, [r4, #8]
 800ae20:	3b01      	subs	r3, #1
 800ae22:	60a3      	str	r3, [r4, #8]
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	6022      	str	r2, [r4, #0]
 800ae2a:	701e      	strb	r6, [r3, #0]
 800ae2c:	6962      	ldr	r2, [r4, #20]
 800ae2e:	1c43      	adds	r3, r0, #1
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d004      	beq.n	800ae3e <__swbuf_r+0x5a>
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	07db      	lsls	r3, r3, #31
 800ae38:	d506      	bpl.n	800ae48 <__swbuf_r+0x64>
 800ae3a:	2e0a      	cmp	r6, #10
 800ae3c:	d104      	bne.n	800ae48 <__swbuf_r+0x64>
 800ae3e:	4621      	mov	r1, r4
 800ae40:	4628      	mov	r0, r5
 800ae42:	f7ff f95b 	bl	800a0fc <_fflush_r>
 800ae46:	b938      	cbnz	r0, 800ae58 <__swbuf_r+0x74>
 800ae48:	4638      	mov	r0, r7
 800ae4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f000 f806 	bl	800ae60 <__swsetup_r>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d0d5      	beq.n	800ae04 <__swbuf_r+0x20>
 800ae58:	f04f 37ff 	mov.w	r7, #4294967295
 800ae5c:	e7f4      	b.n	800ae48 <__swbuf_r+0x64>
	...

0800ae60 <__swsetup_r>:
 800ae60:	b538      	push	{r3, r4, r5, lr}
 800ae62:	4b2a      	ldr	r3, [pc, #168]	; (800af0c <__swsetup_r+0xac>)
 800ae64:	4605      	mov	r5, r0
 800ae66:	6818      	ldr	r0, [r3, #0]
 800ae68:	460c      	mov	r4, r1
 800ae6a:	b118      	cbz	r0, 800ae74 <__swsetup_r+0x14>
 800ae6c:	6a03      	ldr	r3, [r0, #32]
 800ae6e:	b90b      	cbnz	r3, 800ae74 <__swsetup_r+0x14>
 800ae70:	f7fb ffd6 	bl	8006e20 <__sinit>
 800ae74:	89a3      	ldrh	r3, [r4, #12]
 800ae76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae7a:	0718      	lsls	r0, r3, #28
 800ae7c:	d422      	bmi.n	800aec4 <__swsetup_r+0x64>
 800ae7e:	06d9      	lsls	r1, r3, #27
 800ae80:	d407      	bmi.n	800ae92 <__swsetup_r+0x32>
 800ae82:	2309      	movs	r3, #9
 800ae84:	602b      	str	r3, [r5, #0]
 800ae86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae8e:	81a3      	strh	r3, [r4, #12]
 800ae90:	e034      	b.n	800aefc <__swsetup_r+0x9c>
 800ae92:	0758      	lsls	r0, r3, #29
 800ae94:	d512      	bpl.n	800aebc <__swsetup_r+0x5c>
 800ae96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae98:	b141      	cbz	r1, 800aeac <__swsetup_r+0x4c>
 800ae9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae9e:	4299      	cmp	r1, r3
 800aea0:	d002      	beq.n	800aea8 <__swsetup_r+0x48>
 800aea2:	4628      	mov	r0, r5
 800aea4:	f7fc fffc 	bl	8007ea0 <_free_r>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	6363      	str	r3, [r4, #52]	; 0x34
 800aeac:	89a3      	ldrh	r3, [r4, #12]
 800aeae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	6063      	str	r3, [r4, #4]
 800aeb8:	6923      	ldr	r3, [r4, #16]
 800aeba:	6023      	str	r3, [r4, #0]
 800aebc:	89a3      	ldrh	r3, [r4, #12]
 800aebe:	f043 0308 	orr.w	r3, r3, #8
 800aec2:	81a3      	strh	r3, [r4, #12]
 800aec4:	6923      	ldr	r3, [r4, #16]
 800aec6:	b94b      	cbnz	r3, 800aedc <__swsetup_r+0x7c>
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aed2:	d003      	beq.n	800aedc <__swsetup_r+0x7c>
 800aed4:	4621      	mov	r1, r4
 800aed6:	4628      	mov	r0, r5
 800aed8:	f000 f88b 	bl	800aff2 <__smakebuf_r>
 800aedc:	89a0      	ldrh	r0, [r4, #12]
 800aede:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aee2:	f010 0301 	ands.w	r3, r0, #1
 800aee6:	d00a      	beq.n	800aefe <__swsetup_r+0x9e>
 800aee8:	2300      	movs	r3, #0
 800aeea:	60a3      	str	r3, [r4, #8]
 800aeec:	6963      	ldr	r3, [r4, #20]
 800aeee:	425b      	negs	r3, r3
 800aef0:	61a3      	str	r3, [r4, #24]
 800aef2:	6923      	ldr	r3, [r4, #16]
 800aef4:	b943      	cbnz	r3, 800af08 <__swsetup_r+0xa8>
 800aef6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aefa:	d1c4      	bne.n	800ae86 <__swsetup_r+0x26>
 800aefc:	bd38      	pop	{r3, r4, r5, pc}
 800aefe:	0781      	lsls	r1, r0, #30
 800af00:	bf58      	it	pl
 800af02:	6963      	ldrpl	r3, [r4, #20]
 800af04:	60a3      	str	r3, [r4, #8]
 800af06:	e7f4      	b.n	800aef2 <__swsetup_r+0x92>
 800af08:	2000      	movs	r0, #0
 800af0a:	e7f7      	b.n	800aefc <__swsetup_r+0x9c>
 800af0c:	2000008c 	.word	0x2000008c

0800af10 <_raise_r>:
 800af10:	291f      	cmp	r1, #31
 800af12:	b538      	push	{r3, r4, r5, lr}
 800af14:	4604      	mov	r4, r0
 800af16:	460d      	mov	r5, r1
 800af18:	d904      	bls.n	800af24 <_raise_r+0x14>
 800af1a:	2316      	movs	r3, #22
 800af1c:	6003      	str	r3, [r0, #0]
 800af1e:	f04f 30ff 	mov.w	r0, #4294967295
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800af26:	b112      	cbz	r2, 800af2e <_raise_r+0x1e>
 800af28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af2c:	b94b      	cbnz	r3, 800af42 <_raise_r+0x32>
 800af2e:	4620      	mov	r0, r4
 800af30:	f000 f830 	bl	800af94 <_getpid_r>
 800af34:	462a      	mov	r2, r5
 800af36:	4601      	mov	r1, r0
 800af38:	4620      	mov	r0, r4
 800af3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af3e:	f000 b817 	b.w	800af70 <_kill_r>
 800af42:	2b01      	cmp	r3, #1
 800af44:	d00a      	beq.n	800af5c <_raise_r+0x4c>
 800af46:	1c59      	adds	r1, r3, #1
 800af48:	d103      	bne.n	800af52 <_raise_r+0x42>
 800af4a:	2316      	movs	r3, #22
 800af4c:	6003      	str	r3, [r0, #0]
 800af4e:	2001      	movs	r0, #1
 800af50:	e7e7      	b.n	800af22 <_raise_r+0x12>
 800af52:	2400      	movs	r4, #0
 800af54:	4628      	mov	r0, r5
 800af56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af5a:	4798      	blx	r3
 800af5c:	2000      	movs	r0, #0
 800af5e:	e7e0      	b.n	800af22 <_raise_r+0x12>

0800af60 <raise>:
 800af60:	4b02      	ldr	r3, [pc, #8]	; (800af6c <raise+0xc>)
 800af62:	4601      	mov	r1, r0
 800af64:	6818      	ldr	r0, [r3, #0]
 800af66:	f7ff bfd3 	b.w	800af10 <_raise_r>
 800af6a:	bf00      	nop
 800af6c:	2000008c 	.word	0x2000008c

0800af70 <_kill_r>:
 800af70:	b538      	push	{r3, r4, r5, lr}
 800af72:	2300      	movs	r3, #0
 800af74:	4d06      	ldr	r5, [pc, #24]	; (800af90 <_kill_r+0x20>)
 800af76:	4604      	mov	r4, r0
 800af78:	4608      	mov	r0, r1
 800af7a:	4611      	mov	r1, r2
 800af7c:	602b      	str	r3, [r5, #0]
 800af7e:	f7f8 f878 	bl	8003072 <_kill>
 800af82:	1c43      	adds	r3, r0, #1
 800af84:	d102      	bne.n	800af8c <_kill_r+0x1c>
 800af86:	682b      	ldr	r3, [r5, #0]
 800af88:	b103      	cbz	r3, 800af8c <_kill_r+0x1c>
 800af8a:	6023      	str	r3, [r4, #0]
 800af8c:	bd38      	pop	{r3, r4, r5, pc}
 800af8e:	bf00      	nop
 800af90:	20000600 	.word	0x20000600

0800af94 <_getpid_r>:
 800af94:	f7f8 b866 	b.w	8003064 <_getpid>

0800af98 <_malloc_usable_size_r>:
 800af98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af9c:	1f18      	subs	r0, r3, #4
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bfbc      	itt	lt
 800afa2:	580b      	ldrlt	r3, [r1, r0]
 800afa4:	18c0      	addlt	r0, r0, r3
 800afa6:	4770      	bx	lr

0800afa8 <__swhatbuf_r>:
 800afa8:	b570      	push	{r4, r5, r6, lr}
 800afaa:	460c      	mov	r4, r1
 800afac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afb0:	4615      	mov	r5, r2
 800afb2:	2900      	cmp	r1, #0
 800afb4:	461e      	mov	r6, r3
 800afb6:	b096      	sub	sp, #88	; 0x58
 800afb8:	da0c      	bge.n	800afd4 <__swhatbuf_r+0x2c>
 800afba:	89a3      	ldrh	r3, [r4, #12]
 800afbc:	2100      	movs	r1, #0
 800afbe:	f013 0f80 	tst.w	r3, #128	; 0x80
 800afc2:	bf0c      	ite	eq
 800afc4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800afc8:	2340      	movne	r3, #64	; 0x40
 800afca:	2000      	movs	r0, #0
 800afcc:	6031      	str	r1, [r6, #0]
 800afce:	602b      	str	r3, [r5, #0]
 800afd0:	b016      	add	sp, #88	; 0x58
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
 800afd4:	466a      	mov	r2, sp
 800afd6:	f000 f849 	bl	800b06c <_fstat_r>
 800afda:	2800      	cmp	r0, #0
 800afdc:	dbed      	blt.n	800afba <__swhatbuf_r+0x12>
 800afde:	9901      	ldr	r1, [sp, #4]
 800afe0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800afe4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800afe8:	4259      	negs	r1, r3
 800afea:	4159      	adcs	r1, r3
 800afec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aff0:	e7eb      	b.n	800afca <__swhatbuf_r+0x22>

0800aff2 <__smakebuf_r>:
 800aff2:	898b      	ldrh	r3, [r1, #12]
 800aff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aff6:	079d      	lsls	r5, r3, #30
 800aff8:	4606      	mov	r6, r0
 800affa:	460c      	mov	r4, r1
 800affc:	d507      	bpl.n	800b00e <__smakebuf_r+0x1c>
 800affe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	6123      	str	r3, [r4, #16]
 800b006:	2301      	movs	r3, #1
 800b008:	6163      	str	r3, [r4, #20]
 800b00a:	b002      	add	sp, #8
 800b00c:	bd70      	pop	{r4, r5, r6, pc}
 800b00e:	466a      	mov	r2, sp
 800b010:	ab01      	add	r3, sp, #4
 800b012:	f7ff ffc9 	bl	800afa8 <__swhatbuf_r>
 800b016:	9900      	ldr	r1, [sp, #0]
 800b018:	4605      	mov	r5, r0
 800b01a:	4630      	mov	r0, r6
 800b01c:	f7fc ffb0 	bl	8007f80 <_malloc_r>
 800b020:	b948      	cbnz	r0, 800b036 <__smakebuf_r+0x44>
 800b022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b026:	059a      	lsls	r2, r3, #22
 800b028:	d4ef      	bmi.n	800b00a <__smakebuf_r+0x18>
 800b02a:	f023 0303 	bic.w	r3, r3, #3
 800b02e:	f043 0302 	orr.w	r3, r3, #2
 800b032:	81a3      	strh	r3, [r4, #12]
 800b034:	e7e3      	b.n	800affe <__smakebuf_r+0xc>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	6020      	str	r0, [r4, #0]
 800b03a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b03e:	81a3      	strh	r3, [r4, #12]
 800b040:	9b00      	ldr	r3, [sp, #0]
 800b042:	6120      	str	r0, [r4, #16]
 800b044:	6163      	str	r3, [r4, #20]
 800b046:	9b01      	ldr	r3, [sp, #4]
 800b048:	b15b      	cbz	r3, 800b062 <__smakebuf_r+0x70>
 800b04a:	4630      	mov	r0, r6
 800b04c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b050:	f000 f81e 	bl	800b090 <_isatty_r>
 800b054:	b128      	cbz	r0, 800b062 <__smakebuf_r+0x70>
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	f023 0303 	bic.w	r3, r3, #3
 800b05c:	f043 0301 	orr.w	r3, r3, #1
 800b060:	81a3      	strh	r3, [r4, #12]
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	431d      	orrs	r5, r3
 800b066:	81a5      	strh	r5, [r4, #12]
 800b068:	e7cf      	b.n	800b00a <__smakebuf_r+0x18>
	...

0800b06c <_fstat_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	2300      	movs	r3, #0
 800b070:	4d06      	ldr	r5, [pc, #24]	; (800b08c <_fstat_r+0x20>)
 800b072:	4604      	mov	r4, r0
 800b074:	4608      	mov	r0, r1
 800b076:	4611      	mov	r1, r2
 800b078:	602b      	str	r3, [r5, #0]
 800b07a:	f7f8 f858 	bl	800312e <_fstat>
 800b07e:	1c43      	adds	r3, r0, #1
 800b080:	d102      	bne.n	800b088 <_fstat_r+0x1c>
 800b082:	682b      	ldr	r3, [r5, #0]
 800b084:	b103      	cbz	r3, 800b088 <_fstat_r+0x1c>
 800b086:	6023      	str	r3, [r4, #0]
 800b088:	bd38      	pop	{r3, r4, r5, pc}
 800b08a:	bf00      	nop
 800b08c:	20000600 	.word	0x20000600

0800b090 <_isatty_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	2300      	movs	r3, #0
 800b094:	4d05      	ldr	r5, [pc, #20]	; (800b0ac <_isatty_r+0x1c>)
 800b096:	4604      	mov	r4, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	602b      	str	r3, [r5, #0]
 800b09c:	f7f8 f856 	bl	800314c <_isatty>
 800b0a0:	1c43      	adds	r3, r0, #1
 800b0a2:	d102      	bne.n	800b0aa <_isatty_r+0x1a>
 800b0a4:	682b      	ldr	r3, [r5, #0]
 800b0a6:	b103      	cbz	r3, 800b0aa <_isatty_r+0x1a>
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	bd38      	pop	{r3, r4, r5, pc}
 800b0ac:	20000600 	.word	0x20000600

0800b0b0 <_init>:
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	bf00      	nop
 800b0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0b6:	bc08      	pop	{r3}
 800b0b8:	469e      	mov	lr, r3
 800b0ba:	4770      	bx	lr

0800b0bc <_fini>:
 800b0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0be:	bf00      	nop
 800b0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0c2:	bc08      	pop	{r3}
 800b0c4:	469e      	mov	lr, r3
 800b0c6:	4770      	bx	lr
