
LoRa_Sender_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad80  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  0800ae90  0800ae90  0001ae90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b508  0800b508  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800b508  0800b508  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b508  0800b508  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b508  0800b508  0001b508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b50c  0800b50c  0001b50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800b510  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000200  0800b70c  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  0800b70c  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f0f5  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026aa  00000000  00000000  0002f35d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00031a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d44  00000000  00000000  00032b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001944a  00000000  00000000  0003385c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013342  00000000  00000000  0004cca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ec9b  00000000  00000000  0005ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f38  00000000  00000000  000eec84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f4bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ae78 	.word	0x0800ae78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800ae78 	.word	0x0800ae78

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	4605      	mov	r5, r0
 8000b80:	460c      	mov	r4, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	2300      	movs	r3, #0
 8000b86:	4628      	mov	r0, r5
 8000b88:	4621      	mov	r1, r4
 8000b8a:	f7ff ff21 	bl	80009d0 <__aeabi_dcmplt>
 8000b8e:	b928      	cbnz	r0, 8000b9c <__aeabi_d2lz+0x20>
 8000b90:	4628      	mov	r0, r5
 8000b92:	4621      	mov	r1, r4
 8000b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b98:	f000 b80a 	b.w	8000bb0 <__aeabi_d2ulz>
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ba2:	f000 f805 	bl	8000bb0 <__aeabi_d2ulz>
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bac:	bd38      	pop	{r3, r4, r5, pc}
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2ulz>:
 8000bb0:	b5d0      	push	{r4, r6, r7, lr}
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <__aeabi_d2ulz+0x34>)
 8000bb6:	4606      	mov	r6, r0
 8000bb8:	460f      	mov	r7, r1
 8000bba:	f7ff fc97 	bl	80004ec <__aeabi_dmul>
 8000bbe:	f7ff ff6d 	bl	8000a9c <__aeabi_d2uiz>
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	f7ff fc18 	bl	80003f8 <__aeabi_ui2d>
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <__aeabi_d2ulz+0x38>)
 8000bcc:	f7ff fc8e 	bl	80004ec <__aeabi_dmul>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	4639      	mov	r1, r7
 8000bd8:	f7ff fad0 	bl	800017c <__aeabi_dsub>
 8000bdc:	f7ff ff5e 	bl	8000a9c <__aeabi_d2uiz>
 8000be0:	4621      	mov	r1, r4
 8000be2:	bdd0      	pop	{r4, r6, r7, pc}
 8000be4:	3df00000 	.word	0x3df00000
 8000be8:	41f00000 	.word	0x41f00000

08000bec <DHT22_Start>:
#include "stdio.h"
#include "stdint.h"
#include "DHT22.h"

// Function implementations
void DHT22_Start(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	Set_Pin_Output(GPIOA, GPIO_PIN_5); // set the pin as output
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <DHT22_Start+0x3c>)
 8000bf4:	f000 f892 	bl	8000d1c <Set_Pin_Output>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // pull the pin low
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2120      	movs	r1, #32
 8000bfc:	480a      	ldr	r0, [pc, #40]	; (8000c28 <DHT22_Start+0x3c>)
 8000bfe:	f002 fe16 	bl	800382e <HAL_GPIO_WritePin>
	Delay_Us(1200);
 8000c02:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000c06:	f001 f8e3 	bl	8001dd0 <Delay_Us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // pull the pin high
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <DHT22_Start+0x3c>)
 8000c10:	f002 fe0d 	bl	800382e <HAL_GPIO_WritePin>
	Delay_Us(20);
 8000c14:	2014      	movs	r0, #20
 8000c16:	f001 f8db 	bl	8001dd0 <Delay_Us>
	Set_Pin_Input(GPIOA, GPIO_PIN_5); // set the pin as input
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <DHT22_Start+0x3c>)
 8000c1e:	f000 f8a2 	bl	8000d66 <Set_Pin_Input>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40010800 	.word	0x40010800

08000c2c <DHT22_Check_Response>:

uint8_t DHT22_Check_Response(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	uint8_t resposne = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]
	Delay_Us(40);
 8000c36:	2028      	movs	r0, #40	; 0x28
 8000c38:	f001 f8ca 	bl	8001dd0 <Delay_Us>
	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) {
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <DHT22_Check_Response+0x5c>)
 8000c40:	f002 fdde 	bl	8003800 <HAL_GPIO_ReadPin>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10f      	bne.n	8000c6a <DHT22_Check_Response+0x3e>
		Delay_Us(80); // wait 80 us for response from DHT22
 8000c4a:	2050      	movs	r0, #80	; 0x50
 8000c4c:	f001 f8c0 	bl	8001dd0 <Delay_Us>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8000c50:	2120      	movs	r1, #32
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <DHT22_Check_Response+0x5c>)
 8000c54:	f002 fdd4 	bl	8003800 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <DHT22_Check_Response+0x38>
			resposne = 1; // successfully receive the response
 8000c5e:	2301      	movs	r3, #1
 8000c60:	71fb      	strb	r3, [r7, #7]
 8000c62:	e004      	b.n	8000c6e <DHT22_Check_Response+0x42>
		else
			resposne = -1; // fail to receive the response
 8000c64:	23ff      	movs	r3, #255	; 0xff
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	e001      	b.n	8000c6e <DHT22_Check_Response+0x42>
	} else
		return -1;
 8000c6a:	23ff      	movs	r3, #255	; 0xff
 8000c6c:	e008      	b.n	8000c80 <DHT22_Check_Response+0x54>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8000c6e:	bf00      	nop
 8000c70:	2120      	movs	r1, #32
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <DHT22_Check_Response+0x5c>)
 8000c74:	f002 fdc4 	bl	8003800 <HAL_GPIO_ReadPin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f8      	bne.n	8000c70 <DHT22_Check_Response+0x44>
		; // wait for the pin to go low
	return resposne;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40010800 	.word	0x40010800

08000c8c <DHT22_Read_Data>:

uint8_t DHT22_Read_Data(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
	uint8_t data;
	for (uint8_t i = 0; i < 8; i++) {
 8000c92:	2300      	movs	r3, #0
 8000c94:	71bb      	strb	r3, [r7, #6]
 8000c96:	e037      	b.n	8000d08 <DHT22_Read_Data+0x7c>
//		Delay_Us(50);
		while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)))
 8000c98:	bf00      	nop
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	481e      	ldr	r0, [pc, #120]	; (8000d18 <DHT22_Read_Data+0x8c>)
 8000c9e:	f002 fdaf 	bl	8003800 <HAL_GPIO_ReadPin>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f8      	beq.n	8000c9a <DHT22_Read_Data+0xe>
			; // wait for the pin to to go high
		Delay_Us(30);
 8000ca8:	201e      	movs	r0, #30
 8000caa:	f001 f891 	bl	8001dd0 <Delay_Us>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) // if the pin is high
 8000cae:	2120      	movs	r1, #32
 8000cb0:	4819      	ldr	r0, [pc, #100]	; (8000d18 <DHT22_Read_Data+0x8c>)
 8000cb2:	f002 fda5 	bl	8003800 <HAL_GPIO_ReadPin>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d00c      	beq.n	8000cd6 <DHT22_Read_Data+0x4a>
			data |= 1 << (7 - i); // write 1 bit
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	b25a      	sxtb	r2, r3
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	e00d      	b.n	8000cf2 <DHT22_Read_Data+0x66>
		else
			// if the pin is low
			data &= ~(1 << (7 - i)); // write 0 bit
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	f1c3 0307 	rsb	r3, r3, #7
 8000cdc:	2201      	movs	r2, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	b25a      	sxtb	r2, r3
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	4013      	ands	r3, r2
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	71fb      	strb	r3, [r7, #7]
		while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8000cf2:	bf00      	nop
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	4808      	ldr	r0, [pc, #32]	; (8000d18 <DHT22_Read_Data+0x8c>)
 8000cf8:	f002 fd82 	bl	8003800 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f8      	bne.n	8000cf4 <DHT22_Read_Data+0x68>
	for (uint8_t i = 0; i < 8; i++) {
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	3301      	adds	r3, #1
 8000d06:	71bb      	strb	r3, [r7, #6]
 8000d08:	79bb      	ldrb	r3, [r7, #6]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	d9c4      	bls.n	8000c98 <DHT22_Read_Data+0xc>
			; // wait for the pin to go low
	}
	return data;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40010800 	.word	0x40010800

08000d1c <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000d36:	887b      	ldrh	r3, [r7, #2]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f002 fd76 	bl	800382e <HAL_GPIO_WritePin>
	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	4619      	mov	r1, r3
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f002 fbcd 	bl	80034f8 <HAL_GPIO_Init>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	2200      	movs	r2, #0
 8000d84:	4619      	mov	r1, r3
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f002 fd51 	bl	800382e <HAL_GPIO_WritePin>
	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	4619      	mov	r1, r3
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f002 fba8 	bl	80034f8 <HAL_GPIO_Init>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <DHT22_Get_Data>:

uint8_t DHT22_Get_Data(DHT22_Data *data) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	uint8_t status, tempByte1, tempByte2, humidByte1, humidByte2, rcv_checksum, checksum = 0xFF;
 8000db8:	23ff      	movs	r3, #255	; 0xff
 8000dba:	72bb      	strb	r3, [r7, #10]
	DHT22_Start();
 8000dbc:	f7ff ff16 	bl	8000bec <DHT22_Start>
	status = DHT22_Check_Response();
 8000dc0:	f7ff ff34 	bl	8000c2c <DHT22_Check_Response>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	727b      	strb	r3, [r7, #9]
	if (status) {
 8000dc8:	7a7b      	ldrb	r3, [r7, #9]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d013      	beq.n	8000df6 <DHT22_Get_Data+0x46>
		humidByte1 = DHT22_Read_Data();
 8000dce:	f7ff ff5d 	bl	8000c8c <DHT22_Read_Data>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	737b      	strb	r3, [r7, #13]
		humidByte2 = DHT22_Read_Data();
 8000dd6:	f7ff ff59 	bl	8000c8c <DHT22_Read_Data>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	733b      	strb	r3, [r7, #12]
		tempByte1 = DHT22_Read_Data();
 8000dde:	f7ff ff55 	bl	8000c8c <DHT22_Read_Data>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
		tempByte2 = DHT22_Read_Data();
 8000de6:	f7ff ff51 	bl	8000c8c <DHT22_Read_Data>
 8000dea:	4603      	mov	r3, r0
 8000dec:	73bb      	strb	r3, [r7, #14]
		rcv_checksum = DHT22_Read_Data();
 8000dee:	f7ff ff4d 	bl	8000c8c <DHT22_Read_Data>
 8000df2:	4603      	mov	r3, r0
 8000df4:	72fb      	strb	r3, [r7, #11]
	}
	checksum = humidByte1 + humidByte2 + tempByte1 + tempByte2;
 8000df6:	7b7a      	ldrb	r2, [r7, #13]
 8000df8:	7b3b      	ldrb	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	4413      	add	r3, r2
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	7bbb      	ldrb	r3, [r7, #14]
 8000e06:	4413      	add	r3, r2
 8000e08:	72bb      	strb	r3, [r7, #10]

	if (checksum == rcv_checksum) {
 8000e0a:	7aba      	ldrb	r2, [r7, #10]
 8000e0c:	7afb      	ldrb	r3, [r7, #11]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d123      	bne.n	8000e5a <DHT22_Get_Data+0xaa>
		data->temperature = (double) (((tempByte1 << 8) | tempByte2)) / 10.00;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	021a      	lsls	r2, r3, #8
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fafc 	bl	8000418 <__aeabi_i2d>
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <DHT22_Get_Data+0xb4>)
 8000e26:	f7ff fc8b 	bl	8000740 <__aeabi_ddiv>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	e9c1 2300 	strd	r2, r3, [r1]
		data->humidity = (double) (((humidByte1 << 8) | humidByte2)) / 10.00;
 8000e34:	7b7b      	ldrb	r3, [r7, #13]
 8000e36:	021a      	lsls	r2, r3, #8
 8000e38:	7b3b      	ldrb	r3, [r7, #12]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff faeb 	bl	8000418 <__aeabi_i2d>
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <DHT22_Get_Data+0xb4>)
 8000e48:	f7ff fc7a 	bl	8000740 <__aeabi_ddiv>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <DHT22_Get_Data+0xac>
	}
	else
		return 0;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40240000 	.word	0x40240000

08000e68 <lcd_send_cmd>:
// External variables
extern I2C_HandleTypeDef hi2c1;

// Function implementation
void lcd_send_cmd (char cmd)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f023 030f 	bic.w	r3, r3, #15
 8000e78:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f043 030c 	orr.w	r3, r3, #12
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	f043 030c 	orr.w	r3, r3, #12
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ea8:	f107 0208 	add.w	r2, r7, #8
 8000eac:	2364      	movs	r3, #100	; 0x64
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	214e      	movs	r1, #78	; 0x4e
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <lcd_send_cmd+0x5c>)
 8000eb6:	f002 fe47 	bl	8003b48 <HAL_I2C_Master_Transmit>
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000021c 	.word	0x2000021c

08000ec8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f023 030f 	bic.w	r3, r3, #15
 8000ed8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	f043 030d 	orr.w	r3, r3, #13
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	f043 0309 	orr.w	r3, r3, #9
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	f043 030d 	orr.w	r3, r3, #13
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	f043 0309 	orr.w	r3, r3, #9
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f08:	f107 0208 	add.w	r2, r7, #8
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2304      	movs	r3, #4
 8000f12:	214e      	movs	r1, #78	; 0x4e
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <lcd_send_data+0x5c>)
 8000f16:	f002 fe17 	bl	8003b48 <HAL_I2C_Master_Transmit>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000021c 	.word	0x2000021c

08000f28 <lcd_init>:

void lcd_init (void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000f2c:	2032      	movs	r0, #50	; 0x32
 8000f2e:	f002 f9b1 	bl	8003294 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f32:	2030      	movs	r0, #48	; 0x30
 8000f34:	f7ff ff98 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000f38:	2005      	movs	r0, #5
 8000f3a:	f002 f9ab 	bl	8003294 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f3e:	2030      	movs	r0, #48	; 0x30
 8000f40:	f7ff ff92 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000f44:	2001      	movs	r0, #1
 8000f46:	f002 f9a5 	bl	8003294 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f4a:	2030      	movs	r0, #48	; 0x30
 8000f4c:	f7ff ff8c 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(10);
 8000f50:	200a      	movs	r0, #10
 8000f52:	f002 f99f 	bl	8003294 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000f56:	2020      	movs	r0, #32
 8000f58:	f7ff ff86 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f002 f999 	bl	8003294 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f62:	2028      	movs	r0, #40	; 0x28
 8000f64:	f7ff ff80 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f002 f993 	bl	8003294 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f6e:	2008      	movs	r0, #8
 8000f70:	f7ff ff7a 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f002 f98d 	bl	8003294 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff ff74 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f002 f987 	bl	8003294 <HAL_Delay>
	HAL_Delay(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f002 f984 	bl	8003294 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f8c:	2006      	movs	r0, #6
 8000f8e:	f7ff ff6b 	bl	8000e68 <lcd_send_cmd>
	HAL_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f002 f97e 	bl	8003294 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f98:	200c      	movs	r0, #12
 8000f9a:	f7ff ff65 	bl	8000e68 <lcd_send_cmd>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000faa:	e006      	b.n	8000fba <lcd_send_string+0x18>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff87 	bl	8000ec8 <lcd_send_data>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f4      	bne.n	8000fac <lcd_send_string+0xa>
}
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <lcd_clear>:

void lcd_clear(void){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 8000fd2:	2080      	movs	r0, #128	; 0x80
 8000fd4:	f7ff ff48 	bl	8000e68 <lcd_send_cmd>
	for (int i = 0; i < 70; i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	e005      	b.n	8000fea <lcd_clear+0x1e>
		lcd_send_data(' ');
 8000fde:	2020      	movs	r0, #32
 8000fe0:	f7ff ff72 	bl	8000ec8 <lcd_send_data>
	for (int i = 0; i < 70; i++)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b45      	cmp	r3, #69	; 0x45
 8000fee:	ddf6      	ble.n	8000fde <lcd_clear+0x12>
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <lcd_put_cursor>:

void lcd_put_cursor(int row, int col){
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
	switch (row) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <lcd_put_cursor+0x18>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <lcd_put_cursor+0x22>
			break;
		case 1:
			col |= 0xC0;
			break;
		default:
			break;
 8001010:	e009      	b.n	8001026 <lcd_put_cursor+0x2c>
			col |= 0x80;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001018:	603b      	str	r3, [r7, #0]
			break;
 800101a:	e004      	b.n	8001026 <lcd_put_cursor+0x2c>
			col |= 0xC0;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001022:	603b      	str	r3, [r7, #0]
			break;
 8001024:	bf00      	nop
	}
	lcd_send_cmd(col);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff1c 	bl	8000e68 <lcd_send_cmd>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001038:	b4b0      	push	{r4, r5, r7}
 800103a:	b08f      	sub	sp, #60	; 0x3c
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001040:	f240 13b1 	movw	r3, #433	; 0x1b1
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001046:	2307      	movs	r3, #7
 8001048:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 800104c:	2307      	movs	r3, #7
 800104e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8001052:	2301      	movs	r3, #1
 8001054:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8001058:	23ff      	movs	r3, #255	; 0xff
 800105a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8001064:	2308      	movs	r3, #8
 8001066:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	461d      	mov	r5, r3
 800106c:	f107 040c 	add.w	r4, r7, #12
 8001070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001078:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800107c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	373c      	adds	r7, #60	; 0x3c
 8001084:	46bd      	mov	sp, r7
 8001086:	bcb0      	pop	{r4, r5, r7}
 8001088:	4770      	bx	lr

0800108a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001094:	2101      	movs	r1, #1
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f99f 	bl	80013da <LoRa_read>
 800109c:	4603      	mov	r3, r0
 800109e:	73bb      	strb	r3, [r7, #14]
	data = read;
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d107      	bne.n	80010ba <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	f023 0307 	bic.w	r3, r3, #7
 80010b0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
 80010b8:	e03e      	b.n	8001138 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10c      	bne.n	80010da <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80010c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010c4:	f023 0307 	bic.w	r3, r3, #7
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	61da      	str	r2, [r3, #28]
 80010d8:	e02e      	b.n	8001138 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d10c      	bne.n	80010fa <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80010e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010e4:	f023 0307 	bic.w	r3, r3, #7
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	f043 0303 	orr.w	r3, r3, #3
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	61da      	str	r2, [r3, #28]
 80010f8:	e01e      	b.n	8001138 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d10c      	bne.n	800111a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001104:	f023 0307 	bic.w	r3, r3, #7
 8001108:	b25b      	sxtb	r3, r3
 800110a:	f043 0305 	orr.w	r3, r3, #5
 800110e:	b25b      	sxtb	r3, r3
 8001110:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2205      	movs	r2, #5
 8001116:	61da      	str	r2, [r3, #28]
 8001118:	e00e      	b.n	8001138 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b06      	cmp	r3, #6
 800111e:	d10b      	bne.n	8001138 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001124:	f023 0307 	bic.w	r3, r3, #7
 8001128:	b25b      	sxtb	r3, r3
 800112a:	f043 0306 	orr.w	r3, r3, #6
 800112e:	b25b      	sxtb	r3, r3
 8001130:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2206      	movs	r2, #6
 8001136:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	461a      	mov	r2, r3
 800113c:	2101      	movs	r1, #1
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f965 	bl	800140e <LoRa_write>
	//HAL_Delay(10);
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	4613      	mov	r3, r2
 800115a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	889b      	ldrh	r3, [r3, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	f002 fb61 	bl	800382e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6998      	ldr	r0, [r3, #24]
 8001170:	88fa      	ldrh	r2, [r7, #6]
 8001172:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	f003 fccc 	bl	8004b14 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800117c:	bf00      	nop
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4618      	mov	r0, r3
 8001184:	f004 f8d1 	bl	800532a <HAL_SPI_GetState>
 8001188:	4603      	mov	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d1f7      	bne.n	800117e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6998      	ldr	r0, [r3, #24]
 8001192:	8b3a      	ldrh	r2, [r7, #24]
 8001194:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001198:	6839      	ldr	r1, [r7, #0]
 800119a:	f003 fdfe 	bl	8004d9a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800119e:	bf00      	nop
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 f8c0 	bl	800532a <HAL_SPI_GetState>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d1f7      	bne.n	80011a0 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	889b      	ldrh	r3, [r3, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	f002 fb37 	bl	800382e <HAL_GPIO_WritePin>
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	4613      	mov	r3, r2
 80011d6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	889b      	ldrh	r3, [r3, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f002 fb23 	bl	800382e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6998      	ldr	r0, [r3, #24]
 80011ec:	88fa      	ldrh	r2, [r7, #6]
 80011ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	f003 fc8e 	bl	8004b14 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011f8:	bf00      	nop
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 f893 	bl	800532a <HAL_SPI_GetState>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d1f7      	bne.n	80011fa <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6998      	ldr	r0, [r3, #24]
 800120e:	8b3a      	ldrh	r2, [r7, #24]
 8001210:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001214:	6839      	ldr	r1, [r7, #0]
 8001216:	f003 fc7d 	bl	8004b14 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800121a:	bf00      	nop
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4618      	mov	r0, r3
 8001222:	f004 f882 	bl	800532a <HAL_SPI_GetState>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d1f7      	bne.n	800121c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	889b      	ldrh	r3, [r3, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	4619      	mov	r1, r3
 8001238:	f002 faf9 	bl	800382e <HAL_GPIO_WritePin>
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	04db      	lsls	r3, r3, #19
 8001252:	115b      	asrs	r3, r3, #5
 8001254:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	0c1b      	lsrs	r3, r3, #16
 800125a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	461a      	mov	r2, r3
 8001260:	2106      	movs	r1, #6
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f8d3 	bl	800140e <LoRa_write>
	HAL_Delay(5);
 8001268:	2005      	movs	r0, #5
 800126a:	f002 f813 	bl	8003294 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001274:	7afb      	ldrb	r3, [r7, #11]
 8001276:	461a      	mov	r2, r3
 8001278:	2107      	movs	r1, #7
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f8c7 	bl	800140e <LoRa_write>
	HAL_Delay(5);
 8001280:	2005      	movs	r0, #5
 8001282:	f002 f807 	bl	8003294 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800128a:	7afb      	ldrb	r3, [r7, #11]
 800128c:	461a      	mov	r2, r3
 800128e:	2108      	movs	r1, #8
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f8bc 	bl	800140e <LoRa_write>
	HAL_Delay(5);
 8001296:	2005      	movs	r0, #5
 8001298:	f001 fffc 	bl	8003294 <HAL_Delay>
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	dd01      	ble.n	80012b8 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80012b4:	230c      	movs	r3, #12
 80012b6:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	dc01      	bgt.n	80012c2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80012be:	2307      	movs	r3, #7
 80012c0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80012c2:	211e      	movs	r1, #30
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f888 	bl	80013da <LoRa_read>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80012ce:	200a      	movs	r0, #10
 80012d0:	f001 ffe0 	bl	8003294 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80012e8:	7bbb      	ldrb	r3, [r7, #14]
 80012ea:	461a      	mov	r2, r3
 80012ec:	211e      	movs	r1, #30
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f88d 	bl	800140e <LoRa_write>
	HAL_Delay(10);
 80012f4:	200a      	movs	r0, #10
 80012f6:	f001 ffcd 	bl	8003294 <HAL_Delay>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	461a      	mov	r2, r3
 8001312:	2109      	movs	r1, #9
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f87a 	bl	800140e <LoRa_write>
	HAL_Delay(10);
 800131a:	200a      	movs	r0, #10
 800131c:	f001 ffba 	bl	8003294 <HAL_Delay>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	2b2c      	cmp	r3, #44	; 0x2c
 800133c:	d801      	bhi.n	8001342 <LoRa_setOCP+0x1a>
		current = 45;
 800133e:	232d      	movs	r3, #45	; 0x2d
 8001340:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	2bf0      	cmp	r3, #240	; 0xf0
 8001346:	d901      	bls.n	800134c <LoRa_setOCP+0x24>
		current = 240;
 8001348:	23f0      	movs	r3, #240	; 0xf0
 800134a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	2b78      	cmp	r3, #120	; 0x78
 8001350:	d809      	bhi.n	8001366 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	3b2d      	subs	r3, #45	; 0x2d
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <LoRa_setOCP+0x78>)
 8001358:	fb82 1203 	smull	r1, r2, r2, r3
 800135c:	1052      	asrs	r2, r2, #1
 800135e:	17db      	asrs	r3, r3, #31
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e00b      	b.n	800137e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	2bf0      	cmp	r3, #240	; 0xf0
 800136a:	d808      	bhi.n	800137e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	331e      	adds	r3, #30
 8001370:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <LoRa_setOCP+0x78>)
 8001372:	fb82 1203 	smull	r1, r2, r2, r3
 8001376:	1092      	asrs	r2, r2, #2
 8001378:	17db      	asrs	r3, r3, #31
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	3320      	adds	r3, #32
 8001382:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	461a      	mov	r2, r3
 8001388:	210b      	movs	r1, #11
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f83f 	bl	800140e <LoRa_write>
	HAL_Delay(10);
 8001390:	200a      	movs	r0, #10
 8001392:	f001 ff7f 	bl	8003294 <HAL_Delay>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	66666667 	.word	0x66666667

080013a4 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80013ac:	211e      	movs	r1, #30
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f813 	bl	80013da <LoRa_read>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	f043 0307 	orr.w	r3, r3, #7
 80013be:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	461a      	mov	r2, r3
 80013c4:	211e      	movs	r1, #30
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f821 	bl	800140e <LoRa_write>
	HAL_Delay(10);
 80013cc:	200a      	movs	r0, #10
 80013ce:	f001 ff61 	bl	8003294 <HAL_Delay>
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af02      	add	r7, sp, #8
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80013f0:	f107 030f 	add.w	r3, r7, #15
 80013f4:	f107 010e 	add.w	r1, r7, #14
 80013f8:	2201      	movs	r2, #1
 80013fa:	9200      	str	r2, [sp, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fea4 	bl	800114c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af02      	add	r7, sp, #8
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	460b      	mov	r3, r1
 8001418:	70fb      	strb	r3, [r7, #3]
 800141a:	4613      	mov	r3, r2
 800141c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001424:	b2db      	uxtb	r3, r3
 8001426:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001428:	78bb      	ldrb	r3, [r7, #2]
 800142a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800142c:	f107 030f 	add.w	r3, r7, #15
 8001430:	f107 010e 	add.w	r1, r7, #14
 8001434:	2201      	movs	r2, #1
 8001436:	9200      	str	r2, [sp, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fec4 	bl	80011c8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	461a      	mov	r2, r3
 8001454:	460b      	mov	r3, r1
 8001456:	72fb      	strb	r3, [r7, #11]
 8001458:	4613      	mov	r3, r2
 800145a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800145c:	7afb      	ldrb	r3, [r7, #11]
 800145e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001462:	b2db      	uxtb	r3, r3
 8001464:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	889b      	ldrh	r3, [r3, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	f002 f9dc 	bl	800382e <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6998      	ldr	r0, [r3, #24]
 800147a:	f107 0117 	add.w	r1, r7, #23
 800147e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001482:	2201      	movs	r2, #1
 8001484:	f003 fb46 	bl	8004b14 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001488:	bf00      	nop
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4618      	mov	r0, r3
 8001490:	f003 ff4b 	bl	800532a <HAL_SPI_GetState>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d1f7      	bne.n	800148a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6998      	ldr	r0, [r3, #24]
 800149e:	7abb      	ldrb	r3, [r7, #10]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f003 fb34 	bl	8004b14 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80014ac:	bf00      	nop
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 ff39 	bl	800532a <HAL_SPI_GetState>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d1f7      	bne.n	80014ae <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	889b      	ldrh	r3, [r3, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	4619      	mov	r1, r3
 80014ca:	f002 f9b0 	bl	800382e <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]

	return 1;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	4611      	mov	r1, r2
 80014f6:	461a      	mov	r2, r3
 80014f8:	460b      	mov	r3, r1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4613      	mov	r3, r2
 80014fe:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001506:	2101      	movs	r1, #1
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff fdbe 	bl	800108a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800150e:	210e      	movs	r1, #14
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff ff62 	bl	80013da <LoRa_read>
 8001516:	4603      	mov	r3, r0
 8001518:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800151a:	7cfb      	ldrb	r3, [r7, #19]
 800151c:	461a      	mov	r2, r3
 800151e:	210d      	movs	r1, #13
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f7ff ff74 	bl	800140e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	461a      	mov	r2, r3
 800152a:	2122      	movs	r1, #34	; 0x22
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff ff6e 	bl	800140e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	2100      	movs	r1, #0
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff ff85 	bl	8001448 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800153e:	2103      	movs	r1, #3
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f7ff fda2 	bl	800108a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001546:	2112      	movs	r1, #18
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff ff46 	bl	80013da <LoRa_read>
 800154e:	4603      	mov	r3, r0
 8001550:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001552:	7cfb      	ldrb	r3, [r7, #19]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00a      	beq.n	8001572 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800155c:	22ff      	movs	r2, #255	; 0xff
 800155e:	2112      	movs	r1, #18
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff ff54 	bl	800140e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001566:	6979      	ldr	r1, [r7, #20]
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff fd8e 	bl	800108a <LoRa_gotoMode>
			return 1;
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001572:	88bb      	ldrh	r3, [r7, #4]
 8001574:	3b01      	subs	r3, #1
 8001576:	80bb      	strh	r3, [r7, #4]
 8001578:	88bb      	ldrh	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d105      	bne.n	800158a <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800157e:	6979      	ldr	r1, [r7, #20]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff fd82 	bl	800108a <LoRa_gotoMode>
				return 0;
 8001586:	2300      	movs	r3, #0
 8001588:	e003      	b.n	8001592 <LoRa_transmit+0xa8>
			}
		}
		Delay_Ms(1);
 800158a:	2001      	movs	r0, #1
 800158c:	f000 fc38 	bl	8001e00 <Delay_Ms>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001590:	e7d9      	b.n	8001546 <LoRa_transmit+0x5c>
	}
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80015a2:	2105      	movs	r1, #5
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fd70 	bl	800108a <LoRa_gotoMode>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80015b2:	b590      	push	{r4, r7, lr}
 80015b4:	b089      	sub	sp, #36	; 0x24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	4613      	mov	r3, r2
 80015be:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	e007      	b.n	80015da <LoRa_receive+0x28>
		data[i]=0;
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	4413      	add	r3, r2
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	3301      	adds	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	429a      	cmp	r2, r3
 80015e0:	dbf3      	blt.n	80015ca <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80015e2:	2101      	movs	r1, #1
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fd50 	bl	800108a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80015ea:	2112      	movs	r1, #18
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f7ff fef4 	bl	80013da <LoRa_read>
 80015f2:	4603      	mov	r3, r0
 80015f4:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80015f6:	7cfb      	ldrb	r3, [r7, #19]
 80015f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d02f      	beq.n	8001660 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001600:	22ff      	movs	r2, #255	; 0xff
 8001602:	2112      	movs	r1, #18
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff ff02 	bl	800140e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800160a:	2113      	movs	r1, #19
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff fee4 	bl	80013da <LoRa_read>
 8001612:	4603      	mov	r3, r0
 8001614:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001616:	2110      	movs	r1, #16
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff fede 	bl	80013da <LoRa_read>
 800161e:	4603      	mov	r3, r0
 8001620:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001622:	7cfb      	ldrb	r3, [r7, #19]
 8001624:	461a      	mov	r2, r3
 8001626:	210d      	movs	r1, #13
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fef0 	bl	800140e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800162e:	7cba      	ldrb	r2, [r7, #18]
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	4293      	cmp	r3, r2
 8001634:	bf28      	it	cs
 8001636:	4613      	movcs	r3, r2
 8001638:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e00b      	b.n	8001658 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	18d4      	adds	r4, r2, r3
 8001646:	2100      	movs	r1, #0
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff fec6 	bl	80013da <LoRa_read>
 800164e:	4603      	mov	r3, r0
 8001650:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	429a      	cmp	r2, r3
 800165e:	dbef      	blt.n	8001640 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001660:	2105      	movs	r1, #5
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff fd11 	bl	800108a <LoRa_gotoMode>
    return min;
 8001668:	7ffb      	ldrb	r3, [r7, #31]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}

08001672 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff2b 	bl	80014d6 <LoRa_isvalid>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8093 	beq.w	80017ae <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001688:	2100      	movs	r1, #0
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fcfd 	bl	800108a <LoRa_gotoMode>
			HAL_Delay(10);
 8001690:	200a      	movs	r0, #10
 8001692:	f001 fdff 	bl	8003294 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001696:	2101      	movs	r1, #1
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fe9e 	bl	80013da <LoRa_read>
 800169e:	4603      	mov	r3, r0
 80016a0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80016a2:	200a      	movs	r0, #10
 80016a4:	f001 fdf6 	bl	8003294 <HAL_Delay>
			data = read | 0x80;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016ae:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80016b0:	7bbb      	ldrb	r3, [r7, #14]
 80016b2:	461a      	mov	r2, r3
 80016b4:	2101      	movs	r1, #1
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fea9 	bl	800140e <LoRa_write>
			HAL_Delay(100);
 80016bc:	2064      	movs	r0, #100	; 0x64
 80016be:	f001 fde9 	bl	8003294 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fdbb 	bl	8001244 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fe13 	bl	8001302 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fe1f 	bl	8001328 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80016ea:	2223      	movs	r2, #35	; 0x23
 80016ec:	210c      	movs	r1, #12
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fe8d 	bl	800140e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fe55 	bl	80013a4 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fdce 	bl	80012a4 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001708:	22ff      	movs	r2, #255	; 0xff
 800170a:	211f      	movs	r1, #31
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fe7e 	bl	800140e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	b2da      	uxtb	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4413      	add	r3, r2
 800172c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	461a      	mov	r2, r3
 8001732:	211d      	movs	r1, #29
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fe6a 	bl	800140e <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	b29b      	uxth	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	2120      	movs	r1, #32
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fe60 	bl	800140e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	b2db      	uxtb	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	2121      	movs	r1, #33	; 0x21
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fe58 	bl	800140e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800175e:	2140      	movs	r1, #64	; 0x40
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fe3a 	bl	80013da <LoRa_read>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001770:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001772:	7bbb      	ldrb	r3, [r7, #14]
 8001774:	461a      	mov	r2, r3
 8001776:	2140      	movs	r1, #64	; 0x40
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fe48 	bl	800140e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800177e:	2101      	movs	r1, #1
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fc82 	bl	800108a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800178c:	200a      	movs	r0, #10
 800178e:	f001 fd81 	bl	8003294 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001792:	2142      	movs	r1, #66	; 0x42
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fe20 	bl	80013da <LoRa_read>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	2b12      	cmp	r3, #18
 80017a2:	d101      	bne.n	80017a8 <LoRa_init+0x136>
				return LORA_OK;
 80017a4:	23c8      	movs	r3, #200	; 0xc8
 80017a6:	e004      	b.n	80017b2 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80017a8:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80017ac:	e001      	b.n	80017b2 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80017ae:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b08c      	sub	sp, #48	; 0x30
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c2:	f001 fd05 	bl	80031d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c6:	f000 f8a7 	bl	8001918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ca:	f000 fa37 	bl	8001c3c <MX_GPIO_Init>
  MX_SPI2_Init();
 80017ce:	f000 f917 	bl	8001a00 <MX_SPI2_Init>
  MX_TIM2_Init();
 80017d2:	f000 f94b 	bl	8001a6c <MX_TIM2_Init>
  MX_TIM3_Init();
 80017d6:	f000 f995 	bl	8001b04 <MX_TIM3_Init>
  MX_I2C1_Init();
 80017da:	f000 f8e3 	bl	80019a4 <MX_I2C1_Init>
  MX_TIM4_Init();
 80017de:	f000 f9df 	bl	8001ba0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	// Initialize Timer 2 / Timer 3
	HAL_TIM_Base_Start(&htim2);
 80017e2:	4840      	ldr	r0, [pc, #256]	; (80018e4 <main+0x128>)
 80017e4:	f003 fef6 	bl	80055d4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 80017e8:	483f      	ldr	r0, [pc, #252]	; (80018e8 <main+0x12c>)
 80017ea:	f003 fef3 	bl	80055d4 <HAL_TIM_Base_Start>

	// Initialize DHT22
	while(!DHT22_Get_Data(&dht22Data))
 80017ee:	e003      	b.n	80017f8 <main+0x3c>
	{
		// DHT22 doesn't response
		// Re-Initilize again
		Delay_Ms(2000);
 80017f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017f4:	f000 fb04 	bl	8001e00 <Delay_Ms>
	while(!DHT22_Get_Data(&dht22Data))
 80017f8:	483c      	ldr	r0, [pc, #240]	; (80018ec <main+0x130>)
 80017fa:	f7ff fad9 	bl	8000db0 <DHT22_Get_Data>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f5      	beq.n	80017f0 <main+0x34>
	}

	// Initialize LCD
	lcd_init();
 8001804:	f7ff fb90 	bl	8000f28 <lcd_init>
	 * Making the bandwidth 2x wider (from BW125 to BW250) allows you to send 2x more bytes in the same time.
	 * For a LoRa® receiver to detect (capture) a packet, the transmitter and receiver frequencies need to be within 25% of the bandwidth of each other, that’s according to the data sheet.
	 * Making the spreading factor 1 step lower (from SF10 to SF9) allows you to send 2x more bytes in the same time.
	 * Lowering the spreading factor makes it more difficult for the gateway to receive a transmission, as it will be more sensitive to noise.
	 * You could compare this to two people taking in a noisy place (a bar for example). If you’re far from each other, you have to talk slow (SF10), but if you’re close, you can talk faster (SF7) */
	myLoRa = newLoRa();
 8001808:	4c39      	ldr	r4, [pc, #228]	; (80018f0 <main+0x134>)
 800180a:	463b      	mov	r3, r7
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fc13 	bl	8001038 <newLoRa>
 8001812:	4625      	mov	r5, r4
 8001814:	463c      	mov	r4, r7
 8001816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001822:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myLoRa.CS_port = NSS_GPIO_Port;
 8001826:	4b32      	ldr	r3, [pc, #200]	; (80018f0 <main+0x134>)
 8001828:	4a32      	ldr	r2, [pc, #200]	; (80018f4 <main+0x138>)
 800182a:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_Pin;
 800182c:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <main+0x134>)
 800182e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001832:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = RST_GPIO_Port;
 8001834:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <main+0x134>)
 8001836:	4a2f      	ldr	r2, [pc, #188]	; (80018f4 <main+0x138>)
 8001838:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_Pin;
 800183a:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <main+0x134>)
 800183c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001840:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_GPIO_Port;
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <main+0x134>)
 8001844:	4a2b      	ldr	r2, [pc, #172]	; (80018f4 <main+0x138>)
 8001846:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_Pin;
 8001848:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <main+0x134>)
 800184a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184e:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi2;
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <main+0x134>)
 8001852:	4a29      	ldr	r2, [pc, #164]	; (80018f8 <main+0x13c>)
 8001854:	619a      	str	r2, [r3, #24]

	// Other parameters
//	myLoRa.frequency             = 433;             // default = 433 MHz
//	myLoRa.spredingFactor        = SF_7;           	// default = SF_7
	myLoRa.bandWidth             = BW_250KHz;       // default = BW_125KHz
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <main+0x134>)
 8001858:	2208      	movs	r2, #8
 800185a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
//	myLoRa.power                 = POWER_17db;      // default = 20db

	if (LoRa_init(&myLoRa) == 200) {
 800185e:	4824      	ldr	r0, [pc, #144]	; (80018f0 <main+0x134>)
 8001860:	f7ff ff07 	bl	8001672 <LoRa_init>
 8001864:	4603      	mov	r3, r0
 8001866:	2bc8      	cmp	r3, #200	; 0xc8
 8001868:	d116      	bne.n	8001898 <main+0xdc>
		lcd_clear();
 800186a:	f7ff fbaf 	bl	8000fcc <lcd_clear>
		lcd_put_cursor(0, 5);
 800186e:	2105      	movs	r1, #5
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fbc2 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("Hello");
 8001876:	4821      	ldr	r0, [pc, #132]	; (80018fc <main+0x140>)
 8001878:	f7ff fb93 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 2);
 800187c:	2102      	movs	r1, #2
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff fbbb 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("LoRa started");
 8001884:	481e      	ldr	r0, [pc, #120]	; (8001900 <main+0x144>)
 8001886:	f7ff fb8c 	bl	8000fa2 <lcd_send_string>
		HAL_Delay(2000);
 800188a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800188e:	f001 fd01 	bl	8003294 <HAL_Delay>
		lcd_clear();
 8001892:	f7ff fb9b 	bl	8000fcc <lcd_clear>
 8001896:	e013      	b.n	80018c0 <main+0x104>
	} else {
		lcd_put_cursor(0, 0);
 8001898:	2100      	movs	r1, #0
 800189a:	2000      	movs	r0, #0
 800189c:	f7ff fbad 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("Fail to initialize LoRa");
 80018a0:	4818      	ldr	r0, [pc, #96]	; (8001904 <main+0x148>)
 80018a2:	f7ff fb7e 	bl	8000fa2 <lcd_send_string>
		HAL_Delay(3000);
 80018a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018aa:	f001 fcf3 	bl	8003294 <HAL_Delay>
		lcd_clear();
 80018ae:	f7ff fb8d 	bl	8000fcc <lcd_clear>
		lcd_put_cursor(0, 0);
 80018b2:	2100      	movs	r1, #0
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff fba0 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("Please try again!");
 80018ba:	4813      	ldr	r0, [pc, #76]	; (8001908 <main+0x14c>)
 80018bc:	f7ff fb71 	bl	8000fa2 <lcd_send_string>
	}
	LoRa_startReceiving(&myLoRa); // Start LoRa receive mode
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <main+0x134>)
 80018c2:	f7ff fe6a 	bl	800159a <LoRa_startReceiving>

	// Turn off the alarm mode
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018cc:	480f      	ldr	r0, [pc, #60]	; (800190c <main+0x150>)
 80018ce:	f001 ffae 	bl	800382e <HAL_GPIO_WritePin>


	//SCB->SCR |= ( 1 << 1);
		HAL_PWR_EnableSleepOnExit();
 80018d2:	f002 fc91 	bl	80041f8 <HAL_PWR_EnableSleepOnExit>

	/* lets start with fresh Status register of Timer to avoid any spurious interrupts */
	    TIM4->SR = 0;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <main+0x154>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]

	// Start Timer 4
	HAL_TIM_Base_Start_IT(&htim4);
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <main+0x158>)
 80018de:	f003 fec3 	bl	8005668 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80018e2:	e7fe      	b.n	80018e2 <main+0x126>
 80018e4:	200002c8 	.word	0x200002c8
 80018e8:	20000310 	.word	0x20000310
 80018ec:	20000458 	.word	0x20000458
 80018f0:	200003a0 	.word	0x200003a0
 80018f4:	40010c00 	.word	0x40010c00
 80018f8:	20000270 	.word	0x20000270
 80018fc:	0800ae98 	.word	0x0800ae98
 8001900:	0800aea0 	.word	0x0800aea0
 8001904:	0800aeb0 	.word	0x0800aeb0
 8001908:	0800aec8 	.word	0x0800aec8
 800190c:	40011000 	.word	0x40011000
 8001910:	40000800 	.word	0x40000800
 8001914:	20000358 	.word	0x20000358

08001918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b090      	sub	sp, #64	; 0x40
 800191c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191e:	f107 0318 	add.w	r3, r7, #24
 8001922:	2228      	movs	r2, #40	; 0x28
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f005 fa25 	bl	8006d76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800193a:	2301      	movs	r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800193e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001942:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001948:	2301      	movs	r3, #1
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194c:	2302      	movs	r3, #2
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001956:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800195a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800195c:	f107 0318 	add.w	r3, r7, #24
 8001960:	4618      	mov	r0, r3
 8001962:	f002 fc57 	bl	8004214 <HAL_RCC_OscConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800196c:	f001 f9e4 	bl	8002d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001970:	230f      	movs	r3, #15
 8001972:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001974:	2302      	movs	r3, #2
 8001976:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800197c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001980:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2102      	movs	r1, #2
 800198a:	4618      	mov	r0, r3
 800198c:	f002 fec4 	bl	8004718 <HAL_RCC_ClockConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001996:	f001 f9cf 	bl	8002d38 <Error_Handler>
  }
}
 800199a:	bf00      	nop
 800199c:	3740      	adds	r7, #64	; 0x40
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <MX_I2C1_Init+0x54>)
 80019ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <MX_I2C1_Init+0x58>)
 80019b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019e2:	f001 ff6d 	bl	80038c0 <HAL_I2C_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019ec:	f001 f9a4 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000021c 	.word	0x2000021c
 80019f8:	40005400 	.word	0x40005400
 80019fc:	000186a0 	.word	0x000186a0

08001a00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_SPI2_Init+0x64>)
 8001a06:	4a18      	ldr	r2, [pc, #96]	; (8001a68 <MX_SPI2_Init+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <MX_SPI2_Init+0x64>)
 8001a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_SPI2_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_SPI2_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_SPI2_Init+0x64>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_SPI2_Init+0x64>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_SPI2_Init+0x64>)
 8001a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_SPI2_Init+0x64>)
 8001a34:	2208      	movs	r2, #8
 8001a36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <MX_SPI2_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_SPI2_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <MX_SPI2_Init+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_SPI2_Init+0x64>)
 8001a4c:	220a      	movs	r2, #10
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <MX_SPI2_Init+0x64>)
 8001a52:	f002 ffdb 	bl	8004a0c <HAL_SPI_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a5c:	f001 f96c 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000270 	.word	0x20000270
 8001a68:	40003800 	.word	0x40003800

08001a6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	463b      	mov	r3, r7
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <MX_TIM2_Init+0x94>)
 8001a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <MX_TIM2_Init+0x94>)
 8001a92:	2247      	movs	r2, #71	; 0x47
 8001a94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <MX_TIM2_Init+0x94>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <MX_TIM2_Init+0x94>)
 8001a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <MX_TIM2_Init+0x94>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <MX_TIM2_Init+0x94>)
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ab0:	4813      	ldr	r0, [pc, #76]	; (8001b00 <MX_TIM2_Init+0x94>)
 8001ab2:	f003 fd3f 	bl	8005534 <HAL_TIM_Base_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001abc:	f001 f93c 	bl	8002d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	4619      	mov	r1, r3
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <MX_TIM2_Init+0x94>)
 8001ace:	f003 ff53 	bl	8005978 <HAL_TIM_ConfigClockSource>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ad8:	f001 f92e 	bl	8002d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_TIM2_Init+0x94>)
 8001aea:	f004 f929 	bl	8005d40 <HAL_TIMEx_MasterConfigSynchronization>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001af4:	f001 f920 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200002c8 	.word	0x200002c8

08001b04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0308 	add.w	r3, r7, #8
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	463b      	mov	r3, r7
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <MX_TIM3_Init+0x94>)
 8001b22:	4a1e      	ldr	r2, [pc, #120]	; (8001b9c <MX_TIM3_Init+0x98>)
 8001b24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000-1;
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <MX_TIM3_Init+0x94>)
 8001b28:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001b2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <MX_TIM3_Init+0x94>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <MX_TIM3_Init+0x94>)
 8001b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <MX_TIM3_Init+0x94>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <MX_TIM3_Init+0x94>)
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b48:	4813      	ldr	r0, [pc, #76]	; (8001b98 <MX_TIM3_Init+0x94>)
 8001b4a:	f003 fcf3 	bl	8005534 <HAL_TIM_Base_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b54:	f001 f8f0 	bl	8002d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	4619      	mov	r1, r3
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <MX_TIM3_Init+0x94>)
 8001b66:	f003 ff07 	bl	8005978 <HAL_TIM_ConfigClockSource>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b70:	f001 f8e2 	bl	8002d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_TIM3_Init+0x94>)
 8001b82:	f004 f8dd 	bl	8005d40 <HAL_TIMEx_MasterConfigSynchronization>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b8c:	f001 f8d4 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000310 	.word	0x20000310
 8001b9c:	40000400 	.word	0x40000400

08001ba0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <MX_TIM4_Init+0x98>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001bc4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001bc8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001bd2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001bd6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001be4:	4813      	ldr	r0, [pc, #76]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001be6:	f003 fca5 	bl	8005534 <HAL_TIM_Base_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bf0:	f001 f8a2 	bl	8002d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001c02:	f003 feb9 	bl	8005978 <HAL_TIM_ConfigClockSource>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c0c:	f001 f894 	bl	8002d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c18:	463b      	mov	r3, r7
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001c1e:	f004 f88f 	bl	8005d40 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c28:	f001 f886 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000358 	.word	0x20000358
 8001c38:	40000800 	.word	0x40000800

08001c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c50:	4b5a      	ldr	r3, [pc, #360]	; (8001dbc <MX_GPIO_Init+0x180>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a59      	ldr	r2, [pc, #356]	; (8001dbc <MX_GPIO_Init+0x180>)
 8001c56:	f043 0310 	orr.w	r3, r3, #16
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b57      	ldr	r3, [pc, #348]	; (8001dbc <MX_GPIO_Init+0x180>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c68:	4b54      	ldr	r3, [pc, #336]	; (8001dbc <MX_GPIO_Init+0x180>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a53      	ldr	r2, [pc, #332]	; (8001dbc <MX_GPIO_Init+0x180>)
 8001c6e:	f043 0320 	orr.w	r3, r3, #32
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b51      	ldr	r3, [pc, #324]	; (8001dbc <MX_GPIO_Init+0x180>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <MX_GPIO_Init+0x180>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a4d      	ldr	r2, [pc, #308]	; (8001dbc <MX_GPIO_Init+0x180>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <MX_GPIO_Init+0x180>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c98:	4b48      	ldr	r3, [pc, #288]	; (8001dbc <MX_GPIO_Init+0x180>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a47      	ldr	r2, [pc, #284]	; (8001dbc <MX_GPIO_Init+0x180>)
 8001c9e:	f043 0308 	orr.w	r3, r3, #8
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <MX_GPIO_Init+0x180>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb6:	4842      	ldr	r0, [pc, #264]	; (8001dc0 <MX_GPIO_Init+0x184>)
 8001cb8:	f001 fdb9 	bl	800382e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT22_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001cc2:	4840      	ldr	r0, [pc, #256]	; (8001dc4 <MX_GPIO_Init+0x188>)
 8001cc4:	f001 fdb3 	bl	800382e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|NSS_Pin, GPIO_PIN_SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001cce:	483e      	ldr	r0, [pc, #248]	; (8001dc8 <MX_GPIO_Init+0x18c>)
 8001cd0:	f001 fdad 	bl	800382e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	f107 0310 	add.w	r3, r7, #16
 8001cea:	4619      	mov	r1, r3
 8001cec:	4834      	ldr	r0, [pc, #208]	; (8001dc0 <MX_GPIO_Init+0x184>)
 8001cee:	f001 fc03 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_BUTTON_Pin INC_BUTTON_Pin DES_BUTTON_Pin MODE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BUZZER_BUTTON_Pin|INC_BUTTON_Pin|DES_BUTTON_Pin|MODE_BUTTON_Pin;
 8001cf2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cf8:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <MX_GPIO_Init+0x190>)
 8001cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	4619      	mov	r1, r3
 8001d06:	482f      	ldr	r0, [pc, #188]	; (8001dc4 <MX_GPIO_Init+0x188>)
 8001d08:	f001 fbf6 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin|BUZZER_Pin;
 8001d0c:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 0310 	add.w	r3, r7, #16
 8001d22:	4619      	mov	r1, r3
 8001d24:	4827      	ldr	r0, [pc, #156]	; (8001dc4 <MX_GPIO_Init+0x188>)
 8001d26:	f001 fbe7 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d30:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <MX_GPIO_Init+0x190>)
 8001d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d34:	2302      	movs	r3, #2
 8001d36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4822      	ldr	r0, [pc, #136]	; (8001dc8 <MX_GPIO_Init+0x18c>)
 8001d40:	f001 fbda 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin;
 8001d44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	481a      	ldr	r0, [pc, #104]	; (8001dc8 <MX_GPIO_Init+0x18c>)
 8001d5e:	f001 fbcb 	bl	80034f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	2007      	movs	r0, #7
 8001d68:	f001 fb8f 	bl	800348a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d6c:	2007      	movs	r0, #7
 8001d6e:	f001 fba8 	bl	80034c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2107      	movs	r1, #7
 8001d76:	2008      	movs	r0, #8
 8001d78:	f001 fb87 	bl	800348a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d7c:	2008      	movs	r0, #8
 8001d7e:	f001 fba0 	bl	80034c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2107      	movs	r1, #7
 8001d86:	2009      	movs	r0, #9
 8001d88:	f001 fb7f 	bl	800348a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d8c:	2009      	movs	r0, #9
 8001d8e:	f001 fb98 	bl	80034c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2107      	movs	r1, #7
 8001d96:	2017      	movs	r0, #23
 8001d98:	f001 fb77 	bl	800348a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d9c:	2017      	movs	r0, #23
 8001d9e:	f001 fb90 	bl	80034c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	2028      	movs	r0, #40	; 0x28
 8001da8:	f001 fb6f 	bl	800348a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dac:	2028      	movs	r0, #40	; 0x28
 8001dae:	f001 fb88 	bl	80034c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001db2:	bf00      	nop
 8001db4:	3720      	adds	r7, #32
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40011000 	.word	0x40011000
 8001dc4:	40010800 	.word	0x40010800
 8001dc8:	40010c00 	.word	0x40010c00
 8001dcc:	10110000 	.word	0x10110000

08001dd0 <Delay_Us>:

/* USER CODE BEGIN 4 */

// Delay micro-second function
void Delay_Us(uint32_t us)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0); // set counter value to 0
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <Delay_Us+0x2c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8001de0:	bf00      	nop
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <Delay_Us+0x2c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d8f9      	bhi.n	8001de2 <Delay_Us+0x12>
		; // wait for the counter to reach the us input in the parameter
}
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	200002c8 	.word	0x200002c8

08001e00 <Delay_Ms>:

// Delay mili-second function
void Delay_Ms(uint32_t ms)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3, 0); // set counter value to 0
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <Delay_Ms+0x2c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < ms*2)
 8001e10:	bf00      	nop
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <Delay_Ms+0x2c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3f8      	bcc.n	8001e12 <Delay_Ms+0x12>
		; // wait for the counter to reach the us input in the parameter
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	20000310 	.word	0x20000310

08001e30 <Buzzer_Trigger>:

// Trigger Buzzer function
void Buzzer_Trigger(void) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e3a:	4807      	ldr	r0, [pc, #28]	; (8001e58 <Buzzer_Trigger+0x28>)
 8001e3c:	f001 fcf7 	bl	800382e <HAL_GPIO_WritePin>
	Delay_Ms(130);
 8001e40:	2082      	movs	r0, #130	; 0x82
 8001e42:	f7ff ffdd 	bl	8001e00 <Delay_Ms>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <Buzzer_Trigger+0x28>)
 8001e4e:	f001 fcee 	bl	800382e <HAL_GPIO_WritePin>
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	00000000 	.word	0x00000000

08001e60 <HAL_GPIO_EXTI_Callback>:

// Buzzer button callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e70:	f000 80fb 	beq.w	800206a <HAL_GPIO_EXTI_Callback+0x20a>
 8001e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e78:	f300 80ff 	bgt.w	800207a <HAL_GPIO_EXTI_Callback+0x21a>
 8001e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e80:	d00e      	beq.n	8001ea0 <HAL_GPIO_EXTI_Callback+0x40>
 8001e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e86:	f300 80f8 	bgt.w	800207a <HAL_GPIO_EXTI_Callback+0x21a>
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	f000 809f 	beq.w	8001fce <HAL_GPIO_EXTI_Callback+0x16e>
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	f300 80f2 	bgt.w	800207a <HAL_GPIO_EXTI_Callback+0x21a>
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d032      	beq.n	8001f00 <HAL_GPIO_EXTI_Callback+0xa0>
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d049      	beq.n	8001f32 <HAL_GPIO_EXTI_Callback+0xd2>
 8001e9e:	e0ec      	b.n	800207a <HAL_GPIO_EXTI_Callback+0x21a>
		// MODE_BUTTON pressed
		case MODE_BUTTON_Pin:
			Buzzer_Trigger();
 8001ea0:	f7ff ffc6 	bl	8001e30 <Buzzer_Trigger>
			if(mode == NORMAL)
 8001ea4:	4b7c      	ldr	r3, [pc, #496]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <HAL_GPIO_EXTI_Callback+0x58>
			{
				lcd_clear();
 8001eac:	f7ff f88e 	bl	8000fcc <lcd_clear>
				mode = TEMPERATURE_SETPOINT_LOW;
 8001eb0:	4b79      	ldr	r3, [pc, #484]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
			else
			{
				lcd_clear();
				mode = NORMAL;
			}
			break;
 8001eb6:	e0e4      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>
			else if(mode == TEMPERATURE_SETPOINT_LOW)
 8001eb8:	4b77      	ldr	r3, [pc, #476]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_GPIO_EXTI_Callback+0x6c>
				lcd_clear();
 8001ec0:	f7ff f884 	bl	8000fcc <lcd_clear>
				mode = TEMPERATURE_SETPOINT_HIGH;
 8001ec4:	4b74      	ldr	r3, [pc, #464]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	701a      	strb	r2, [r3, #0]
			break;
 8001eca:	e0da      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>
			else if(mode == TEMPERATURE_SETPOINT_HIGH)
 8001ecc:	4b72      	ldr	r3, [pc, #456]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d105      	bne.n	8001ee0 <HAL_GPIO_EXTI_Callback+0x80>
				lcd_clear();
 8001ed4:	f7ff f87a 	bl	8000fcc <lcd_clear>
				mode = HUMIDITY_SETPOINT_LOW;
 8001ed8:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001eda:	2203      	movs	r2, #3
 8001edc:	701a      	strb	r2, [r3, #0]
			break;
 8001ede:	e0d0      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>
			else if(mode == HUMIDITY_SETPOINT_LOW)
 8001ee0:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d105      	bne.n	8001ef4 <HAL_GPIO_EXTI_Callback+0x94>
				lcd_clear();
 8001ee8:	f7ff f870 	bl	8000fcc <lcd_clear>
				mode = HUMIDITY_SETPOINT_HIGH;
 8001eec:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001eee:	2204      	movs	r2, #4
 8001ef0:	701a      	strb	r2, [r3, #0]
			break;
 8001ef2:	e0c6      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>
				lcd_clear();
 8001ef4:	f7ff f86a 	bl	8000fcc <lcd_clear>
				mode = NORMAL;
 8001ef8:	4b67      	ldr	r3, [pc, #412]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
			break;
 8001efe:	e0c0      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>

		// BUZZER_BUTTON pressed
		case BUZZER_BUTTON_Pin:
			Buzzer_Trigger();
 8001f00:	f7ff ff96 	bl	8001e30 <Buzzer_Trigger>
			// Toggle the built-in LED, changing the alarm status
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f08:	4864      	ldr	r0, [pc, #400]	; (800209c <HAL_GPIO_EXTI_Callback+0x23c>)
 8001f0a:	f001 fca8 	bl	800385e <HAL_GPIO_TogglePin>
			// Check if the alarm is turned OFF
			if(HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin))
 8001f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f12:	4862      	ldr	r0, [pc, #392]	; (800209c <HAL_GPIO_EXTI_Callback+0x23c>)
 8001f14:	f001 fc74 	bl	8003800 <HAL_GPIO_ReadPin>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_GPIO_EXTI_Callback+0xca>
			{
				// clear the LCD screen
				lcd_clear();
 8001f1e:	f7ff f855 	bl	8000fcc <lcd_clear>
				alarmStatus = 0;
 8001f22:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x240>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
			}
			else
			{
				alarmStatus = 1;
			}
			break;
 8001f28:	e0ab      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>
				alarmStatus = 1;
 8001f2a:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x240>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
			break;
 8001f30:	e0a7      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>

		// INC_BUTTON pressed
		case INC_BUTTON_Pin:
			Buzzer_Trigger();
 8001f32:	f7ff ff7d 	bl	8001e30 <Buzzer_Trigger>
			if(mode == TEMPERATURE_SETPOINT_LOW)
 8001f36:	4b58      	ldr	r3, [pc, #352]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d10d      	bne.n	8001f5a <HAL_GPIO_EXTI_Callback+0xfa>
			{
				temp_setpoint[0] = temp_setpoint[0] + 0.1;
 8001f3e:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x244>)
 8001f40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f44:	a352      	add	r3, pc, #328	; (adr r3, 8002090 <HAL_GPIO_EXTI_Callback+0x230>)
 8001f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4a:	f7fe f919 	bl	8000180 <__adddf3>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4954      	ldr	r1, [pc, #336]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x244>)
 8001f54:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else
			{
				mode = NORMAL;
			}
			break;
 8001f58:	e093      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>
			else if(mode == TEMPERATURE_SETPOINT_HIGH)
 8001f5a:	4b4f      	ldr	r3, [pc, #316]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d10d      	bne.n	8001f7e <HAL_GPIO_EXTI_Callback+0x11e>
				temp_setpoint[1] = temp_setpoint[1] + 0.1;
 8001f62:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x244>)
 8001f64:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f68:	a349      	add	r3, pc, #292	; (adr r3, 8002090 <HAL_GPIO_EXTI_Callback+0x230>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe f907 	bl	8000180 <__adddf3>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	494b      	ldr	r1, [pc, #300]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x244>)
 8001f78:	e9c1 2302 	strd	r2, r3, [r1, #8]
			break;
 8001f7c:	e081      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>
			else if(mode == HUMIDITY_SETPOINT_LOW)
 8001f7e:	4b46      	ldr	r3, [pc, #280]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d10d      	bne.n	8001fa2 <HAL_GPIO_EXTI_Callback+0x142>
				humid_setpoint[0] = humid_setpoint[0] + 0.1;
 8001f86:	4b48      	ldr	r3, [pc, #288]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x248>)
 8001f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f8c:	a340      	add	r3, pc, #256	; (adr r3, 8002090 <HAL_GPIO_EXTI_Callback+0x230>)
 8001f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f92:	f7fe f8f5 	bl	8000180 <__adddf3>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4943      	ldr	r1, [pc, #268]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x248>)
 8001f9c:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001fa0:	e06f      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>
			else if(mode == HUMIDITY_SETPOINT_HIGH)
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d10d      	bne.n	8001fc6 <HAL_GPIO_EXTI_Callback+0x166>
				humid_setpoint[1] = humid_setpoint[1] + 0.1;
 8001faa:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x248>)
 8001fac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001fb0:	a337      	add	r3, pc, #220	; (adr r3, 8002090 <HAL_GPIO_EXTI_Callback+0x230>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	f7fe f8e3 	bl	8000180 <__adddf3>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	493a      	ldr	r1, [pc, #232]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x248>)
 8001fc0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			break;
 8001fc4:	e05d      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>
				mode = NORMAL;
 8001fc6:	4b34      	ldr	r3, [pc, #208]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
			break;
 8001fcc:	e059      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>

		// DES_BUTTON pressed
		case DES_BUTTON_Pin:
			Buzzer_Trigger();
 8001fce:	f7ff ff2f 	bl	8001e30 <Buzzer_Trigger>
			if(mode == TEMPERATURE_SETPOINT_LOW)
 8001fd2:	4b31      	ldr	r3, [pc, #196]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d10d      	bne.n	8001ff6 <HAL_GPIO_EXTI_Callback+0x196>
			{
				temp_setpoint[0] = temp_setpoint[0] - 0.1;
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x244>)
 8001fdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fe0:	a32b      	add	r3, pc, #172	; (adr r3, 8002090 <HAL_GPIO_EXTI_Callback+0x230>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	f7fe f8c9 	bl	800017c <__aeabi_dsub>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	492d      	ldr	r1, [pc, #180]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x244>)
 8001ff0:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else
			{
				mode = NORMAL;
			}
			break;
 8001ff4:	e045      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>
			else if(mode == TEMPERATURE_SETPOINT_HIGH)
 8001ff6:	4b28      	ldr	r3, [pc, #160]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d10d      	bne.n	800201a <HAL_GPIO_EXTI_Callback+0x1ba>
				temp_setpoint[1] = temp_setpoint[1] - 0.1;
 8001ffe:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x244>)
 8002000:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002004:	a322      	add	r3, pc, #136	; (adr r3, 8002090 <HAL_GPIO_EXTI_Callback+0x230>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe f8b7 	bl	800017c <__aeabi_dsub>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4924      	ldr	r1, [pc, #144]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x244>)
 8002014:	e9c1 2302 	strd	r2, r3, [r1, #8]
			break;
 8002018:	e033      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>
			else if(mode == HUMIDITY_SETPOINT_LOW)
 800201a:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d10d      	bne.n	800203e <HAL_GPIO_EXTI_Callback+0x1de>
				humid_setpoint[0] = humid_setpoint[0] - 0.1;
 8002022:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x248>)
 8002024:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002028:	a319      	add	r3, pc, #100	; (adr r3, 8002090 <HAL_GPIO_EXTI_Callback+0x230>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe f8a5 	bl	800017c <__aeabi_dsub>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	491c      	ldr	r1, [pc, #112]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x248>)
 8002038:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 800203c:	e021      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>
			else if(mode == HUMIDITY_SETPOINT_HIGH)
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b04      	cmp	r3, #4
 8002044:	d10d      	bne.n	8002062 <HAL_GPIO_EXTI_Callback+0x202>
				humid_setpoint[1] = humid_setpoint[1] - 0.1;
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x248>)
 8002048:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800204c:	a310      	add	r3, pc, #64	; (adr r3, 8002090 <HAL_GPIO_EXTI_Callback+0x230>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe f893 	bl	800017c <__aeabi_dsub>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4913      	ldr	r1, [pc, #76]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x248>)
 800205c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			break;
 8002060:	e00f      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>
				mode = NORMAL;
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
			break;
 8002068:	e00b      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>

		case DIO0_Pin:
			/* LoRa receiving */
			LoRa_receive(&myLoRa, (uint8_t*) received_data, 20);
 800206a:	2214      	movs	r2, #20
 800206c:	490f      	ldr	r1, [pc, #60]	; (80020ac <HAL_GPIO_EXTI_Callback+0x24c>)
 800206e:	4810      	ldr	r0, [pc, #64]	; (80020b0 <HAL_GPIO_EXTI_Callback+0x250>)
 8002070:	f7ff fa9f 	bl	80015b2 <LoRa_receive>
			LoRa_Receive_Handle();
 8002074:	f000 fd16 	bl	8002aa4 <LoRa_Receive_Handle>
			break;
 8002078:	e003      	b.n	8002082 <HAL_GPIO_EXTI_Callback+0x222>

		// Something went wrong, turn back to NORMAL MODE
		default:
			mode = NORMAL;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_GPIO_EXTI_Callback+0x238>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
			break;
 8002080:	bf00      	nop
	}
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	f3af 8000 	nop.w
 8002090:	9999999a 	.word	0x9999999a
 8002094:	3fb99999 	.word	0x3fb99999
 8002098:	20000454 	.word	0x20000454
 800209c:	40011000 	.word	0x40011000
 80020a0:	20000470 	.word	0x20000470
 80020a4:	20000008 	.word	0x20000008
 80020a8:	20000018 	.word	0x20000018
 80020ac:	20000430 	.word	0x20000430
 80020b0:	200003a0 	.word	0x200003a0

080020b4 <Data_Packet_Encapsulation>:

// Encapsulate the data into a packet containing the string: "source_id, destination_id, sendingType, temperature, humidity, safety"
void Data_Packet_Encapsulation(char* buffer ,int src_id, int des_id, int sendingType, double temp, double humid, int safety)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08c      	sub	sp, #48	; 0x30
 80020b8:	af08      	add	r7, sp, #32
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	603b      	str	r3, [r7, #0]
	sprintf(buffer, "%d,%d,%d,%0.1lf,%0.1lf,%d", src_id, des_id, sendingType, temp, humid, safety);
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	9306      	str	r3, [sp, #24]
 80020c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80020ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	4904      	ldr	r1, [pc, #16]	; (80020f0 <Data_Packet_Encapsulation+0x3c>)
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f004 fdb9 	bl	8006c58 <siprintf>
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	0800aedc 	.word	0x0800aedc

080020f4 <Status_Packet_Encapsulation>:

// Encapsulate the status into a packet containing the string: "source_id,destination_id, sendingType, cmd_status, alarm_status"
void Status_Packet_Encapsulation(char* buffer ,int src_id, int des_id, int sendingType, int cmd_status, int alarm_status)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af04      	add	r7, sp, #16
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
	sprintf(buffer, "%d,%d,%d,%d,%d", src_id, des_id, sendingType, cmd_status, alarm_status);
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	9302      	str	r3, [sp, #8]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	4904      	ldr	r1, [pc, #16]	; (8002124 <Status_Packet_Encapsulation+0x30>)
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f004 fd9f 	bl	8006c58 <siprintf>
}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	0800aef8 	.word	0x0800aef8

08002128 <Lcd_Sytem_State_Print>:

// System state LCD print
void Lcd_Sytem_State_Print(uint8_t mode) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	2b04      	cmp	r3, #4
 8002136:	f200 826d 	bhi.w	8002614 <Lcd_Sytem_State_Print+0x4ec>
 800213a:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <Lcd_Sytem_State_Print+0x18>)
 800213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002140:	08002155 	.word	0x08002155
 8002144:	08002231 	.word	0x08002231
 8002148:	080022f5 	.word	0x080022f5
 800214c:	080023f5 	.word	0x080023f5
 8002150:	08002505 	.word	0x08002505

	// NORMAL MODE LCD print
	case NORMAL:
		lcd_put_cursor(0, 0);
 8002154:	2100      	movs	r1, #0
 8002156:	2000      	movs	r0, #0
 8002158:	f7fe ff4f 	bl	8000ffa <lcd_put_cursor>
		if(dht22Data.temperature <= 9.9 && dht22Data.temperature >= 0.0)
 800215c:	4b98      	ldr	r3, [pc, #608]	; (80023c0 <Lcd_Sytem_State_Print+0x298>)
 800215e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002162:	a395      	add	r3, pc, #596	; (adr r3, 80023b8 <Lcd_Sytem_State_Print+0x290>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f7fe fc3c 	bl	80009e4 <__aeabi_dcmple>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d013      	beq.n	800219a <Lcd_Sytem_State_Print+0x72>
 8002172:	4b93      	ldr	r3, [pc, #588]	; (80023c0 <Lcd_Sytem_State_Print+0x298>)
 8002174:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	f7fe fc3a 	bl	80009f8 <__aeabi_dcmpge>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <Lcd_Sytem_State_Print+0x72>
		{
			sprintf(lcd_data, "TEMP:  %0.1lf C", dht22Data.temperature);
 800218a:	4b8d      	ldr	r3, [pc, #564]	; (80023c0 <Lcd_Sytem_State_Print+0x298>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	498c      	ldr	r1, [pc, #560]	; (80023c4 <Lcd_Sytem_State_Print+0x29c>)
 8002192:	488d      	ldr	r0, [pc, #564]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 8002194:	f004 fd60 	bl	8006c58 <siprintf>
 8002198:	e006      	b.n	80021a8 <Lcd_Sytem_State_Print+0x80>
		}
		else
		{
			sprintf(lcd_data, "TEMP: %0.1lf C", dht22Data.temperature);
 800219a:	4b89      	ldr	r3, [pc, #548]	; (80023c0 <Lcd_Sytem_State_Print+0x298>)
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	498a      	ldr	r1, [pc, #552]	; (80023cc <Lcd_Sytem_State_Print+0x2a4>)
 80021a2:	4889      	ldr	r0, [pc, #548]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 80021a4:	f004 fd58 	bl	8006c58 <siprintf>
		}
		lcd_send_string(lcd_data);
 80021a8:	4887      	ldr	r0, [pc, #540]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 80021aa:	f7fe fefa 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 80021ae:	2100      	movs	r1, #0
 80021b0:	2001      	movs	r0, #1
 80021b2:	f7fe ff22 	bl	8000ffa <lcd_put_cursor>
		if(dht22Data.humidity <= 9.9 && dht22Data.humidity >= 0)
 80021b6:	4b82      	ldr	r3, [pc, #520]	; (80023c0 <Lcd_Sytem_State_Print+0x298>)
 80021b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021bc:	a37e      	add	r3, pc, #504	; (adr r3, 80023b8 <Lcd_Sytem_State_Print+0x290>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	f7fe fc0f 	bl	80009e4 <__aeabi_dcmple>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <Lcd_Sytem_State_Print+0xcc>
 80021cc:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <Lcd_Sytem_State_Print+0x298>)
 80021ce:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	f7fe fc0d 	bl	80009f8 <__aeabi_dcmpge>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <Lcd_Sytem_State_Print+0xcc>
		{
			sprintf(lcd_data, "HUMID:   %0.1lf %%", dht22Data.humidity);
 80021e4:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <Lcd_Sytem_State_Print+0x298>)
 80021e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021ea:	4979      	ldr	r1, [pc, #484]	; (80023d0 <Lcd_Sytem_State_Print+0x2a8>)
 80021ec:	4876      	ldr	r0, [pc, #472]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 80021ee:	f004 fd33 	bl	8006c58 <siprintf>
 80021f2:	e019      	b.n	8002228 <Lcd_Sytem_State_Print+0x100>
		}
		else if(dht22Data.humidity == 100.0)
 80021f4:	4b72      	ldr	r3, [pc, #456]	; (80023c0 <Lcd_Sytem_State_Print+0x298>)
 80021f6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	4b75      	ldr	r3, [pc, #468]	; (80023d4 <Lcd_Sytem_State_Print+0x2ac>)
 8002200:	f7fe fbdc 	bl	80009bc <__aeabi_dcmpeq>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <Lcd_Sytem_State_Print+0xf2>
		{
			sprintf(lcd_data, "HUMID: %0.1lf %%", dht22Data.humidity);
 800220a:	4b6d      	ldr	r3, [pc, #436]	; (80023c0 <Lcd_Sytem_State_Print+0x298>)
 800220c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002210:	4971      	ldr	r1, [pc, #452]	; (80023d8 <Lcd_Sytem_State_Print+0x2b0>)
 8002212:	486d      	ldr	r0, [pc, #436]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 8002214:	f004 fd20 	bl	8006c58 <siprintf>
 8002218:	e006      	b.n	8002228 <Lcd_Sytem_State_Print+0x100>
		}
		else
		{
			sprintf(lcd_data, "HUMID:  %0.1lf %%", dht22Data.humidity);
 800221a:	4b69      	ldr	r3, [pc, #420]	; (80023c0 <Lcd_Sytem_State_Print+0x298>)
 800221c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002220:	496e      	ldr	r1, [pc, #440]	; (80023dc <Lcd_Sytem_State_Print+0x2b4>)
 8002222:	4869      	ldr	r0, [pc, #420]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 8002224:	f004 fd18 	bl	8006c58 <siprintf>
		}
		lcd_send_string(lcd_data);
 8002228:	4867      	ldr	r0, [pc, #412]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 800222a:	f7fe feba 	bl	8000fa2 <lcd_send_string>
		break;
 800222e:	e1f4      	b.n	800261a <Lcd_Sytem_State_Print+0x4f2>

	//  TEMPERATURE_SETPOINT_LOW MODE LCD print
	case TEMPERATURE_SETPOINT_LOW:
		lcd_put_cursor(0, 0);
 8002230:	2100      	movs	r1, #0
 8002232:	2000      	movs	r0, #0
 8002234:	f7fe fee1 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("TempSetpoint(L)");
 8002238:	4869      	ldr	r0, [pc, #420]	; (80023e0 <Lcd_Sytem_State_Print+0x2b8>)
 800223a:	f7fe feb2 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 800223e:	2100      	movs	r1, #0
 8002240:	2001      	movs	r0, #1
 8002242:	f7fe feda 	bl	8000ffa <lcd_put_cursor>
		if(temp_setpoint[0] <= 9.9 && temp_setpoint[0] >= 0.0)
 8002246:	4b67      	ldr	r3, [pc, #412]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 8002248:	e9d3 0100 	ldrd	r0, r1, [r3]
 800224c:	a35a      	add	r3, pc, #360	; (adr r3, 80023b8 <Lcd_Sytem_State_Print+0x290>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe fbc7 	bl	80009e4 <__aeabi_dcmple>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <Lcd_Sytem_State_Print+0x15c>
 800225c:	4b61      	ldr	r3, [pc, #388]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 800225e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	f7fe fbc5 	bl	80009f8 <__aeabi_dcmpge>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <Lcd_Sytem_State_Print+0x15c>
		{
			sprintf(lcd_data, " %0.1lf C", temp_setpoint[0]);
 8002274:	4b5b      	ldr	r3, [pc, #364]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	495b      	ldr	r1, [pc, #364]	; (80023e8 <Lcd_Sytem_State_Print+0x2c0>)
 800227c:	4852      	ldr	r0, [pc, #328]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 800227e:	f004 fceb 	bl	8006c58 <siprintf>
 8002282:	e006      	b.n	8002292 <Lcd_Sytem_State_Print+0x16a>
		}
		else
		{
			sprintf(lcd_data, "%0.1lf C", temp_setpoint[0]);
 8002284:	4b57      	ldr	r3, [pc, #348]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	4958      	ldr	r1, [pc, #352]	; (80023ec <Lcd_Sytem_State_Print+0x2c4>)
 800228c:	484e      	ldr	r0, [pc, #312]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 800228e:	f004 fce3 	bl	8006c58 <siprintf>
		}
		lcd_send_string(lcd_data);
 8002292:	484d      	ldr	r0, [pc, #308]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 8002294:	f7fe fe85 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 9);
 8002298:	2109      	movs	r1, #9
 800229a:	2001      	movs	r0, #1
 800229c:	f7fe fead 	bl	8000ffa <lcd_put_cursor>
		if(temp_setpoint[1] <= 9.9 && temp_setpoint[1] >= 0.0)
 80022a0:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 80022a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80022a6:	a344      	add	r3, pc, #272	; (adr r3, 80023b8 <Lcd_Sytem_State_Print+0x290>)
 80022a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ac:	f7fe fb9a 	bl	80009e4 <__aeabi_dcmple>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d013      	beq.n	80022de <Lcd_Sytem_State_Print+0x1b6>
 80022b6:	4b4b      	ldr	r3, [pc, #300]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 80022b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	f7fe fb98 	bl	80009f8 <__aeabi_dcmpge>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d007      	beq.n	80022de <Lcd_Sytem_State_Print+0x1b6>
		{
			sprintf(lcd_data, " %0.1lf C", temp_setpoint[1]);
 80022ce:	4b45      	ldr	r3, [pc, #276]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 80022d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022d4:	4944      	ldr	r1, [pc, #272]	; (80023e8 <Lcd_Sytem_State_Print+0x2c0>)
 80022d6:	483c      	ldr	r0, [pc, #240]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 80022d8:	f004 fcbe 	bl	8006c58 <siprintf>
 80022dc:	e006      	b.n	80022ec <Lcd_Sytem_State_Print+0x1c4>
		}
		else
		{
			sprintf(lcd_data, "%0.1lf C", temp_setpoint[1]);
 80022de:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 80022e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022e4:	4941      	ldr	r1, [pc, #260]	; (80023ec <Lcd_Sytem_State_Print+0x2c4>)
 80022e6:	4838      	ldr	r0, [pc, #224]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 80022e8:	f004 fcb6 	bl	8006c58 <siprintf>
		}
		lcd_send_string(lcd_data);
 80022ec:	4836      	ldr	r0, [pc, #216]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 80022ee:	f7fe fe58 	bl	8000fa2 <lcd_send_string>
		break;
 80022f2:	e192      	b.n	800261a <Lcd_Sytem_State_Print+0x4f2>

	// TEMPERATURE_SETPOINT_HIGH MODE LCD print
	case TEMPERATURE_SETPOINT_HIGH:
		lcd_put_cursor(0, 0);
 80022f4:	2100      	movs	r1, #0
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7fe fe7f 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("TempSetpoint(H)");
 80022fc:	483c      	ldr	r0, [pc, #240]	; (80023f0 <Lcd_Sytem_State_Print+0x2c8>)
 80022fe:	f7fe fe50 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 8002302:	2100      	movs	r1, #0
 8002304:	2001      	movs	r0, #1
 8002306:	f7fe fe78 	bl	8000ffa <lcd_put_cursor>
		if(temp_setpoint[0] <= 9.9 && temp_setpoint[0] >= 0.0)
 800230a:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 800230c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002310:	a329      	add	r3, pc, #164	; (adr r3, 80023b8 <Lcd_Sytem_State_Print+0x290>)
 8002312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002316:	f7fe fb65 	bl	80009e4 <__aeabi_dcmple>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <Lcd_Sytem_State_Print+0x220>
 8002320:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 8002322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	f7fe fb63 	bl	80009f8 <__aeabi_dcmpge>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <Lcd_Sytem_State_Print+0x220>
		{
			sprintf(lcd_data, " %0.1lf C", temp_setpoint[0]);
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	492a      	ldr	r1, [pc, #168]	; (80023e8 <Lcd_Sytem_State_Print+0x2c0>)
 8002340:	4821      	ldr	r0, [pc, #132]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 8002342:	f004 fc89 	bl	8006c58 <siprintf>
 8002346:	e006      	b.n	8002356 <Lcd_Sytem_State_Print+0x22e>
		}
		else
		{
			sprintf(lcd_data, "%0.1lf C", temp_setpoint[0]);
 8002348:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	4927      	ldr	r1, [pc, #156]	; (80023ec <Lcd_Sytem_State_Print+0x2c4>)
 8002350:	481d      	ldr	r0, [pc, #116]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 8002352:	f004 fc81 	bl	8006c58 <siprintf>
		}
		lcd_send_string(lcd_data);
 8002356:	481c      	ldr	r0, [pc, #112]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 8002358:	f7fe fe23 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 9);
 800235c:	2109      	movs	r1, #9
 800235e:	2001      	movs	r0, #1
 8002360:	f7fe fe4b 	bl	8000ffa <lcd_put_cursor>
		if(temp_setpoint[1] <= 9.9 && temp_setpoint[1] >= 0.0)
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 8002366:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800236a:	a313      	add	r3, pc, #76	; (adr r3, 80023b8 <Lcd_Sytem_State_Print+0x290>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe fb38 	bl	80009e4 <__aeabi_dcmple>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d013      	beq.n	80023a2 <Lcd_Sytem_State_Print+0x27a>
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 800237c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	f7fe fb36 	bl	80009f8 <__aeabi_dcmpge>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <Lcd_Sytem_State_Print+0x27a>
		{
			sprintf(lcd_data, " %0.1lf C", temp_setpoint[1]);
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 8002394:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002398:	4913      	ldr	r1, [pc, #76]	; (80023e8 <Lcd_Sytem_State_Print+0x2c0>)
 800239a:	480b      	ldr	r0, [pc, #44]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 800239c:	f004 fc5c 	bl	8006c58 <siprintf>
 80023a0:	e006      	b.n	80023b0 <Lcd_Sytem_State_Print+0x288>
		}
		else
		{
			sprintf(lcd_data, "%0.1lf C", temp_setpoint[1]);
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <Lcd_Sytem_State_Print+0x2bc>)
 80023a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023a8:	4910      	ldr	r1, [pc, #64]	; (80023ec <Lcd_Sytem_State_Print+0x2c4>)
 80023aa:	4807      	ldr	r0, [pc, #28]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 80023ac:	f004 fc54 	bl	8006c58 <siprintf>
		}
		lcd_send_string(lcd_data);
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <Lcd_Sytem_State_Print+0x2a0>)
 80023b2:	f7fe fdf6 	bl	8000fa2 <lcd_send_string>
		break;
 80023b6:	e130      	b.n	800261a <Lcd_Sytem_State_Print+0x4f2>
 80023b8:	cccccccd 	.word	0xcccccccd
 80023bc:	4023cccc 	.word	0x4023cccc
 80023c0:	20000458 	.word	0x20000458
 80023c4:	0800af08 	.word	0x0800af08
 80023c8:	20000444 	.word	0x20000444
 80023cc:	0800af18 	.word	0x0800af18
 80023d0:	0800af28 	.word	0x0800af28
 80023d4:	40590000 	.word	0x40590000
 80023d8:	0800af3c 	.word	0x0800af3c
 80023dc:	0800af50 	.word	0x0800af50
 80023e0:	0800af64 	.word	0x0800af64
 80023e4:	20000008 	.word	0x20000008
 80023e8:	0800af74 	.word	0x0800af74
 80023ec:	0800af80 	.word	0x0800af80
 80023f0:	0800af8c 	.word	0x0800af8c

	// HUMIDITY_SETPOINT_LOW MODE LCD print
	case HUMIDITY_SETPOINT_LOW:
		lcd_put_cursor(0, 0);
 80023f4:	2100      	movs	r1, #0
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7fe fdff 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("HumidSetpoint(L)");
 80023fc:	488c      	ldr	r0, [pc, #560]	; (8002630 <Lcd_Sytem_State_Print+0x508>)
 80023fe:	f7fe fdd0 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 8002402:	2100      	movs	r1, #0
 8002404:	2001      	movs	r0, #1
 8002406:	f7fe fdf8 	bl	8000ffa <lcd_put_cursor>
		if(humid_setpoint[0] <= 9.9 && humid_setpoint[0] >= 0.0)
 800240a:	4b8a      	ldr	r3, [pc, #552]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 800240c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002410:	a385      	add	r3, pc, #532	; (adr r3, 8002628 <Lcd_Sytem_State_Print+0x500>)
 8002412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002416:	f7fe fae5 	bl	80009e4 <__aeabi_dcmple>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <Lcd_Sytem_State_Print+0x320>
 8002420:	4b84      	ldr	r3, [pc, #528]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 8002422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	f7fe fae3 	bl	80009f8 <__aeabi_dcmpge>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d007      	beq.n	8002448 <Lcd_Sytem_State_Print+0x320>
		{
			sprintf(lcd_data, "  %0.1lf %%", humid_setpoint[0]);
 8002438:	4b7e      	ldr	r3, [pc, #504]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	497e      	ldr	r1, [pc, #504]	; (8002638 <Lcd_Sytem_State_Print+0x510>)
 8002440:	487e      	ldr	r0, [pc, #504]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 8002442:	f004 fc09 	bl	8006c58 <siprintf>
 8002446:	e019      	b.n	800247c <Lcd_Sytem_State_Print+0x354>
		}
		else if (humid_setpoint[0] == 100.0)
 8002448:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 800244a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	4b7b      	ldr	r3, [pc, #492]	; (8002640 <Lcd_Sytem_State_Print+0x518>)
 8002454:	f7fe fab2 	bl	80009bc <__aeabi_dcmpeq>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <Lcd_Sytem_State_Print+0x346>
		{
			sprintf(lcd_data, "%0.1lf %%", humid_setpoint[0]);
 800245e:	4b75      	ldr	r3, [pc, #468]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	4977      	ldr	r1, [pc, #476]	; (8002644 <Lcd_Sytem_State_Print+0x51c>)
 8002466:	4875      	ldr	r0, [pc, #468]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 8002468:	f004 fbf6 	bl	8006c58 <siprintf>
 800246c:	e006      	b.n	800247c <Lcd_Sytem_State_Print+0x354>
		}
		else
		{
			sprintf(lcd_data, " %0.1lf %%", humid_setpoint[0]);
 800246e:	4b71      	ldr	r3, [pc, #452]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	4974      	ldr	r1, [pc, #464]	; (8002648 <Lcd_Sytem_State_Print+0x520>)
 8002476:	4871      	ldr	r0, [pc, #452]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 8002478:	f004 fbee 	bl	8006c58 <siprintf>
		}
		lcd_send_string(lcd_data);
 800247c:	486f      	ldr	r0, [pc, #444]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 800247e:	f7fe fd90 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 8);
 8002482:	2108      	movs	r1, #8
 8002484:	2001      	movs	r0, #1
 8002486:	f7fe fdb8 	bl	8000ffa <lcd_put_cursor>
		if(humid_setpoint[1] <= 9.9 && humid_setpoint[1] >= 0.0)
 800248a:	4b6a      	ldr	r3, [pc, #424]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 800248c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002490:	a365      	add	r3, pc, #404	; (adr r3, 8002628 <Lcd_Sytem_State_Print+0x500>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f7fe faa5 	bl	80009e4 <__aeabi_dcmple>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <Lcd_Sytem_State_Print+0x3a0>
 80024a0:	4b64      	ldr	r3, [pc, #400]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 80024a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	f7fe faa3 	bl	80009f8 <__aeabi_dcmpge>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <Lcd_Sytem_State_Print+0x3a0>
		{
			sprintf(lcd_data, "  %0.1lf %%", humid_setpoint[1]);
 80024b8:	4b5e      	ldr	r3, [pc, #376]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 80024ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024be:	495e      	ldr	r1, [pc, #376]	; (8002638 <Lcd_Sytem_State_Print+0x510>)
 80024c0:	485e      	ldr	r0, [pc, #376]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 80024c2:	f004 fbc9 	bl	8006c58 <siprintf>
 80024c6:	e019      	b.n	80024fc <Lcd_Sytem_State_Print+0x3d4>
		}
		else if (humid_setpoint[1] == 100.0)
 80024c8:	4b5a      	ldr	r3, [pc, #360]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 80024ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	4b5b      	ldr	r3, [pc, #364]	; (8002640 <Lcd_Sytem_State_Print+0x518>)
 80024d4:	f7fe fa72 	bl	80009bc <__aeabi_dcmpeq>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <Lcd_Sytem_State_Print+0x3c6>
		{
			sprintf(lcd_data, "%0.1lf %%", humid_setpoint[1]);
 80024de:	4b55      	ldr	r3, [pc, #340]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 80024e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024e4:	4957      	ldr	r1, [pc, #348]	; (8002644 <Lcd_Sytem_State_Print+0x51c>)
 80024e6:	4855      	ldr	r0, [pc, #340]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 80024e8:	f004 fbb6 	bl	8006c58 <siprintf>
 80024ec:	e006      	b.n	80024fc <Lcd_Sytem_State_Print+0x3d4>
		}
		else
		{
			sprintf(lcd_data, " %0.1lf %%", humid_setpoint[1]);
 80024ee:	4b51      	ldr	r3, [pc, #324]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 80024f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024f4:	4954      	ldr	r1, [pc, #336]	; (8002648 <Lcd_Sytem_State_Print+0x520>)
 80024f6:	4851      	ldr	r0, [pc, #324]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 80024f8:	f004 fbae 	bl	8006c58 <siprintf>
		}
		lcd_send_string(lcd_data);
 80024fc:	484f      	ldr	r0, [pc, #316]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 80024fe:	f7fe fd50 	bl	8000fa2 <lcd_send_string>
		break;
 8002502:	e08a      	b.n	800261a <Lcd_Sytem_State_Print+0x4f2>

	// HUMIDITY_SETPOINT_HIGH MODE LCD print
	case HUMIDITY_SETPOINT_HIGH:
		lcd_put_cursor(0, 0);
 8002504:	2100      	movs	r1, #0
 8002506:	2000      	movs	r0, #0
 8002508:	f7fe fd77 	bl	8000ffa <lcd_put_cursor>
		lcd_send_string("HumidSetpoint(H)");
 800250c:	484f      	ldr	r0, [pc, #316]	; (800264c <Lcd_Sytem_State_Print+0x524>)
 800250e:	f7fe fd48 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 0);
 8002512:	2100      	movs	r1, #0
 8002514:	2001      	movs	r0, #1
 8002516:	f7fe fd70 	bl	8000ffa <lcd_put_cursor>
		if(humid_setpoint[0] < 10.0 && humid_setpoint[0] >= 0.0)
 800251a:	4b46      	ldr	r3, [pc, #280]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 800251c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	4b4a      	ldr	r3, [pc, #296]	; (8002650 <Lcd_Sytem_State_Print+0x528>)
 8002526:	f7fe fa53 	bl	80009d0 <__aeabi_dcmplt>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <Lcd_Sytem_State_Print+0x430>
 8002530:	4b40      	ldr	r3, [pc, #256]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 8002532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	f7fe fa5b 	bl	80009f8 <__aeabi_dcmpge>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <Lcd_Sytem_State_Print+0x430>
		{
			sprintf(lcd_data, "  %0.1lf %%", humid_setpoint[0]);
 8002548:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	493a      	ldr	r1, [pc, #232]	; (8002638 <Lcd_Sytem_State_Print+0x510>)
 8002550:	483a      	ldr	r0, [pc, #232]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 8002552:	f004 fb81 	bl	8006c58 <siprintf>
 8002556:	e019      	b.n	800258c <Lcd_Sytem_State_Print+0x464>
		}
		else if (humid_setpoint[0] == 100.0)
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 800255a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <Lcd_Sytem_State_Print+0x518>)
 8002564:	f7fe fa2a 	bl	80009bc <__aeabi_dcmpeq>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <Lcd_Sytem_State_Print+0x456>
		{
			sprintf(lcd_data, "%0.1lf %%", humid_setpoint[0]);
 800256e:	4b31      	ldr	r3, [pc, #196]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	4933      	ldr	r1, [pc, #204]	; (8002644 <Lcd_Sytem_State_Print+0x51c>)
 8002576:	4831      	ldr	r0, [pc, #196]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 8002578:	f004 fb6e 	bl	8006c58 <siprintf>
 800257c:	e006      	b.n	800258c <Lcd_Sytem_State_Print+0x464>
		}
		else
		{
			sprintf(lcd_data, " %0.1lf %%", humid_setpoint[0]);
 800257e:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	4930      	ldr	r1, [pc, #192]	; (8002648 <Lcd_Sytem_State_Print+0x520>)
 8002586:	482d      	ldr	r0, [pc, #180]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 8002588:	f004 fb66 	bl	8006c58 <siprintf>
		}
		lcd_send_string(lcd_data);
 800258c:	482b      	ldr	r0, [pc, #172]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 800258e:	f7fe fd08 	bl	8000fa2 <lcd_send_string>
		lcd_put_cursor(1, 8);
 8002592:	2108      	movs	r1, #8
 8002594:	2001      	movs	r0, #1
 8002596:	f7fe fd30 	bl	8000ffa <lcd_put_cursor>
		if(humid_setpoint[1] < 10.0 && humid_setpoint[1] >= 0.0)
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 800259c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <Lcd_Sytem_State_Print+0x528>)
 80025a6:	f7fe fa13 	bl	80009d0 <__aeabi_dcmplt>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d013      	beq.n	80025d8 <Lcd_Sytem_State_Print+0x4b0>
 80025b0:	4b20      	ldr	r3, [pc, #128]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 80025b2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	f7fe fa1b 	bl	80009f8 <__aeabi_dcmpge>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <Lcd_Sytem_State_Print+0x4b0>
		{
			sprintf(lcd_data, "  %0.1lf %%", humid_setpoint[1]);
 80025c8:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 80025ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80025ce:	491a      	ldr	r1, [pc, #104]	; (8002638 <Lcd_Sytem_State_Print+0x510>)
 80025d0:	481a      	ldr	r0, [pc, #104]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 80025d2:	f004 fb41 	bl	8006c58 <siprintf>
 80025d6:	e019      	b.n	800260c <Lcd_Sytem_State_Print+0x4e4>
		}
		else if (humid_setpoint[1] == 100.0)
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 80025da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <Lcd_Sytem_State_Print+0x518>)
 80025e4:	f7fe f9ea 	bl	80009bc <__aeabi_dcmpeq>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <Lcd_Sytem_State_Print+0x4d6>
		{
			sprintf(lcd_data, "%0.1lf %%", humid_setpoint[1]);
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 80025f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80025f4:	4913      	ldr	r1, [pc, #76]	; (8002644 <Lcd_Sytem_State_Print+0x51c>)
 80025f6:	4811      	ldr	r0, [pc, #68]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 80025f8:	f004 fb2e 	bl	8006c58 <siprintf>
 80025fc:	e006      	b.n	800260c <Lcd_Sytem_State_Print+0x4e4>
		}
		else
		{
			sprintf(lcd_data, " %0.1lf %%", humid_setpoint[1]);
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <Lcd_Sytem_State_Print+0x50c>)
 8002600:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002604:	4910      	ldr	r1, [pc, #64]	; (8002648 <Lcd_Sytem_State_Print+0x520>)
 8002606:	480d      	ldr	r0, [pc, #52]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 8002608:	f004 fb26 	bl	8006c58 <siprintf>
		}
		lcd_send_string(lcd_data);
 800260c:	480b      	ldr	r0, [pc, #44]	; (800263c <Lcd_Sytem_State_Print+0x514>)
 800260e:	f7fe fcc8 	bl	8000fa2 <lcd_send_string>
		break;
 8002612:	e002      	b.n	800261a <Lcd_Sytem_State_Print+0x4f2>

	// Some issues occur, back to NORMAL MODE
	default:
		mode = NORMAL;
 8002614:	2300      	movs	r3, #0
 8002616:	71fb      	strb	r3, [r7, #7]
		break;
 8002618:	bf00      	nop
	}
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	f3af 8000 	nop.w
 8002628:	cccccccd 	.word	0xcccccccd
 800262c:	4023cccc 	.word	0x4023cccc
 8002630:	0800af9c 	.word	0x0800af9c
 8002634:	20000018 	.word	0x20000018
 8002638:	0800afb0 	.word	0x0800afb0
 800263c:	20000444 	.word	0x20000444
 8002640:	40590000 	.word	0x40590000
 8002644:	0800afbc 	.word	0x0800afbc
 8002648:	0800afc8 	.word	0x0800afc8
 800264c:	0800afd4 	.word	0x0800afd4
 8002650:	40240000 	.word	0x40240000
 8002654:	00000000 	.word	0x00000000

08002658 <Long_Pressed_Button>:

// Long pressed button handle
void Long_Pressed_Button(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 800265c:	489e      	ldr	r0, [pc, #632]	; (80028d8 <Long_Pressed_Button+0x280>)
 800265e:	f003 f855 	bl	800570c <HAL_TIM_Base_Stop_IT>
	// Temperature set point increase/decrease when the button is pressed a long time
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 8002662:	e01f      	b.n	80026a4 <Long_Pressed_Button+0x4c>
	{
		Delay_Ms(150);
 8002664:	2096      	movs	r0, #150	; 0x96
 8002666:	f7ff fbcb 	bl	8001e00 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 800266a:	2108      	movs	r1, #8
 800266c:	489b      	ldr	r0, [pc, #620]	; (80028dc <Long_Pressed_Button+0x284>)
 800266e:	f001 f8c7 	bl	8003800 <HAL_GPIO_ReadPin>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d115      	bne.n	80026a4 <Long_Pressed_Button+0x4c>
 8002678:	4b99      	ldr	r3, [pc, #612]	; (80028e0 <Long_Pressed_Button+0x288>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d111      	bne.n	80026a4 <Long_Pressed_Button+0x4c>
		{
			temp_setpoint[0] = temp_setpoint[0] - 0.1;
 8002680:	4b98      	ldr	r3, [pc, #608]	; (80028e4 <Long_Pressed_Button+0x28c>)
 8002682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002686:	a392      	add	r3, pc, #584	; (adr r3, 80028d0 <Long_Pressed_Button+0x278>)
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	f7fd fd76 	bl	800017c <__aeabi_dsub>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4993      	ldr	r1, [pc, #588]	; (80028e4 <Long_Pressed_Button+0x28c>)
 8002696:	e9c1 2300 	strd	r2, r3, [r1]
			Lcd_Sytem_State_Print(mode);
 800269a:	4b91      	ldr	r3, [pc, #580]	; (80028e0 <Long_Pressed_Button+0x288>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fd42 	bl	8002128 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 80026a4:	2108      	movs	r1, #8
 80026a6:	488d      	ldr	r0, [pc, #564]	; (80028dc <Long_Pressed_Button+0x284>)
 80026a8:	f001 f8aa 	bl	8003800 <HAL_GPIO_ReadPin>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d124      	bne.n	80026fc <Long_Pressed_Button+0xa4>
 80026b2:	4b8b      	ldr	r3, [pc, #556]	; (80028e0 <Long_Pressed_Button+0x288>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d0d4      	beq.n	8002664 <Long_Pressed_Button+0xc>
		}
	}
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 80026ba:	e01f      	b.n	80026fc <Long_Pressed_Button+0xa4>
	{
		Delay_Ms(150);
 80026bc:	2096      	movs	r0, #150	; 0x96
 80026be:	f7ff fb9f 	bl	8001e00 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 80026c2:	2104      	movs	r1, #4
 80026c4:	4885      	ldr	r0, [pc, #532]	; (80028dc <Long_Pressed_Button+0x284>)
 80026c6:	f001 f89b 	bl	8003800 <HAL_GPIO_ReadPin>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d115      	bne.n	80026fc <Long_Pressed_Button+0xa4>
 80026d0:	4b83      	ldr	r3, [pc, #524]	; (80028e0 <Long_Pressed_Button+0x288>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d111      	bne.n	80026fc <Long_Pressed_Button+0xa4>
		{
			temp_setpoint[0] = temp_setpoint[0] + 0.1;
 80026d8:	4b82      	ldr	r3, [pc, #520]	; (80028e4 <Long_Pressed_Button+0x28c>)
 80026da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026de:	a37c      	add	r3, pc, #496	; (adr r3, 80028d0 <Long_Pressed_Button+0x278>)
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	f7fd fd4c 	bl	8000180 <__adddf3>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	497d      	ldr	r1, [pc, #500]	; (80028e4 <Long_Pressed_Button+0x28c>)
 80026ee:	e9c1 2300 	strd	r2, r3, [r1]
			Lcd_Sytem_State_Print(mode);
 80026f2:	4b7b      	ldr	r3, [pc, #492]	; (80028e0 <Long_Pressed_Button+0x288>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fd16 	bl	8002128 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_LOW))
 80026fc:	2104      	movs	r1, #4
 80026fe:	4877      	ldr	r0, [pc, #476]	; (80028dc <Long_Pressed_Button+0x284>)
 8002700:	f001 f87e 	bl	8003800 <HAL_GPIO_ReadPin>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d124      	bne.n	8002754 <Long_Pressed_Button+0xfc>
 800270a:	4b75      	ldr	r3, [pc, #468]	; (80028e0 <Long_Pressed_Button+0x288>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d0d4      	beq.n	80026bc <Long_Pressed_Button+0x64>
		}
	}
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 8002712:	e01f      	b.n	8002754 <Long_Pressed_Button+0xfc>
	{
		Delay_Ms(150);
 8002714:	2096      	movs	r0, #150	; 0x96
 8002716:	f7ff fb73 	bl	8001e00 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 800271a:	2108      	movs	r1, #8
 800271c:	486f      	ldr	r0, [pc, #444]	; (80028dc <Long_Pressed_Button+0x284>)
 800271e:	f001 f86f 	bl	8003800 <HAL_GPIO_ReadPin>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d115      	bne.n	8002754 <Long_Pressed_Button+0xfc>
 8002728:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <Long_Pressed_Button+0x288>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d111      	bne.n	8002754 <Long_Pressed_Button+0xfc>
		{
			temp_setpoint[1] = temp_setpoint[1] - 0.1;
 8002730:	4b6c      	ldr	r3, [pc, #432]	; (80028e4 <Long_Pressed_Button+0x28c>)
 8002732:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002736:	a366      	add	r3, pc, #408	; (adr r3, 80028d0 <Long_Pressed_Button+0x278>)
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	f7fd fd1e 	bl	800017c <__aeabi_dsub>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4967      	ldr	r1, [pc, #412]	; (80028e4 <Long_Pressed_Button+0x28c>)
 8002746:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Lcd_Sytem_State_Print(mode);
 800274a:	4b65      	ldr	r3, [pc, #404]	; (80028e0 <Long_Pressed_Button+0x288>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fcea 	bl	8002128 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 8002754:	2108      	movs	r1, #8
 8002756:	4861      	ldr	r0, [pc, #388]	; (80028dc <Long_Pressed_Button+0x284>)
 8002758:	f001 f852 	bl	8003800 <HAL_GPIO_ReadPin>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d124      	bne.n	80027ac <Long_Pressed_Button+0x154>
 8002762:	4b5f      	ldr	r3, [pc, #380]	; (80028e0 <Long_Pressed_Button+0x288>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d0d4      	beq.n	8002714 <Long_Pressed_Button+0xbc>
		}
	}
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 800276a:	e01f      	b.n	80027ac <Long_Pressed_Button+0x154>
	{
		Delay_Ms(150);
 800276c:	2096      	movs	r0, #150	; 0x96
 800276e:	f7ff fb47 	bl	8001e00 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 8002772:	2104      	movs	r1, #4
 8002774:	4859      	ldr	r0, [pc, #356]	; (80028dc <Long_Pressed_Button+0x284>)
 8002776:	f001 f843 	bl	8003800 <HAL_GPIO_ReadPin>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d115      	bne.n	80027ac <Long_Pressed_Button+0x154>
 8002780:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <Long_Pressed_Button+0x288>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d111      	bne.n	80027ac <Long_Pressed_Button+0x154>
		{
			temp_setpoint[1] = temp_setpoint[1] + 0.1;
 8002788:	4b56      	ldr	r3, [pc, #344]	; (80028e4 <Long_Pressed_Button+0x28c>)
 800278a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800278e:	a350      	add	r3, pc, #320	; (adr r3, 80028d0 <Long_Pressed_Button+0x278>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fd fcf4 	bl	8000180 <__adddf3>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4951      	ldr	r1, [pc, #324]	; (80028e4 <Long_Pressed_Button+0x28c>)
 800279e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Lcd_Sytem_State_Print(mode);
 80027a2:	4b4f      	ldr	r3, [pc, #316]	; (80028e0 <Long_Pressed_Button+0x288>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fcbe 	bl	8002128 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == TEMPERATURE_SETPOINT_HIGH))
 80027ac:	2104      	movs	r1, #4
 80027ae:	484b      	ldr	r0, [pc, #300]	; (80028dc <Long_Pressed_Button+0x284>)
 80027b0:	f001 f826 	bl	8003800 <HAL_GPIO_ReadPin>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d124      	bne.n	8002804 <Long_Pressed_Button+0x1ac>
 80027ba:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <Long_Pressed_Button+0x288>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d0d4      	beq.n	800276c <Long_Pressed_Button+0x114>
		}

	}

	// Humidity set point increase/decrease when the button is pressed a long time
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 80027c2:	e01f      	b.n	8002804 <Long_Pressed_Button+0x1ac>
	{
		Delay_Ms(150);
 80027c4:	2096      	movs	r0, #150	; 0x96
 80027c6:	f7ff fb1b 	bl	8001e00 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 80027ca:	2108      	movs	r1, #8
 80027cc:	4843      	ldr	r0, [pc, #268]	; (80028dc <Long_Pressed_Button+0x284>)
 80027ce:	f001 f817 	bl	8003800 <HAL_GPIO_ReadPin>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d115      	bne.n	8002804 <Long_Pressed_Button+0x1ac>
 80027d8:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <Long_Pressed_Button+0x288>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d111      	bne.n	8002804 <Long_Pressed_Button+0x1ac>
		{
			humid_setpoint[0] = humid_setpoint[0] - 0.1;
 80027e0:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <Long_Pressed_Button+0x290>)
 80027e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027e6:	a33a      	add	r3, pc, #232	; (adr r3, 80028d0 <Long_Pressed_Button+0x278>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fd fcc6 	bl	800017c <__aeabi_dsub>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	493c      	ldr	r1, [pc, #240]	; (80028e8 <Long_Pressed_Button+0x290>)
 80027f6:	e9c1 2300 	strd	r2, r3, [r1]
			Lcd_Sytem_State_Print(mode);
 80027fa:	4b39      	ldr	r3, [pc, #228]	; (80028e0 <Long_Pressed_Button+0x288>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fc92 	bl	8002128 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 8002804:	2108      	movs	r1, #8
 8002806:	4835      	ldr	r0, [pc, #212]	; (80028dc <Long_Pressed_Button+0x284>)
 8002808:	f000 fffa 	bl	8003800 <HAL_GPIO_ReadPin>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d124      	bne.n	800285c <Long_Pressed_Button+0x204>
 8002812:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <Long_Pressed_Button+0x288>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b03      	cmp	r3, #3
 8002818:	d0d4      	beq.n	80027c4 <Long_Pressed_Button+0x16c>
		}
	}
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 800281a:	e01f      	b.n	800285c <Long_Pressed_Button+0x204>
	{
		Delay_Ms(150);
 800281c:	2096      	movs	r0, #150	; 0x96
 800281e:	f7ff faef 	bl	8001e00 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 8002822:	2104      	movs	r1, #4
 8002824:	482d      	ldr	r0, [pc, #180]	; (80028dc <Long_Pressed_Button+0x284>)
 8002826:	f000 ffeb 	bl	8003800 <HAL_GPIO_ReadPin>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d115      	bne.n	800285c <Long_Pressed_Button+0x204>
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <Long_Pressed_Button+0x288>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d111      	bne.n	800285c <Long_Pressed_Button+0x204>
		{
			humid_setpoint[0] = humid_setpoint[0] + 0.1;
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <Long_Pressed_Button+0x290>)
 800283a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800283e:	a324      	add	r3, pc, #144	; (adr r3, 80028d0 <Long_Pressed_Button+0x278>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	f7fd fc9c 	bl	8000180 <__adddf3>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4926      	ldr	r1, [pc, #152]	; (80028e8 <Long_Pressed_Button+0x290>)
 800284e:	e9c1 2300 	strd	r2, r3, [r1]
			Lcd_Sytem_State_Print(mode);
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <Long_Pressed_Button+0x288>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc66 	bl	8002128 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_LOW))
 800285c:	2104      	movs	r1, #4
 800285e:	481f      	ldr	r0, [pc, #124]	; (80028dc <Long_Pressed_Button+0x284>)
 8002860:	f000 ffce 	bl	8003800 <HAL_GPIO_ReadPin>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d124      	bne.n	80028b4 <Long_Pressed_Button+0x25c>
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <Long_Pressed_Button+0x288>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d0d4      	beq.n	800281c <Long_Pressed_Button+0x1c4>
		}
	}
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 8002872:	e01f      	b.n	80028b4 <Long_Pressed_Button+0x25c>
	{
		Delay_Ms(150);
 8002874:	2096      	movs	r0, #150	; 0x96
 8002876:	f7ff fac3 	bl	8001e00 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 800287a:	2108      	movs	r1, #8
 800287c:	4817      	ldr	r0, [pc, #92]	; (80028dc <Long_Pressed_Button+0x284>)
 800287e:	f000 ffbf 	bl	8003800 <HAL_GPIO_ReadPin>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d115      	bne.n	80028b4 <Long_Pressed_Button+0x25c>
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <Long_Pressed_Button+0x288>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d111      	bne.n	80028b4 <Long_Pressed_Button+0x25c>
		{
			humid_setpoint[1] = humid_setpoint[1] - 0.1;
 8002890:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <Long_Pressed_Button+0x290>)
 8002892:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002896:	a30e      	add	r3, pc, #56	; (adr r3, 80028d0 <Long_Pressed_Button+0x278>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f7fd fc6e 	bl	800017c <__aeabi_dsub>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4910      	ldr	r1, [pc, #64]	; (80028e8 <Long_Pressed_Button+0x290>)
 80028a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Lcd_Sytem_State_Print(mode);
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <Long_Pressed_Button+0x288>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fc3a 	bl	8002128 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(DES_BUTTON_GPIO_Port, DES_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 80028b4:	2108      	movs	r1, #8
 80028b6:	4809      	ldr	r0, [pc, #36]	; (80028dc <Long_Pressed_Button+0x284>)
 80028b8:	f000 ffa2 	bl	8003800 <HAL_GPIO_ReadPin>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d134      	bne.n	800292c <Long_Pressed_Button+0x2d4>
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <Long_Pressed_Button+0x288>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d0d4      	beq.n	8002874 <Long_Pressed_Button+0x21c>
		}
	}
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 80028ca:	e02f      	b.n	800292c <Long_Pressed_Button+0x2d4>
 80028cc:	f3af 8000 	nop.w
 80028d0:	9999999a 	.word	0x9999999a
 80028d4:	3fb99999 	.word	0x3fb99999
 80028d8:	20000358 	.word	0x20000358
 80028dc:	40010800 	.word	0x40010800
 80028e0:	20000454 	.word	0x20000454
 80028e4:	20000008 	.word	0x20000008
 80028e8:	20000018 	.word	0x20000018
	{
		Delay_Ms(150);
 80028ec:	2096      	movs	r0, #150	; 0x96
 80028ee:	f7ff fa87 	bl	8001e00 <Delay_Ms>
		if(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 80028f2:	2104      	movs	r1, #4
 80028f4:	481a      	ldr	r0, [pc, #104]	; (8002960 <Long_Pressed_Button+0x308>)
 80028f6:	f000 ff83 	bl	8003800 <HAL_GPIO_ReadPin>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d115      	bne.n	800292c <Long_Pressed_Button+0x2d4>
 8002900:	4b18      	ldr	r3, [pc, #96]	; (8002964 <Long_Pressed_Button+0x30c>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b04      	cmp	r3, #4
 8002906:	d111      	bne.n	800292c <Long_Pressed_Button+0x2d4>
		{
			humid_setpoint[1] = humid_setpoint[1] + 0.1;
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <Long_Pressed_Button+0x310>)
 800290a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800290e:	a312      	add	r3, pc, #72	; (adr r3, 8002958 <Long_Pressed_Button+0x300>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f7fd fc34 	bl	8000180 <__adddf3>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4912      	ldr	r1, [pc, #72]	; (8002968 <Long_Pressed_Button+0x310>)
 800291e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Lcd_Sytem_State_Print(mode);
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <Long_Pressed_Button+0x30c>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fbfe 	bl	8002128 <Lcd_Sytem_State_Print>
	while(!HAL_GPIO_ReadPin(INC_BUTTON_GPIO_Port, INC_BUTTON_Pin) && (mode == HUMIDITY_SETPOINT_HIGH))
 800292c:	2104      	movs	r1, #4
 800292e:	480c      	ldr	r0, [pc, #48]	; (8002960 <Long_Pressed_Button+0x308>)
 8002930:	f000 ff66 	bl	8003800 <HAL_GPIO_ReadPin>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <Long_Pressed_Button+0x2ea>
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <Long_Pressed_Button+0x30c>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b04      	cmp	r3, #4
 8002940:	d0d4      	beq.n	80028ec <Long_Pressed_Button+0x294>
		}
	}
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <Long_Pressed_Button+0x314>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim4);
 800294a:	4808      	ldr	r0, [pc, #32]	; (800296c <Long_Pressed_Button+0x314>)
 800294c:	f002 fe8c 	bl	8005668 <HAL_TIM_Base_Start_IT>
}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}
 8002954:	f3af 8000 	nop.w
 8002958:	9999999a 	.word	0x9999999a
 800295c:	3fb99999 	.word	0x3fb99999
 8002960:	40010800 	.word	0x40010800
 8002964:	20000454 	.word	0x20000454
 8002968:	20000018 	.word	0x20000018
 800296c:	20000358 	.word	0x20000358

08002970 <Alarm_Check>:

// Alarm checking
int Alarm_Check(double temp, double humid)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800297a:	e9c7 2300 	strd	r2, r3, [r7]
	// Check if the alarm is turned ON
	if(!HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin))
 800297e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002982:	4841      	ldr	r0, [pc, #260]	; (8002a88 <Alarm_Check+0x118>)
 8002984:	f000 ff3c 	bl	8003800 <HAL_GPIO_ReadPin>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d177      	bne.n	8002a7e <Alarm_Check+0x10e>
	{
		// Check the temperature value
		if(temp > temp_setpoint[1])
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <Alarm_Check+0x11c>)
 8002990:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002994:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002998:	f7fe f838 	bl	8000a0c <__aeabi_dcmpgt>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d013      	beq.n	80029ca <Alarm_Check+0x5a>
		{
			// The temperature is too HIGH
			Buzzer_Trigger();
 80029a2:	f7ff fa45 	bl	8001e30 <Buzzer_Trigger>
			lcd_clear();
 80029a6:	f7fe fb11 	bl	8000fcc <lcd_clear>
			lcd_put_cursor(0, 4);
 80029aa:	2104      	movs	r1, #4
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7fe fb24 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Too high");
 80029b2:	4837      	ldr	r0, [pc, #220]	; (8002a90 <Alarm_Check+0x120>)
 80029b4:	f7fe faf5 	bl	8000fa2 <lcd_send_string>
			lcd_put_cursor(1, 2);
 80029b8:	2102      	movs	r1, #2
 80029ba:	2001      	movs	r0, #1
 80029bc:	f7fe fb1d 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Temperature");
 80029c0:	4834      	ldr	r0, [pc, #208]	; (8002a94 <Alarm_Check+0x124>)
 80029c2:	f7fe faee 	bl	8000fa2 <lcd_send_string>
			return 1;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e05a      	b.n	8002a80 <Alarm_Check+0x110>
		}
		if(temp < temp_setpoint[0])
 80029ca:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <Alarm_Check+0x11c>)
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029d4:	f7fd fffc 	bl	80009d0 <__aeabi_dcmplt>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d013      	beq.n	8002a06 <Alarm_Check+0x96>
		{
			// The temperature is too LOW
			Buzzer_Trigger();
 80029de:	f7ff fa27 	bl	8001e30 <Buzzer_Trigger>
			lcd_clear();
 80029e2:	f7fe faf3 	bl	8000fcc <lcd_clear>
			lcd_put_cursor(0, 4);
 80029e6:	2104      	movs	r1, #4
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7fe fb06 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Too low");
 80029ee:	482a      	ldr	r0, [pc, #168]	; (8002a98 <Alarm_Check+0x128>)
 80029f0:	f7fe fad7 	bl	8000fa2 <lcd_send_string>
			lcd_put_cursor(1, 2);
 80029f4:	2102      	movs	r1, #2
 80029f6:	2001      	movs	r0, #1
 80029f8:	f7fe faff 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Temperature");
 80029fc:	4825      	ldr	r0, [pc, #148]	; (8002a94 <Alarm_Check+0x124>)
 80029fe:	f7fe fad0 	bl	8000fa2 <lcd_send_string>
			return 1;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e03c      	b.n	8002a80 <Alarm_Check+0x110>
		}

		// Check the humidity value
		if(humid > humid_setpoint[1])
 8002a06:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <Alarm_Check+0x12c>)
 8002a08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a10:	f7fd fffc 	bl	8000a0c <__aeabi_dcmpgt>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d013      	beq.n	8002a42 <Alarm_Check+0xd2>
		{
			// The humidity is too HIGH
			Buzzer_Trigger();
 8002a1a:	f7ff fa09 	bl	8001e30 <Buzzer_Trigger>
			lcd_clear();
 8002a1e:	f7fe fad5 	bl	8000fcc <lcd_clear>
			lcd_put_cursor(0, 4);
 8002a22:	2104      	movs	r1, #4
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fe fae8 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Too high");
 8002a2a:	4819      	ldr	r0, [pc, #100]	; (8002a90 <Alarm_Check+0x120>)
 8002a2c:	f7fe fab9 	bl	8000fa2 <lcd_send_string>
			lcd_put_cursor(1, 4);
 8002a30:	2104      	movs	r1, #4
 8002a32:	2001      	movs	r0, #1
 8002a34:	f7fe fae1 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Humidity");
 8002a38:	4819      	ldr	r0, [pc, #100]	; (8002aa0 <Alarm_Check+0x130>)
 8002a3a:	f7fe fab2 	bl	8000fa2 <lcd_send_string>
			return 1;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e01e      	b.n	8002a80 <Alarm_Check+0x110>
		}
		if(humid < humid_setpoint[0])
 8002a42:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <Alarm_Check+0x12c>)
 8002a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a4c:	f7fd ffc0 	bl	80009d0 <__aeabi_dcmplt>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d013      	beq.n	8002a7e <Alarm_Check+0x10e>
		{
			// The humidity is too LOW
			Buzzer_Trigger();
 8002a56:	f7ff f9eb 	bl	8001e30 <Buzzer_Trigger>
			lcd_clear();
 8002a5a:	f7fe fab7 	bl	8000fcc <lcd_clear>
			lcd_put_cursor(0, 4);
 8002a5e:	2104      	movs	r1, #4
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7fe faca 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Too low");
 8002a66:	480c      	ldr	r0, [pc, #48]	; (8002a98 <Alarm_Check+0x128>)
 8002a68:	f7fe fa9b 	bl	8000fa2 <lcd_send_string>
			lcd_put_cursor(1, 4);
 8002a6c:	2104      	movs	r1, #4
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7fe fac3 	bl	8000ffa <lcd_put_cursor>
			lcd_send_string("Humidity");
 8002a74:	480a      	ldr	r0, [pc, #40]	; (8002aa0 <Alarm_Check+0x130>)
 8002a76:	f7fe fa94 	bl	8000fa2 <lcd_send_string>
			return 1;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <Alarm_Check+0x110>
		}
	}
	return 0;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40011000 	.word	0x40011000
 8002a8c:	20000008 	.word	0x20000008
 8002a90:	0800afe8 	.word	0x0800afe8
 8002a94:	0800aff4 	.word	0x0800aff4
 8002a98:	0800b000 	.word	0x0800b000
 8002a9c:	20000018 	.word	0x20000018
 8002aa0:	0800b008 	.word	0x0800b008

08002aa4 <LoRa_Receive_Handle>:

// LoRa receive data handle
void LoRa_Receive_Handle()
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08e      	sub	sp, #56	; 0x38
 8002aa8:	af02      	add	r7, sp, #8
	char *rcvSrcId;		// pointer to source ID
	char *rcvDesId;		// pointer to destination ID
	char *cmdType;			// pointer to received message

	rcvSrcId = strtok(received_data, ",");            	// return the pointer to the source_id
 8002aaa:	4965      	ldr	r1, [pc, #404]	; (8002c40 <LoRa_Receive_Handle+0x19c>)
 8002aac:	4865      	ldr	r0, [pc, #404]	; (8002c44 <LoRa_Receive_Handle+0x1a0>)
 8002aae:	f004 f96b 	bl	8006d88 <strtok>
 8002ab2:	62f8      	str	r0, [r7, #44]	; 0x2c
	rcvDesId = strtok(NULL, ",");                     	// continue to return the pointer to the destination_id
 8002ab4:	4962      	ldr	r1, [pc, #392]	; (8002c40 <LoRa_Receive_Handle+0x19c>)
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f004 f966 	bl	8006d88 <strtok>
 8002abc:	62b8      	str	r0, [r7, #40]	; 0x28
	cmdType = strtok(NULL, ","); 						// continue to return the pointer to the received command type
 8002abe:	4960      	ldr	r1, [pc, #384]	; (8002c40 <LoRa_Receive_Handle+0x19c>)
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f004 f961 	bl	8006d88 <strtok>
 8002ac6:	6278      	str	r0, [r7, #36]	; 0x24

	// Check if the destination ID is correct
	if(!strcmp(rcvDesId, srcId))
 8002ac8:	4b5f      	ldr	r3, [pc, #380]	; (8002c48 <LoRa_Receive_Handle+0x1a4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ad0:	f7fd fb3e 	bl	8000150 <strcmp>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 80ae 	bne.w	8002c38 <LoRa_Receive_Handle+0x194>
	{
		if (!strcmp(cmdType,"1"))
 8002adc:	495b      	ldr	r1, [pc, #364]	; (8002c4c <LoRa_Receive_Handle+0x1a8>)
 8002ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ae0:	f7fd fb36 	bl	8000150 <strcmp>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d12c      	bne.n	8002b44 <LoRa_Receive_Handle+0xa0>
		{
			char *status; // pointer to the received buzzer status
			status = strtok(NULL, ","); // continue to return the pointer to the received buzzer status
 8002aea:	4955      	ldr	r1, [pc, #340]	; (8002c40 <LoRa_Receive_Handle+0x19c>)
 8002aec:	2000      	movs	r0, #0
 8002aee:	f004 f94b 	bl	8006d88 <strtok>
 8002af2:	6138      	str	r0, [r7, #16]
			if (!strcmp(status, "ON"))
 8002af4:	4956      	ldr	r1, [pc, #344]	; (8002c50 <LoRa_Receive_Handle+0x1ac>)
 8002af6:	6938      	ldr	r0, [r7, #16]
 8002af8:	f7fd fb2a 	bl	8000150 <strcmp>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10c      	bne.n	8002b1c <LoRa_Receive_Handle+0x78>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002b02:	2200      	movs	r2, #0
 8002b04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b08:	4852      	ldr	r0, [pc, #328]	; (8002c54 <LoRa_Receive_Handle+0x1b0>)
 8002b0a:	f000 fe90 	bl	800382e <HAL_GPIO_WritePin>
				cmdStatus = 1;
 8002b0e:	4b52      	ldr	r3, [pc, #328]	; (8002c58 <LoRa_Receive_Handle+0x1b4>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
				alarmStatus = 1;
 8002b14:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <LoRa_Receive_Handle+0x1b8>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e06a      	b.n	8002bf2 <LoRa_Receive_Handle+0x14e>
			}
			else if (!strcmp(status, "OFF"))
 8002b1c:	4950      	ldr	r1, [pc, #320]	; (8002c60 <LoRa_Receive_Handle+0x1bc>)
 8002b1e:	6938      	ldr	r0, [r7, #16]
 8002b20:	f7fd fb16 	bl	8000150 <strcmp>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d163      	bne.n	8002bf2 <LoRa_Receive_Handle+0x14e>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b30:	4848      	ldr	r0, [pc, #288]	; (8002c54 <LoRa_Receive_Handle+0x1b0>)
 8002b32:	f000 fe7c 	bl	800382e <HAL_GPIO_WritePin>
				cmdStatus = 1;
 8002b36:	4b48      	ldr	r3, [pc, #288]	; (8002c58 <LoRa_Receive_Handle+0x1b4>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
				alarmStatus = 0;
 8002b3c:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <LoRa_Receive_Handle+0x1b8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e056      	b.n	8002bf2 <LoRa_Receive_Handle+0x14e>
			}
		}
		else if (!strcmp(cmdType, "2"))
 8002b44:	4947      	ldr	r1, [pc, #284]	; (8002c64 <LoRa_Receive_Handle+0x1c0>)
 8002b46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b48:	f7fd fb02 	bl	8000150 <strcmp>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d125      	bne.n	8002b9e <LoRa_Receive_Handle+0xfa>
		{
			char *tempLowest; 	// pointer to the received lowest temperature level
			char *tempHighest;	// pointer to the received highest temperature level
			tempLowest = strtok(NULL, ","); // continue to return the pointer to the received lowest temperature level
 8002b52:	493b      	ldr	r1, [pc, #236]	; (8002c40 <LoRa_Receive_Handle+0x19c>)
 8002b54:	2000      	movs	r0, #0
 8002b56:	f004 f917 	bl	8006d88 <strtok>
 8002b5a:	61b8      	str	r0, [r7, #24]
			tempHighest = strtok(NULL, ","); // continue to return the pointer to the received highest temperature level
 8002b5c:	4938      	ldr	r1, [pc, #224]	; (8002c40 <LoRa_Receive_Handle+0x19c>)
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f004 f912 	bl	8006d88 <strtok>
 8002b64:	6178      	str	r0, [r7, #20]
			double d;
			sscanf(tempLowest, "%lf", &d);
 8002b66:	f107 0308 	add.w	r3, r7, #8
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	493e      	ldr	r1, [pc, #248]	; (8002c68 <LoRa_Receive_Handle+0x1c4>)
 8002b6e:	69b8      	ldr	r0, [r7, #24]
 8002b70:	f004 f892 	bl	8006c98 <siscanf>
			temp_setpoint[0] = d;
 8002b74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b78:	493c      	ldr	r1, [pc, #240]	; (8002c6c <LoRa_Receive_Handle+0x1c8>)
 8002b7a:	e9c1 2300 	strd	r2, r3, [r1]
			sscanf(tempHighest, "%lf", &d);
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	461a      	mov	r2, r3
 8002b84:	4938      	ldr	r1, [pc, #224]	; (8002c68 <LoRa_Receive_Handle+0x1c4>)
 8002b86:	6978      	ldr	r0, [r7, #20]
 8002b88:	f004 f886 	bl	8006c98 <siscanf>
			temp_setpoint[1] = d;
 8002b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b90:	4936      	ldr	r1, [pc, #216]	; (8002c6c <LoRa_Receive_Handle+0x1c8>)
 8002b92:	e9c1 2302 	strd	r2, r3, [r1, #8]
			cmdStatus = 1;
 8002b96:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <LoRa_Receive_Handle+0x1b4>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	e029      	b.n	8002bf2 <LoRa_Receive_Handle+0x14e>
		}
		else if (!strcmp(cmdType, "3"))
 8002b9e:	4934      	ldr	r1, [pc, #208]	; (8002c70 <LoRa_Receive_Handle+0x1cc>)
 8002ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ba2:	f7fd fad5 	bl	8000150 <strcmp>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d122      	bne.n	8002bf2 <LoRa_Receive_Handle+0x14e>
		{
			char *humidLowest; 	// pointer to the received lowest humidity level
			char *humidHighest;	// pointer to the received highest humidity level
			humidLowest = strtok(NULL, ","); // continue to return the pointer to the received lowest humidity level
 8002bac:	4924      	ldr	r1, [pc, #144]	; (8002c40 <LoRa_Receive_Handle+0x19c>)
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f004 f8ea 	bl	8006d88 <strtok>
 8002bb4:	6238      	str	r0, [r7, #32]
			humidHighest = strtok(NULL, ","); // continue to return the pointer to the received highest humdity level
 8002bb6:	4922      	ldr	r1, [pc, #136]	; (8002c40 <LoRa_Receive_Handle+0x19c>)
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f004 f8e5 	bl	8006d88 <strtok>
 8002bbe:	61f8      	str	r0, [r7, #28]
			double d;
			sscanf(humidLowest, "%lf", &d);
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4928      	ldr	r1, [pc, #160]	; (8002c68 <LoRa_Receive_Handle+0x1c4>)
 8002bc6:	6a38      	ldr	r0, [r7, #32]
 8002bc8:	f004 f866 	bl	8006c98 <siscanf>
			humid_setpoint[0] = d;
 8002bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bd0:	4928      	ldr	r1, [pc, #160]	; (8002c74 <LoRa_Receive_Handle+0x1d0>)
 8002bd2:	e9c1 2300 	strd	r2, r3, [r1]
			sscanf(humidHighest, "%lf", &d);
 8002bd6:	463b      	mov	r3, r7
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4923      	ldr	r1, [pc, #140]	; (8002c68 <LoRa_Receive_Handle+0x1c4>)
 8002bdc:	69f8      	ldr	r0, [r7, #28]
 8002bde:	f004 f85b 	bl	8006c98 <siscanf>
			humid_setpoint[1] = d;
 8002be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002be6:	4923      	ldr	r1, [pc, #140]	; (8002c74 <LoRa_Receive_Handle+0x1d0>)
 8002be8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			cmdStatus = 1;
 8002bec:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <LoRa_Receive_Handle+0x1b4>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
		}

		// Stop timer 4
		HAL_TIM_Base_Stop_IT(&htim4);
 8002bf2:	4821      	ldr	r0, [pc, #132]	; (8002c78 <LoRa_Receive_Handle+0x1d4>)
 8002bf4:	f002 fd8a 	bl	800570c <HAL_TIM_Base_Stop_IT>

		/* LoRa status encapsulation */
		Status_Packet_Encapsulation(lora_buffer, 10, 20, 1, cmdStatus, alarmStatus);
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <LoRa_Receive_Handle+0x1b4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <LoRa_Receive_Handle+0x1b8>)
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	9201      	str	r2, [sp, #4]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	2301      	movs	r3, #1
 8002c06:	2214      	movs	r2, #20
 8002c08:	210a      	movs	r1, #10
 8002c0a:	481c      	ldr	r0, [pc, #112]	; (8002c7c <LoRa_Receive_Handle+0x1d8>)
 8002c0c:	f7ff fa72 	bl	80020f4 <Status_Packet_Encapsulation>
		Delay_Ms(200);
 8002c10:	20c8      	movs	r0, #200	; 0xc8
 8002c12:	f7ff f8f5 	bl	8001e00 <Delay_Ms>

		/* LoRa sending data */
		LoRa_transmit(&myLoRa, (uint8_t*) lora_buffer, strlen(lora_buffer), 500);
 8002c16:	4819      	ldr	r0, [pc, #100]	; (8002c7c <LoRa_Receive_Handle+0x1d8>)
 8002c18:	f7fd faa4 	bl	8000164 <strlen>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002c24:	4915      	ldr	r1, [pc, #84]	; (8002c7c <LoRa_Receive_Handle+0x1d8>)
 8002c26:	4816      	ldr	r0, [pc, #88]	; (8002c80 <LoRa_Receive_Handle+0x1dc>)
 8002c28:	f7fe fc5f 	bl	80014ea <LoRa_transmit>

		cmdStatus = 0;
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <LoRa_Receive_Handle+0x1b4>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

		// Start timer 4 again
		HAL_TIM_Base_Start_IT(&htim4);
 8002c32:	4811      	ldr	r0, [pc, #68]	; (8002c78 <LoRa_Receive_Handle+0x1d4>)
 8002c34:	f002 fd18 	bl	8005668 <HAL_TIM_Base_Start_IT>
	}
}
 8002c38:	bf00      	nop
 8002c3a:	3730      	adds	r7, #48	; 0x30
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	0800b014 	.word	0x0800b014
 8002c44:	20000430 	.word	0x20000430
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	0800b018 	.word	0x0800b018
 8002c50:	0800b01c 	.word	0x0800b01c
 8002c54:	40011000 	.word	0x40011000
 8002c58:	2000046c 	.word	0x2000046c
 8002c5c:	20000470 	.word	0x20000470
 8002c60:	0800b020 	.word	0x0800b020
 8002c64:	0800b024 	.word	0x0800b024
 8002c68:	0800b028 	.word	0x0800b028
 8002c6c:	20000008 	.word	0x20000008
 8002c70:	0800b02c 	.word	0x0800b02c
 8002c74:	20000018 	.word	0x20000018
 8002c78:	20000358 	.word	0x20000358
 8002c7c:	200003cc 	.word	0x200003cc
 8002c80:	200003a0 	.word	0x200003a0

08002c84 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af06      	add	r7, sp, #24
 8002c8a:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a23      	ldr	r2, [pc, #140]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d13e      	bne.n	8002d12 <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		/* DHT22 get data */
		dht22Status = DHT22_Get_Data(&dht22Data);
 8002c94:	4822      	ldr	r0, [pc, #136]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002c96:	f7fe f88b 	bl	8000db0 <DHT22_Get_Data>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002ca0:	701a      	strb	r2, [r3, #0]

		if(dht22Status == 1)
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d128      	bne.n	8002cfc <HAL_TIM_PeriodElapsedCallback+0x78>
		{
			/* Check the temperature and humidity level */
			safety = Alarm_Check(dht22Data.temperature, dht22Data.humidity); // 0: safe, 1: unsafe
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002cac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002cb2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cb6:	f7ff fe5b 	bl	8002970 <Alarm_Check>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4a1a      	ldr	r2, [pc, #104]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002cbe:	6013      	str	r3, [r2, #0]

			/* LoRa data encapsulation */
			Data_Packet_Encapsulation(lora_buffer, 10, 20, 0, dht22Data.temperature, dht22Data.humidity, safety);
 8002cc0:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	4916      	ldr	r1, [pc, #88]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002cc8:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8002ccc:	4c16      	ldr	r4, [pc, #88]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002cce:	6824      	ldr	r4, [r4, #0]
 8002cd0:	9404      	str	r4, [sp, #16]
 8002cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002cd6:	e9cd 2300 	strd	r2, r3, [sp]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2214      	movs	r2, #20
 8002cde:	210a      	movs	r1, #10
 8002ce0:	4812      	ldr	r0, [pc, #72]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002ce2:	f7ff f9e7 	bl	80020b4 <Data_Packet_Encapsulation>

			/* LoRa sending data */
			LoRa_transmit(&myLoRa, (uint8_t*) lora_buffer, strlen(lora_buffer), 500);
 8002ce6:	4811      	ldr	r0, [pc, #68]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002ce8:	f7fd fa3c 	bl	8000164 <strlen>
 8002cec:	4603      	mov	r3, r0
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002cf4:	490d      	ldr	r1, [pc, #52]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002cf6:	480e      	ldr	r0, [pc, #56]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002cf8:	f7fe fbf7 	bl	80014ea <LoRa_transmit>
		}

		if (safety == 0)
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d106      	bne.n	8002d12 <HAL_TIM_PeriodElapsedCallback+0x8e>
		{
			/* Print DHT22 data onto LCD */
			Lcd_Sytem_State_Print(mode);
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fa0d 	bl	8002128 <Lcd_Sytem_State_Print>

			/* Handle when the increase/decrease button is pressed a long time */
			Long_Pressed_Button();
 8002d0e:	f7ff fca3 	bl	8002658 <Long_Pressed_Button>
		}
	}
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd90      	pop	{r4, r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000358 	.word	0x20000358
 8002d20:	20000458 	.word	0x20000458
 8002d24:	20000468 	.word	0x20000468
 8002d28:	20000474 	.word	0x20000474
 8002d2c:	200003cc 	.word	0x200003cc
 8002d30:	200003a0 	.word	0x200003a0
 8002d34:	20000454 	.word	0x20000454

08002d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d3c:	b672      	cpsid	i
}
 8002d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <Error_Handler+0x8>
	...

08002d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_MspInit+0x40>)
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	4a0d      	ldr	r2, [pc, #52]	; (8002d84 <HAL_MspInit+0x40>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6193      	str	r3, [r2, #24]
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_MspInit+0x40>)
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	607b      	str	r3, [r7, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_MspInit+0x40>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <HAL_MspInit+0x40>)
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	61d3      	str	r3, [r2, #28]
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_MspInit+0x40>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	40021000 	.word	0x40021000

08002d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 0310 	add.w	r3, r7, #16
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <HAL_I2C_MspInit+0x70>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d123      	bne.n	8002df0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da8:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <HAL_I2C_MspInit+0x74>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <HAL_I2C_MspInit+0x74>)
 8002dae:	f043 0308 	orr.w	r3, r3, #8
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <HAL_I2C_MspInit+0x74>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dc0:	23c0      	movs	r3, #192	; 0xc0
 8002dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dc4:	2312      	movs	r3, #18
 8002dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dcc:	f107 0310 	add.w	r3, r7, #16
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	480b      	ldr	r0, [pc, #44]	; (8002e00 <HAL_I2C_MspInit+0x78>)
 8002dd4:	f000 fb90 	bl	80034f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_I2C_MspInit+0x74>)
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	4a07      	ldr	r2, [pc, #28]	; (8002dfc <HAL_I2C_MspInit+0x74>)
 8002dde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002de2:	61d3      	str	r3, [r2, #28]
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_I2C_MspInit+0x74>)
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002df0:	bf00      	nop
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40005400 	.word	0x40005400
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40010c00 	.word	0x40010c00

08002e04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 0310 	add.w	r3, r7, #16
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1c      	ldr	r2, [pc, #112]	; (8002e90 <HAL_SPI_MspInit+0x8c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d131      	bne.n	8002e88 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_SPI_MspInit+0x90>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <HAL_SPI_MspInit+0x90>)
 8002e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2e:	61d3      	str	r3, [r2, #28]
 8002e30:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <HAL_SPI_MspInit+0x90>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3c:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_SPI_MspInit+0x90>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <HAL_SPI_MspInit+0x90>)
 8002e42:	f043 0308 	orr.w	r3, r3, #8
 8002e46:	6193      	str	r3, [r2, #24]
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_SPI_MspInit+0x90>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002e54:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002e58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e62:	f107 0310 	add.w	r3, r7, #16
 8002e66:	4619      	mov	r1, r3
 8002e68:	480b      	ldr	r0, [pc, #44]	; (8002e98 <HAL_SPI_MspInit+0x94>)
 8002e6a:	f000 fb45 	bl	80034f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7c:	f107 0310 	add.w	r3, r7, #16
 8002e80:	4619      	mov	r1, r3
 8002e82:	4805      	ldr	r0, [pc, #20]	; (8002e98 <HAL_SPI_MspInit+0x94>)
 8002e84:	f000 fb38 	bl	80034f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e88:	bf00      	nop
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40003800 	.word	0x40003800
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40010c00 	.word	0x40010c00

08002e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eac:	d10c      	bne.n	8002ec8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eae:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <HAL_TIM_Base_MspInit+0x8c>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_TIM_Base_MspInit+0x8c>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	61d3      	str	r3, [r2, #28]
 8002eba:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_TIM_Base_MspInit+0x8c>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ec6:	e02a      	b.n	8002f1e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <HAL_TIM_Base_MspInit+0x90>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10c      	bne.n	8002eec <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_TIM_Base_MspInit+0x8c>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	4a14      	ldr	r2, [pc, #80]	; (8002f28 <HAL_TIM_Base_MspInit+0x8c>)
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	61d3      	str	r3, [r2, #28]
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_TIM_Base_MspInit+0x8c>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	693b      	ldr	r3, [r7, #16]
}
 8002eea:	e018      	b.n	8002f1e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0f      	ldr	r2, [pc, #60]	; (8002f30 <HAL_TIM_Base_MspInit+0x94>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d113      	bne.n	8002f1e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <HAL_TIM_Base_MspInit+0x8c>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <HAL_TIM_Base_MspInit+0x8c>)
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	61d3      	str	r3, [r2, #28]
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_TIM_Base_MspInit+0x8c>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2100      	movs	r1, #0
 8002f12:	201e      	movs	r0, #30
 8002f14:	f000 fab9 	bl	800348a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f18:	201e      	movs	r0, #30
 8002f1a:	f000 fad2 	bl	80034c2 <HAL_NVIC_EnableIRQ>
}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800

08002f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f38:	e7fe      	b.n	8002f38 <NMI_Handler+0x4>

08002f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f3e:	e7fe      	b.n	8002f3e <HardFault_Handler+0x4>

08002f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f44:	e7fe      	b.n	8002f44 <MemManage_Handler+0x4>

08002f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f4a:	e7fe      	b.n	8002f4a <BusFault_Handler+0x4>

08002f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f50:	e7fe      	b.n	8002f50 <UsageFault_Handler+0x4>

08002f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f7a:	f000 f96f 	bl	800325c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	Delay_Ms(50);
 8002f86:	2032      	movs	r0, #50	; 0x32
 8002f88:	f7fe ff3a 	bl	8001e00 <Delay_Ms>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUZZER_BUTTON_Pin);
 8002f8c:	2002      	movs	r0, #2
 8002f8e:	f000 fc7f 	bl	8003890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	Delay_Ms(50);
 8002f9a:	2032      	movs	r0, #50	; 0x32
 8002f9c:	f7fe ff30 	bl	8001e00 <Delay_Ms>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INC_BUTTON_Pin);
 8002fa0:	2004      	movs	r0, #4
 8002fa2:	f000 fc75 	bl	8003890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	Delay_Ms(50);
 8002fae:	2032      	movs	r0, #50	; 0x32
 8002fb0:	f7fe ff26 	bl	8001e00 <Delay_Ms>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DES_BUTTON_Pin);
 8002fb4:	2008      	movs	r0, #8
 8002fb6:	f000 fc6b 	bl	8003890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	Delay_Ms(50);
 8002fc2:	2032      	movs	r0, #50	; 0x32
 8002fc4:	f7fe ff1c 	bl	8001e00 <Delay_Ms>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_BUTTON_Pin);
 8002fc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fcc:	f000 fc60 	bl	8003890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <TIM4_IRQHandler+0x10>)
 8002fda:	f002 fbc5 	bl	8005768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000358 	.word	0x20000358

08002fe8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8002fec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ff0:	f000 fc4e 	bl	8003890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return 1;
 8002ffc:	2301      	movs	r3, #1
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <_kill>:

int _kill(int pid, int sig)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003010:	f003 ff60 	bl	8006ed4 <__errno>
 8003014:	4603      	mov	r3, r0
 8003016:	2216      	movs	r2, #22
 8003018:	601a      	str	r2, [r3, #0]
  return -1;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <_exit>:

void _exit (int status)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800302e:	f04f 31ff 	mov.w	r1, #4294967295
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ffe7 	bl	8003006 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003038:	e7fe      	b.n	8003038 <_exit+0x12>

0800303a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	e00a      	b.n	8003062 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800304c:	f3af 8000 	nop.w
 8003050:	4601      	mov	r1, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	60ba      	str	r2, [r7, #8]
 8003058:	b2ca      	uxtb	r2, r1
 800305a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	3301      	adds	r3, #1
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	429a      	cmp	r2, r3
 8003068:	dbf0      	blt.n	800304c <_read+0x12>
  }

  return len;
 800306a:	687b      	ldr	r3, [r7, #4]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	e009      	b.n	800309a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	60ba      	str	r2, [r7, #8]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	3301      	adds	r3, #1
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	429a      	cmp	r2, r3
 80030a0:	dbf1      	blt.n	8003086 <_write+0x12>
  }
  return len;
 80030a2:	687b      	ldr	r3, [r7, #4]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <_close>:

int _close(int file)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030d2:	605a      	str	r2, [r3, #4]
  return 0;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <_isatty>:

int _isatty(int file)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030e8:	2301      	movs	r3, #1
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr

0800310c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003114:	4a14      	ldr	r2, [pc, #80]	; (8003168 <_sbrk+0x5c>)
 8003116:	4b15      	ldr	r3, [pc, #84]	; (800316c <_sbrk+0x60>)
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <_sbrk+0x64>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <_sbrk+0x64>)
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <_sbrk+0x68>)
 800312c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <_sbrk+0x64>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d207      	bcs.n	800314c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800313c:	f003 feca 	bl	8006ed4 <__errno>
 8003140:	4603      	mov	r3, r0
 8003142:	220c      	movs	r2, #12
 8003144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
 800314a:	e009      	b.n	8003160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <_sbrk+0x64>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <_sbrk+0x64>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4413      	add	r3, r2
 800315a:	4a05      	ldr	r2, [pc, #20]	; (8003170 <_sbrk+0x64>)
 800315c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800315e:	68fb      	ldr	r3, [r7, #12]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20005000 	.word	0x20005000
 800316c:	00000400 	.word	0x00000400
 8003170:	20000478 	.word	0x20000478
 8003174:	200005d0 	.word	0x200005d0

08003178 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003184:	f7ff fff8 	bl	8003178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003188:	480b      	ldr	r0, [pc, #44]	; (80031b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800318a:	490c      	ldr	r1, [pc, #48]	; (80031bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800318c:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800318e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003190:	e002      	b.n	8003198 <LoopCopyDataInit>

08003192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003196:	3304      	adds	r3, #4

08003198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800319a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800319c:	d3f9      	bcc.n	8003192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80031a0:	4c09      	ldr	r4, [pc, #36]	; (80031c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a4:	e001      	b.n	80031aa <LoopFillZerobss>

080031a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031a8:	3204      	adds	r2, #4

080031aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031ac:	d3fb      	bcc.n	80031a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031ae:	f003 fe97 	bl	8006ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031b2:	f7fe fb03 	bl	80017bc <main>
  bx lr
 80031b6:	4770      	bx	lr
  ldr r0, =_sdata
 80031b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031bc:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80031c0:	0800b510 	.word	0x0800b510
  ldr r2, =_sbss
 80031c4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80031c8:	200005cc 	.word	0x200005cc

080031cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031cc:	e7fe      	b.n	80031cc <ADC1_2_IRQHandler>
	...

080031d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <HAL_Init+0x28>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <HAL_Init+0x28>)
 80031da:	f043 0310 	orr.w	r3, r3, #16
 80031de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e0:	2003      	movs	r0, #3
 80031e2:	f000 f947 	bl	8003474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031e6:	200f      	movs	r0, #15
 80031e8:	f000 f808 	bl	80031fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031ec:	f7ff fdaa 	bl	8002d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40022000 	.word	0x40022000

080031fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_InitTick+0x54>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_InitTick+0x58>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003212:	fbb3 f3f1 	udiv	r3, r3, r1
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f95f 	bl	80034de <HAL_SYSTICK_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e00e      	b.n	8003248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b0f      	cmp	r3, #15
 800322e:	d80a      	bhi.n	8003246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003230:	2200      	movs	r2, #0
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	f000 f927 	bl	800348a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800323c:	4a06      	ldr	r2, [pc, #24]	; (8003258 <HAL_InitTick+0x5c>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e000      	b.n	8003248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000028 	.word	0x20000028
 8003254:	20000030 	.word	0x20000030
 8003258:	2000002c 	.word	0x2000002c

0800325c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_IncTick+0x1c>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_IncTick+0x20>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4413      	add	r3, r2
 800326c:	4a03      	ldr	r2, [pc, #12]	; (800327c <HAL_IncTick+0x20>)
 800326e:	6013      	str	r3, [r2, #0]
}
 8003270:	bf00      	nop
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	20000030 	.word	0x20000030
 800327c:	2000047c 	.word	0x2000047c

08003280 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return uwTick;
 8003284:	4b02      	ldr	r3, [pc, #8]	; (8003290 <HAL_GetTick+0x10>)
 8003286:	681b      	ldr	r3, [r3, #0]
}
 8003288:	4618      	mov	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr
 8003290:	2000047c 	.word	0x2000047c

08003294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800329c:	f7ff fff0 	bl	8003280 <HAL_GetTick>
 80032a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d005      	beq.n	80032ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ae:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <HAL_Delay+0x44>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032ba:	bf00      	nop
 80032bc:	f7ff ffe0 	bl	8003280 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d8f7      	bhi.n	80032bc <HAL_Delay+0x28>
  {
  }
}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000030 	.word	0x20000030

080032dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <__NVIC_SetPriorityGrouping+0x44>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032f8:	4013      	ands	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800330c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800330e:	4a04      	ldr	r2, [pc, #16]	; (8003320 <__NVIC_SetPriorityGrouping+0x44>)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	60d3      	str	r3, [r2, #12]
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <__NVIC_GetPriorityGrouping+0x18>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	f003 0307 	and.w	r3, r3, #7
}
 8003332:	4618      	mov	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	2b00      	cmp	r3, #0
 8003350:	db0b      	blt.n	800336a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	f003 021f 	and.w	r2, r3, #31
 8003358:	4906      	ldr	r1, [pc, #24]	; (8003374 <__NVIC_EnableIRQ+0x34>)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	2001      	movs	r0, #1
 8003362:	fa00 f202 	lsl.w	r2, r0, r2
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	e000e100 	.word	0xe000e100

08003378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003388:	2b00      	cmp	r3, #0
 800338a:	db0a      	blt.n	80033a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	490c      	ldr	r1, [pc, #48]	; (80033c4 <__NVIC_SetPriority+0x4c>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	0112      	lsls	r2, r2, #4
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	440b      	add	r3, r1
 800339c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a0:	e00a      	b.n	80033b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4908      	ldr	r1, [pc, #32]	; (80033c8 <__NVIC_SetPriority+0x50>)
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	3b04      	subs	r3, #4
 80033b0:	0112      	lsls	r2, r2, #4
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	440b      	add	r3, r1
 80033b6:	761a      	strb	r2, [r3, #24]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	e000e100 	.word	0xe000e100
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f1c3 0307 	rsb	r3, r3, #7
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	bf28      	it	cs
 80033ea:	2304      	movcs	r3, #4
 80033ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3304      	adds	r3, #4
 80033f2:	2b06      	cmp	r3, #6
 80033f4:	d902      	bls.n	80033fc <NVIC_EncodePriority+0x30>
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3b03      	subs	r3, #3
 80033fa:	e000      	b.n	80033fe <NVIC_EncodePriority+0x32>
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	f04f 32ff 	mov.w	r2, #4294967295
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	401a      	ands	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003414:	f04f 31ff 	mov.w	r1, #4294967295
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	43d9      	mvns	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	4313      	orrs	r3, r2
         );
}
 8003426:	4618      	mov	r0, r3
 8003428:	3724      	adds	r7, #36	; 0x24
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3b01      	subs	r3, #1
 800343c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003440:	d301      	bcc.n	8003446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003442:	2301      	movs	r3, #1
 8003444:	e00f      	b.n	8003466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <SysTick_Config+0x40>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3b01      	subs	r3, #1
 800344c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800344e:	210f      	movs	r1, #15
 8003450:	f04f 30ff 	mov.w	r0, #4294967295
 8003454:	f7ff ff90 	bl	8003378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <SysTick_Config+0x40>)
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800345e:	4b04      	ldr	r3, [pc, #16]	; (8003470 <SysTick_Config+0x40>)
 8003460:	2207      	movs	r2, #7
 8003462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	e000e010 	.word	0xe000e010

08003474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ff2d 	bl	80032dc <__NVIC_SetPriorityGrouping>
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800348a:	b580      	push	{r7, lr}
 800348c:	b086      	sub	sp, #24
 800348e:	af00      	add	r7, sp, #0
 8003490:	4603      	mov	r3, r0
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800349c:	f7ff ff42 	bl	8003324 <__NVIC_GetPriorityGrouping>
 80034a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	6978      	ldr	r0, [r7, #20]
 80034a8:	f7ff ff90 	bl	80033cc <NVIC_EncodePriority>
 80034ac:	4602      	mov	r2, r0
 80034ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b2:	4611      	mov	r1, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff5f 	bl	8003378 <__NVIC_SetPriority>
}
 80034ba:	bf00      	nop
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ff35 	bl	8003340 <__NVIC_EnableIRQ>
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ffa2 	bl	8003430 <SysTick_Config>
 80034ec:	4603      	mov	r3, r0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b08b      	sub	sp, #44	; 0x2c
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003502:	2300      	movs	r3, #0
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003506:	2300      	movs	r3, #0
 8003508:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800350a:	e169      	b.n	80037e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800350c:	2201      	movs	r2, #1
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	429a      	cmp	r2, r3
 8003526:	f040 8158 	bne.w	80037da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4a9a      	ldr	r2, [pc, #616]	; (8003798 <HAL_GPIO_Init+0x2a0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d05e      	beq.n	80035f2 <HAL_GPIO_Init+0xfa>
 8003534:	4a98      	ldr	r2, [pc, #608]	; (8003798 <HAL_GPIO_Init+0x2a0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d875      	bhi.n	8003626 <HAL_GPIO_Init+0x12e>
 800353a:	4a98      	ldr	r2, [pc, #608]	; (800379c <HAL_GPIO_Init+0x2a4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d058      	beq.n	80035f2 <HAL_GPIO_Init+0xfa>
 8003540:	4a96      	ldr	r2, [pc, #600]	; (800379c <HAL_GPIO_Init+0x2a4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d86f      	bhi.n	8003626 <HAL_GPIO_Init+0x12e>
 8003546:	4a96      	ldr	r2, [pc, #600]	; (80037a0 <HAL_GPIO_Init+0x2a8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d052      	beq.n	80035f2 <HAL_GPIO_Init+0xfa>
 800354c:	4a94      	ldr	r2, [pc, #592]	; (80037a0 <HAL_GPIO_Init+0x2a8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d869      	bhi.n	8003626 <HAL_GPIO_Init+0x12e>
 8003552:	4a94      	ldr	r2, [pc, #592]	; (80037a4 <HAL_GPIO_Init+0x2ac>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d04c      	beq.n	80035f2 <HAL_GPIO_Init+0xfa>
 8003558:	4a92      	ldr	r2, [pc, #584]	; (80037a4 <HAL_GPIO_Init+0x2ac>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d863      	bhi.n	8003626 <HAL_GPIO_Init+0x12e>
 800355e:	4a92      	ldr	r2, [pc, #584]	; (80037a8 <HAL_GPIO_Init+0x2b0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d046      	beq.n	80035f2 <HAL_GPIO_Init+0xfa>
 8003564:	4a90      	ldr	r2, [pc, #576]	; (80037a8 <HAL_GPIO_Init+0x2b0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d85d      	bhi.n	8003626 <HAL_GPIO_Init+0x12e>
 800356a:	2b12      	cmp	r3, #18
 800356c:	d82a      	bhi.n	80035c4 <HAL_GPIO_Init+0xcc>
 800356e:	2b12      	cmp	r3, #18
 8003570:	d859      	bhi.n	8003626 <HAL_GPIO_Init+0x12e>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <HAL_GPIO_Init+0x80>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	080035f3 	.word	0x080035f3
 800357c:	080035cd 	.word	0x080035cd
 8003580:	080035df 	.word	0x080035df
 8003584:	08003621 	.word	0x08003621
 8003588:	08003627 	.word	0x08003627
 800358c:	08003627 	.word	0x08003627
 8003590:	08003627 	.word	0x08003627
 8003594:	08003627 	.word	0x08003627
 8003598:	08003627 	.word	0x08003627
 800359c:	08003627 	.word	0x08003627
 80035a0:	08003627 	.word	0x08003627
 80035a4:	08003627 	.word	0x08003627
 80035a8:	08003627 	.word	0x08003627
 80035ac:	08003627 	.word	0x08003627
 80035b0:	08003627 	.word	0x08003627
 80035b4:	08003627 	.word	0x08003627
 80035b8:	08003627 	.word	0x08003627
 80035bc:	080035d5 	.word	0x080035d5
 80035c0:	080035e9 	.word	0x080035e9
 80035c4:	4a79      	ldr	r2, [pc, #484]	; (80037ac <HAL_GPIO_Init+0x2b4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d013      	beq.n	80035f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035ca:	e02c      	b.n	8003626 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	623b      	str	r3, [r7, #32]
          break;
 80035d2:	e029      	b.n	8003628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	3304      	adds	r3, #4
 80035da:	623b      	str	r3, [r7, #32]
          break;
 80035dc:	e024      	b.n	8003628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	3308      	adds	r3, #8
 80035e4:	623b      	str	r3, [r7, #32]
          break;
 80035e6:	e01f      	b.n	8003628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	330c      	adds	r3, #12
 80035ee:	623b      	str	r3, [r7, #32]
          break;
 80035f0:	e01a      	b.n	8003628 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035fa:	2304      	movs	r3, #4
 80035fc:	623b      	str	r3, [r7, #32]
          break;
 80035fe:	e013      	b.n	8003628 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d105      	bne.n	8003614 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003608:	2308      	movs	r3, #8
 800360a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	611a      	str	r2, [r3, #16]
          break;
 8003612:	e009      	b.n	8003628 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003614:	2308      	movs	r3, #8
 8003616:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	615a      	str	r2, [r3, #20]
          break;
 800361e:	e003      	b.n	8003628 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003620:	2300      	movs	r3, #0
 8003622:	623b      	str	r3, [r7, #32]
          break;
 8003624:	e000      	b.n	8003628 <HAL_GPIO_Init+0x130>
          break;
 8003626:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2bff      	cmp	r3, #255	; 0xff
 800362c:	d801      	bhi.n	8003632 <HAL_GPIO_Init+0x13a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	e001      	b.n	8003636 <HAL_GPIO_Init+0x13e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3304      	adds	r3, #4
 8003636:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2bff      	cmp	r3, #255	; 0xff
 800363c:	d802      	bhi.n	8003644 <HAL_GPIO_Init+0x14c>
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	e002      	b.n	800364a <HAL_GPIO_Init+0x152>
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	3b08      	subs	r3, #8
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	210f      	movs	r1, #15
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	401a      	ands	r2, r3
 800365c:	6a39      	ldr	r1, [r7, #32]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	fa01 f303 	lsl.w	r3, r1, r3
 8003664:	431a      	orrs	r2, r3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80b1 	beq.w	80037da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003678:	4b4d      	ldr	r3, [pc, #308]	; (80037b0 <HAL_GPIO_Init+0x2b8>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	4a4c      	ldr	r2, [pc, #304]	; (80037b0 <HAL_GPIO_Init+0x2b8>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6193      	str	r3, [r2, #24]
 8003684:	4b4a      	ldr	r3, [pc, #296]	; (80037b0 <HAL_GPIO_Init+0x2b8>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003690:	4a48      	ldr	r2, [pc, #288]	; (80037b4 <HAL_GPIO_Init+0x2bc>)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	089b      	lsrs	r3, r3, #2
 8003696:	3302      	adds	r3, #2
 8003698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	220f      	movs	r2, #15
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4013      	ands	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a40      	ldr	r2, [pc, #256]	; (80037b8 <HAL_GPIO_Init+0x2c0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d013      	beq.n	80036e4 <HAL_GPIO_Init+0x1ec>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a3f      	ldr	r2, [pc, #252]	; (80037bc <HAL_GPIO_Init+0x2c4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00d      	beq.n	80036e0 <HAL_GPIO_Init+0x1e8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a3e      	ldr	r2, [pc, #248]	; (80037c0 <HAL_GPIO_Init+0x2c8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d007      	beq.n	80036dc <HAL_GPIO_Init+0x1e4>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a3d      	ldr	r2, [pc, #244]	; (80037c4 <HAL_GPIO_Init+0x2cc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d101      	bne.n	80036d8 <HAL_GPIO_Init+0x1e0>
 80036d4:	2303      	movs	r3, #3
 80036d6:	e006      	b.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036d8:	2304      	movs	r3, #4
 80036da:	e004      	b.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036dc:	2302      	movs	r3, #2
 80036de:	e002      	b.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036e4:	2300      	movs	r3, #0
 80036e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e8:	f002 0203 	and.w	r2, r2, #3
 80036ec:	0092      	lsls	r2, r2, #2
 80036ee:	4093      	lsls	r3, r2
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036f6:	492f      	ldr	r1, [pc, #188]	; (80037b4 <HAL_GPIO_Init+0x2bc>)
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	089b      	lsrs	r3, r3, #2
 80036fc:	3302      	adds	r3, #2
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d006      	beq.n	800371e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003710:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	492c      	ldr	r1, [pc, #176]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]
 800371c:	e006      	b.n	800372c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800371e:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	43db      	mvns	r3, r3
 8003726:	4928      	ldr	r1, [pc, #160]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003728:	4013      	ands	r3, r2
 800372a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d006      	beq.n	8003746 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003738:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	4922      	ldr	r1, [pc, #136]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	60cb      	str	r3, [r1, #12]
 8003744:	e006      	b.n	8003754 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	43db      	mvns	r3, r3
 800374e:	491e      	ldr	r1, [pc, #120]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003750:	4013      	ands	r3, r2
 8003752:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	4918      	ldr	r1, [pc, #96]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
 800376c:	e006      	b.n	800377c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	43db      	mvns	r3, r3
 8003776:	4914      	ldr	r1, [pc, #80]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003778:	4013      	ands	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d021      	beq.n	80037cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	490e      	ldr	r1, [pc, #56]	; (80037c8 <HAL_GPIO_Init+0x2d0>)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]
 8003794:	e021      	b.n	80037da <HAL_GPIO_Init+0x2e2>
 8003796:	bf00      	nop
 8003798:	10320000 	.word	0x10320000
 800379c:	10310000 	.word	0x10310000
 80037a0:	10220000 	.word	0x10220000
 80037a4:	10210000 	.word	0x10210000
 80037a8:	10120000 	.word	0x10120000
 80037ac:	10110000 	.word	0x10110000
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40010800 	.word	0x40010800
 80037bc:	40010c00 	.word	0x40010c00
 80037c0:	40011000 	.word	0x40011000
 80037c4:	40011400 	.word	0x40011400
 80037c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_GPIO_Init+0x304>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	4909      	ldr	r1, [pc, #36]	; (80037fc <HAL_GPIO_Init+0x304>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	3301      	adds	r3, #1
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f47f ae8e 	bne.w	800350c <HAL_GPIO_Init+0x14>
  }
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	372c      	adds	r7, #44	; 0x2c
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	40010400 	.word	0x40010400

08003800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	887b      	ldrh	r3, [r7, #2]
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
 800381c:	e001      	b.n	8003822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	807b      	strh	r3, [r7, #2]
 800383a:	4613      	mov	r3, r2
 800383c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800383e:	787b      	ldrb	r3, [r7, #1]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003844:	887a      	ldrh	r2, [r7, #2]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800384a:	e003      	b.n	8003854 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	041a      	lsls	r2, r3, #16
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	611a      	str	r2, [r3, #16]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003870:	887a      	ldrh	r2, [r7, #2]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4013      	ands	r3, r2
 8003876:	041a      	lsls	r2, r3, #16
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	43d9      	mvns	r1, r3
 800387c:	887b      	ldrh	r3, [r7, #2]
 800387e:	400b      	ands	r3, r1
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	611a      	str	r2, [r3, #16]
}
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d006      	beq.n	80038b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038a6:	4a05      	ldr	r2, [pc, #20]	; (80038bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fad6 	bl	8001e60 <HAL_GPIO_EXTI_Callback>
  }
}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40010400 	.word	0x40010400

080038c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e12b      	b.n	8003b2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff fa4e 	bl	8002d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	; 0x24
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003912:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003922:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003924:	f001 f840 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 8003928:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4a81      	ldr	r2, [pc, #516]	; (8003b34 <HAL_I2C_Init+0x274>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d807      	bhi.n	8003944 <HAL_I2C_Init+0x84>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a80      	ldr	r2, [pc, #512]	; (8003b38 <HAL_I2C_Init+0x278>)
 8003938:	4293      	cmp	r3, r2
 800393a:	bf94      	ite	ls
 800393c:	2301      	movls	r3, #1
 800393e:	2300      	movhi	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e006      	b.n	8003952 <HAL_I2C_Init+0x92>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4a7d      	ldr	r2, [pc, #500]	; (8003b3c <HAL_I2C_Init+0x27c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	bf94      	ite	ls
 800394c:	2301      	movls	r3, #1
 800394e:	2300      	movhi	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0e7      	b.n	8003b2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4a78      	ldr	r2, [pc, #480]	; (8003b40 <HAL_I2C_Init+0x280>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0c9b      	lsrs	r3, r3, #18
 8003964:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a6a      	ldr	r2, [pc, #424]	; (8003b34 <HAL_I2C_Init+0x274>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d802      	bhi.n	8003994 <HAL_I2C_Init+0xd4>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3301      	adds	r3, #1
 8003992:	e009      	b.n	80039a8 <HAL_I2C_Init+0xe8>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	4a69      	ldr	r2, [pc, #420]	; (8003b44 <HAL_I2C_Init+0x284>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	099b      	lsrs	r3, r3, #6
 80039a6:	3301      	adds	r3, #1
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	495c      	ldr	r1, [pc, #368]	; (8003b34 <HAL_I2C_Init+0x274>)
 80039c4:	428b      	cmp	r3, r1
 80039c6:	d819      	bhi.n	80039fc <HAL_I2C_Init+0x13c>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1e59      	subs	r1, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d6:	1c59      	adds	r1, r3, #1
 80039d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039dc:	400b      	ands	r3, r1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_I2C_Init+0x138>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1e59      	subs	r1, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f0:	3301      	adds	r3, #1
 80039f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f6:	e051      	b.n	8003a9c <HAL_I2C_Init+0x1dc>
 80039f8:	2304      	movs	r3, #4
 80039fa:	e04f      	b.n	8003a9c <HAL_I2C_Init+0x1dc>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d111      	bne.n	8003a28 <HAL_I2C_Init+0x168>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e58      	subs	r0, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	440b      	add	r3, r1
 8003a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e012      	b.n	8003a4e <HAL_I2C_Init+0x18e>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1e58      	subs	r0, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	0099      	lsls	r1, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Init+0x196>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e022      	b.n	8003a9c <HAL_I2C_Init+0x1dc>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10e      	bne.n	8003a7c <HAL_I2C_Init+0x1bc>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1e58      	subs	r0, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	460b      	mov	r3, r1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	440b      	add	r3, r1
 8003a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a70:	3301      	adds	r3, #1
 8003a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a7a:	e00f      	b.n	8003a9c <HAL_I2C_Init+0x1dc>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1e58      	subs	r0, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	0099      	lsls	r1, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	6809      	ldr	r1, [r1, #0]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69da      	ldr	r2, [r3, #28]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6911      	ldr	r1, [r2, #16]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68d2      	ldr	r2, [r2, #12]
 8003ad6:	4311      	orrs	r1, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	000186a0 	.word	0x000186a0
 8003b38:	001e847f 	.word	0x001e847f
 8003b3c:	003d08ff 	.word	0x003d08ff
 8003b40:	431bde83 	.word	0x431bde83
 8003b44:	10624dd3 	.word	0x10624dd3

08003b48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	607a      	str	r2, [r7, #4]
 8003b52:	461a      	mov	r2, r3
 8003b54:	460b      	mov	r3, r1
 8003b56:	817b      	strh	r3, [r7, #10]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b5c:	f7ff fb90 	bl	8003280 <HAL_GetTick>
 8003b60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	f040 80e0 	bne.w	8003d30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2319      	movs	r3, #25
 8003b76:	2201      	movs	r2, #1
 8003b78:	4970      	ldr	r1, [pc, #448]	; (8003d3c <HAL_I2C_Master_Transmit+0x1f4>)
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f964 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b86:	2302      	movs	r3, #2
 8003b88:	e0d3      	b.n	8003d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_I2C_Master_Transmit+0x50>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e0cc      	b.n	8003d32 <HAL_I2C_Master_Transmit+0x1ea>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d007      	beq.n	8003bbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0201 	orr.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2221      	movs	r2, #33	; 0x21
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2210      	movs	r2, #16
 8003bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	893a      	ldrh	r2, [r7, #8]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a50      	ldr	r2, [pc, #320]	; (8003d40 <HAL_I2C_Master_Transmit+0x1f8>)
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c00:	8979      	ldrh	r1, [r7, #10]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	6a3a      	ldr	r2, [r7, #32]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f89c 	bl	8003d44 <I2C_MasterRequestWrite>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e08d      	b.n	8003d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c2c:	e066      	b.n	8003cfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	6a39      	ldr	r1, [r7, #32]
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fa22 	bl	800407c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00d      	beq.n	8003c5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d107      	bne.n	8003c56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e06b      	b.n	8003d32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	781a      	ldrb	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d11b      	bne.n	8003cd0 <HAL_I2C_Master_Transmit+0x188>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d017      	beq.n	8003cd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	781a      	ldrb	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	6a39      	ldr	r1, [r7, #32]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fa19 	bl	800410c <I2C_WaitOnBTFFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00d      	beq.n	8003cfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d107      	bne.n	8003cf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e01a      	b.n	8003d32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d194      	bne.n	8003c2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	00100002 	.word	0x00100002
 8003d40:	ffff0000 	.word	0xffff0000

08003d44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	460b      	mov	r3, r1
 8003d52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d006      	beq.n	8003d6e <I2C_MasterRequestWrite+0x2a>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d003      	beq.n	8003d6e <I2C_MasterRequestWrite+0x2a>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d6c:	d108      	bne.n	8003d80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e00b      	b.n	8003d98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	2b12      	cmp	r3, #18
 8003d86:	d107      	bne.n	8003d98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f84f 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dbe:	d103      	bne.n	8003dc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e035      	b.n	8003e38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd4:	d108      	bne.n	8003de8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003de4:	611a      	str	r2, [r3, #16]
 8003de6:	e01b      	b.n	8003e20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003de8:	897b      	ldrh	r3, [r7, #10]
 8003dea:	11db      	asrs	r3, r3, #7
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f003 0306 	and.w	r3, r3, #6
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f063 030f 	orn	r3, r3, #15
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	490e      	ldr	r1, [pc, #56]	; (8003e40 <I2C_MasterRequestWrite+0xfc>)
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f898 	bl	8003f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e010      	b.n	8003e38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e16:	897b      	ldrh	r3, [r7, #10]
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4907      	ldr	r1, [pc, #28]	; (8003e44 <I2C_MasterRequestWrite+0x100>)
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f888 	bl	8003f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	00010008 	.word	0x00010008
 8003e44:	00010002 	.word	0x00010002

08003e48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e58:	e048      	b.n	8003eec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d044      	beq.n	8003eec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e62:	f7ff fa0d 	bl	8003280 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d302      	bcc.n	8003e78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d139      	bne.n	8003eec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	0c1b      	lsrs	r3, r3, #16
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d10d      	bne.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	43da      	mvns	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	e00c      	b.n	8003eb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	43da      	mvns	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d116      	bne.n	8003eec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e023      	b.n	8003f34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	0c1b      	lsrs	r3, r3, #16
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10d      	bne.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	43da      	mvns	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4013      	ands	r3, r2
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	e00c      	b.n	8003f2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	43da      	mvns	r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d093      	beq.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f4a:	e071      	b.n	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5a:	d123      	bne.n	8003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	f043 0204 	orr.w	r2, r3, #4
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e067      	b.n	8004074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003faa:	d041      	beq.n	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fac:	f7ff f968 	bl	8003280 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d302      	bcc.n	8003fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d136      	bne.n	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d10c      	bne.n	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bf14      	ite	ne
 8003fde:	2301      	movne	r3, #1
 8003fe0:	2300      	moveq	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	e00b      	b.n	8003ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	43da      	mvns	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bf14      	ite	ne
 8003ff8:	2301      	movne	r3, #1
 8003ffa:	2300      	moveq	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d016      	beq.n	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	f043 0220 	orr.w	r2, r3, #32
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e021      	b.n	8004074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	0c1b      	lsrs	r3, r3, #16
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b01      	cmp	r3, #1
 8004038:	d10c      	bne.n	8004054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	43da      	mvns	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4013      	ands	r3, r2
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e00b      	b.n	800406c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4013      	ands	r3, r2
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	f47f af6d 	bne.w	8003f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004088:	e034      	b.n	80040f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f886 	bl	800419c <I2C_IsAcknowledgeFailed>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e034      	b.n	8004104 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a0:	d028      	beq.n	80040f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a2:	f7ff f8ed 	bl	8003280 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d302      	bcc.n	80040b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d11d      	bne.n	80040f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	2b80      	cmp	r3, #128	; 0x80
 80040c4:	d016      	beq.n	80040f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	f043 0220 	orr.w	r2, r3, #32
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e007      	b.n	8004104 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fe:	2b80      	cmp	r3, #128	; 0x80
 8004100:	d1c3      	bne.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004118:	e034      	b.n	8004184 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f83e 	bl	800419c <I2C_IsAcknowledgeFailed>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e034      	b.n	8004194 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d028      	beq.n	8004184 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004132:	f7ff f8a5 	bl	8003280 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	429a      	cmp	r2, r3
 8004140:	d302      	bcc.n	8004148 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11d      	bne.n	8004184 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b04      	cmp	r3, #4
 8004154:	d016      	beq.n	8004184 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	f043 0220 	orr.w	r2, r3, #32
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e007      	b.n	8004194 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d1c3      	bne.n	800411a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b2:	d11b      	bne.n	80041ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	f043 0204 	orr.w	r2, r3, #4
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <HAL_PWR_EnableSleepOnExit+0x18>)
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	4a03      	ldr	r2, [pc, #12]	; (8004210 <HAL_PWR_EnableSleepOnExit+0x18>)
 8004202:	f043 0302 	orr.w	r3, r3, #2
 8004206:	6113      	str	r3, [r2, #16]
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e272      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 8087 	beq.w	8004342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004234:	4b92      	ldr	r3, [pc, #584]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b04      	cmp	r3, #4
 800423e:	d00c      	beq.n	800425a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004240:	4b8f      	ldr	r3, [pc, #572]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b08      	cmp	r3, #8
 800424a:	d112      	bne.n	8004272 <HAL_RCC_OscConfig+0x5e>
 800424c:	4b8c      	ldr	r3, [pc, #560]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004258:	d10b      	bne.n	8004272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425a:	4b89      	ldr	r3, [pc, #548]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d06c      	beq.n	8004340 <HAL_RCC_OscConfig+0x12c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d168      	bne.n	8004340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e24c      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427a:	d106      	bne.n	800428a <HAL_RCC_OscConfig+0x76>
 800427c:	4b80      	ldr	r3, [pc, #512]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a7f      	ldr	r2, [pc, #508]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e02e      	b.n	80042e8 <HAL_RCC_OscConfig+0xd4>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10c      	bne.n	80042ac <HAL_RCC_OscConfig+0x98>
 8004292:	4b7b      	ldr	r3, [pc, #492]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a7a      	ldr	r2, [pc, #488]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	4b78      	ldr	r3, [pc, #480]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a77      	ldr	r2, [pc, #476]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e01d      	b.n	80042e8 <HAL_RCC_OscConfig+0xd4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0xbc>
 80042b6:	4b72      	ldr	r3, [pc, #456]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a71      	ldr	r2, [pc, #452]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b6f      	ldr	r3, [pc, #444]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a6e      	ldr	r2, [pc, #440]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e00b      	b.n	80042e8 <HAL_RCC_OscConfig+0xd4>
 80042d0:	4b6b      	ldr	r3, [pc, #428]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a6a      	ldr	r2, [pc, #424]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4b68      	ldr	r3, [pc, #416]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a67      	ldr	r2, [pc, #412]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fe ffc6 	bl	8003280 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f8:	f7fe ffc2 	bl	8003280 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	; 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e200      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	4b5d      	ldr	r3, [pc, #372]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0xe4>
 8004316:	e014      	b.n	8004342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7fe ffb2 	bl	8003280 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004320:	f7fe ffae 	bl	8003280 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	; 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e1ec      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004332:	4b53      	ldr	r3, [pc, #332]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x10c>
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d063      	beq.n	8004416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800434e:	4b4c      	ldr	r3, [pc, #304]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800435a:	4b49      	ldr	r3, [pc, #292]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b08      	cmp	r3, #8
 8004364:	d11c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x18c>
 8004366:	4b46      	ldr	r3, [pc, #280]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d116      	bne.n	80043a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004372:	4b43      	ldr	r3, [pc, #268]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x176>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d001      	beq.n	800438a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e1c0      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438a:	4b3d      	ldr	r3, [pc, #244]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4939      	ldr	r1, [pc, #228]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439e:	e03a      	b.n	8004416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a8:	4b36      	ldr	r3, [pc, #216]	; (8004484 <HAL_RCC_OscConfig+0x270>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ae:	f7fe ff67 	bl	8003280 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b6:	f7fe ff63 	bl	8003280 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e1a1      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c8:	4b2d      	ldr	r3, [pc, #180]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d4:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4927      	ldr	r1, [pc, #156]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	600b      	str	r3, [r1, #0]
 80043e8:	e015      	b.n	8004416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ea:	4b26      	ldr	r3, [pc, #152]	; (8004484 <HAL_RCC_OscConfig+0x270>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fe ff46 	bl	8003280 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f8:	f7fe ff42 	bl	8003280 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e180      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03a      	beq.n	8004498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d019      	beq.n	800445e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442a:	4b17      	ldr	r3, [pc, #92]	; (8004488 <HAL_RCC_OscConfig+0x274>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004430:	f7fe ff26 	bl	8003280 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004438:	f7fe ff22 	bl	8003280 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e160      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004456:	2001      	movs	r0, #1
 8004458:	f000 faba 	bl	80049d0 <RCC_Delay>
 800445c:	e01c      	b.n	8004498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_RCC_OscConfig+0x274>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004464:	f7fe ff0c 	bl	8003280 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800446a:	e00f      	b.n	800448c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446c:	f7fe ff08 	bl	8003280 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d908      	bls.n	800448c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e146      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	42420000 	.word	0x42420000
 8004488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800448c:	4b92      	ldr	r3, [pc, #584]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e9      	bne.n	800446c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80a6 	beq.w	80045f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a6:	2300      	movs	r3, #0
 80044a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044aa:	4b8b      	ldr	r3, [pc, #556]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10d      	bne.n	80044d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b6:	4b88      	ldr	r3, [pc, #544]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	4a87      	ldr	r2, [pc, #540]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c0:	61d3      	str	r3, [r2, #28]
 80044c2:	4b85      	ldr	r3, [pc, #532]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d2:	4b82      	ldr	r3, [pc, #520]	; (80046dc <HAL_RCC_OscConfig+0x4c8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d118      	bne.n	8004510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044de:	4b7f      	ldr	r3, [pc, #508]	; (80046dc <HAL_RCC_OscConfig+0x4c8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a7e      	ldr	r2, [pc, #504]	; (80046dc <HAL_RCC_OscConfig+0x4c8>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ea:	f7fe fec9 	bl	8003280 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f2:	f7fe fec5 	bl	8003280 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b64      	cmp	r3, #100	; 0x64
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e103      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004504:	4b75      	ldr	r3, [pc, #468]	; (80046dc <HAL_RCC_OscConfig+0x4c8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x312>
 8004518:	4b6f      	ldr	r3, [pc, #444]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	4a6e      	ldr	r2, [pc, #440]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6213      	str	r3, [r2, #32]
 8004524:	e02d      	b.n	8004582 <HAL_RCC_OscConfig+0x36e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x334>
 800452e:	4b6a      	ldr	r3, [pc, #424]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	4a69      	ldr	r2, [pc, #420]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	6213      	str	r3, [r2, #32]
 800453a:	4b67      	ldr	r3, [pc, #412]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4a66      	ldr	r2, [pc, #408]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004540:	f023 0304 	bic.w	r3, r3, #4
 8004544:	6213      	str	r3, [r2, #32]
 8004546:	e01c      	b.n	8004582 <HAL_RCC_OscConfig+0x36e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b05      	cmp	r3, #5
 800454e:	d10c      	bne.n	800456a <HAL_RCC_OscConfig+0x356>
 8004550:	4b61      	ldr	r3, [pc, #388]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4a60      	ldr	r2, [pc, #384]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004556:	f043 0304 	orr.w	r3, r3, #4
 800455a:	6213      	str	r3, [r2, #32]
 800455c:	4b5e      	ldr	r3, [pc, #376]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4a5d      	ldr	r2, [pc, #372]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	6213      	str	r3, [r2, #32]
 8004568:	e00b      	b.n	8004582 <HAL_RCC_OscConfig+0x36e>
 800456a:	4b5b      	ldr	r3, [pc, #364]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	4a5a      	ldr	r2, [pc, #360]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	6213      	str	r3, [r2, #32]
 8004576:	4b58      	ldr	r3, [pc, #352]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	4a57      	ldr	r2, [pc, #348]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800457c:	f023 0304 	bic.w	r3, r3, #4
 8004580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d015      	beq.n	80045b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458a:	f7fe fe79 	bl	8003280 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	e00a      	b.n	80045a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fe fe75 	bl	8003280 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e0b1      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	4b4b      	ldr	r3, [pc, #300]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ee      	beq.n	8004592 <HAL_RCC_OscConfig+0x37e>
 80045b4:	e014      	b.n	80045e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b6:	f7fe fe63 	bl	8003280 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045bc:	e00a      	b.n	80045d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045be:	f7fe fe5f 	bl	8003280 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e09b      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d4:	4b40      	ldr	r3, [pc, #256]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ee      	bne.n	80045be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d105      	bne.n	80045f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e6:	4b3c      	ldr	r3, [pc, #240]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	4a3b      	ldr	r2, [pc, #236]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8087 	beq.w	800470a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045fc:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 030c 	and.w	r3, r3, #12
 8004604:	2b08      	cmp	r3, #8
 8004606:	d061      	beq.n	80046cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d146      	bne.n	800469e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004610:	4b33      	ldr	r3, [pc, #204]	; (80046e0 <HAL_RCC_OscConfig+0x4cc>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fe fe33 	bl	8003280 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461e:	f7fe fe2f 	bl	8003280 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e06d      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004630:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004644:	d108      	bne.n	8004658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004646:	4b24      	ldr	r3, [pc, #144]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	4921      	ldr	r1, [pc, #132]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004658:	4b1f      	ldr	r3, [pc, #124]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a19      	ldr	r1, [r3, #32]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	430b      	orrs	r3, r1
 800466a:	491b      	ldr	r1, [pc, #108]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_RCC_OscConfig+0x4cc>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fe fe03 	bl	8003280 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467e:	f7fe fdff 	bl	8003280 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e03d      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004690:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x46a>
 800469c:	e035      	b.n	800470a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_RCC_OscConfig+0x4cc>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fe fdec 	bl	8003280 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fe fde8 	bl	8003280 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e026      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046be:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x498>
 80046ca:	e01e      	b.n	800470a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e019      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40007000 	.word	0x40007000
 80046e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCC_OscConfig+0x500>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000

08004718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0d0      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800472c:	4b6a      	ldr	r3, [pc, #424]	; (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d910      	bls.n	800475c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b67      	ldr	r3, [pc, #412]	; (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 0207 	bic.w	r2, r3, #7
 8004742:	4965      	ldr	r1, [pc, #404]	; (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b63      	ldr	r3, [pc, #396]	; (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0b8      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a58      	ldr	r2, [pc, #352]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800477e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800478c:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a52      	ldr	r2, [pc, #328]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004796:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004798:	4b50      	ldr	r3, [pc, #320]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	494d      	ldr	r1, [pc, #308]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d040      	beq.n	8004838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d115      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e07f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d6:	4b41      	ldr	r3, [pc, #260]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e073      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e6:	4b3d      	ldr	r3, [pc, #244]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e06b      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f6:	4b39      	ldr	r3, [pc, #228]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f023 0203 	bic.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4936      	ldr	r1, [pc, #216]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004808:	f7fe fd3a 	bl	8003280 <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	e00a      	b.n	8004826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004810:	f7fe fd36 	bl	8003280 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e053      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	4b2d      	ldr	r3, [pc, #180]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 020c 	and.w	r2, r3, #12
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	429a      	cmp	r2, r3
 8004836:	d1eb      	bne.n	8004810 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004838:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d210      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 0207 	bic.w	r2, r3, #7
 800484e:	4922      	ldr	r1, [pc, #136]	; (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e032      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4916      	ldr	r1, [pc, #88]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	490e      	ldr	r1, [pc, #56]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048a6:	f000 f821 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	490a      	ldr	r1, [pc, #40]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 80048b8:	5ccb      	ldrb	r3, [r1, r3]
 80048ba:	fa22 f303 	lsr.w	r3, r2, r3
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <HAL_RCC_ClockConfig+0x1cc>)
 80048c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1d0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fc98 	bl	80031fc <HAL_InitTick>

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40022000 	.word	0x40022000
 80048dc:	40021000 	.word	0x40021000
 80048e0:	0800b03c 	.word	0x0800b03c
 80048e4:	20000028 	.word	0x20000028
 80048e8:	2000002c 	.word	0x2000002c

080048ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	2300      	movs	r3, #0
 8004900:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <HAL_RCC_GetSysClockFreq+0x94>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b04      	cmp	r3, #4
 8004914:	d002      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x30>
 8004916:	2b08      	cmp	r3, #8
 8004918:	d003      	beq.n	8004922 <HAL_RCC_GetSysClockFreq+0x36>
 800491a:	e027      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <HAL_RCC_GetSysClockFreq+0x98>)
 800491e:	613b      	str	r3, [r7, #16]
      break;
 8004920:	e027      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	0c9b      	lsrs	r3, r3, #18
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	4a17      	ldr	r2, [pc, #92]	; (8004988 <HAL_RCC_GetSysClockFreq+0x9c>)
 800492c:	5cd3      	ldrb	r3, [r2, r3]
 800492e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d010      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <HAL_RCC_GetSysClockFreq+0x94>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	0c5b      	lsrs	r3, r3, #17
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	4a11      	ldr	r2, [pc, #68]	; (800498c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a0d      	ldr	r2, [pc, #52]	; (8004984 <HAL_RCC_GetSysClockFreq+0x98>)
 800494e:	fb03 f202 	mul.w	r2, r3, r2
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e004      	b.n	8004966 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a0c      	ldr	r2, [pc, #48]	; (8004990 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004960:	fb02 f303 	mul.w	r3, r2, r3
 8004964:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	613b      	str	r3, [r7, #16]
      break;
 800496a:	e002      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCC_GetSysClockFreq+0x98>)
 800496e:	613b      	str	r3, [r7, #16]
      break;
 8004970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004972:	693b      	ldr	r3, [r7, #16]
}
 8004974:	4618      	mov	r0, r3
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000
 8004984:	007a1200 	.word	0x007a1200
 8004988:	0800b054 	.word	0x0800b054
 800498c:	0800b064 	.word	0x0800b064
 8004990:	003d0900 	.word	0x003d0900

08004994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004998:	4b02      	ldr	r3, [pc, #8]	; (80049a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800499a:	681b      	ldr	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	20000028 	.word	0x20000028

080049a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049ac:	f7ff fff2 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	4903      	ldr	r1, [pc, #12]	; (80049cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40021000 	.word	0x40021000
 80049cc:	0800b04c 	.word	0x0800b04c

080049d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <RCC_Delay+0x34>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <RCC_Delay+0x38>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	0a5b      	lsrs	r3, r3, #9
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	fb02 f303 	mul.w	r3, r2, r3
 80049ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049ec:	bf00      	nop
  }
  while (Delay --);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1e5a      	subs	r2, r3, #1
 80049f2:	60fa      	str	r2, [r7, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f9      	bne.n	80049ec <RCC_Delay+0x1c>
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr
 8004a04:	20000028 	.word	0x20000028
 8004a08:	10624dd3 	.word	0x10624dd3

08004a0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e076      	b.n	8004b0c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d108      	bne.n	8004a38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a2e:	d009      	beq.n	8004a44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	61da      	str	r2, [r3, #28]
 8004a36:	e005      	b.n	8004a44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fe f9d0 	bl	8002e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac8:	ea42 0103 	orr.w	r1, r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	0c1a      	lsrs	r2, r3, #16
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f002 0204 	and.w	r2, r2, #4
 8004aea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69da      	ldr	r2, [r3, #28]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004afa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_SPI_Transmit+0x22>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e12d      	b.n	8004d92 <HAL_SPI_Transmit+0x27e>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b3e:	f7fe fb9f 	bl	8003280 <HAL_GetTick>
 8004b42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d002      	beq.n	8004b5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
 8004b56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b58:	e116      	b.n	8004d88 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_SPI_Transmit+0x52>
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b6a:	e10d      	b.n	8004d88 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2203      	movs	r2, #3
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	88fa      	ldrh	r2, [r7, #6]
 8004b8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb2:	d10f      	bne.n	8004bd4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d007      	beq.n	8004bf2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bfa:	d14f      	bne.n	8004c9c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_SPI_Transmit+0xf6>
 8004c04:	8afb      	ldrh	r3, [r7, #22]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d142      	bne.n	8004c90 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	881a      	ldrh	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	1c9a      	adds	r2, r3, #2
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c2e:	e02f      	b.n	8004c90 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d112      	bne.n	8004c64 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	881a      	ldrh	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	1c9a      	adds	r2, r3, #2
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c62:	e015      	b.n	8004c90 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c64:	f7fe fb0c 	bl	8003280 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d803      	bhi.n	8004c7c <HAL_SPI_Transmit+0x168>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d102      	bne.n	8004c82 <HAL_SPI_Transmit+0x16e>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c8e:	e07b      	b.n	8004d88 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1ca      	bne.n	8004c30 <HAL_SPI_Transmit+0x11c>
 8004c9a:	e050      	b.n	8004d3e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_SPI_Transmit+0x196>
 8004ca4:	8afb      	ldrh	r3, [r7, #22]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d144      	bne.n	8004d34 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	7812      	ldrb	r2, [r2, #0]
 8004cb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cd0:	e030      	b.n	8004d34 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d113      	bne.n	8004d08 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d06:	e015      	b.n	8004d34 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d08:	f7fe faba 	bl	8003280 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d803      	bhi.n	8004d20 <HAL_SPI_Transmit+0x20c>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d102      	bne.n	8004d26 <HAL_SPI_Transmit+0x212>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004d32:	e029      	b.n	8004d88 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1c9      	bne.n	8004cd2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	6839      	ldr	r1, [r7, #0]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 fbd8 	bl	80054f8 <SPI_EndRxTxTransaction>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e003      	b.n	8004d88 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d90:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3720      	adds	r7, #32
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b088      	sub	sp, #32
 8004d9e:	af02      	add	r7, sp, #8
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	4613      	mov	r3, r2
 8004da8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d002      	beq.n	8004dc0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dbe:	e0fb      	b.n	8004fb8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc8:	d112      	bne.n	8004df0 <HAL_SPI_Receive+0x56>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10e      	bne.n	8004df0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004dda:	88fa      	ldrh	r2, [r7, #6]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f8ef 	bl	8004fca <HAL_SPI_TransmitReceive>
 8004dec:	4603      	mov	r3, r0
 8004dee:	e0e8      	b.n	8004fc2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_SPI_Receive+0x64>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e0e1      	b.n	8004fc2 <HAL_SPI_Receive+0x228>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e06:	f7fe fa3b 	bl	8003280 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_SPI_Receive+0x7e>
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d102      	bne.n	8004e1e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e1c:	e0cc      	b.n	8004fb8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2204      	movs	r2, #4
 8004e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	88fa      	ldrh	r2, [r7, #6]
 8004e36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	88fa      	ldrh	r2, [r7, #6]
 8004e3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e64:	d10f      	bne.n	8004e86 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e84:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d007      	beq.n	8004ea4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d16a      	bne.n	8004f82 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004eac:	e032      	b.n	8004f14 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d115      	bne.n	8004ee8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f103 020c 	add.w	r2, r3, #12
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	7812      	ldrb	r2, [r2, #0]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ee6:	e015      	b.n	8004f14 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ee8:	f7fe f9ca 	bl	8003280 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d803      	bhi.n	8004f00 <HAL_SPI_Receive+0x166>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d102      	bne.n	8004f06 <HAL_SPI_Receive+0x16c>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004f12:	e051      	b.n	8004fb8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1c7      	bne.n	8004eae <HAL_SPI_Receive+0x114>
 8004f1e:	e035      	b.n	8004f8c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d113      	bne.n	8004f56 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	b292      	uxth	r2, r2
 8004f3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	1c9a      	adds	r2, r3, #2
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f54:	e015      	b.n	8004f82 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f56:	f7fe f993 	bl	8003280 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d803      	bhi.n	8004f6e <HAL_SPI_Receive+0x1d4>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d102      	bne.n	8004f74 <HAL_SPI_Receive+0x1da>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004f80:	e01a      	b.n	8004fb8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1c9      	bne.n	8004f20 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	6839      	ldr	r1, [r7, #0]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fa5f 	bl	8005454 <SPI_EndRxTransaction>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	75fb      	strb	r3, [r7, #23]
 8004fae:	e003      	b.n	8004fb8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b08c      	sub	sp, #48	; 0x30
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
 8004fd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x26>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e198      	b.n	8005322 <HAL_SPI_TransmitReceive+0x358>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ff8:	f7fe f942 	bl	8003280 <HAL_GetTick>
 8004ffc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800500e:	887b      	ldrh	r3, [r7, #2]
 8005010:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005016:	2b01      	cmp	r3, #1
 8005018:	d00f      	beq.n	800503a <HAL_SPI_TransmitReceive+0x70>
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005020:	d107      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x68>
 800502a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800502e:	2b04      	cmp	r3, #4
 8005030:	d003      	beq.n	800503a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005032:	2302      	movs	r3, #2
 8005034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005038:	e16d      	b.n	8005316 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_SPI_TransmitReceive+0x82>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_SPI_TransmitReceive+0x82>
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005052:	e160      	b.n	8005316 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b04      	cmp	r3, #4
 800505e:	d003      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2205      	movs	r2, #5
 8005064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	887a      	ldrh	r2, [r7, #2]
 8005078:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	887a      	ldrh	r2, [r7, #2]
 800507e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	887a      	ldrh	r2, [r7, #2]
 800508a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	887a      	ldrh	r2, [r7, #2]
 8005090:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b40      	cmp	r3, #64	; 0x40
 80050aa:	d007      	beq.n	80050bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c4:	d17c      	bne.n	80051c0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0x10a>
 80050ce:	8b7b      	ldrh	r3, [r7, #26]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d16a      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	881a      	ldrh	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	1c9a      	adds	r2, r3, #2
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f8:	e057      	b.n	80051aa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b02      	cmp	r3, #2
 8005106:	d11b      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x176>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x176>
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d113      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511c:	881a      	ldrh	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005128:	1c9a      	adds	r2, r3, #2
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	d119      	bne.n	8005182 <HAL_SPI_TransmitReceive+0x1b8>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d014      	beq.n	8005182 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	b292      	uxth	r2, r2
 8005164:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	1c9a      	adds	r2, r3, #2
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800517e:	2301      	movs	r3, #1
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005182:	f7fe f87d 	bl	8003280 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800518e:	429a      	cmp	r2, r3
 8005190:	d80b      	bhi.n	80051aa <HAL_SPI_TransmitReceive+0x1e0>
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d007      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80051a8:	e0b5      	b.n	8005316 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1a2      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x130>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d19d      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x130>
 80051be:	e080      	b.n	80052c2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_SPI_TransmitReceive+0x204>
 80051c8:	8b7b      	ldrh	r3, [r7, #26]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d16f      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	330c      	adds	r3, #12
 80051d8:	7812      	ldrb	r2, [r2, #0]
 80051da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f4:	e05b      	b.n	80052ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b02      	cmp	r3, #2
 8005202:	d11c      	bne.n	800523e <HAL_SPI_TransmitReceive+0x274>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d017      	beq.n	800523e <HAL_SPI_TransmitReceive+0x274>
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d114      	bne.n	800523e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	330c      	adds	r3, #12
 800521e:	7812      	ldrb	r2, [r2, #0]
 8005220:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b01      	cmp	r3, #1
 800524a:	d119      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x2b6>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d014      	beq.n	8005280 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800527c:	2301      	movs	r3, #1
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005280:	f7fd fffe 	bl	8003280 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800528c:	429a      	cmp	r2, r3
 800528e:	d803      	bhi.n	8005298 <HAL_SPI_TransmitReceive+0x2ce>
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d102      	bne.n	800529e <HAL_SPI_TransmitReceive+0x2d4>
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	2b00      	cmp	r3, #0
 800529c:	d107      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80052ac:	e033      	b.n	8005316 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d19e      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x22c>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d199      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f916 	bl	80054f8 <SPI_EndRxTxTransaction>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d006      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052de:	e01a      	b.n	8005316 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052e8:	2300      	movs	r3, #0
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800530c:	e003      	b.n	8005316 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800531e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005322:	4618      	mov	r0, r3
 8005324:	3730      	adds	r7, #48	; 0x30
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005338:	b2db      	uxtb	r3, r3
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005354:	f7fd ff94 	bl	8003280 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	1a9b      	subs	r3, r3, r2
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	4413      	add	r3, r2
 8005362:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005364:	f7fd ff8c 	bl	8003280 <HAL_GetTick>
 8005368:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800536a:	4b39      	ldr	r3, [pc, #228]	; (8005450 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	015b      	lsls	r3, r3, #5
 8005370:	0d1b      	lsrs	r3, r3, #20
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	fb02 f303 	mul.w	r3, r2, r3
 8005378:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800537a:	e054      	b.n	8005426 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005382:	d050      	beq.n	8005426 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005384:	f7fd ff7c 	bl	8003280 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	429a      	cmp	r2, r3
 8005392:	d902      	bls.n	800539a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d13d      	bne.n	8005416 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053b2:	d111      	bne.n	80053d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053bc:	d004      	beq.n	80053c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c6:	d107      	bne.n	80053d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e0:	d10f      	bne.n	8005402 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005400:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e017      	b.n	8005446 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	3b01      	subs	r3, #1
 8005424:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4013      	ands	r3, r2
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	429a      	cmp	r2, r3
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	429a      	cmp	r2, r3
 8005442:	d19b      	bne.n	800537c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3720      	adds	r7, #32
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20000028 	.word	0x20000028

08005454 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005468:	d111      	bne.n	800548e <SPI_EndRxTransaction+0x3a>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005472:	d004      	beq.n	800547e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800547c:	d107      	bne.n	800548e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800548c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005496:	d117      	bne.n	80054c8 <SPI_EndRxTransaction+0x74>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a0:	d112      	bne.n	80054c8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2200      	movs	r2, #0
 80054aa:	2101      	movs	r1, #1
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff ff49 	bl	8005344 <SPI_WaitFlagStateUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01a      	beq.n	80054ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	f043 0220 	orr.w	r2, r3, #32
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e013      	b.n	80054f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2200      	movs	r2, #0
 80054d0:	2180      	movs	r1, #128	; 0x80
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f7ff ff36 	bl	8005344 <SPI_WaitFlagStateUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e2:	f043 0220 	orr.w	r2, r3, #32
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e000      	b.n	80054f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	2180      	movs	r1, #128	; 0x80
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f7ff ff18 	bl	8005344 <SPI_WaitFlagStateUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551e:	f043 0220 	orr.w	r2, r3, #32
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e000      	b.n	800552c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e041      	b.n	80055ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fd fc9e 	bl	8002e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3304      	adds	r3, #4
 8005570:	4619      	mov	r1, r3
 8005572:	4610      	mov	r0, r2
 8005574:	f000 faec 	bl	8005b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d001      	beq.n	80055ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e032      	b.n	8005652 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a18      	ldr	r2, [pc, #96]	; (800565c <HAL_TIM_Base_Start+0x88>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00e      	beq.n	800561c <HAL_TIM_Base_Start+0x48>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005606:	d009      	beq.n	800561c <HAL_TIM_Base_Start+0x48>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a14      	ldr	r2, [pc, #80]	; (8005660 <HAL_TIM_Base_Start+0x8c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d004      	beq.n	800561c <HAL_TIM_Base_Start+0x48>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a13      	ldr	r2, [pc, #76]	; (8005664 <HAL_TIM_Base_Start+0x90>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d111      	bne.n	8005640 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b06      	cmp	r3, #6
 800562c:	d010      	beq.n	8005650 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0201 	orr.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563e:	e007      	b.n	8005650 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr
 800565c:	40012c00 	.word	0x40012c00
 8005660:	40000400 	.word	0x40000400
 8005664:	40000800 	.word	0x40000800

08005668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d001      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e03a      	b.n	80056f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a18      	ldr	r2, [pc, #96]	; (8005700 <HAL_TIM_Base_Start_IT+0x98>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00e      	beq.n	80056c0 <HAL_TIM_Base_Start_IT+0x58>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056aa:	d009      	beq.n	80056c0 <HAL_TIM_Base_Start_IT+0x58>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a14      	ldr	r2, [pc, #80]	; (8005704 <HAL_TIM_Base_Start_IT+0x9c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d004      	beq.n	80056c0 <HAL_TIM_Base_Start_IT+0x58>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a13      	ldr	r2, [pc, #76]	; (8005708 <HAL_TIM_Base_Start_IT+0xa0>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d111      	bne.n	80056e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b06      	cmp	r3, #6
 80056d0:	d010      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0201 	orr.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e2:	e007      	b.n	80056f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr
 8005700:	40012c00 	.word	0x40012c00
 8005704:	40000400 	.word	0x40000400
 8005708:	40000800 	.word	0x40000800

0800570c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0201 	bic.w	r2, r2, #1
 8005722:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6a1a      	ldr	r2, [r3, #32]
 800572a:	f241 1311 	movw	r3, #4369	; 0x1111
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10f      	bne.n	8005754 <HAL_TIM_Base_Stop_IT+0x48>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6a1a      	ldr	r2, [r3, #32]
 800573a:	f240 4344 	movw	r3, #1092	; 0x444
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d107      	bne.n	8005754 <HAL_TIM_Base_Stop_IT+0x48>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b02      	cmp	r3, #2
 800577c:	d122      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b02      	cmp	r3, #2
 800578a:	d11b      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0202 	mvn.w	r2, #2
 8005794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f9b4 	bl	8005b18 <HAL_TIM_IC_CaptureCallback>
 80057b0:	e005      	b.n	80057be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f9a7 	bl	8005b06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f9b6 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d122      	bne.n	8005818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d11b      	bne.n	8005818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0204 	mvn.w	r2, #4
 80057e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f98a 	bl	8005b18 <HAL_TIM_IC_CaptureCallback>
 8005804:	e005      	b.n	8005812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f97d 	bl	8005b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f98c 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b08      	cmp	r3, #8
 8005824:	d122      	bne.n	800586c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b08      	cmp	r3, #8
 8005832:	d11b      	bne.n	800586c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0208 	mvn.w	r2, #8
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2204      	movs	r2, #4
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f960 	bl	8005b18 <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f953 	bl	8005b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f962 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	2b10      	cmp	r3, #16
 8005878:	d122      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b10      	cmp	r3, #16
 8005886:	d11b      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0210 	mvn.w	r2, #16
 8005890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2208      	movs	r2, #8
 8005896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f936 	bl	8005b18 <HAL_TIM_IC_CaptureCallback>
 80058ac:	e005      	b.n	80058ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f929 	bl	8005b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f938 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d10e      	bne.n	80058ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d107      	bne.n	80058ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0201 	mvn.w	r2, #1
 80058e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fd f9cc 	bl	8002c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f6:	2b80      	cmp	r3, #128	; 0x80
 80058f8:	d10e      	bne.n	8005918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005904:	2b80      	cmp	r3, #128	; 0x80
 8005906:	d107      	bne.n	8005918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fa7b 	bl	8005e0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005922:	2b40      	cmp	r3, #64	; 0x40
 8005924:	d10e      	bne.n	8005944 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d107      	bne.n	8005944 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800593c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f8fc 	bl	8005b3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b20      	cmp	r3, #32
 8005950:	d10e      	bne.n	8005970 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b20      	cmp	r3, #32
 800595e:	d107      	bne.n	8005970 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0220 	mvn.w	r2, #32
 8005968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fa46 	bl	8005dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <HAL_TIM_ConfigClockSource+0x1c>
 8005990:	2302      	movs	r3, #2
 8005992:	e0b4      	b.n	8005afe <HAL_TIM_ConfigClockSource+0x186>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059cc:	d03e      	beq.n	8005a4c <HAL_TIM_ConfigClockSource+0xd4>
 80059ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d2:	f200 8087 	bhi.w	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80059d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059da:	f000 8086 	beq.w	8005aea <HAL_TIM_ConfigClockSource+0x172>
 80059de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e2:	d87f      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b70      	cmp	r3, #112	; 0x70
 80059e6:	d01a      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0xa6>
 80059e8:	2b70      	cmp	r3, #112	; 0x70
 80059ea:	d87b      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b60      	cmp	r3, #96	; 0x60
 80059ee:	d050      	beq.n	8005a92 <HAL_TIM_ConfigClockSource+0x11a>
 80059f0:	2b60      	cmp	r3, #96	; 0x60
 80059f2:	d877      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80059f4:	2b50      	cmp	r3, #80	; 0x50
 80059f6:	d03c      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0xfa>
 80059f8:	2b50      	cmp	r3, #80	; 0x50
 80059fa:	d873      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80059fc:	2b40      	cmp	r3, #64	; 0x40
 80059fe:	d058      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0x13a>
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d86f      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a04:	2b30      	cmp	r3, #48	; 0x30
 8005a06:	d064      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a08:	2b30      	cmp	r3, #48	; 0x30
 8005a0a:	d86b      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	d060      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d867      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d05c      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d05a      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a1c:	e062      	b.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a2e:	f000 f968 	bl	8005d02 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	609a      	str	r2, [r3, #8]
      break;
 8005a4a:	e04f      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a5c:	f000 f951 	bl	8005d02 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a6e:	609a      	str	r2, [r3, #8]
      break;
 8005a70:	e03c      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f000 f8c8 	bl	8005c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2150      	movs	r1, #80	; 0x50
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 f91f 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 8005a90:	e02c      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f000 f8e6 	bl	8005c70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2160      	movs	r1, #96	; 0x60
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 f90f 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 8005ab0:	e01c      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f000 f8a8 	bl	8005c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2140      	movs	r1, #64	; 0x40
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 f8ff 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 8005ad0:	e00c      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4619      	mov	r1, r3
 8005adc:	4610      	mov	r0, r2
 8005ade:	f000 f8f6 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 8005ae2:	e003      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae8:	e000      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr

08005b2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr
	...

08005b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a29      	ldr	r2, [pc, #164]	; (8005c08 <TIM_Base_SetConfig+0xb8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00b      	beq.n	8005b80 <TIM_Base_SetConfig+0x30>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6e:	d007      	beq.n	8005b80 <TIM_Base_SetConfig+0x30>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a26      	ldr	r2, [pc, #152]	; (8005c0c <TIM_Base_SetConfig+0xbc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_Base_SetConfig+0x30>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a25      	ldr	r2, [pc, #148]	; (8005c10 <TIM_Base_SetConfig+0xc0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d108      	bne.n	8005b92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <TIM_Base_SetConfig+0xb8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00b      	beq.n	8005bb2 <TIM_Base_SetConfig+0x62>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba0:	d007      	beq.n	8005bb2 <TIM_Base_SetConfig+0x62>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a19      	ldr	r2, [pc, #100]	; (8005c0c <TIM_Base_SetConfig+0xbc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_Base_SetConfig+0x62>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a18      	ldr	r2, [pc, #96]	; (8005c10 <TIM_Base_SetConfig+0xc0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d108      	bne.n	8005bc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a07      	ldr	r2, [pc, #28]	; (8005c08 <TIM_Base_SetConfig+0xb8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d103      	bne.n	8005bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	615a      	str	r2, [r3, #20]
}
 8005bfe:	bf00      	nop
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr
 8005c08:	40012c00 	.word	0x40012c00
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800

08005c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f023 0201 	bic.w	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f023 030a 	bic.w	r3, r3, #10
 8005c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr

08005c70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f023 0210 	bic.w	r2, r3, #16
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	031b      	lsls	r3, r3, #12
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	621a      	str	r2, [r3, #32]
}
 8005cc4:	bf00      	nop
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr

08005cce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f043 0307 	orr.w	r3, r3, #7
 8005cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	609a      	str	r2, [r3, #8]
}
 8005cf8:	bf00      	nop
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc80      	pop	{r7}
 8005d00:	4770      	bx	lr

08005d02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b087      	sub	sp, #28
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	021a      	lsls	r2, r3, #8
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	431a      	orrs	r2, r3
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	609a      	str	r2, [r3, #8]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr

08005d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d101      	bne.n	8005d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e046      	b.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a16      	ldr	r2, [pc, #88]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da4:	d009      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a12      	ldr	r2, [pc, #72]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a10      	ldr	r2, [pc, #64]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d10c      	bne.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800

08005dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr

08005e0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr

08005e20 <__cvt>:
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e26:	461f      	mov	r7, r3
 8005e28:	bfbb      	ittet	lt
 8005e2a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005e2e:	461f      	movlt	r7, r3
 8005e30:	2300      	movge	r3, #0
 8005e32:	232d      	movlt	r3, #45	; 0x2d
 8005e34:	b088      	sub	sp, #32
 8005e36:	4614      	mov	r4, r2
 8005e38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e3a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005e3c:	7013      	strb	r3, [r2, #0]
 8005e3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e40:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005e44:	f023 0820 	bic.w	r8, r3, #32
 8005e48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e4c:	d005      	beq.n	8005e5a <__cvt+0x3a>
 8005e4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e52:	d100      	bne.n	8005e56 <__cvt+0x36>
 8005e54:	3501      	adds	r5, #1
 8005e56:	2302      	movs	r3, #2
 8005e58:	e000      	b.n	8005e5c <__cvt+0x3c>
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	aa07      	add	r2, sp, #28
 8005e5e:	9204      	str	r2, [sp, #16]
 8005e60:	aa06      	add	r2, sp, #24
 8005e62:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005e66:	e9cd 3500 	strd	r3, r5, [sp]
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	f001 f917 	bl	80070a0 <_dtoa_r>
 8005e72:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e76:	4606      	mov	r6, r0
 8005e78:	d102      	bne.n	8005e80 <__cvt+0x60>
 8005e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e7c:	07db      	lsls	r3, r3, #31
 8005e7e:	d522      	bpl.n	8005ec6 <__cvt+0xa6>
 8005e80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e84:	eb06 0905 	add.w	r9, r6, r5
 8005e88:	d110      	bne.n	8005eac <__cvt+0x8c>
 8005e8a:	7833      	ldrb	r3, [r6, #0]
 8005e8c:	2b30      	cmp	r3, #48	; 0x30
 8005e8e:	d10a      	bne.n	8005ea6 <__cvt+0x86>
 8005e90:	2200      	movs	r2, #0
 8005e92:	2300      	movs	r3, #0
 8005e94:	4620      	mov	r0, r4
 8005e96:	4639      	mov	r1, r7
 8005e98:	f7fa fd90 	bl	80009bc <__aeabi_dcmpeq>
 8005e9c:	b918      	cbnz	r0, 8005ea6 <__cvt+0x86>
 8005e9e:	f1c5 0501 	rsb	r5, r5, #1
 8005ea2:	f8ca 5000 	str.w	r5, [sl]
 8005ea6:	f8da 3000 	ldr.w	r3, [sl]
 8005eaa:	4499      	add	r9, r3
 8005eac:	2200      	movs	r2, #0
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	f7fa fd82 	bl	80009bc <__aeabi_dcmpeq>
 8005eb8:	b108      	cbz	r0, 8005ebe <__cvt+0x9e>
 8005eba:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ebe:	2230      	movs	r2, #48	; 0x30
 8005ec0:	9b07      	ldr	r3, [sp, #28]
 8005ec2:	454b      	cmp	r3, r9
 8005ec4:	d307      	bcc.n	8005ed6 <__cvt+0xb6>
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	9b07      	ldr	r3, [sp, #28]
 8005eca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ecc:	1b9b      	subs	r3, r3, r6
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	b008      	add	sp, #32
 8005ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed6:	1c59      	adds	r1, r3, #1
 8005ed8:	9107      	str	r1, [sp, #28]
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	e7f0      	b.n	8005ec0 <__cvt+0xa0>

08005ede <__exponent>:
 8005ede:	4603      	mov	r3, r0
 8005ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ee2:	2900      	cmp	r1, #0
 8005ee4:	f803 2b02 	strb.w	r2, [r3], #2
 8005ee8:	bfb6      	itet	lt
 8005eea:	222d      	movlt	r2, #45	; 0x2d
 8005eec:	222b      	movge	r2, #43	; 0x2b
 8005eee:	4249      	neglt	r1, r1
 8005ef0:	2909      	cmp	r1, #9
 8005ef2:	7042      	strb	r2, [r0, #1]
 8005ef4:	dd2a      	ble.n	8005f4c <__exponent+0x6e>
 8005ef6:	f10d 0207 	add.w	r2, sp, #7
 8005efa:	4617      	mov	r7, r2
 8005efc:	260a      	movs	r6, #10
 8005efe:	fb91 f5f6 	sdiv	r5, r1, r6
 8005f02:	4694      	mov	ip, r2
 8005f04:	fb06 1415 	mls	r4, r6, r5, r1
 8005f08:	3430      	adds	r4, #48	; 0x30
 8005f0a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005f0e:	460c      	mov	r4, r1
 8005f10:	2c63      	cmp	r4, #99	; 0x63
 8005f12:	4629      	mov	r1, r5
 8005f14:	f102 32ff 	add.w	r2, r2, #4294967295
 8005f18:	dcf1      	bgt.n	8005efe <__exponent+0x20>
 8005f1a:	3130      	adds	r1, #48	; 0x30
 8005f1c:	f1ac 0402 	sub.w	r4, ip, #2
 8005f20:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005f24:	4622      	mov	r2, r4
 8005f26:	1c41      	adds	r1, r0, #1
 8005f28:	42ba      	cmp	r2, r7
 8005f2a:	d30a      	bcc.n	8005f42 <__exponent+0x64>
 8005f2c:	f10d 0209 	add.w	r2, sp, #9
 8005f30:	eba2 020c 	sub.w	r2, r2, ip
 8005f34:	42bc      	cmp	r4, r7
 8005f36:	bf88      	it	hi
 8005f38:	2200      	movhi	r2, #0
 8005f3a:	4413      	add	r3, r2
 8005f3c:	1a18      	subs	r0, r3, r0
 8005f3e:	b003      	add	sp, #12
 8005f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f42:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005f46:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005f4a:	e7ed      	b.n	8005f28 <__exponent+0x4a>
 8005f4c:	2330      	movs	r3, #48	; 0x30
 8005f4e:	3130      	adds	r1, #48	; 0x30
 8005f50:	7083      	strb	r3, [r0, #2]
 8005f52:	70c1      	strb	r1, [r0, #3]
 8005f54:	1d03      	adds	r3, r0, #4
 8005f56:	e7f1      	b.n	8005f3c <__exponent+0x5e>

08005f58 <_printf_float>:
 8005f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5c:	b091      	sub	sp, #68	; 0x44
 8005f5e:	460c      	mov	r4, r1
 8005f60:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005f64:	4616      	mov	r6, r2
 8005f66:	461f      	mov	r7, r3
 8005f68:	4605      	mov	r5, r0
 8005f6a:	f000 ff69 	bl	8006e40 <_localeconv_r>
 8005f6e:	6803      	ldr	r3, [r0, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	9309      	str	r3, [sp, #36]	; 0x24
 8005f74:	f7fa f8f6 	bl	8000164 <strlen>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	930e      	str	r3, [sp, #56]	; 0x38
 8005f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f80:	900a      	str	r0, [sp, #40]	; 0x28
 8005f82:	3307      	adds	r3, #7
 8005f84:	f023 0307 	bic.w	r3, r3, #7
 8005f88:	f103 0208 	add.w	r2, r3, #8
 8005f8c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005f90:	f8d4 b000 	ldr.w	fp, [r4]
 8005f94:	f8c8 2000 	str.w	r2, [r8]
 8005f98:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005f9c:	4652      	mov	r2, sl
 8005f9e:	4643      	mov	r3, r8
 8005fa0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fa4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005faa:	f04f 32ff 	mov.w	r2, #4294967295
 8005fae:	4650      	mov	r0, sl
 8005fb0:	4b9c      	ldr	r3, [pc, #624]	; (8006224 <_printf_float+0x2cc>)
 8005fb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fb4:	f7fa fd34 	bl	8000a20 <__aeabi_dcmpun>
 8005fb8:	bb70      	cbnz	r0, 8006018 <_printf_float+0xc0>
 8005fba:	f04f 32ff 	mov.w	r2, #4294967295
 8005fbe:	4650      	mov	r0, sl
 8005fc0:	4b98      	ldr	r3, [pc, #608]	; (8006224 <_printf_float+0x2cc>)
 8005fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fc4:	f7fa fd0e 	bl	80009e4 <__aeabi_dcmple>
 8005fc8:	bb30      	cbnz	r0, 8006018 <_printf_float+0xc0>
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4650      	mov	r0, sl
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	f7fa fcfd 	bl	80009d0 <__aeabi_dcmplt>
 8005fd6:	b110      	cbz	r0, 8005fde <_printf_float+0x86>
 8005fd8:	232d      	movs	r3, #45	; 0x2d
 8005fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fde:	4a92      	ldr	r2, [pc, #584]	; (8006228 <_printf_float+0x2d0>)
 8005fe0:	4b92      	ldr	r3, [pc, #584]	; (800622c <_printf_float+0x2d4>)
 8005fe2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005fe6:	bf94      	ite	ls
 8005fe8:	4690      	movls	r8, r2
 8005fea:	4698      	movhi	r8, r3
 8005fec:	2303      	movs	r3, #3
 8005fee:	f04f 0a00 	mov.w	sl, #0
 8005ff2:	6123      	str	r3, [r4, #16]
 8005ff4:	f02b 0304 	bic.w	r3, fp, #4
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	4633      	mov	r3, r6
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4628      	mov	r0, r5
 8006000:	9700      	str	r7, [sp, #0]
 8006002:	aa0f      	add	r2, sp, #60	; 0x3c
 8006004:	f000 f9d6 	bl	80063b4 <_printf_common>
 8006008:	3001      	adds	r0, #1
 800600a:	f040 8090 	bne.w	800612e <_printf_float+0x1d6>
 800600e:	f04f 30ff 	mov.w	r0, #4294967295
 8006012:	b011      	add	sp, #68	; 0x44
 8006014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006018:	4652      	mov	r2, sl
 800601a:	4643      	mov	r3, r8
 800601c:	4650      	mov	r0, sl
 800601e:	4641      	mov	r1, r8
 8006020:	f7fa fcfe 	bl	8000a20 <__aeabi_dcmpun>
 8006024:	b148      	cbz	r0, 800603a <_printf_float+0xe2>
 8006026:	f1b8 0f00 	cmp.w	r8, #0
 800602a:	bfb8      	it	lt
 800602c:	232d      	movlt	r3, #45	; 0x2d
 800602e:	4a80      	ldr	r2, [pc, #512]	; (8006230 <_printf_float+0x2d8>)
 8006030:	bfb8      	it	lt
 8006032:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006036:	4b7f      	ldr	r3, [pc, #508]	; (8006234 <_printf_float+0x2dc>)
 8006038:	e7d3      	b.n	8005fe2 <_printf_float+0x8a>
 800603a:	6863      	ldr	r3, [r4, #4]
 800603c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	d142      	bne.n	80060ca <_printf_float+0x172>
 8006044:	2306      	movs	r3, #6
 8006046:	6063      	str	r3, [r4, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	9206      	str	r2, [sp, #24]
 800604c:	aa0e      	add	r2, sp, #56	; 0x38
 800604e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006052:	aa0d      	add	r2, sp, #52	; 0x34
 8006054:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006058:	9203      	str	r2, [sp, #12]
 800605a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800605e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	6863      	ldr	r3, [r4, #4]
 8006066:	4652      	mov	r2, sl
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	4628      	mov	r0, r5
 800606c:	4643      	mov	r3, r8
 800606e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006070:	f7ff fed6 	bl	8005e20 <__cvt>
 8006074:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006076:	4680      	mov	r8, r0
 8006078:	2947      	cmp	r1, #71	; 0x47
 800607a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800607c:	d108      	bne.n	8006090 <_printf_float+0x138>
 800607e:	1cc8      	adds	r0, r1, #3
 8006080:	db02      	blt.n	8006088 <_printf_float+0x130>
 8006082:	6863      	ldr	r3, [r4, #4]
 8006084:	4299      	cmp	r1, r3
 8006086:	dd40      	ble.n	800610a <_printf_float+0x1b2>
 8006088:	f1a9 0902 	sub.w	r9, r9, #2
 800608c:	fa5f f989 	uxtb.w	r9, r9
 8006090:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006094:	d81f      	bhi.n	80060d6 <_printf_float+0x17e>
 8006096:	464a      	mov	r2, r9
 8006098:	3901      	subs	r1, #1
 800609a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800609e:	910d      	str	r1, [sp, #52]	; 0x34
 80060a0:	f7ff ff1d 	bl	8005ede <__exponent>
 80060a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060a6:	4682      	mov	sl, r0
 80060a8:	1813      	adds	r3, r2, r0
 80060aa:	2a01      	cmp	r2, #1
 80060ac:	6123      	str	r3, [r4, #16]
 80060ae:	dc02      	bgt.n	80060b6 <_printf_float+0x15e>
 80060b0:	6822      	ldr	r2, [r4, #0]
 80060b2:	07d2      	lsls	r2, r2, #31
 80060b4:	d501      	bpl.n	80060ba <_printf_float+0x162>
 80060b6:	3301      	adds	r3, #1
 80060b8:	6123      	str	r3, [r4, #16]
 80060ba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d09b      	beq.n	8005ffa <_printf_float+0xa2>
 80060c2:	232d      	movs	r3, #45	; 0x2d
 80060c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c8:	e797      	b.n	8005ffa <_printf_float+0xa2>
 80060ca:	2947      	cmp	r1, #71	; 0x47
 80060cc:	d1bc      	bne.n	8006048 <_printf_float+0xf0>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1ba      	bne.n	8006048 <_printf_float+0xf0>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e7b7      	b.n	8006046 <_printf_float+0xee>
 80060d6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80060da:	d118      	bne.n	800610e <_printf_float+0x1b6>
 80060dc:	2900      	cmp	r1, #0
 80060de:	6863      	ldr	r3, [r4, #4]
 80060e0:	dd0b      	ble.n	80060fa <_printf_float+0x1a2>
 80060e2:	6121      	str	r1, [r4, #16]
 80060e4:	b913      	cbnz	r3, 80060ec <_printf_float+0x194>
 80060e6:	6822      	ldr	r2, [r4, #0]
 80060e8:	07d0      	lsls	r0, r2, #31
 80060ea:	d502      	bpl.n	80060f2 <_printf_float+0x19a>
 80060ec:	3301      	adds	r3, #1
 80060ee:	440b      	add	r3, r1
 80060f0:	6123      	str	r3, [r4, #16]
 80060f2:	f04f 0a00 	mov.w	sl, #0
 80060f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80060f8:	e7df      	b.n	80060ba <_printf_float+0x162>
 80060fa:	b913      	cbnz	r3, 8006102 <_printf_float+0x1aa>
 80060fc:	6822      	ldr	r2, [r4, #0]
 80060fe:	07d2      	lsls	r2, r2, #31
 8006100:	d501      	bpl.n	8006106 <_printf_float+0x1ae>
 8006102:	3302      	adds	r3, #2
 8006104:	e7f4      	b.n	80060f0 <_printf_float+0x198>
 8006106:	2301      	movs	r3, #1
 8006108:	e7f2      	b.n	80060f0 <_printf_float+0x198>
 800610a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800610e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006110:	4299      	cmp	r1, r3
 8006112:	db05      	blt.n	8006120 <_printf_float+0x1c8>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	6121      	str	r1, [r4, #16]
 8006118:	07d8      	lsls	r0, r3, #31
 800611a:	d5ea      	bpl.n	80060f2 <_printf_float+0x19a>
 800611c:	1c4b      	adds	r3, r1, #1
 800611e:	e7e7      	b.n	80060f0 <_printf_float+0x198>
 8006120:	2900      	cmp	r1, #0
 8006122:	bfcc      	ite	gt
 8006124:	2201      	movgt	r2, #1
 8006126:	f1c1 0202 	rsble	r2, r1, #2
 800612a:	4413      	add	r3, r2
 800612c:	e7e0      	b.n	80060f0 <_printf_float+0x198>
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	055a      	lsls	r2, r3, #21
 8006132:	d407      	bmi.n	8006144 <_printf_float+0x1ec>
 8006134:	6923      	ldr	r3, [r4, #16]
 8006136:	4642      	mov	r2, r8
 8006138:	4631      	mov	r1, r6
 800613a:	4628      	mov	r0, r5
 800613c:	47b8      	blx	r7
 800613e:	3001      	adds	r0, #1
 8006140:	d12b      	bne.n	800619a <_printf_float+0x242>
 8006142:	e764      	b.n	800600e <_printf_float+0xb6>
 8006144:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006148:	f240 80dd 	bls.w	8006306 <_printf_float+0x3ae>
 800614c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006150:	2200      	movs	r2, #0
 8006152:	2300      	movs	r3, #0
 8006154:	f7fa fc32 	bl	80009bc <__aeabi_dcmpeq>
 8006158:	2800      	cmp	r0, #0
 800615a:	d033      	beq.n	80061c4 <_printf_float+0x26c>
 800615c:	2301      	movs	r3, #1
 800615e:	4631      	mov	r1, r6
 8006160:	4628      	mov	r0, r5
 8006162:	4a35      	ldr	r2, [pc, #212]	; (8006238 <_printf_float+0x2e0>)
 8006164:	47b8      	blx	r7
 8006166:	3001      	adds	r0, #1
 8006168:	f43f af51 	beq.w	800600e <_printf_float+0xb6>
 800616c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006170:	429a      	cmp	r2, r3
 8006172:	db02      	blt.n	800617a <_printf_float+0x222>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	07d8      	lsls	r0, r3, #31
 8006178:	d50f      	bpl.n	800619a <_printf_float+0x242>
 800617a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	f43f af42 	beq.w	800600e <_printf_float+0xb6>
 800618a:	f04f 0800 	mov.w	r8, #0
 800618e:	f104 091a 	add.w	r9, r4, #26
 8006192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006194:	3b01      	subs	r3, #1
 8006196:	4543      	cmp	r3, r8
 8006198:	dc09      	bgt.n	80061ae <_printf_float+0x256>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	079b      	lsls	r3, r3, #30
 800619e:	f100 8104 	bmi.w	80063aa <_printf_float+0x452>
 80061a2:	68e0      	ldr	r0, [r4, #12]
 80061a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061a6:	4298      	cmp	r0, r3
 80061a8:	bfb8      	it	lt
 80061aa:	4618      	movlt	r0, r3
 80061ac:	e731      	b.n	8006012 <_printf_float+0xba>
 80061ae:	2301      	movs	r3, #1
 80061b0:	464a      	mov	r2, r9
 80061b2:	4631      	mov	r1, r6
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b8      	blx	r7
 80061b8:	3001      	adds	r0, #1
 80061ba:	f43f af28 	beq.w	800600e <_printf_float+0xb6>
 80061be:	f108 0801 	add.w	r8, r8, #1
 80061c2:	e7e6      	b.n	8006192 <_printf_float+0x23a>
 80061c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	dc38      	bgt.n	800623c <_printf_float+0x2e4>
 80061ca:	2301      	movs	r3, #1
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	4a19      	ldr	r2, [pc, #100]	; (8006238 <_printf_float+0x2e0>)
 80061d2:	47b8      	blx	r7
 80061d4:	3001      	adds	r0, #1
 80061d6:	f43f af1a 	beq.w	800600e <_printf_float+0xb6>
 80061da:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80061de:	4313      	orrs	r3, r2
 80061e0:	d102      	bne.n	80061e8 <_printf_float+0x290>
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	07d9      	lsls	r1, r3, #31
 80061e6:	d5d8      	bpl.n	800619a <_printf_float+0x242>
 80061e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061ec:	4631      	mov	r1, r6
 80061ee:	4628      	mov	r0, r5
 80061f0:	47b8      	blx	r7
 80061f2:	3001      	adds	r0, #1
 80061f4:	f43f af0b 	beq.w	800600e <_printf_float+0xb6>
 80061f8:	f04f 0900 	mov.w	r9, #0
 80061fc:	f104 0a1a 	add.w	sl, r4, #26
 8006200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006202:	425b      	negs	r3, r3
 8006204:	454b      	cmp	r3, r9
 8006206:	dc01      	bgt.n	800620c <_printf_float+0x2b4>
 8006208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800620a:	e794      	b.n	8006136 <_printf_float+0x1de>
 800620c:	2301      	movs	r3, #1
 800620e:	4652      	mov	r2, sl
 8006210:	4631      	mov	r1, r6
 8006212:	4628      	mov	r0, r5
 8006214:	47b8      	blx	r7
 8006216:	3001      	adds	r0, #1
 8006218:	f43f aef9 	beq.w	800600e <_printf_float+0xb6>
 800621c:	f109 0901 	add.w	r9, r9, #1
 8006220:	e7ee      	b.n	8006200 <_printf_float+0x2a8>
 8006222:	bf00      	nop
 8006224:	7fefffff 	.word	0x7fefffff
 8006228:	0800b066 	.word	0x0800b066
 800622c:	0800b06a 	.word	0x0800b06a
 8006230:	0800b06e 	.word	0x0800b06e
 8006234:	0800b072 	.word	0x0800b072
 8006238:	0800b498 	.word	0x0800b498
 800623c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800623e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006240:	429a      	cmp	r2, r3
 8006242:	bfa8      	it	ge
 8006244:	461a      	movge	r2, r3
 8006246:	2a00      	cmp	r2, #0
 8006248:	4691      	mov	r9, r2
 800624a:	dc37      	bgt.n	80062bc <_printf_float+0x364>
 800624c:	f04f 0b00 	mov.w	fp, #0
 8006250:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006254:	f104 021a 	add.w	r2, r4, #26
 8006258:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800625c:	ebaa 0309 	sub.w	r3, sl, r9
 8006260:	455b      	cmp	r3, fp
 8006262:	dc33      	bgt.n	80062cc <_printf_float+0x374>
 8006264:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006268:	429a      	cmp	r2, r3
 800626a:	db3b      	blt.n	80062e4 <_printf_float+0x38c>
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	07da      	lsls	r2, r3, #31
 8006270:	d438      	bmi.n	80062e4 <_printf_float+0x38c>
 8006272:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006276:	eba2 0903 	sub.w	r9, r2, r3
 800627a:	eba2 020a 	sub.w	r2, r2, sl
 800627e:	4591      	cmp	r9, r2
 8006280:	bfa8      	it	ge
 8006282:	4691      	movge	r9, r2
 8006284:	f1b9 0f00 	cmp.w	r9, #0
 8006288:	dc34      	bgt.n	80062f4 <_printf_float+0x39c>
 800628a:	f04f 0800 	mov.w	r8, #0
 800628e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006292:	f104 0a1a 	add.w	sl, r4, #26
 8006296:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800629a:	1a9b      	subs	r3, r3, r2
 800629c:	eba3 0309 	sub.w	r3, r3, r9
 80062a0:	4543      	cmp	r3, r8
 80062a2:	f77f af7a 	ble.w	800619a <_printf_float+0x242>
 80062a6:	2301      	movs	r3, #1
 80062a8:	4652      	mov	r2, sl
 80062aa:	4631      	mov	r1, r6
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b8      	blx	r7
 80062b0:	3001      	adds	r0, #1
 80062b2:	f43f aeac 	beq.w	800600e <_printf_float+0xb6>
 80062b6:	f108 0801 	add.w	r8, r8, #1
 80062ba:	e7ec      	b.n	8006296 <_printf_float+0x33e>
 80062bc:	4613      	mov	r3, r2
 80062be:	4631      	mov	r1, r6
 80062c0:	4642      	mov	r2, r8
 80062c2:	4628      	mov	r0, r5
 80062c4:	47b8      	blx	r7
 80062c6:	3001      	adds	r0, #1
 80062c8:	d1c0      	bne.n	800624c <_printf_float+0x2f4>
 80062ca:	e6a0      	b.n	800600e <_printf_float+0xb6>
 80062cc:	2301      	movs	r3, #1
 80062ce:	4631      	mov	r1, r6
 80062d0:	4628      	mov	r0, r5
 80062d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80062d4:	47b8      	blx	r7
 80062d6:	3001      	adds	r0, #1
 80062d8:	f43f ae99 	beq.w	800600e <_printf_float+0xb6>
 80062dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062de:	f10b 0b01 	add.w	fp, fp, #1
 80062e2:	e7b9      	b.n	8006258 <_printf_float+0x300>
 80062e4:	4631      	mov	r1, r6
 80062e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062ea:	4628      	mov	r0, r5
 80062ec:	47b8      	blx	r7
 80062ee:	3001      	adds	r0, #1
 80062f0:	d1bf      	bne.n	8006272 <_printf_float+0x31a>
 80062f2:	e68c      	b.n	800600e <_printf_float+0xb6>
 80062f4:	464b      	mov	r3, r9
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	eb08 020a 	add.w	r2, r8, sl
 80062fe:	47b8      	blx	r7
 8006300:	3001      	adds	r0, #1
 8006302:	d1c2      	bne.n	800628a <_printf_float+0x332>
 8006304:	e683      	b.n	800600e <_printf_float+0xb6>
 8006306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006308:	2a01      	cmp	r2, #1
 800630a:	dc01      	bgt.n	8006310 <_printf_float+0x3b8>
 800630c:	07db      	lsls	r3, r3, #31
 800630e:	d539      	bpl.n	8006384 <_printf_float+0x42c>
 8006310:	2301      	movs	r3, #1
 8006312:	4642      	mov	r2, r8
 8006314:	4631      	mov	r1, r6
 8006316:	4628      	mov	r0, r5
 8006318:	47b8      	blx	r7
 800631a:	3001      	adds	r0, #1
 800631c:	f43f ae77 	beq.w	800600e <_printf_float+0xb6>
 8006320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006324:	4631      	mov	r1, r6
 8006326:	4628      	mov	r0, r5
 8006328:	47b8      	blx	r7
 800632a:	3001      	adds	r0, #1
 800632c:	f43f ae6f 	beq.w	800600e <_printf_float+0xb6>
 8006330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006334:	2200      	movs	r2, #0
 8006336:	2300      	movs	r3, #0
 8006338:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800633c:	f7fa fb3e 	bl	80009bc <__aeabi_dcmpeq>
 8006340:	b9d8      	cbnz	r0, 800637a <_printf_float+0x422>
 8006342:	f109 33ff 	add.w	r3, r9, #4294967295
 8006346:	f108 0201 	add.w	r2, r8, #1
 800634a:	4631      	mov	r1, r6
 800634c:	4628      	mov	r0, r5
 800634e:	47b8      	blx	r7
 8006350:	3001      	adds	r0, #1
 8006352:	d10e      	bne.n	8006372 <_printf_float+0x41a>
 8006354:	e65b      	b.n	800600e <_printf_float+0xb6>
 8006356:	2301      	movs	r3, #1
 8006358:	464a      	mov	r2, r9
 800635a:	4631      	mov	r1, r6
 800635c:	4628      	mov	r0, r5
 800635e:	47b8      	blx	r7
 8006360:	3001      	adds	r0, #1
 8006362:	f43f ae54 	beq.w	800600e <_printf_float+0xb6>
 8006366:	f108 0801 	add.w	r8, r8, #1
 800636a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800636c:	3b01      	subs	r3, #1
 800636e:	4543      	cmp	r3, r8
 8006370:	dcf1      	bgt.n	8006356 <_printf_float+0x3fe>
 8006372:	4653      	mov	r3, sl
 8006374:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006378:	e6de      	b.n	8006138 <_printf_float+0x1e0>
 800637a:	f04f 0800 	mov.w	r8, #0
 800637e:	f104 091a 	add.w	r9, r4, #26
 8006382:	e7f2      	b.n	800636a <_printf_float+0x412>
 8006384:	2301      	movs	r3, #1
 8006386:	4642      	mov	r2, r8
 8006388:	e7df      	b.n	800634a <_printf_float+0x3f2>
 800638a:	2301      	movs	r3, #1
 800638c:	464a      	mov	r2, r9
 800638e:	4631      	mov	r1, r6
 8006390:	4628      	mov	r0, r5
 8006392:	47b8      	blx	r7
 8006394:	3001      	adds	r0, #1
 8006396:	f43f ae3a 	beq.w	800600e <_printf_float+0xb6>
 800639a:	f108 0801 	add.w	r8, r8, #1
 800639e:	68e3      	ldr	r3, [r4, #12]
 80063a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063a2:	1a5b      	subs	r3, r3, r1
 80063a4:	4543      	cmp	r3, r8
 80063a6:	dcf0      	bgt.n	800638a <_printf_float+0x432>
 80063a8:	e6fb      	b.n	80061a2 <_printf_float+0x24a>
 80063aa:	f04f 0800 	mov.w	r8, #0
 80063ae:	f104 0919 	add.w	r9, r4, #25
 80063b2:	e7f4      	b.n	800639e <_printf_float+0x446>

080063b4 <_printf_common>:
 80063b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	4616      	mov	r6, r2
 80063ba:	4699      	mov	r9, r3
 80063bc:	688a      	ldr	r2, [r1, #8]
 80063be:	690b      	ldr	r3, [r1, #16]
 80063c0:	4607      	mov	r7, r0
 80063c2:	4293      	cmp	r3, r2
 80063c4:	bfb8      	it	lt
 80063c6:	4613      	movlt	r3, r2
 80063c8:	6033      	str	r3, [r6, #0]
 80063ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063ce:	460c      	mov	r4, r1
 80063d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063d4:	b10a      	cbz	r2, 80063da <_printf_common+0x26>
 80063d6:	3301      	adds	r3, #1
 80063d8:	6033      	str	r3, [r6, #0]
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	0699      	lsls	r1, r3, #26
 80063de:	bf42      	ittt	mi
 80063e0:	6833      	ldrmi	r3, [r6, #0]
 80063e2:	3302      	addmi	r3, #2
 80063e4:	6033      	strmi	r3, [r6, #0]
 80063e6:	6825      	ldr	r5, [r4, #0]
 80063e8:	f015 0506 	ands.w	r5, r5, #6
 80063ec:	d106      	bne.n	80063fc <_printf_common+0x48>
 80063ee:	f104 0a19 	add.w	sl, r4, #25
 80063f2:	68e3      	ldr	r3, [r4, #12]
 80063f4:	6832      	ldr	r2, [r6, #0]
 80063f6:	1a9b      	subs	r3, r3, r2
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	dc2b      	bgt.n	8006454 <_printf_common+0xa0>
 80063fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006400:	1e13      	subs	r3, r2, #0
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	bf18      	it	ne
 8006406:	2301      	movne	r3, #1
 8006408:	0692      	lsls	r2, r2, #26
 800640a:	d430      	bmi.n	800646e <_printf_common+0xba>
 800640c:	4649      	mov	r1, r9
 800640e:	4638      	mov	r0, r7
 8006410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006414:	47c0      	blx	r8
 8006416:	3001      	adds	r0, #1
 8006418:	d023      	beq.n	8006462 <_printf_common+0xae>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	6922      	ldr	r2, [r4, #16]
 800641e:	f003 0306 	and.w	r3, r3, #6
 8006422:	2b04      	cmp	r3, #4
 8006424:	bf14      	ite	ne
 8006426:	2500      	movne	r5, #0
 8006428:	6833      	ldreq	r3, [r6, #0]
 800642a:	f04f 0600 	mov.w	r6, #0
 800642e:	bf08      	it	eq
 8006430:	68e5      	ldreq	r5, [r4, #12]
 8006432:	f104 041a 	add.w	r4, r4, #26
 8006436:	bf08      	it	eq
 8006438:	1aed      	subeq	r5, r5, r3
 800643a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800643e:	bf08      	it	eq
 8006440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006444:	4293      	cmp	r3, r2
 8006446:	bfc4      	itt	gt
 8006448:	1a9b      	subgt	r3, r3, r2
 800644a:	18ed      	addgt	r5, r5, r3
 800644c:	42b5      	cmp	r5, r6
 800644e:	d11a      	bne.n	8006486 <_printf_common+0xd2>
 8006450:	2000      	movs	r0, #0
 8006452:	e008      	b.n	8006466 <_printf_common+0xb2>
 8006454:	2301      	movs	r3, #1
 8006456:	4652      	mov	r2, sl
 8006458:	4649      	mov	r1, r9
 800645a:	4638      	mov	r0, r7
 800645c:	47c0      	blx	r8
 800645e:	3001      	adds	r0, #1
 8006460:	d103      	bne.n	800646a <_printf_common+0xb6>
 8006462:	f04f 30ff 	mov.w	r0, #4294967295
 8006466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800646a:	3501      	adds	r5, #1
 800646c:	e7c1      	b.n	80063f2 <_printf_common+0x3e>
 800646e:	2030      	movs	r0, #48	; 0x30
 8006470:	18e1      	adds	r1, r4, r3
 8006472:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800647c:	4422      	add	r2, r4
 800647e:	3302      	adds	r3, #2
 8006480:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006484:	e7c2      	b.n	800640c <_printf_common+0x58>
 8006486:	2301      	movs	r3, #1
 8006488:	4622      	mov	r2, r4
 800648a:	4649      	mov	r1, r9
 800648c:	4638      	mov	r0, r7
 800648e:	47c0      	blx	r8
 8006490:	3001      	adds	r0, #1
 8006492:	d0e6      	beq.n	8006462 <_printf_common+0xae>
 8006494:	3601      	adds	r6, #1
 8006496:	e7d9      	b.n	800644c <_printf_common+0x98>

08006498 <_printf_i>:
 8006498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800649c:	7e0f      	ldrb	r7, [r1, #24]
 800649e:	4691      	mov	r9, r2
 80064a0:	2f78      	cmp	r7, #120	; 0x78
 80064a2:	4680      	mov	r8, r0
 80064a4:	460c      	mov	r4, r1
 80064a6:	469a      	mov	sl, r3
 80064a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064ae:	d807      	bhi.n	80064c0 <_printf_i+0x28>
 80064b0:	2f62      	cmp	r7, #98	; 0x62
 80064b2:	d80a      	bhi.n	80064ca <_printf_i+0x32>
 80064b4:	2f00      	cmp	r7, #0
 80064b6:	f000 80d5 	beq.w	8006664 <_printf_i+0x1cc>
 80064ba:	2f58      	cmp	r7, #88	; 0x58
 80064bc:	f000 80c1 	beq.w	8006642 <_printf_i+0x1aa>
 80064c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064c8:	e03a      	b.n	8006540 <_printf_i+0xa8>
 80064ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064ce:	2b15      	cmp	r3, #21
 80064d0:	d8f6      	bhi.n	80064c0 <_printf_i+0x28>
 80064d2:	a101      	add	r1, pc, #4	; (adr r1, 80064d8 <_printf_i+0x40>)
 80064d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064d8:	08006531 	.word	0x08006531
 80064dc:	08006545 	.word	0x08006545
 80064e0:	080064c1 	.word	0x080064c1
 80064e4:	080064c1 	.word	0x080064c1
 80064e8:	080064c1 	.word	0x080064c1
 80064ec:	080064c1 	.word	0x080064c1
 80064f0:	08006545 	.word	0x08006545
 80064f4:	080064c1 	.word	0x080064c1
 80064f8:	080064c1 	.word	0x080064c1
 80064fc:	080064c1 	.word	0x080064c1
 8006500:	080064c1 	.word	0x080064c1
 8006504:	0800664b 	.word	0x0800664b
 8006508:	08006571 	.word	0x08006571
 800650c:	08006605 	.word	0x08006605
 8006510:	080064c1 	.word	0x080064c1
 8006514:	080064c1 	.word	0x080064c1
 8006518:	0800666d 	.word	0x0800666d
 800651c:	080064c1 	.word	0x080064c1
 8006520:	08006571 	.word	0x08006571
 8006524:	080064c1 	.word	0x080064c1
 8006528:	080064c1 	.word	0x080064c1
 800652c:	0800660d 	.word	0x0800660d
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	1d1a      	adds	r2, r3, #4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	602a      	str	r2, [r5, #0]
 8006538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800653c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006540:	2301      	movs	r3, #1
 8006542:	e0a0      	b.n	8006686 <_printf_i+0x1ee>
 8006544:	6820      	ldr	r0, [r4, #0]
 8006546:	682b      	ldr	r3, [r5, #0]
 8006548:	0607      	lsls	r7, r0, #24
 800654a:	f103 0104 	add.w	r1, r3, #4
 800654e:	6029      	str	r1, [r5, #0]
 8006550:	d501      	bpl.n	8006556 <_printf_i+0xbe>
 8006552:	681e      	ldr	r6, [r3, #0]
 8006554:	e003      	b.n	800655e <_printf_i+0xc6>
 8006556:	0646      	lsls	r6, r0, #25
 8006558:	d5fb      	bpl.n	8006552 <_printf_i+0xba>
 800655a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800655e:	2e00      	cmp	r6, #0
 8006560:	da03      	bge.n	800656a <_printf_i+0xd2>
 8006562:	232d      	movs	r3, #45	; 0x2d
 8006564:	4276      	negs	r6, r6
 8006566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800656a:	230a      	movs	r3, #10
 800656c:	4859      	ldr	r0, [pc, #356]	; (80066d4 <_printf_i+0x23c>)
 800656e:	e012      	b.n	8006596 <_printf_i+0xfe>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	6820      	ldr	r0, [r4, #0]
 8006574:	1d19      	adds	r1, r3, #4
 8006576:	6029      	str	r1, [r5, #0]
 8006578:	0605      	lsls	r5, r0, #24
 800657a:	d501      	bpl.n	8006580 <_printf_i+0xe8>
 800657c:	681e      	ldr	r6, [r3, #0]
 800657e:	e002      	b.n	8006586 <_printf_i+0xee>
 8006580:	0641      	lsls	r1, r0, #25
 8006582:	d5fb      	bpl.n	800657c <_printf_i+0xe4>
 8006584:	881e      	ldrh	r6, [r3, #0]
 8006586:	2f6f      	cmp	r7, #111	; 0x6f
 8006588:	bf0c      	ite	eq
 800658a:	2308      	moveq	r3, #8
 800658c:	230a      	movne	r3, #10
 800658e:	4851      	ldr	r0, [pc, #324]	; (80066d4 <_printf_i+0x23c>)
 8006590:	2100      	movs	r1, #0
 8006592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006596:	6865      	ldr	r5, [r4, #4]
 8006598:	2d00      	cmp	r5, #0
 800659a:	bfa8      	it	ge
 800659c:	6821      	ldrge	r1, [r4, #0]
 800659e:	60a5      	str	r5, [r4, #8]
 80065a0:	bfa4      	itt	ge
 80065a2:	f021 0104 	bicge.w	r1, r1, #4
 80065a6:	6021      	strge	r1, [r4, #0]
 80065a8:	b90e      	cbnz	r6, 80065ae <_printf_i+0x116>
 80065aa:	2d00      	cmp	r5, #0
 80065ac:	d04b      	beq.n	8006646 <_printf_i+0x1ae>
 80065ae:	4615      	mov	r5, r2
 80065b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80065b4:	fb03 6711 	mls	r7, r3, r1, r6
 80065b8:	5dc7      	ldrb	r7, [r0, r7]
 80065ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065be:	4637      	mov	r7, r6
 80065c0:	42bb      	cmp	r3, r7
 80065c2:	460e      	mov	r6, r1
 80065c4:	d9f4      	bls.n	80065b0 <_printf_i+0x118>
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d10b      	bne.n	80065e2 <_printf_i+0x14a>
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	07de      	lsls	r6, r3, #31
 80065ce:	d508      	bpl.n	80065e2 <_printf_i+0x14a>
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	6861      	ldr	r1, [r4, #4]
 80065d4:	4299      	cmp	r1, r3
 80065d6:	bfde      	ittt	le
 80065d8:	2330      	movle	r3, #48	; 0x30
 80065da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065e2:	1b52      	subs	r2, r2, r5
 80065e4:	6122      	str	r2, [r4, #16]
 80065e6:	464b      	mov	r3, r9
 80065e8:	4621      	mov	r1, r4
 80065ea:	4640      	mov	r0, r8
 80065ec:	f8cd a000 	str.w	sl, [sp]
 80065f0:	aa03      	add	r2, sp, #12
 80065f2:	f7ff fedf 	bl	80063b4 <_printf_common>
 80065f6:	3001      	adds	r0, #1
 80065f8:	d14a      	bne.n	8006690 <_printf_i+0x1f8>
 80065fa:	f04f 30ff 	mov.w	r0, #4294967295
 80065fe:	b004      	add	sp, #16
 8006600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	f043 0320 	orr.w	r3, r3, #32
 800660a:	6023      	str	r3, [r4, #0]
 800660c:	2778      	movs	r7, #120	; 0x78
 800660e:	4832      	ldr	r0, [pc, #200]	; (80066d8 <_printf_i+0x240>)
 8006610:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	6829      	ldr	r1, [r5, #0]
 8006618:	061f      	lsls	r7, r3, #24
 800661a:	f851 6b04 	ldr.w	r6, [r1], #4
 800661e:	d402      	bmi.n	8006626 <_printf_i+0x18e>
 8006620:	065f      	lsls	r7, r3, #25
 8006622:	bf48      	it	mi
 8006624:	b2b6      	uxthmi	r6, r6
 8006626:	07df      	lsls	r7, r3, #31
 8006628:	bf48      	it	mi
 800662a:	f043 0320 	orrmi.w	r3, r3, #32
 800662e:	6029      	str	r1, [r5, #0]
 8006630:	bf48      	it	mi
 8006632:	6023      	strmi	r3, [r4, #0]
 8006634:	b91e      	cbnz	r6, 800663e <_printf_i+0x1a6>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	f023 0320 	bic.w	r3, r3, #32
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	2310      	movs	r3, #16
 8006640:	e7a6      	b.n	8006590 <_printf_i+0xf8>
 8006642:	4824      	ldr	r0, [pc, #144]	; (80066d4 <_printf_i+0x23c>)
 8006644:	e7e4      	b.n	8006610 <_printf_i+0x178>
 8006646:	4615      	mov	r5, r2
 8006648:	e7bd      	b.n	80065c6 <_printf_i+0x12e>
 800664a:	682b      	ldr	r3, [r5, #0]
 800664c:	6826      	ldr	r6, [r4, #0]
 800664e:	1d18      	adds	r0, r3, #4
 8006650:	6961      	ldr	r1, [r4, #20]
 8006652:	6028      	str	r0, [r5, #0]
 8006654:	0635      	lsls	r5, r6, #24
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	d501      	bpl.n	800665e <_printf_i+0x1c6>
 800665a:	6019      	str	r1, [r3, #0]
 800665c:	e002      	b.n	8006664 <_printf_i+0x1cc>
 800665e:	0670      	lsls	r0, r6, #25
 8006660:	d5fb      	bpl.n	800665a <_printf_i+0x1c2>
 8006662:	8019      	strh	r1, [r3, #0]
 8006664:	2300      	movs	r3, #0
 8006666:	4615      	mov	r5, r2
 8006668:	6123      	str	r3, [r4, #16]
 800666a:	e7bc      	b.n	80065e6 <_printf_i+0x14e>
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	2100      	movs	r1, #0
 8006670:	1d1a      	adds	r2, r3, #4
 8006672:	602a      	str	r2, [r5, #0]
 8006674:	681d      	ldr	r5, [r3, #0]
 8006676:	6862      	ldr	r2, [r4, #4]
 8006678:	4628      	mov	r0, r5
 800667a:	f000 fc57 	bl	8006f2c <memchr>
 800667e:	b108      	cbz	r0, 8006684 <_printf_i+0x1ec>
 8006680:	1b40      	subs	r0, r0, r5
 8006682:	6060      	str	r0, [r4, #4]
 8006684:	6863      	ldr	r3, [r4, #4]
 8006686:	6123      	str	r3, [r4, #16]
 8006688:	2300      	movs	r3, #0
 800668a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800668e:	e7aa      	b.n	80065e6 <_printf_i+0x14e>
 8006690:	462a      	mov	r2, r5
 8006692:	4649      	mov	r1, r9
 8006694:	4640      	mov	r0, r8
 8006696:	6923      	ldr	r3, [r4, #16]
 8006698:	47d0      	blx	sl
 800669a:	3001      	adds	r0, #1
 800669c:	d0ad      	beq.n	80065fa <_printf_i+0x162>
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	079b      	lsls	r3, r3, #30
 80066a2:	d413      	bmi.n	80066cc <_printf_i+0x234>
 80066a4:	68e0      	ldr	r0, [r4, #12]
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	4298      	cmp	r0, r3
 80066aa:	bfb8      	it	lt
 80066ac:	4618      	movlt	r0, r3
 80066ae:	e7a6      	b.n	80065fe <_printf_i+0x166>
 80066b0:	2301      	movs	r3, #1
 80066b2:	4632      	mov	r2, r6
 80066b4:	4649      	mov	r1, r9
 80066b6:	4640      	mov	r0, r8
 80066b8:	47d0      	blx	sl
 80066ba:	3001      	adds	r0, #1
 80066bc:	d09d      	beq.n	80065fa <_printf_i+0x162>
 80066be:	3501      	adds	r5, #1
 80066c0:	68e3      	ldr	r3, [r4, #12]
 80066c2:	9903      	ldr	r1, [sp, #12]
 80066c4:	1a5b      	subs	r3, r3, r1
 80066c6:	42ab      	cmp	r3, r5
 80066c8:	dcf2      	bgt.n	80066b0 <_printf_i+0x218>
 80066ca:	e7eb      	b.n	80066a4 <_printf_i+0x20c>
 80066cc:	2500      	movs	r5, #0
 80066ce:	f104 0619 	add.w	r6, r4, #25
 80066d2:	e7f5      	b.n	80066c0 <_printf_i+0x228>
 80066d4:	0800b076 	.word	0x0800b076
 80066d8:	0800b087 	.word	0x0800b087

080066dc <_scanf_float>:
 80066dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e0:	b087      	sub	sp, #28
 80066e2:	9303      	str	r3, [sp, #12]
 80066e4:	688b      	ldr	r3, [r1, #8]
 80066e6:	4617      	mov	r7, r2
 80066e8:	1e5a      	subs	r2, r3, #1
 80066ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80066ee:	bf85      	ittet	hi
 80066f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80066f4:	195b      	addhi	r3, r3, r5
 80066f6:	2300      	movls	r3, #0
 80066f8:	9302      	strhi	r3, [sp, #8]
 80066fa:	bf88      	it	hi
 80066fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006700:	468b      	mov	fp, r1
 8006702:	f04f 0500 	mov.w	r5, #0
 8006706:	bf8c      	ite	hi
 8006708:	608b      	strhi	r3, [r1, #8]
 800670a:	9302      	strls	r3, [sp, #8]
 800670c:	680b      	ldr	r3, [r1, #0]
 800670e:	4680      	mov	r8, r0
 8006710:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006714:	f84b 3b1c 	str.w	r3, [fp], #28
 8006718:	460c      	mov	r4, r1
 800671a:	465e      	mov	r6, fp
 800671c:	46aa      	mov	sl, r5
 800671e:	46a9      	mov	r9, r5
 8006720:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006724:	9501      	str	r5, [sp, #4]
 8006726:	68a2      	ldr	r2, [r4, #8]
 8006728:	b152      	cbz	r2, 8006740 <_scanf_float+0x64>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b4e      	cmp	r3, #78	; 0x4e
 8006730:	d864      	bhi.n	80067fc <_scanf_float+0x120>
 8006732:	2b40      	cmp	r3, #64	; 0x40
 8006734:	d83c      	bhi.n	80067b0 <_scanf_float+0xd4>
 8006736:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800673a:	b2c8      	uxtb	r0, r1
 800673c:	280e      	cmp	r0, #14
 800673e:	d93a      	bls.n	80067b6 <_scanf_float+0xda>
 8006740:	f1b9 0f00 	cmp.w	r9, #0
 8006744:	d003      	beq.n	800674e <_scanf_float+0x72>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006752:	f1ba 0f01 	cmp.w	sl, #1
 8006756:	f200 8113 	bhi.w	8006980 <_scanf_float+0x2a4>
 800675a:	455e      	cmp	r6, fp
 800675c:	f200 8105 	bhi.w	800696a <_scanf_float+0x28e>
 8006760:	2501      	movs	r5, #1
 8006762:	4628      	mov	r0, r5
 8006764:	b007      	add	sp, #28
 8006766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800676e:	2a0d      	cmp	r2, #13
 8006770:	d8e6      	bhi.n	8006740 <_scanf_float+0x64>
 8006772:	a101      	add	r1, pc, #4	; (adr r1, 8006778 <_scanf_float+0x9c>)
 8006774:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006778:	080068b7 	.word	0x080068b7
 800677c:	08006741 	.word	0x08006741
 8006780:	08006741 	.word	0x08006741
 8006784:	08006741 	.word	0x08006741
 8006788:	08006917 	.word	0x08006917
 800678c:	080068ef 	.word	0x080068ef
 8006790:	08006741 	.word	0x08006741
 8006794:	08006741 	.word	0x08006741
 8006798:	080068c5 	.word	0x080068c5
 800679c:	08006741 	.word	0x08006741
 80067a0:	08006741 	.word	0x08006741
 80067a4:	08006741 	.word	0x08006741
 80067a8:	08006741 	.word	0x08006741
 80067ac:	0800687d 	.word	0x0800687d
 80067b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80067b4:	e7db      	b.n	800676e <_scanf_float+0x92>
 80067b6:	290e      	cmp	r1, #14
 80067b8:	d8c2      	bhi.n	8006740 <_scanf_float+0x64>
 80067ba:	a001      	add	r0, pc, #4	; (adr r0, 80067c0 <_scanf_float+0xe4>)
 80067bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80067c0:	0800686f 	.word	0x0800686f
 80067c4:	08006741 	.word	0x08006741
 80067c8:	0800686f 	.word	0x0800686f
 80067cc:	08006903 	.word	0x08006903
 80067d0:	08006741 	.word	0x08006741
 80067d4:	0800681d 	.word	0x0800681d
 80067d8:	08006859 	.word	0x08006859
 80067dc:	08006859 	.word	0x08006859
 80067e0:	08006859 	.word	0x08006859
 80067e4:	08006859 	.word	0x08006859
 80067e8:	08006859 	.word	0x08006859
 80067ec:	08006859 	.word	0x08006859
 80067f0:	08006859 	.word	0x08006859
 80067f4:	08006859 	.word	0x08006859
 80067f8:	08006859 	.word	0x08006859
 80067fc:	2b6e      	cmp	r3, #110	; 0x6e
 80067fe:	d809      	bhi.n	8006814 <_scanf_float+0x138>
 8006800:	2b60      	cmp	r3, #96	; 0x60
 8006802:	d8b2      	bhi.n	800676a <_scanf_float+0x8e>
 8006804:	2b54      	cmp	r3, #84	; 0x54
 8006806:	d077      	beq.n	80068f8 <_scanf_float+0x21c>
 8006808:	2b59      	cmp	r3, #89	; 0x59
 800680a:	d199      	bne.n	8006740 <_scanf_float+0x64>
 800680c:	2d07      	cmp	r5, #7
 800680e:	d197      	bne.n	8006740 <_scanf_float+0x64>
 8006810:	2508      	movs	r5, #8
 8006812:	e029      	b.n	8006868 <_scanf_float+0x18c>
 8006814:	2b74      	cmp	r3, #116	; 0x74
 8006816:	d06f      	beq.n	80068f8 <_scanf_float+0x21c>
 8006818:	2b79      	cmp	r3, #121	; 0x79
 800681a:	e7f6      	b.n	800680a <_scanf_float+0x12e>
 800681c:	6821      	ldr	r1, [r4, #0]
 800681e:	05c8      	lsls	r0, r1, #23
 8006820:	d51a      	bpl.n	8006858 <_scanf_float+0x17c>
 8006822:	9b02      	ldr	r3, [sp, #8]
 8006824:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006828:	6021      	str	r1, [r4, #0]
 800682a:	f109 0901 	add.w	r9, r9, #1
 800682e:	b11b      	cbz	r3, 8006838 <_scanf_float+0x15c>
 8006830:	3b01      	subs	r3, #1
 8006832:	3201      	adds	r2, #1
 8006834:	9302      	str	r3, [sp, #8]
 8006836:	60a2      	str	r2, [r4, #8]
 8006838:	68a3      	ldr	r3, [r4, #8]
 800683a:	3b01      	subs	r3, #1
 800683c:	60a3      	str	r3, [r4, #8]
 800683e:	6923      	ldr	r3, [r4, #16]
 8006840:	3301      	adds	r3, #1
 8006842:	6123      	str	r3, [r4, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3b01      	subs	r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	607b      	str	r3, [r7, #4]
 800684c:	f340 8084 	ble.w	8006958 <_scanf_float+0x27c>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	3301      	adds	r3, #1
 8006854:	603b      	str	r3, [r7, #0]
 8006856:	e766      	b.n	8006726 <_scanf_float+0x4a>
 8006858:	eb1a 0f05 	cmn.w	sl, r5
 800685c:	f47f af70 	bne.w	8006740 <_scanf_float+0x64>
 8006860:	6822      	ldr	r2, [r4, #0]
 8006862:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006866:	6022      	str	r2, [r4, #0]
 8006868:	f806 3b01 	strb.w	r3, [r6], #1
 800686c:	e7e4      	b.n	8006838 <_scanf_float+0x15c>
 800686e:	6822      	ldr	r2, [r4, #0]
 8006870:	0610      	lsls	r0, r2, #24
 8006872:	f57f af65 	bpl.w	8006740 <_scanf_float+0x64>
 8006876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800687a:	e7f4      	b.n	8006866 <_scanf_float+0x18a>
 800687c:	f1ba 0f00 	cmp.w	sl, #0
 8006880:	d10e      	bne.n	80068a0 <_scanf_float+0x1c4>
 8006882:	f1b9 0f00 	cmp.w	r9, #0
 8006886:	d10e      	bne.n	80068a6 <_scanf_float+0x1ca>
 8006888:	6822      	ldr	r2, [r4, #0]
 800688a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800688e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006892:	d108      	bne.n	80068a6 <_scanf_float+0x1ca>
 8006894:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006898:	f04f 0a01 	mov.w	sl, #1
 800689c:	6022      	str	r2, [r4, #0]
 800689e:	e7e3      	b.n	8006868 <_scanf_float+0x18c>
 80068a0:	f1ba 0f02 	cmp.w	sl, #2
 80068a4:	d055      	beq.n	8006952 <_scanf_float+0x276>
 80068a6:	2d01      	cmp	r5, #1
 80068a8:	d002      	beq.n	80068b0 <_scanf_float+0x1d4>
 80068aa:	2d04      	cmp	r5, #4
 80068ac:	f47f af48 	bne.w	8006740 <_scanf_float+0x64>
 80068b0:	3501      	adds	r5, #1
 80068b2:	b2ed      	uxtb	r5, r5
 80068b4:	e7d8      	b.n	8006868 <_scanf_float+0x18c>
 80068b6:	f1ba 0f01 	cmp.w	sl, #1
 80068ba:	f47f af41 	bne.w	8006740 <_scanf_float+0x64>
 80068be:	f04f 0a02 	mov.w	sl, #2
 80068c2:	e7d1      	b.n	8006868 <_scanf_float+0x18c>
 80068c4:	b97d      	cbnz	r5, 80068e6 <_scanf_float+0x20a>
 80068c6:	f1b9 0f00 	cmp.w	r9, #0
 80068ca:	f47f af3c 	bne.w	8006746 <_scanf_float+0x6a>
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80068d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80068d8:	f47f af39 	bne.w	800674e <_scanf_float+0x72>
 80068dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80068e0:	2501      	movs	r5, #1
 80068e2:	6022      	str	r2, [r4, #0]
 80068e4:	e7c0      	b.n	8006868 <_scanf_float+0x18c>
 80068e6:	2d03      	cmp	r5, #3
 80068e8:	d0e2      	beq.n	80068b0 <_scanf_float+0x1d4>
 80068ea:	2d05      	cmp	r5, #5
 80068ec:	e7de      	b.n	80068ac <_scanf_float+0x1d0>
 80068ee:	2d02      	cmp	r5, #2
 80068f0:	f47f af26 	bne.w	8006740 <_scanf_float+0x64>
 80068f4:	2503      	movs	r5, #3
 80068f6:	e7b7      	b.n	8006868 <_scanf_float+0x18c>
 80068f8:	2d06      	cmp	r5, #6
 80068fa:	f47f af21 	bne.w	8006740 <_scanf_float+0x64>
 80068fe:	2507      	movs	r5, #7
 8006900:	e7b2      	b.n	8006868 <_scanf_float+0x18c>
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	0591      	lsls	r1, r2, #22
 8006906:	f57f af1b 	bpl.w	8006740 <_scanf_float+0x64>
 800690a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800690e:	6022      	str	r2, [r4, #0]
 8006910:	f8cd 9004 	str.w	r9, [sp, #4]
 8006914:	e7a8      	b.n	8006868 <_scanf_float+0x18c>
 8006916:	6822      	ldr	r2, [r4, #0]
 8006918:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800691c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006920:	d006      	beq.n	8006930 <_scanf_float+0x254>
 8006922:	0550      	lsls	r0, r2, #21
 8006924:	f57f af0c 	bpl.w	8006740 <_scanf_float+0x64>
 8006928:	f1b9 0f00 	cmp.w	r9, #0
 800692c:	f43f af0f 	beq.w	800674e <_scanf_float+0x72>
 8006930:	0591      	lsls	r1, r2, #22
 8006932:	bf58      	it	pl
 8006934:	9901      	ldrpl	r1, [sp, #4]
 8006936:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800693a:	bf58      	it	pl
 800693c:	eba9 0101 	subpl.w	r1, r9, r1
 8006940:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006944:	f04f 0900 	mov.w	r9, #0
 8006948:	bf58      	it	pl
 800694a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800694e:	6022      	str	r2, [r4, #0]
 8006950:	e78a      	b.n	8006868 <_scanf_float+0x18c>
 8006952:	f04f 0a03 	mov.w	sl, #3
 8006956:	e787      	b.n	8006868 <_scanf_float+0x18c>
 8006958:	4639      	mov	r1, r7
 800695a:	4640      	mov	r0, r8
 800695c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006960:	4798      	blx	r3
 8006962:	2800      	cmp	r0, #0
 8006964:	f43f aedf 	beq.w	8006726 <_scanf_float+0x4a>
 8006968:	e6ea      	b.n	8006740 <_scanf_float+0x64>
 800696a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800696e:	463a      	mov	r2, r7
 8006970:	4640      	mov	r0, r8
 8006972:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006976:	4798      	blx	r3
 8006978:	6923      	ldr	r3, [r4, #16]
 800697a:	3b01      	subs	r3, #1
 800697c:	6123      	str	r3, [r4, #16]
 800697e:	e6ec      	b.n	800675a <_scanf_float+0x7e>
 8006980:	1e6b      	subs	r3, r5, #1
 8006982:	2b06      	cmp	r3, #6
 8006984:	d825      	bhi.n	80069d2 <_scanf_float+0x2f6>
 8006986:	2d02      	cmp	r5, #2
 8006988:	d836      	bhi.n	80069f8 <_scanf_float+0x31c>
 800698a:	455e      	cmp	r6, fp
 800698c:	f67f aee8 	bls.w	8006760 <_scanf_float+0x84>
 8006990:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006994:	463a      	mov	r2, r7
 8006996:	4640      	mov	r0, r8
 8006998:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800699c:	4798      	blx	r3
 800699e:	6923      	ldr	r3, [r4, #16]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	e7f1      	b.n	800698a <_scanf_float+0x2ae>
 80069a6:	9802      	ldr	r0, [sp, #8]
 80069a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80069b0:	463a      	mov	r2, r7
 80069b2:	9002      	str	r0, [sp, #8]
 80069b4:	4640      	mov	r0, r8
 80069b6:	4798      	blx	r3
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	6123      	str	r3, [r4, #16]
 80069be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069c2:	fa5f fa8a 	uxtb.w	sl, sl
 80069c6:	f1ba 0f02 	cmp.w	sl, #2
 80069ca:	d1ec      	bne.n	80069a6 <_scanf_float+0x2ca>
 80069cc:	3d03      	subs	r5, #3
 80069ce:	b2ed      	uxtb	r5, r5
 80069d0:	1b76      	subs	r6, r6, r5
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	05da      	lsls	r2, r3, #23
 80069d6:	d52f      	bpl.n	8006a38 <_scanf_float+0x35c>
 80069d8:	055b      	lsls	r3, r3, #21
 80069da:	d510      	bpl.n	80069fe <_scanf_float+0x322>
 80069dc:	455e      	cmp	r6, fp
 80069de:	f67f aebf 	bls.w	8006760 <_scanf_float+0x84>
 80069e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069e6:	463a      	mov	r2, r7
 80069e8:	4640      	mov	r0, r8
 80069ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069ee:	4798      	blx	r3
 80069f0:	6923      	ldr	r3, [r4, #16]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	6123      	str	r3, [r4, #16]
 80069f6:	e7f1      	b.n	80069dc <_scanf_float+0x300>
 80069f8:	46aa      	mov	sl, r5
 80069fa:	9602      	str	r6, [sp, #8]
 80069fc:	e7df      	b.n	80069be <_scanf_float+0x2e2>
 80069fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a02:	6923      	ldr	r3, [r4, #16]
 8006a04:	2965      	cmp	r1, #101	; 0x65
 8006a06:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a0a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006a0e:	6123      	str	r3, [r4, #16]
 8006a10:	d00c      	beq.n	8006a2c <_scanf_float+0x350>
 8006a12:	2945      	cmp	r1, #69	; 0x45
 8006a14:	d00a      	beq.n	8006a2c <_scanf_float+0x350>
 8006a16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a1a:	463a      	mov	r2, r7
 8006a1c:	4640      	mov	r0, r8
 8006a1e:	4798      	blx	r3
 8006a20:	6923      	ldr	r3, [r4, #16]
 8006a22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	1eb5      	subs	r5, r6, #2
 8006a2a:	6123      	str	r3, [r4, #16]
 8006a2c:	463a      	mov	r2, r7
 8006a2e:	4640      	mov	r0, r8
 8006a30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a34:	4798      	blx	r3
 8006a36:	462e      	mov	r6, r5
 8006a38:	6825      	ldr	r5, [r4, #0]
 8006a3a:	f015 0510 	ands.w	r5, r5, #16
 8006a3e:	d155      	bne.n	8006aec <_scanf_float+0x410>
 8006a40:	7035      	strb	r5, [r6, #0]
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a4c:	d11d      	bne.n	8006a8a <_scanf_float+0x3ae>
 8006a4e:	9b01      	ldr	r3, [sp, #4]
 8006a50:	454b      	cmp	r3, r9
 8006a52:	eba3 0209 	sub.w	r2, r3, r9
 8006a56:	d125      	bne.n	8006aa4 <_scanf_float+0x3c8>
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4659      	mov	r1, fp
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	f002 fcb3 	bl	80093c8 <_strtod_r>
 8006a62:	9b03      	ldr	r3, [sp, #12]
 8006a64:	f8d4 c000 	ldr.w	ip, [r4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f01c 0f02 	tst.w	ip, #2
 8006a6e:	4606      	mov	r6, r0
 8006a70:	460f      	mov	r7, r1
 8006a72:	f103 0204 	add.w	r2, r3, #4
 8006a76:	d020      	beq.n	8006aba <_scanf_float+0x3de>
 8006a78:	9903      	ldr	r1, [sp, #12]
 8006a7a:	600a      	str	r2, [r1, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	e9c3 6700 	strd	r6, r7, [r3]
 8006a82:	68e3      	ldr	r3, [r4, #12]
 8006a84:	3301      	adds	r3, #1
 8006a86:	60e3      	str	r3, [r4, #12]
 8006a88:	e66b      	b.n	8006762 <_scanf_float+0x86>
 8006a8a:	9b04      	ldr	r3, [sp, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0e3      	beq.n	8006a58 <_scanf_float+0x37c>
 8006a90:	9905      	ldr	r1, [sp, #20]
 8006a92:	230a      	movs	r3, #10
 8006a94:	462a      	mov	r2, r5
 8006a96:	4640      	mov	r0, r8
 8006a98:	3101      	adds	r1, #1
 8006a9a:	f002 fd19 	bl	80094d0 <_strtol_r>
 8006a9e:	9b04      	ldr	r3, [sp, #16]
 8006aa0:	9e05      	ldr	r6, [sp, #20]
 8006aa2:	1ac2      	subs	r2, r0, r3
 8006aa4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006aa8:	429e      	cmp	r6, r3
 8006aaa:	bf28      	it	cs
 8006aac:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	490f      	ldr	r1, [pc, #60]	; (8006af0 <_scanf_float+0x414>)
 8006ab4:	f000 f8d0 	bl	8006c58 <siprintf>
 8006ab8:	e7ce      	b.n	8006a58 <_scanf_float+0x37c>
 8006aba:	f01c 0f04 	tst.w	ip, #4
 8006abe:	d1db      	bne.n	8006a78 <_scanf_float+0x39c>
 8006ac0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006ac4:	f8cc 2000 	str.w	r2, [ip]
 8006ac8:	f8d3 8000 	ldr.w	r8, [r3]
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	f7f9 ffa6 	bl	8000a20 <__aeabi_dcmpun>
 8006ad4:	b128      	cbz	r0, 8006ae2 <_scanf_float+0x406>
 8006ad6:	4807      	ldr	r0, [pc, #28]	; (8006af4 <_scanf_float+0x418>)
 8006ad8:	f000 fa36 	bl	8006f48 <nanf>
 8006adc:	f8c8 0000 	str.w	r0, [r8]
 8006ae0:	e7cf      	b.n	8006a82 <_scanf_float+0x3a6>
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	f7f9 fff9 	bl	8000adc <__aeabi_d2f>
 8006aea:	e7f7      	b.n	8006adc <_scanf_float+0x400>
 8006aec:	2500      	movs	r5, #0
 8006aee:	e638      	b.n	8006762 <_scanf_float+0x86>
 8006af0:	0800b098 	.word	0x0800b098
 8006af4:	0800b149 	.word	0x0800b149

08006af8 <std>:
 8006af8:	2300      	movs	r3, #0
 8006afa:	b510      	push	{r4, lr}
 8006afc:	4604      	mov	r4, r0
 8006afe:	e9c0 3300 	strd	r3, r3, [r0]
 8006b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b06:	6083      	str	r3, [r0, #8]
 8006b08:	8181      	strh	r1, [r0, #12]
 8006b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006b0c:	81c2      	strh	r2, [r0, #14]
 8006b0e:	6183      	str	r3, [r0, #24]
 8006b10:	4619      	mov	r1, r3
 8006b12:	2208      	movs	r2, #8
 8006b14:	305c      	adds	r0, #92	; 0x5c
 8006b16:	f000 f92e 	bl	8006d76 <memset>
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <std+0x38>)
 8006b1c:	6224      	str	r4, [r4, #32]
 8006b1e:	6263      	str	r3, [r4, #36]	; 0x24
 8006b20:	4b04      	ldr	r3, [pc, #16]	; (8006b34 <std+0x3c>)
 8006b22:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b24:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <std+0x40>)
 8006b26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b28:	4b04      	ldr	r3, [pc, #16]	; (8006b3c <std+0x44>)
 8006b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006b2c:	bd10      	pop	{r4, pc}
 8006b2e:	bf00      	nop
 8006b30:	08006ced 	.word	0x08006ced
 8006b34:	08006d13 	.word	0x08006d13
 8006b38:	08006d4b 	.word	0x08006d4b
 8006b3c:	08006d6f 	.word	0x08006d6f

08006b40 <stdio_exit_handler>:
 8006b40:	4a02      	ldr	r2, [pc, #8]	; (8006b4c <stdio_exit_handler+0xc>)
 8006b42:	4903      	ldr	r1, [pc, #12]	; (8006b50 <stdio_exit_handler+0x10>)
 8006b44:	4803      	ldr	r0, [pc, #12]	; (8006b54 <stdio_exit_handler+0x14>)
 8006b46:	f000 b869 	b.w	8006c1c <_fwalk_sglue>
 8006b4a:	bf00      	nop
 8006b4c:	20000034 	.word	0x20000034
 8006b50:	08009ec5 	.word	0x08009ec5
 8006b54:	20000040 	.word	0x20000040

08006b58 <cleanup_stdio>:
 8006b58:	6841      	ldr	r1, [r0, #4]
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <cleanup_stdio+0x34>)
 8006b5c:	b510      	push	{r4, lr}
 8006b5e:	4299      	cmp	r1, r3
 8006b60:	4604      	mov	r4, r0
 8006b62:	d001      	beq.n	8006b68 <cleanup_stdio+0x10>
 8006b64:	f003 f9ae 	bl	8009ec4 <_fflush_r>
 8006b68:	68a1      	ldr	r1, [r4, #8]
 8006b6a:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <cleanup_stdio+0x38>)
 8006b6c:	4299      	cmp	r1, r3
 8006b6e:	d002      	beq.n	8006b76 <cleanup_stdio+0x1e>
 8006b70:	4620      	mov	r0, r4
 8006b72:	f003 f9a7 	bl	8009ec4 <_fflush_r>
 8006b76:	68e1      	ldr	r1, [r4, #12]
 8006b78:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <cleanup_stdio+0x3c>)
 8006b7a:	4299      	cmp	r1, r3
 8006b7c:	d004      	beq.n	8006b88 <cleanup_stdio+0x30>
 8006b7e:	4620      	mov	r0, r4
 8006b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b84:	f003 b99e 	b.w	8009ec4 <_fflush_r>
 8006b88:	bd10      	pop	{r4, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000480 	.word	0x20000480
 8006b90:	200004e8 	.word	0x200004e8
 8006b94:	20000550 	.word	0x20000550

08006b98 <global_stdio_init.part.0>:
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <global_stdio_init.part.0+0x30>)
 8006b9c:	4c0b      	ldr	r4, [pc, #44]	; (8006bcc <global_stdio_init.part.0+0x34>)
 8006b9e:	4a0c      	ldr	r2, [pc, #48]	; (8006bd0 <global_stdio_init.part.0+0x38>)
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	2104      	movs	r1, #4
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f7ff ffa6 	bl	8006af8 <std>
 8006bac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	2109      	movs	r1, #9
 8006bb4:	f7ff ffa0 	bl	8006af8 <std>
 8006bb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc2:	2112      	movs	r1, #18
 8006bc4:	f7ff bf98 	b.w	8006af8 <std>
 8006bc8:	200005b8 	.word	0x200005b8
 8006bcc:	20000480 	.word	0x20000480
 8006bd0:	08006b41 	.word	0x08006b41

08006bd4 <__sfp_lock_acquire>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	; (8006bdc <__sfp_lock_acquire+0x8>)
 8006bd6:	f000 b9a7 	b.w	8006f28 <__retarget_lock_acquire_recursive>
 8006bda:	bf00      	nop
 8006bdc:	200005c1 	.word	0x200005c1

08006be0 <__sfp_lock_release>:
 8006be0:	4801      	ldr	r0, [pc, #4]	; (8006be8 <__sfp_lock_release+0x8>)
 8006be2:	f000 b9a2 	b.w	8006f2a <__retarget_lock_release_recursive>
 8006be6:	bf00      	nop
 8006be8:	200005c1 	.word	0x200005c1

08006bec <__sinit>:
 8006bec:	b510      	push	{r4, lr}
 8006bee:	4604      	mov	r4, r0
 8006bf0:	f7ff fff0 	bl	8006bd4 <__sfp_lock_acquire>
 8006bf4:	6a23      	ldr	r3, [r4, #32]
 8006bf6:	b11b      	cbz	r3, 8006c00 <__sinit+0x14>
 8006bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bfc:	f7ff bff0 	b.w	8006be0 <__sfp_lock_release>
 8006c00:	4b04      	ldr	r3, [pc, #16]	; (8006c14 <__sinit+0x28>)
 8006c02:	6223      	str	r3, [r4, #32]
 8006c04:	4b04      	ldr	r3, [pc, #16]	; (8006c18 <__sinit+0x2c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1f5      	bne.n	8006bf8 <__sinit+0xc>
 8006c0c:	f7ff ffc4 	bl	8006b98 <global_stdio_init.part.0>
 8006c10:	e7f2      	b.n	8006bf8 <__sinit+0xc>
 8006c12:	bf00      	nop
 8006c14:	08006b59 	.word	0x08006b59
 8006c18:	200005b8 	.word	0x200005b8

08006c1c <_fwalk_sglue>:
 8006c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c20:	4607      	mov	r7, r0
 8006c22:	4688      	mov	r8, r1
 8006c24:	4614      	mov	r4, r2
 8006c26:	2600      	movs	r6, #0
 8006c28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c2c:	f1b9 0901 	subs.w	r9, r9, #1
 8006c30:	d505      	bpl.n	8006c3e <_fwalk_sglue+0x22>
 8006c32:	6824      	ldr	r4, [r4, #0]
 8006c34:	2c00      	cmp	r4, #0
 8006c36:	d1f7      	bne.n	8006c28 <_fwalk_sglue+0xc>
 8006c38:	4630      	mov	r0, r6
 8006c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c3e:	89ab      	ldrh	r3, [r5, #12]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d907      	bls.n	8006c54 <_fwalk_sglue+0x38>
 8006c44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	d003      	beq.n	8006c54 <_fwalk_sglue+0x38>
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	4638      	mov	r0, r7
 8006c50:	47c0      	blx	r8
 8006c52:	4306      	orrs	r6, r0
 8006c54:	3568      	adds	r5, #104	; 0x68
 8006c56:	e7e9      	b.n	8006c2c <_fwalk_sglue+0x10>

08006c58 <siprintf>:
 8006c58:	b40e      	push	{r1, r2, r3}
 8006c5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c5e:	b500      	push	{lr}
 8006c60:	b09c      	sub	sp, #112	; 0x70
 8006c62:	ab1d      	add	r3, sp, #116	; 0x74
 8006c64:	9002      	str	r0, [sp, #8]
 8006c66:	9006      	str	r0, [sp, #24]
 8006c68:	9107      	str	r1, [sp, #28]
 8006c6a:	9104      	str	r1, [sp, #16]
 8006c6c:	4808      	ldr	r0, [pc, #32]	; (8006c90 <siprintf+0x38>)
 8006c6e:	4909      	ldr	r1, [pc, #36]	; (8006c94 <siprintf+0x3c>)
 8006c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c74:	9105      	str	r1, [sp, #20]
 8006c76:	6800      	ldr	r0, [r0, #0]
 8006c78:	a902      	add	r1, sp, #8
 8006c7a:	9301      	str	r3, [sp, #4]
 8006c7c:	f002 fc84 	bl	8009588 <_svfiprintf_r>
 8006c80:	2200      	movs	r2, #0
 8006c82:	9b02      	ldr	r3, [sp, #8]
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	b01c      	add	sp, #112	; 0x70
 8006c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c8c:	b003      	add	sp, #12
 8006c8e:	4770      	bx	lr
 8006c90:	2000008c 	.word	0x2000008c
 8006c94:	ffff0208 	.word	0xffff0208

08006c98 <siscanf>:
 8006c98:	b40e      	push	{r1, r2, r3}
 8006c9a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006c9e:	b530      	push	{r4, r5, lr}
 8006ca0:	b09c      	sub	sp, #112	; 0x70
 8006ca2:	ac1f      	add	r4, sp, #124	; 0x7c
 8006ca4:	f854 5b04 	ldr.w	r5, [r4], #4
 8006ca8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006cac:	9002      	str	r0, [sp, #8]
 8006cae:	9006      	str	r0, [sp, #24]
 8006cb0:	f7f9 fa58 	bl	8000164 <strlen>
 8006cb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ce4 <siscanf+0x4c>)
 8006cb6:	9003      	str	r0, [sp, #12]
 8006cb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cba:	2300      	movs	r3, #0
 8006cbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cbe:	9314      	str	r3, [sp, #80]	; 0x50
 8006cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006cc4:	9007      	str	r0, [sp, #28]
 8006cc6:	4808      	ldr	r0, [pc, #32]	; (8006ce8 <siscanf+0x50>)
 8006cc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ccc:	462a      	mov	r2, r5
 8006cce:	4623      	mov	r3, r4
 8006cd0:	a902      	add	r1, sp, #8
 8006cd2:	6800      	ldr	r0, [r0, #0]
 8006cd4:	9401      	str	r4, [sp, #4]
 8006cd6:	f002 fdaf 	bl	8009838 <__ssvfiscanf_r>
 8006cda:	b01c      	add	sp, #112	; 0x70
 8006cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ce0:	b003      	add	sp, #12
 8006ce2:	4770      	bx	lr
 8006ce4:	08006d0f 	.word	0x08006d0f
 8006ce8:	2000008c 	.word	0x2000008c

08006cec <__sread>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	460c      	mov	r4, r1
 8006cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf4:	f000 f8ca 	bl	8006e8c <_read_r>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	bfab      	itete	ge
 8006cfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8006d00:	181b      	addge	r3, r3, r0
 8006d02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d06:	bfac      	ite	ge
 8006d08:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d0a:	81a3      	strhlt	r3, [r4, #12]
 8006d0c:	bd10      	pop	{r4, pc}

08006d0e <__seofread>:
 8006d0e:	2000      	movs	r0, #0
 8006d10:	4770      	bx	lr

08006d12 <__swrite>:
 8006d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d16:	461f      	mov	r7, r3
 8006d18:	898b      	ldrh	r3, [r1, #12]
 8006d1a:	4605      	mov	r5, r0
 8006d1c:	05db      	lsls	r3, r3, #23
 8006d1e:	460c      	mov	r4, r1
 8006d20:	4616      	mov	r6, r2
 8006d22:	d505      	bpl.n	8006d30 <__swrite+0x1e>
 8006d24:	2302      	movs	r3, #2
 8006d26:	2200      	movs	r2, #0
 8006d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2c:	f000 f89c 	bl	8006e68 <_lseek_r>
 8006d30:	89a3      	ldrh	r3, [r4, #12]
 8006d32:	4632      	mov	r2, r6
 8006d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d46:	f000 b8b3 	b.w	8006eb0 <_write_r>

08006d4a <__sseek>:
 8006d4a:	b510      	push	{r4, lr}
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d52:	f000 f889 	bl	8006e68 <_lseek_r>
 8006d56:	1c43      	adds	r3, r0, #1
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	bf15      	itete	ne
 8006d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d66:	81a3      	strheq	r3, [r4, #12]
 8006d68:	bf18      	it	ne
 8006d6a:	81a3      	strhne	r3, [r4, #12]
 8006d6c:	bd10      	pop	{r4, pc}

08006d6e <__sclose>:
 8006d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d72:	f000 b869 	b.w	8006e48 <_close_r>

08006d76 <memset>:
 8006d76:	4603      	mov	r3, r0
 8006d78:	4402      	add	r2, r0
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d100      	bne.n	8006d80 <memset+0xa>
 8006d7e:	4770      	bx	lr
 8006d80:	f803 1b01 	strb.w	r1, [r3], #1
 8006d84:	e7f9      	b.n	8006d7a <memset+0x4>
	...

08006d88 <strtok>:
 8006d88:	4b16      	ldr	r3, [pc, #88]	; (8006de4 <strtok+0x5c>)
 8006d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8e:	681f      	ldr	r7, [r3, #0]
 8006d90:	4605      	mov	r5, r0
 8006d92:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8006d94:	460e      	mov	r6, r1
 8006d96:	b9ec      	cbnz	r4, 8006dd4 <strtok+0x4c>
 8006d98:	2050      	movs	r0, #80	; 0x50
 8006d9a:	f000 ffad 	bl	8007cf8 <malloc>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	6478      	str	r0, [r7, #68]	; 0x44
 8006da2:	b920      	cbnz	r0, 8006dae <strtok+0x26>
 8006da4:	215b      	movs	r1, #91	; 0x5b
 8006da6:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <strtok+0x60>)
 8006da8:	4810      	ldr	r0, [pc, #64]	; (8006dec <strtok+0x64>)
 8006daa:	f000 f8d1 	bl	8006f50 <__assert_func>
 8006dae:	e9c0 4400 	strd	r4, r4, [r0]
 8006db2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006db6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006dba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006dbe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006dc2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006dc6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006dca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006dce:	6184      	str	r4, [r0, #24]
 8006dd0:	7704      	strb	r4, [r0, #28]
 8006dd2:	6244      	str	r4, [r0, #36]	; 0x24
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006de0:	f000 b806 	b.w	8006df0 <__strtok_r>
 8006de4:	2000008c 	.word	0x2000008c
 8006de8:	0800b09d 	.word	0x0800b09d
 8006dec:	0800b0b4 	.word	0x0800b0b4

08006df0 <__strtok_r>:
 8006df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df2:	b908      	cbnz	r0, 8006df8 <__strtok_r+0x8>
 8006df4:	6810      	ldr	r0, [r2, #0]
 8006df6:	b188      	cbz	r0, 8006e1c <__strtok_r+0x2c>
 8006df8:	4604      	mov	r4, r0
 8006dfa:	460f      	mov	r7, r1
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006e02:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006e06:	b91e      	cbnz	r6, 8006e10 <__strtok_r+0x20>
 8006e08:	b965      	cbnz	r5, 8006e24 <__strtok_r+0x34>
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	6015      	str	r5, [r2, #0]
 8006e0e:	e005      	b.n	8006e1c <__strtok_r+0x2c>
 8006e10:	42b5      	cmp	r5, r6
 8006e12:	d1f6      	bne.n	8006e02 <__strtok_r+0x12>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1f0      	bne.n	8006dfa <__strtok_r+0xa>
 8006e18:	6014      	str	r4, [r2, #0]
 8006e1a:	7003      	strb	r3, [r0, #0]
 8006e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e1e:	461c      	mov	r4, r3
 8006e20:	e00c      	b.n	8006e3c <__strtok_r+0x4c>
 8006e22:	b915      	cbnz	r5, 8006e2a <__strtok_r+0x3a>
 8006e24:	460e      	mov	r6, r1
 8006e26:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e2a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006e2e:	42ab      	cmp	r3, r5
 8006e30:	d1f7      	bne.n	8006e22 <__strtok_r+0x32>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0f3      	beq.n	8006e1e <__strtok_r+0x2e>
 8006e36:	2300      	movs	r3, #0
 8006e38:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006e3c:	6014      	str	r4, [r2, #0]
 8006e3e:	e7ed      	b.n	8006e1c <__strtok_r+0x2c>

08006e40 <_localeconv_r>:
 8006e40:	4800      	ldr	r0, [pc, #0]	; (8006e44 <_localeconv_r+0x4>)
 8006e42:	4770      	bx	lr
 8006e44:	20000180 	.word	0x20000180

08006e48 <_close_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4d05      	ldr	r5, [pc, #20]	; (8006e64 <_close_r+0x1c>)
 8006e4e:	4604      	mov	r4, r0
 8006e50:	4608      	mov	r0, r1
 8006e52:	602b      	str	r3, [r5, #0]
 8006e54:	f7fc f92a 	bl	80030ac <_close>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d102      	bne.n	8006e62 <_close_r+0x1a>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_close_r+0x1a>
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	200005bc 	.word	0x200005bc

08006e68 <_lseek_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	4608      	mov	r0, r1
 8006e6e:	4611      	mov	r1, r2
 8006e70:	2200      	movs	r2, #0
 8006e72:	4d05      	ldr	r5, [pc, #20]	; (8006e88 <_lseek_r+0x20>)
 8006e74:	602a      	str	r2, [r5, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f7fc f93c 	bl	80030f4 <_lseek>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d102      	bne.n	8006e86 <_lseek_r+0x1e>
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	b103      	cbz	r3, 8006e86 <_lseek_r+0x1e>
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
 8006e88:	200005bc 	.word	0x200005bc

08006e8c <_read_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4604      	mov	r4, r0
 8006e90:	4608      	mov	r0, r1
 8006e92:	4611      	mov	r1, r2
 8006e94:	2200      	movs	r2, #0
 8006e96:	4d05      	ldr	r5, [pc, #20]	; (8006eac <_read_r+0x20>)
 8006e98:	602a      	str	r2, [r5, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f7fc f8cd 	bl	800303a <_read>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	d102      	bne.n	8006eaa <_read_r+0x1e>
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	b103      	cbz	r3, 8006eaa <_read_r+0x1e>
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	bd38      	pop	{r3, r4, r5, pc}
 8006eac:	200005bc 	.word	0x200005bc

08006eb0 <_write_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4d05      	ldr	r5, [pc, #20]	; (8006ed0 <_write_r+0x20>)
 8006ebc:	602a      	str	r2, [r5, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f7fc f8d8 	bl	8003074 <_write>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_write_r+0x1e>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_write_r+0x1e>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	200005bc 	.word	0x200005bc

08006ed4 <__errno>:
 8006ed4:	4b01      	ldr	r3, [pc, #4]	; (8006edc <__errno+0x8>)
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	2000008c 	.word	0x2000008c

08006ee0 <__libc_init_array>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	4d0c      	ldr	r5, [pc, #48]	; (8006f18 <__libc_init_array+0x38>)
 8006ee6:	4c0d      	ldr	r4, [pc, #52]	; (8006f1c <__libc_init_array+0x3c>)
 8006ee8:	1b64      	subs	r4, r4, r5
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	42a6      	cmp	r6, r4
 8006eee:	d109      	bne.n	8006f04 <__libc_init_array+0x24>
 8006ef0:	f003 ffc2 	bl	800ae78 <_init>
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	4d0a      	ldr	r5, [pc, #40]	; (8006f20 <__libc_init_array+0x40>)
 8006ef8:	4c0a      	ldr	r4, [pc, #40]	; (8006f24 <__libc_init_array+0x44>)
 8006efa:	1b64      	subs	r4, r4, r5
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	42a6      	cmp	r6, r4
 8006f00:	d105      	bne.n	8006f0e <__libc_init_array+0x2e>
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f08:	4798      	blx	r3
 8006f0a:	3601      	adds	r6, #1
 8006f0c:	e7ee      	b.n	8006eec <__libc_init_array+0xc>
 8006f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f12:	4798      	blx	r3
 8006f14:	3601      	adds	r6, #1
 8006f16:	e7f2      	b.n	8006efe <__libc_init_array+0x1e>
 8006f18:	0800b508 	.word	0x0800b508
 8006f1c:	0800b508 	.word	0x0800b508
 8006f20:	0800b508 	.word	0x0800b508
 8006f24:	0800b50c 	.word	0x0800b50c

08006f28 <__retarget_lock_acquire_recursive>:
 8006f28:	4770      	bx	lr

08006f2a <__retarget_lock_release_recursive>:
 8006f2a:	4770      	bx	lr

08006f2c <memchr>:
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	b510      	push	{r4, lr}
 8006f30:	b2c9      	uxtb	r1, r1
 8006f32:	4402      	add	r2, r0
 8006f34:	4293      	cmp	r3, r2
 8006f36:	4618      	mov	r0, r3
 8006f38:	d101      	bne.n	8006f3e <memchr+0x12>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	e003      	b.n	8006f46 <memchr+0x1a>
 8006f3e:	7804      	ldrb	r4, [r0, #0]
 8006f40:	3301      	adds	r3, #1
 8006f42:	428c      	cmp	r4, r1
 8006f44:	d1f6      	bne.n	8006f34 <memchr+0x8>
 8006f46:	bd10      	pop	{r4, pc}

08006f48 <nanf>:
 8006f48:	4800      	ldr	r0, [pc, #0]	; (8006f4c <nanf+0x4>)
 8006f4a:	4770      	bx	lr
 8006f4c:	7fc00000 	.word	0x7fc00000

08006f50 <__assert_func>:
 8006f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f52:	4614      	mov	r4, r2
 8006f54:	461a      	mov	r2, r3
 8006f56:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <__assert_func+0x2c>)
 8006f58:	4605      	mov	r5, r0
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68d8      	ldr	r0, [r3, #12]
 8006f5e:	b14c      	cbz	r4, 8006f74 <__assert_func+0x24>
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <__assert_func+0x30>)
 8006f62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f66:	9100      	str	r1, [sp, #0]
 8006f68:	462b      	mov	r3, r5
 8006f6a:	4906      	ldr	r1, [pc, #24]	; (8006f84 <__assert_func+0x34>)
 8006f6c:	f002 ffd2 	bl	8009f14 <fiprintf>
 8006f70:	f003 f8a4 	bl	800a0bc <abort>
 8006f74:	4b04      	ldr	r3, [pc, #16]	; (8006f88 <__assert_func+0x38>)
 8006f76:	461c      	mov	r4, r3
 8006f78:	e7f3      	b.n	8006f62 <__assert_func+0x12>
 8006f7a:	bf00      	nop
 8006f7c:	2000008c 	.word	0x2000008c
 8006f80:	0800b10e 	.word	0x0800b10e
 8006f84:	0800b11b 	.word	0x0800b11b
 8006f88:	0800b149 	.word	0x0800b149

08006f8c <quorem>:
 8006f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f90:	6903      	ldr	r3, [r0, #16]
 8006f92:	690c      	ldr	r4, [r1, #16]
 8006f94:	4607      	mov	r7, r0
 8006f96:	42a3      	cmp	r3, r4
 8006f98:	db7f      	blt.n	800709a <quorem+0x10e>
 8006f9a:	3c01      	subs	r4, #1
 8006f9c:	f100 0514 	add.w	r5, r0, #20
 8006fa0:	f101 0814 	add.w	r8, r1, #20
 8006fa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006fbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006fc2:	d331      	bcc.n	8007028 <quorem+0x9c>
 8006fc4:	f04f 0e00 	mov.w	lr, #0
 8006fc8:	4640      	mov	r0, r8
 8006fca:	46ac      	mov	ip, r5
 8006fcc:	46f2      	mov	sl, lr
 8006fce:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fd2:	b293      	uxth	r3, r2
 8006fd4:	fb06 e303 	mla	r3, r6, r3, lr
 8006fd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fdc:	0c1a      	lsrs	r2, r3, #16
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	fb06 220e 	mla	r2, r6, lr, r2
 8006fe4:	ebaa 0303 	sub.w	r3, sl, r3
 8006fe8:	f8dc a000 	ldr.w	sl, [ip]
 8006fec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ff0:	fa1f fa8a 	uxth.w	sl, sl
 8006ff4:	4453      	add	r3, sl
 8006ff6:	f8dc a000 	ldr.w	sl, [ip]
 8006ffa:	b292      	uxth	r2, r2
 8006ffc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007000:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007004:	b29b      	uxth	r3, r3
 8007006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800700a:	4581      	cmp	r9, r0
 800700c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007010:	f84c 3b04 	str.w	r3, [ip], #4
 8007014:	d2db      	bcs.n	8006fce <quorem+0x42>
 8007016:	f855 300b 	ldr.w	r3, [r5, fp]
 800701a:	b92b      	cbnz	r3, 8007028 <quorem+0x9c>
 800701c:	9b01      	ldr	r3, [sp, #4]
 800701e:	3b04      	subs	r3, #4
 8007020:	429d      	cmp	r5, r3
 8007022:	461a      	mov	r2, r3
 8007024:	d32d      	bcc.n	8007082 <quorem+0xf6>
 8007026:	613c      	str	r4, [r7, #16]
 8007028:	4638      	mov	r0, r7
 800702a:	f001 f9dd 	bl	80083e8 <__mcmp>
 800702e:	2800      	cmp	r0, #0
 8007030:	db23      	blt.n	800707a <quorem+0xee>
 8007032:	4629      	mov	r1, r5
 8007034:	2000      	movs	r0, #0
 8007036:	3601      	adds	r6, #1
 8007038:	f858 2b04 	ldr.w	r2, [r8], #4
 800703c:	f8d1 c000 	ldr.w	ip, [r1]
 8007040:	b293      	uxth	r3, r2
 8007042:	1ac3      	subs	r3, r0, r3
 8007044:	0c12      	lsrs	r2, r2, #16
 8007046:	fa1f f08c 	uxth.w	r0, ip
 800704a:	4403      	add	r3, r0
 800704c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007050:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007054:	b29b      	uxth	r3, r3
 8007056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800705a:	45c1      	cmp	r9, r8
 800705c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007060:	f841 3b04 	str.w	r3, [r1], #4
 8007064:	d2e8      	bcs.n	8007038 <quorem+0xac>
 8007066:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800706a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800706e:	b922      	cbnz	r2, 800707a <quorem+0xee>
 8007070:	3b04      	subs	r3, #4
 8007072:	429d      	cmp	r5, r3
 8007074:	461a      	mov	r2, r3
 8007076:	d30a      	bcc.n	800708e <quorem+0x102>
 8007078:	613c      	str	r4, [r7, #16]
 800707a:	4630      	mov	r0, r6
 800707c:	b003      	add	sp, #12
 800707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	3b04      	subs	r3, #4
 8007086:	2a00      	cmp	r2, #0
 8007088:	d1cd      	bne.n	8007026 <quorem+0x9a>
 800708a:	3c01      	subs	r4, #1
 800708c:	e7c8      	b.n	8007020 <quorem+0x94>
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	3b04      	subs	r3, #4
 8007092:	2a00      	cmp	r2, #0
 8007094:	d1f0      	bne.n	8007078 <quorem+0xec>
 8007096:	3c01      	subs	r4, #1
 8007098:	e7eb      	b.n	8007072 <quorem+0xe6>
 800709a:	2000      	movs	r0, #0
 800709c:	e7ee      	b.n	800707c <quorem+0xf0>
	...

080070a0 <_dtoa_r>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	4616      	mov	r6, r2
 80070a6:	461f      	mov	r7, r3
 80070a8:	69c4      	ldr	r4, [r0, #28]
 80070aa:	b099      	sub	sp, #100	; 0x64
 80070ac:	4605      	mov	r5, r0
 80070ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80070b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80070b6:	b974      	cbnz	r4, 80070d6 <_dtoa_r+0x36>
 80070b8:	2010      	movs	r0, #16
 80070ba:	f000 fe1d 	bl	8007cf8 <malloc>
 80070be:	4602      	mov	r2, r0
 80070c0:	61e8      	str	r0, [r5, #28]
 80070c2:	b920      	cbnz	r0, 80070ce <_dtoa_r+0x2e>
 80070c4:	21ef      	movs	r1, #239	; 0xef
 80070c6:	4bac      	ldr	r3, [pc, #688]	; (8007378 <_dtoa_r+0x2d8>)
 80070c8:	48ac      	ldr	r0, [pc, #688]	; (800737c <_dtoa_r+0x2dc>)
 80070ca:	f7ff ff41 	bl	8006f50 <__assert_func>
 80070ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070d2:	6004      	str	r4, [r0, #0]
 80070d4:	60c4      	str	r4, [r0, #12]
 80070d6:	69eb      	ldr	r3, [r5, #28]
 80070d8:	6819      	ldr	r1, [r3, #0]
 80070da:	b151      	cbz	r1, 80070f2 <_dtoa_r+0x52>
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	2301      	movs	r3, #1
 80070e0:	4093      	lsls	r3, r2
 80070e2:	604a      	str	r2, [r1, #4]
 80070e4:	608b      	str	r3, [r1, #8]
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 fefa 	bl	8007ee0 <_Bfree>
 80070ec:	2200      	movs	r2, #0
 80070ee:	69eb      	ldr	r3, [r5, #28]
 80070f0:	601a      	str	r2, [r3, #0]
 80070f2:	1e3b      	subs	r3, r7, #0
 80070f4:	bfaf      	iteee	ge
 80070f6:	2300      	movge	r3, #0
 80070f8:	2201      	movlt	r2, #1
 80070fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80070fe:	9305      	strlt	r3, [sp, #20]
 8007100:	bfa8      	it	ge
 8007102:	f8c8 3000 	strge.w	r3, [r8]
 8007106:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800710a:	4b9d      	ldr	r3, [pc, #628]	; (8007380 <_dtoa_r+0x2e0>)
 800710c:	bfb8      	it	lt
 800710e:	f8c8 2000 	strlt.w	r2, [r8]
 8007112:	ea33 0309 	bics.w	r3, r3, r9
 8007116:	d119      	bne.n	800714c <_dtoa_r+0xac>
 8007118:	f242 730f 	movw	r3, #9999	; 0x270f
 800711c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007124:	4333      	orrs	r3, r6
 8007126:	f000 8589 	beq.w	8007c3c <_dtoa_r+0xb9c>
 800712a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800712c:	b953      	cbnz	r3, 8007144 <_dtoa_r+0xa4>
 800712e:	4b95      	ldr	r3, [pc, #596]	; (8007384 <_dtoa_r+0x2e4>)
 8007130:	e023      	b.n	800717a <_dtoa_r+0xda>
 8007132:	4b95      	ldr	r3, [pc, #596]	; (8007388 <_dtoa_r+0x2e8>)
 8007134:	9303      	str	r3, [sp, #12]
 8007136:	3308      	adds	r3, #8
 8007138:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	9803      	ldr	r0, [sp, #12]
 800713e:	b019      	add	sp, #100	; 0x64
 8007140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007144:	4b8f      	ldr	r3, [pc, #572]	; (8007384 <_dtoa_r+0x2e4>)
 8007146:	9303      	str	r3, [sp, #12]
 8007148:	3303      	adds	r3, #3
 800714a:	e7f5      	b.n	8007138 <_dtoa_r+0x98>
 800714c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007150:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007158:	2200      	movs	r2, #0
 800715a:	2300      	movs	r3, #0
 800715c:	f7f9 fc2e 	bl	80009bc <__aeabi_dcmpeq>
 8007160:	4680      	mov	r8, r0
 8007162:	b160      	cbz	r0, 800717e <_dtoa_r+0xde>
 8007164:	2301      	movs	r3, #1
 8007166:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8562 	beq.w	8007c36 <_dtoa_r+0xb96>
 8007172:	4b86      	ldr	r3, [pc, #536]	; (800738c <_dtoa_r+0x2ec>)
 8007174:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	3b01      	subs	r3, #1
 800717a:	9303      	str	r3, [sp, #12]
 800717c:	e7de      	b.n	800713c <_dtoa_r+0x9c>
 800717e:	ab16      	add	r3, sp, #88	; 0x58
 8007180:	9301      	str	r3, [sp, #4]
 8007182:	ab17      	add	r3, sp, #92	; 0x5c
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	4628      	mov	r0, r5
 8007188:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800718c:	f001 fa3c 	bl	8008608 <__d2b>
 8007190:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007194:	4682      	mov	sl, r0
 8007196:	2c00      	cmp	r4, #0
 8007198:	d07e      	beq.n	8007298 <_dtoa_r+0x1f8>
 800719a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800719e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80071a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80071ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80071b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80071b4:	4619      	mov	r1, r3
 80071b6:	2200      	movs	r2, #0
 80071b8:	4b75      	ldr	r3, [pc, #468]	; (8007390 <_dtoa_r+0x2f0>)
 80071ba:	f7f8 ffdf 	bl	800017c <__aeabi_dsub>
 80071be:	a368      	add	r3, pc, #416	; (adr r3, 8007360 <_dtoa_r+0x2c0>)
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f7f9 f992 	bl	80004ec <__aeabi_dmul>
 80071c8:	a367      	add	r3, pc, #412	; (adr r3, 8007368 <_dtoa_r+0x2c8>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f8 ffd7 	bl	8000180 <__adddf3>
 80071d2:	4606      	mov	r6, r0
 80071d4:	4620      	mov	r0, r4
 80071d6:	460f      	mov	r7, r1
 80071d8:	f7f9 f91e 	bl	8000418 <__aeabi_i2d>
 80071dc:	a364      	add	r3, pc, #400	; (adr r3, 8007370 <_dtoa_r+0x2d0>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f7f9 f983 	bl	80004ec <__aeabi_dmul>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4630      	mov	r0, r6
 80071ec:	4639      	mov	r1, r7
 80071ee:	f7f8 ffc7 	bl	8000180 <__adddf3>
 80071f2:	4606      	mov	r6, r0
 80071f4:	460f      	mov	r7, r1
 80071f6:	f7f9 fc29 	bl	8000a4c <__aeabi_d2iz>
 80071fa:	2200      	movs	r2, #0
 80071fc:	4683      	mov	fp, r0
 80071fe:	2300      	movs	r3, #0
 8007200:	4630      	mov	r0, r6
 8007202:	4639      	mov	r1, r7
 8007204:	f7f9 fbe4 	bl	80009d0 <__aeabi_dcmplt>
 8007208:	b148      	cbz	r0, 800721e <_dtoa_r+0x17e>
 800720a:	4658      	mov	r0, fp
 800720c:	f7f9 f904 	bl	8000418 <__aeabi_i2d>
 8007210:	4632      	mov	r2, r6
 8007212:	463b      	mov	r3, r7
 8007214:	f7f9 fbd2 	bl	80009bc <__aeabi_dcmpeq>
 8007218:	b908      	cbnz	r0, 800721e <_dtoa_r+0x17e>
 800721a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800721e:	f1bb 0f16 	cmp.w	fp, #22
 8007222:	d857      	bhi.n	80072d4 <_dtoa_r+0x234>
 8007224:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007228:	4b5a      	ldr	r3, [pc, #360]	; (8007394 <_dtoa_r+0x2f4>)
 800722a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	f7f9 fbcd 	bl	80009d0 <__aeabi_dcmplt>
 8007236:	2800      	cmp	r0, #0
 8007238:	d04e      	beq.n	80072d8 <_dtoa_r+0x238>
 800723a:	2300      	movs	r3, #0
 800723c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007240:	930f      	str	r3, [sp, #60]	; 0x3c
 8007242:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007244:	1b1b      	subs	r3, r3, r4
 8007246:	1e5a      	subs	r2, r3, #1
 8007248:	bf46      	itte	mi
 800724a:	f1c3 0901 	rsbmi	r9, r3, #1
 800724e:	2300      	movmi	r3, #0
 8007250:	f04f 0900 	movpl.w	r9, #0
 8007254:	9209      	str	r2, [sp, #36]	; 0x24
 8007256:	bf48      	it	mi
 8007258:	9309      	strmi	r3, [sp, #36]	; 0x24
 800725a:	f1bb 0f00 	cmp.w	fp, #0
 800725e:	db3d      	blt.n	80072dc <_dtoa_r+0x23c>
 8007260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007262:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007266:	445b      	add	r3, fp
 8007268:	9309      	str	r3, [sp, #36]	; 0x24
 800726a:	2300      	movs	r3, #0
 800726c:	930a      	str	r3, [sp, #40]	; 0x28
 800726e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007270:	2b09      	cmp	r3, #9
 8007272:	d867      	bhi.n	8007344 <_dtoa_r+0x2a4>
 8007274:	2b05      	cmp	r3, #5
 8007276:	bfc4      	itt	gt
 8007278:	3b04      	subgt	r3, #4
 800727a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800727c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800727e:	bfc8      	it	gt
 8007280:	2400      	movgt	r4, #0
 8007282:	f1a3 0302 	sub.w	r3, r3, #2
 8007286:	bfd8      	it	le
 8007288:	2401      	movle	r4, #1
 800728a:	2b03      	cmp	r3, #3
 800728c:	f200 8086 	bhi.w	800739c <_dtoa_r+0x2fc>
 8007290:	e8df f003 	tbb	[pc, r3]
 8007294:	5637392c 	.word	0x5637392c
 8007298:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800729c:	441c      	add	r4, r3
 800729e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	bfc1      	itttt	gt
 80072a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072aa:	fa09 f903 	lslgt.w	r9, r9, r3
 80072ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80072b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80072b6:	bfd6      	itet	le
 80072b8:	f1c3 0320 	rsble	r3, r3, #32
 80072bc:	ea49 0003 	orrgt.w	r0, r9, r3
 80072c0:	fa06 f003 	lslle.w	r0, r6, r3
 80072c4:	f7f9 f898 	bl	80003f8 <__aeabi_ui2d>
 80072c8:	2201      	movs	r2, #1
 80072ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80072ce:	3c01      	subs	r4, #1
 80072d0:	9213      	str	r2, [sp, #76]	; 0x4c
 80072d2:	e76f      	b.n	80071b4 <_dtoa_r+0x114>
 80072d4:	2301      	movs	r3, #1
 80072d6:	e7b3      	b.n	8007240 <_dtoa_r+0x1a0>
 80072d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80072da:	e7b2      	b.n	8007242 <_dtoa_r+0x1a2>
 80072dc:	f1cb 0300 	rsb	r3, fp, #0
 80072e0:	930a      	str	r3, [sp, #40]	; 0x28
 80072e2:	2300      	movs	r3, #0
 80072e4:	eba9 090b 	sub.w	r9, r9, fp
 80072e8:	930e      	str	r3, [sp, #56]	; 0x38
 80072ea:	e7c0      	b.n	800726e <_dtoa_r+0x1ce>
 80072ec:	2300      	movs	r3, #0
 80072ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80072f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	dc55      	bgt.n	80073a2 <_dtoa_r+0x302>
 80072f6:	2301      	movs	r3, #1
 80072f8:	461a      	mov	r2, r3
 80072fa:	9306      	str	r3, [sp, #24]
 80072fc:	9308      	str	r3, [sp, #32]
 80072fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8007300:	e00b      	b.n	800731a <_dtoa_r+0x27a>
 8007302:	2301      	movs	r3, #1
 8007304:	e7f3      	b.n	80072ee <_dtoa_r+0x24e>
 8007306:	2300      	movs	r3, #0
 8007308:	930b      	str	r3, [sp, #44]	; 0x2c
 800730a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800730c:	445b      	add	r3, fp
 800730e:	9306      	str	r3, [sp, #24]
 8007310:	3301      	adds	r3, #1
 8007312:	2b01      	cmp	r3, #1
 8007314:	9308      	str	r3, [sp, #32]
 8007316:	bfb8      	it	lt
 8007318:	2301      	movlt	r3, #1
 800731a:	2100      	movs	r1, #0
 800731c:	2204      	movs	r2, #4
 800731e:	69e8      	ldr	r0, [r5, #28]
 8007320:	f102 0614 	add.w	r6, r2, #20
 8007324:	429e      	cmp	r6, r3
 8007326:	d940      	bls.n	80073aa <_dtoa_r+0x30a>
 8007328:	6041      	str	r1, [r0, #4]
 800732a:	4628      	mov	r0, r5
 800732c:	f000 fd98 	bl	8007e60 <_Balloc>
 8007330:	9003      	str	r0, [sp, #12]
 8007332:	2800      	cmp	r0, #0
 8007334:	d13c      	bne.n	80073b0 <_dtoa_r+0x310>
 8007336:	4602      	mov	r2, r0
 8007338:	f240 11af 	movw	r1, #431	; 0x1af
 800733c:	4b16      	ldr	r3, [pc, #88]	; (8007398 <_dtoa_r+0x2f8>)
 800733e:	e6c3      	b.n	80070c8 <_dtoa_r+0x28>
 8007340:	2301      	movs	r3, #1
 8007342:	e7e1      	b.n	8007308 <_dtoa_r+0x268>
 8007344:	2401      	movs	r4, #1
 8007346:	2300      	movs	r3, #0
 8007348:	940b      	str	r4, [sp, #44]	; 0x2c
 800734a:	9322      	str	r3, [sp, #136]	; 0x88
 800734c:	f04f 33ff 	mov.w	r3, #4294967295
 8007350:	2200      	movs	r2, #0
 8007352:	9306      	str	r3, [sp, #24]
 8007354:	9308      	str	r3, [sp, #32]
 8007356:	2312      	movs	r3, #18
 8007358:	e7d1      	b.n	80072fe <_dtoa_r+0x25e>
 800735a:	bf00      	nop
 800735c:	f3af 8000 	nop.w
 8007360:	636f4361 	.word	0x636f4361
 8007364:	3fd287a7 	.word	0x3fd287a7
 8007368:	8b60c8b3 	.word	0x8b60c8b3
 800736c:	3fc68a28 	.word	0x3fc68a28
 8007370:	509f79fb 	.word	0x509f79fb
 8007374:	3fd34413 	.word	0x3fd34413
 8007378:	0800b09d 	.word	0x0800b09d
 800737c:	0800b157 	.word	0x0800b157
 8007380:	7ff00000 	.word	0x7ff00000
 8007384:	0800b153 	.word	0x0800b153
 8007388:	0800b14a 	.word	0x0800b14a
 800738c:	0800b499 	.word	0x0800b499
 8007390:	3ff80000 	.word	0x3ff80000
 8007394:	0800b248 	.word	0x0800b248
 8007398:	0800b1af 	.word	0x0800b1af
 800739c:	2301      	movs	r3, #1
 800739e:	930b      	str	r3, [sp, #44]	; 0x2c
 80073a0:	e7d4      	b.n	800734c <_dtoa_r+0x2ac>
 80073a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073a4:	9306      	str	r3, [sp, #24]
 80073a6:	9308      	str	r3, [sp, #32]
 80073a8:	e7b7      	b.n	800731a <_dtoa_r+0x27a>
 80073aa:	3101      	adds	r1, #1
 80073ac:	0052      	lsls	r2, r2, #1
 80073ae:	e7b7      	b.n	8007320 <_dtoa_r+0x280>
 80073b0:	69eb      	ldr	r3, [r5, #28]
 80073b2:	9a03      	ldr	r2, [sp, #12]
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	9b08      	ldr	r3, [sp, #32]
 80073b8:	2b0e      	cmp	r3, #14
 80073ba:	f200 80a8 	bhi.w	800750e <_dtoa_r+0x46e>
 80073be:	2c00      	cmp	r4, #0
 80073c0:	f000 80a5 	beq.w	800750e <_dtoa_r+0x46e>
 80073c4:	f1bb 0f00 	cmp.w	fp, #0
 80073c8:	dd34      	ble.n	8007434 <_dtoa_r+0x394>
 80073ca:	4b9a      	ldr	r3, [pc, #616]	; (8007634 <_dtoa_r+0x594>)
 80073cc:	f00b 020f 	and.w	r2, fp, #15
 80073d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80073d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80073e0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80073e4:	d016      	beq.n	8007414 <_dtoa_r+0x374>
 80073e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073ea:	4b93      	ldr	r3, [pc, #588]	; (8007638 <_dtoa_r+0x598>)
 80073ec:	2703      	movs	r7, #3
 80073ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073f2:	f7f9 f9a5 	bl	8000740 <__aeabi_ddiv>
 80073f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073fa:	f004 040f 	and.w	r4, r4, #15
 80073fe:	4e8e      	ldr	r6, [pc, #568]	; (8007638 <_dtoa_r+0x598>)
 8007400:	b954      	cbnz	r4, 8007418 <_dtoa_r+0x378>
 8007402:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800740a:	f7f9 f999 	bl	8000740 <__aeabi_ddiv>
 800740e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007412:	e029      	b.n	8007468 <_dtoa_r+0x3c8>
 8007414:	2702      	movs	r7, #2
 8007416:	e7f2      	b.n	80073fe <_dtoa_r+0x35e>
 8007418:	07e1      	lsls	r1, r4, #31
 800741a:	d508      	bpl.n	800742e <_dtoa_r+0x38e>
 800741c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007420:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007424:	f7f9 f862 	bl	80004ec <__aeabi_dmul>
 8007428:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800742c:	3701      	adds	r7, #1
 800742e:	1064      	asrs	r4, r4, #1
 8007430:	3608      	adds	r6, #8
 8007432:	e7e5      	b.n	8007400 <_dtoa_r+0x360>
 8007434:	f000 80a5 	beq.w	8007582 <_dtoa_r+0x4e2>
 8007438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800743c:	f1cb 0400 	rsb	r4, fp, #0
 8007440:	4b7c      	ldr	r3, [pc, #496]	; (8007634 <_dtoa_r+0x594>)
 8007442:	f004 020f 	and.w	r2, r4, #15
 8007446:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	f7f9 f84d 	bl	80004ec <__aeabi_dmul>
 8007452:	2702      	movs	r7, #2
 8007454:	2300      	movs	r3, #0
 8007456:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800745a:	4e77      	ldr	r6, [pc, #476]	; (8007638 <_dtoa_r+0x598>)
 800745c:	1124      	asrs	r4, r4, #4
 800745e:	2c00      	cmp	r4, #0
 8007460:	f040 8084 	bne.w	800756c <_dtoa_r+0x4cc>
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1d2      	bne.n	800740e <_dtoa_r+0x36e>
 8007468:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800746c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 8087 	beq.w	8007586 <_dtoa_r+0x4e6>
 8007478:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800747c:	2200      	movs	r2, #0
 800747e:	4b6f      	ldr	r3, [pc, #444]	; (800763c <_dtoa_r+0x59c>)
 8007480:	f7f9 faa6 	bl	80009d0 <__aeabi_dcmplt>
 8007484:	2800      	cmp	r0, #0
 8007486:	d07e      	beq.n	8007586 <_dtoa_r+0x4e6>
 8007488:	9b08      	ldr	r3, [sp, #32]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d07b      	beq.n	8007586 <_dtoa_r+0x4e6>
 800748e:	9b06      	ldr	r3, [sp, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	dd38      	ble.n	8007506 <_dtoa_r+0x466>
 8007494:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007498:	2200      	movs	r2, #0
 800749a:	4b69      	ldr	r3, [pc, #420]	; (8007640 <_dtoa_r+0x5a0>)
 800749c:	f7f9 f826 	bl	80004ec <__aeabi_dmul>
 80074a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074a4:	9c06      	ldr	r4, [sp, #24]
 80074a6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80074aa:	3701      	adds	r7, #1
 80074ac:	4638      	mov	r0, r7
 80074ae:	f7f8 ffb3 	bl	8000418 <__aeabi_i2d>
 80074b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074b6:	f7f9 f819 	bl	80004ec <__aeabi_dmul>
 80074ba:	2200      	movs	r2, #0
 80074bc:	4b61      	ldr	r3, [pc, #388]	; (8007644 <_dtoa_r+0x5a4>)
 80074be:	f7f8 fe5f 	bl	8000180 <__adddf3>
 80074c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80074c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074ca:	9611      	str	r6, [sp, #68]	; 0x44
 80074cc:	2c00      	cmp	r4, #0
 80074ce:	d15d      	bne.n	800758c <_dtoa_r+0x4ec>
 80074d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074d4:	2200      	movs	r2, #0
 80074d6:	4b5c      	ldr	r3, [pc, #368]	; (8007648 <_dtoa_r+0x5a8>)
 80074d8:	f7f8 fe50 	bl	800017c <__aeabi_dsub>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074e4:	4633      	mov	r3, r6
 80074e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074e8:	f7f9 fa90 	bl	8000a0c <__aeabi_dcmpgt>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	f040 8295 	bne.w	8007a1c <_dtoa_r+0x97c>
 80074f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80074fc:	f7f9 fa68 	bl	80009d0 <__aeabi_dcmplt>
 8007500:	2800      	cmp	r0, #0
 8007502:	f040 8289 	bne.w	8007a18 <_dtoa_r+0x978>
 8007506:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800750a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800750e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007510:	2b00      	cmp	r3, #0
 8007512:	f2c0 8151 	blt.w	80077b8 <_dtoa_r+0x718>
 8007516:	f1bb 0f0e 	cmp.w	fp, #14
 800751a:	f300 814d 	bgt.w	80077b8 <_dtoa_r+0x718>
 800751e:	4b45      	ldr	r3, [pc, #276]	; (8007634 <_dtoa_r+0x594>)
 8007520:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007524:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007528:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800752c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800752e:	2b00      	cmp	r3, #0
 8007530:	f280 80da 	bge.w	80076e8 <_dtoa_r+0x648>
 8007534:	9b08      	ldr	r3, [sp, #32]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f300 80d6 	bgt.w	80076e8 <_dtoa_r+0x648>
 800753c:	f040 826b 	bne.w	8007a16 <_dtoa_r+0x976>
 8007540:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007544:	2200      	movs	r2, #0
 8007546:	4b40      	ldr	r3, [pc, #256]	; (8007648 <_dtoa_r+0x5a8>)
 8007548:	f7f8 ffd0 	bl	80004ec <__aeabi_dmul>
 800754c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007550:	f7f9 fa52 	bl	80009f8 <__aeabi_dcmpge>
 8007554:	9c08      	ldr	r4, [sp, #32]
 8007556:	4626      	mov	r6, r4
 8007558:	2800      	cmp	r0, #0
 800755a:	f040 8241 	bne.w	80079e0 <_dtoa_r+0x940>
 800755e:	2331      	movs	r3, #49	; 0x31
 8007560:	9f03      	ldr	r7, [sp, #12]
 8007562:	f10b 0b01 	add.w	fp, fp, #1
 8007566:	f807 3b01 	strb.w	r3, [r7], #1
 800756a:	e23d      	b.n	80079e8 <_dtoa_r+0x948>
 800756c:	07e2      	lsls	r2, r4, #31
 800756e:	d505      	bpl.n	800757c <_dtoa_r+0x4dc>
 8007570:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007574:	f7f8 ffba 	bl	80004ec <__aeabi_dmul>
 8007578:	2301      	movs	r3, #1
 800757a:	3701      	adds	r7, #1
 800757c:	1064      	asrs	r4, r4, #1
 800757e:	3608      	adds	r6, #8
 8007580:	e76d      	b.n	800745e <_dtoa_r+0x3be>
 8007582:	2702      	movs	r7, #2
 8007584:	e770      	b.n	8007468 <_dtoa_r+0x3c8>
 8007586:	46d8      	mov	r8, fp
 8007588:	9c08      	ldr	r4, [sp, #32]
 800758a:	e78f      	b.n	80074ac <_dtoa_r+0x40c>
 800758c:	9903      	ldr	r1, [sp, #12]
 800758e:	4b29      	ldr	r3, [pc, #164]	; (8007634 <_dtoa_r+0x594>)
 8007590:	4421      	add	r1, r4
 8007592:	9112      	str	r1, [sp, #72]	; 0x48
 8007594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007596:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800759a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800759e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075a2:	2900      	cmp	r1, #0
 80075a4:	d054      	beq.n	8007650 <_dtoa_r+0x5b0>
 80075a6:	2000      	movs	r0, #0
 80075a8:	4928      	ldr	r1, [pc, #160]	; (800764c <_dtoa_r+0x5ac>)
 80075aa:	f7f9 f8c9 	bl	8000740 <__aeabi_ddiv>
 80075ae:	463b      	mov	r3, r7
 80075b0:	4632      	mov	r2, r6
 80075b2:	f7f8 fde3 	bl	800017c <__aeabi_dsub>
 80075b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075ba:	9f03      	ldr	r7, [sp, #12]
 80075bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075c0:	f7f9 fa44 	bl	8000a4c <__aeabi_d2iz>
 80075c4:	4604      	mov	r4, r0
 80075c6:	f7f8 ff27 	bl	8000418 <__aeabi_i2d>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075d2:	f7f8 fdd3 	bl	800017c <__aeabi_dsub>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	3430      	adds	r4, #48	; 0x30
 80075dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075e4:	f807 4b01 	strb.w	r4, [r7], #1
 80075e8:	f7f9 f9f2 	bl	80009d0 <__aeabi_dcmplt>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d173      	bne.n	80076d8 <_dtoa_r+0x638>
 80075f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075f4:	2000      	movs	r0, #0
 80075f6:	4911      	ldr	r1, [pc, #68]	; (800763c <_dtoa_r+0x59c>)
 80075f8:	f7f8 fdc0 	bl	800017c <__aeabi_dsub>
 80075fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007600:	f7f9 f9e6 	bl	80009d0 <__aeabi_dcmplt>
 8007604:	2800      	cmp	r0, #0
 8007606:	f040 80b6 	bne.w	8007776 <_dtoa_r+0x6d6>
 800760a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800760c:	429f      	cmp	r7, r3
 800760e:	f43f af7a 	beq.w	8007506 <_dtoa_r+0x466>
 8007612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007616:	2200      	movs	r2, #0
 8007618:	4b09      	ldr	r3, [pc, #36]	; (8007640 <_dtoa_r+0x5a0>)
 800761a:	f7f8 ff67 	bl	80004ec <__aeabi_dmul>
 800761e:	2200      	movs	r2, #0
 8007620:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <_dtoa_r+0x5a0>)
 800762a:	f7f8 ff5f 	bl	80004ec <__aeabi_dmul>
 800762e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007632:	e7c3      	b.n	80075bc <_dtoa_r+0x51c>
 8007634:	0800b248 	.word	0x0800b248
 8007638:	0800b220 	.word	0x0800b220
 800763c:	3ff00000 	.word	0x3ff00000
 8007640:	40240000 	.word	0x40240000
 8007644:	401c0000 	.word	0x401c0000
 8007648:	40140000 	.word	0x40140000
 800764c:	3fe00000 	.word	0x3fe00000
 8007650:	4630      	mov	r0, r6
 8007652:	4639      	mov	r1, r7
 8007654:	f7f8 ff4a 	bl	80004ec <__aeabi_dmul>
 8007658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800765a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800765e:	9c03      	ldr	r4, [sp, #12]
 8007660:	9314      	str	r3, [sp, #80]	; 0x50
 8007662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007666:	f7f9 f9f1 	bl	8000a4c <__aeabi_d2iz>
 800766a:	9015      	str	r0, [sp, #84]	; 0x54
 800766c:	f7f8 fed4 	bl	8000418 <__aeabi_i2d>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007678:	f7f8 fd80 	bl	800017c <__aeabi_dsub>
 800767c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800767e:	4606      	mov	r6, r0
 8007680:	3330      	adds	r3, #48	; 0x30
 8007682:	f804 3b01 	strb.w	r3, [r4], #1
 8007686:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007688:	460f      	mov	r7, r1
 800768a:	429c      	cmp	r4, r3
 800768c:	f04f 0200 	mov.w	r2, #0
 8007690:	d124      	bne.n	80076dc <_dtoa_r+0x63c>
 8007692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007696:	4baf      	ldr	r3, [pc, #700]	; (8007954 <_dtoa_r+0x8b4>)
 8007698:	f7f8 fd72 	bl	8000180 <__adddf3>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4630      	mov	r0, r6
 80076a2:	4639      	mov	r1, r7
 80076a4:	f7f9 f9b2 	bl	8000a0c <__aeabi_dcmpgt>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d163      	bne.n	8007774 <_dtoa_r+0x6d4>
 80076ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076b0:	2000      	movs	r0, #0
 80076b2:	49a8      	ldr	r1, [pc, #672]	; (8007954 <_dtoa_r+0x8b4>)
 80076b4:	f7f8 fd62 	bl	800017c <__aeabi_dsub>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	4630      	mov	r0, r6
 80076be:	4639      	mov	r1, r7
 80076c0:	f7f9 f986 	bl	80009d0 <__aeabi_dcmplt>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	f43f af1e 	beq.w	8007506 <_dtoa_r+0x466>
 80076ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80076cc:	1e7b      	subs	r3, r7, #1
 80076ce:	9314      	str	r3, [sp, #80]	; 0x50
 80076d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80076d4:	2b30      	cmp	r3, #48	; 0x30
 80076d6:	d0f8      	beq.n	80076ca <_dtoa_r+0x62a>
 80076d8:	46c3      	mov	fp, r8
 80076da:	e03b      	b.n	8007754 <_dtoa_r+0x6b4>
 80076dc:	4b9e      	ldr	r3, [pc, #632]	; (8007958 <_dtoa_r+0x8b8>)
 80076de:	f7f8 ff05 	bl	80004ec <__aeabi_dmul>
 80076e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076e6:	e7bc      	b.n	8007662 <_dtoa_r+0x5c2>
 80076e8:	9f03      	ldr	r7, [sp, #12]
 80076ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80076ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076f2:	4640      	mov	r0, r8
 80076f4:	4649      	mov	r1, r9
 80076f6:	f7f9 f823 	bl	8000740 <__aeabi_ddiv>
 80076fa:	f7f9 f9a7 	bl	8000a4c <__aeabi_d2iz>
 80076fe:	4604      	mov	r4, r0
 8007700:	f7f8 fe8a 	bl	8000418 <__aeabi_i2d>
 8007704:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007708:	f7f8 fef0 	bl	80004ec <__aeabi_dmul>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4640      	mov	r0, r8
 8007712:	4649      	mov	r1, r9
 8007714:	f7f8 fd32 	bl	800017c <__aeabi_dsub>
 8007718:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800771c:	f807 6b01 	strb.w	r6, [r7], #1
 8007720:	9e03      	ldr	r6, [sp, #12]
 8007722:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007726:	1bbe      	subs	r6, r7, r6
 8007728:	45b4      	cmp	ip, r6
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	d136      	bne.n	800779e <_dtoa_r+0x6fe>
 8007730:	f7f8 fd26 	bl	8000180 <__adddf3>
 8007734:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007738:	4680      	mov	r8, r0
 800773a:	4689      	mov	r9, r1
 800773c:	f7f9 f966 	bl	8000a0c <__aeabi_dcmpgt>
 8007740:	bb58      	cbnz	r0, 800779a <_dtoa_r+0x6fa>
 8007742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007746:	4640      	mov	r0, r8
 8007748:	4649      	mov	r1, r9
 800774a:	f7f9 f937 	bl	80009bc <__aeabi_dcmpeq>
 800774e:	b108      	cbz	r0, 8007754 <_dtoa_r+0x6b4>
 8007750:	07e3      	lsls	r3, r4, #31
 8007752:	d422      	bmi.n	800779a <_dtoa_r+0x6fa>
 8007754:	4651      	mov	r1, sl
 8007756:	4628      	mov	r0, r5
 8007758:	f000 fbc2 	bl	8007ee0 <_Bfree>
 800775c:	2300      	movs	r3, #0
 800775e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007760:	703b      	strb	r3, [r7, #0]
 8007762:	f10b 0301 	add.w	r3, fp, #1
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800776a:	2b00      	cmp	r3, #0
 800776c:	f43f ace6 	beq.w	800713c <_dtoa_r+0x9c>
 8007770:	601f      	str	r7, [r3, #0]
 8007772:	e4e3      	b.n	800713c <_dtoa_r+0x9c>
 8007774:	4627      	mov	r7, r4
 8007776:	463b      	mov	r3, r7
 8007778:	461f      	mov	r7, r3
 800777a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800777e:	2a39      	cmp	r2, #57	; 0x39
 8007780:	d107      	bne.n	8007792 <_dtoa_r+0x6f2>
 8007782:	9a03      	ldr	r2, [sp, #12]
 8007784:	429a      	cmp	r2, r3
 8007786:	d1f7      	bne.n	8007778 <_dtoa_r+0x6d8>
 8007788:	2230      	movs	r2, #48	; 0x30
 800778a:	9903      	ldr	r1, [sp, #12]
 800778c:	f108 0801 	add.w	r8, r8, #1
 8007790:	700a      	strb	r2, [r1, #0]
 8007792:	781a      	ldrb	r2, [r3, #0]
 8007794:	3201      	adds	r2, #1
 8007796:	701a      	strb	r2, [r3, #0]
 8007798:	e79e      	b.n	80076d8 <_dtoa_r+0x638>
 800779a:	46d8      	mov	r8, fp
 800779c:	e7eb      	b.n	8007776 <_dtoa_r+0x6d6>
 800779e:	2200      	movs	r2, #0
 80077a0:	4b6d      	ldr	r3, [pc, #436]	; (8007958 <_dtoa_r+0x8b8>)
 80077a2:	f7f8 fea3 	bl	80004ec <__aeabi_dmul>
 80077a6:	2200      	movs	r2, #0
 80077a8:	2300      	movs	r3, #0
 80077aa:	4680      	mov	r8, r0
 80077ac:	4689      	mov	r9, r1
 80077ae:	f7f9 f905 	bl	80009bc <__aeabi_dcmpeq>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d09b      	beq.n	80076ee <_dtoa_r+0x64e>
 80077b6:	e7cd      	b.n	8007754 <_dtoa_r+0x6b4>
 80077b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077ba:	2a00      	cmp	r2, #0
 80077bc:	f000 80c4 	beq.w	8007948 <_dtoa_r+0x8a8>
 80077c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80077c2:	2a01      	cmp	r2, #1
 80077c4:	f300 80a8 	bgt.w	8007918 <_dtoa_r+0x878>
 80077c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077ca:	2a00      	cmp	r2, #0
 80077cc:	f000 80a0 	beq.w	8007910 <_dtoa_r+0x870>
 80077d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077d4:	464f      	mov	r7, r9
 80077d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077da:	2101      	movs	r1, #1
 80077dc:	441a      	add	r2, r3
 80077de:	4628      	mov	r0, r5
 80077e0:	4499      	add	r9, r3
 80077e2:	9209      	str	r2, [sp, #36]	; 0x24
 80077e4:	f000 fc7c 	bl	80080e0 <__i2b>
 80077e8:	4606      	mov	r6, r0
 80077ea:	b15f      	cbz	r7, 8007804 <_dtoa_r+0x764>
 80077ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	dd08      	ble.n	8007804 <_dtoa_r+0x764>
 80077f2:	42bb      	cmp	r3, r7
 80077f4:	bfa8      	it	ge
 80077f6:	463b      	movge	r3, r7
 80077f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077fa:	eba9 0903 	sub.w	r9, r9, r3
 80077fe:	1aff      	subs	r7, r7, r3
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	9309      	str	r3, [sp, #36]	; 0x24
 8007804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007806:	b1f3      	cbz	r3, 8007846 <_dtoa_r+0x7a6>
 8007808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 80a0 	beq.w	8007950 <_dtoa_r+0x8b0>
 8007810:	2c00      	cmp	r4, #0
 8007812:	dd10      	ble.n	8007836 <_dtoa_r+0x796>
 8007814:	4631      	mov	r1, r6
 8007816:	4622      	mov	r2, r4
 8007818:	4628      	mov	r0, r5
 800781a:	f000 fd1f 	bl	800825c <__pow5mult>
 800781e:	4652      	mov	r2, sl
 8007820:	4601      	mov	r1, r0
 8007822:	4606      	mov	r6, r0
 8007824:	4628      	mov	r0, r5
 8007826:	f000 fc71 	bl	800810c <__multiply>
 800782a:	4680      	mov	r8, r0
 800782c:	4651      	mov	r1, sl
 800782e:	4628      	mov	r0, r5
 8007830:	f000 fb56 	bl	8007ee0 <_Bfree>
 8007834:	46c2      	mov	sl, r8
 8007836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007838:	1b1a      	subs	r2, r3, r4
 800783a:	d004      	beq.n	8007846 <_dtoa_r+0x7a6>
 800783c:	4651      	mov	r1, sl
 800783e:	4628      	mov	r0, r5
 8007840:	f000 fd0c 	bl	800825c <__pow5mult>
 8007844:	4682      	mov	sl, r0
 8007846:	2101      	movs	r1, #1
 8007848:	4628      	mov	r0, r5
 800784a:	f000 fc49 	bl	80080e0 <__i2b>
 800784e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007850:	4604      	mov	r4, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	f340 8082 	ble.w	800795c <_dtoa_r+0x8bc>
 8007858:	461a      	mov	r2, r3
 800785a:	4601      	mov	r1, r0
 800785c:	4628      	mov	r0, r5
 800785e:	f000 fcfd 	bl	800825c <__pow5mult>
 8007862:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007864:	4604      	mov	r4, r0
 8007866:	2b01      	cmp	r3, #1
 8007868:	dd7b      	ble.n	8007962 <_dtoa_r+0x8c2>
 800786a:	f04f 0800 	mov.w	r8, #0
 800786e:	6923      	ldr	r3, [r4, #16]
 8007870:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007874:	6918      	ldr	r0, [r3, #16]
 8007876:	f000 fbe5 	bl	8008044 <__hi0bits>
 800787a:	f1c0 0020 	rsb	r0, r0, #32
 800787e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007880:	4418      	add	r0, r3
 8007882:	f010 001f 	ands.w	r0, r0, #31
 8007886:	f000 8092 	beq.w	80079ae <_dtoa_r+0x90e>
 800788a:	f1c0 0320 	rsb	r3, r0, #32
 800788e:	2b04      	cmp	r3, #4
 8007890:	f340 8085 	ble.w	800799e <_dtoa_r+0x8fe>
 8007894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007896:	f1c0 001c 	rsb	r0, r0, #28
 800789a:	4403      	add	r3, r0
 800789c:	4481      	add	r9, r0
 800789e:	4407      	add	r7, r0
 80078a0:	9309      	str	r3, [sp, #36]	; 0x24
 80078a2:	f1b9 0f00 	cmp.w	r9, #0
 80078a6:	dd05      	ble.n	80078b4 <_dtoa_r+0x814>
 80078a8:	4651      	mov	r1, sl
 80078aa:	464a      	mov	r2, r9
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 fd2f 	bl	8008310 <__lshift>
 80078b2:	4682      	mov	sl, r0
 80078b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	dd05      	ble.n	80078c6 <_dtoa_r+0x826>
 80078ba:	4621      	mov	r1, r4
 80078bc:	461a      	mov	r2, r3
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 fd26 	bl	8008310 <__lshift>
 80078c4:	4604      	mov	r4, r0
 80078c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d072      	beq.n	80079b2 <_dtoa_r+0x912>
 80078cc:	4621      	mov	r1, r4
 80078ce:	4650      	mov	r0, sl
 80078d0:	f000 fd8a 	bl	80083e8 <__mcmp>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	da6c      	bge.n	80079b2 <_dtoa_r+0x912>
 80078d8:	2300      	movs	r3, #0
 80078da:	4651      	mov	r1, sl
 80078dc:	220a      	movs	r2, #10
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 fb20 	bl	8007f24 <__multadd>
 80078e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078e6:	4682      	mov	sl, r0
 80078e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 81ac 	beq.w	8007c4a <_dtoa_r+0xbaa>
 80078f2:	2300      	movs	r3, #0
 80078f4:	4631      	mov	r1, r6
 80078f6:	220a      	movs	r2, #10
 80078f8:	4628      	mov	r0, r5
 80078fa:	f000 fb13 	bl	8007f24 <__multadd>
 80078fe:	9b06      	ldr	r3, [sp, #24]
 8007900:	4606      	mov	r6, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	f300 8093 	bgt.w	8007a2e <_dtoa_r+0x98e>
 8007908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800790a:	2b02      	cmp	r3, #2
 800790c:	dc59      	bgt.n	80079c2 <_dtoa_r+0x922>
 800790e:	e08e      	b.n	8007a2e <_dtoa_r+0x98e>
 8007910:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007912:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007916:	e75d      	b.n	80077d4 <_dtoa_r+0x734>
 8007918:	9b08      	ldr	r3, [sp, #32]
 800791a:	1e5c      	subs	r4, r3, #1
 800791c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800791e:	42a3      	cmp	r3, r4
 8007920:	bfbf      	itttt	lt
 8007922:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007924:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007926:	1ae3      	sublt	r3, r4, r3
 8007928:	18d2      	addlt	r2, r2, r3
 800792a:	bfa8      	it	ge
 800792c:	1b1c      	subge	r4, r3, r4
 800792e:	9b08      	ldr	r3, [sp, #32]
 8007930:	bfbe      	ittt	lt
 8007932:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007934:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007936:	2400      	movlt	r4, #0
 8007938:	2b00      	cmp	r3, #0
 800793a:	bfb5      	itete	lt
 800793c:	eba9 0703 	sublt.w	r7, r9, r3
 8007940:	464f      	movge	r7, r9
 8007942:	2300      	movlt	r3, #0
 8007944:	9b08      	ldrge	r3, [sp, #32]
 8007946:	e747      	b.n	80077d8 <_dtoa_r+0x738>
 8007948:	464f      	mov	r7, r9
 800794a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800794c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800794e:	e74c      	b.n	80077ea <_dtoa_r+0x74a>
 8007950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007952:	e773      	b.n	800783c <_dtoa_r+0x79c>
 8007954:	3fe00000 	.word	0x3fe00000
 8007958:	40240000 	.word	0x40240000
 800795c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800795e:	2b01      	cmp	r3, #1
 8007960:	dc18      	bgt.n	8007994 <_dtoa_r+0x8f4>
 8007962:	9b04      	ldr	r3, [sp, #16]
 8007964:	b9b3      	cbnz	r3, 8007994 <_dtoa_r+0x8f4>
 8007966:	9b05      	ldr	r3, [sp, #20]
 8007968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800796c:	b993      	cbnz	r3, 8007994 <_dtoa_r+0x8f4>
 800796e:	9b05      	ldr	r3, [sp, #20]
 8007970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007974:	0d1b      	lsrs	r3, r3, #20
 8007976:	051b      	lsls	r3, r3, #20
 8007978:	b17b      	cbz	r3, 800799a <_dtoa_r+0x8fa>
 800797a:	f04f 0801 	mov.w	r8, #1
 800797e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007980:	f109 0901 	add.w	r9, r9, #1
 8007984:	3301      	adds	r3, #1
 8007986:	9309      	str	r3, [sp, #36]	; 0x24
 8007988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800798a:	2b00      	cmp	r3, #0
 800798c:	f47f af6f 	bne.w	800786e <_dtoa_r+0x7ce>
 8007990:	2001      	movs	r0, #1
 8007992:	e774      	b.n	800787e <_dtoa_r+0x7de>
 8007994:	f04f 0800 	mov.w	r8, #0
 8007998:	e7f6      	b.n	8007988 <_dtoa_r+0x8e8>
 800799a:	4698      	mov	r8, r3
 800799c:	e7f4      	b.n	8007988 <_dtoa_r+0x8e8>
 800799e:	d080      	beq.n	80078a2 <_dtoa_r+0x802>
 80079a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079a2:	331c      	adds	r3, #28
 80079a4:	441a      	add	r2, r3
 80079a6:	4499      	add	r9, r3
 80079a8:	441f      	add	r7, r3
 80079aa:	9209      	str	r2, [sp, #36]	; 0x24
 80079ac:	e779      	b.n	80078a2 <_dtoa_r+0x802>
 80079ae:	4603      	mov	r3, r0
 80079b0:	e7f6      	b.n	80079a0 <_dtoa_r+0x900>
 80079b2:	9b08      	ldr	r3, [sp, #32]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	dc34      	bgt.n	8007a22 <_dtoa_r+0x982>
 80079b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	dd31      	ble.n	8007a22 <_dtoa_r+0x982>
 80079be:	9b08      	ldr	r3, [sp, #32]
 80079c0:	9306      	str	r3, [sp, #24]
 80079c2:	9b06      	ldr	r3, [sp, #24]
 80079c4:	b963      	cbnz	r3, 80079e0 <_dtoa_r+0x940>
 80079c6:	4621      	mov	r1, r4
 80079c8:	2205      	movs	r2, #5
 80079ca:	4628      	mov	r0, r5
 80079cc:	f000 faaa 	bl	8007f24 <__multadd>
 80079d0:	4601      	mov	r1, r0
 80079d2:	4604      	mov	r4, r0
 80079d4:	4650      	mov	r0, sl
 80079d6:	f000 fd07 	bl	80083e8 <__mcmp>
 80079da:	2800      	cmp	r0, #0
 80079dc:	f73f adbf 	bgt.w	800755e <_dtoa_r+0x4be>
 80079e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079e2:	9f03      	ldr	r7, [sp, #12]
 80079e4:	ea6f 0b03 	mvn.w	fp, r3
 80079e8:	f04f 0800 	mov.w	r8, #0
 80079ec:	4621      	mov	r1, r4
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 fa76 	bl	8007ee0 <_Bfree>
 80079f4:	2e00      	cmp	r6, #0
 80079f6:	f43f aead 	beq.w	8007754 <_dtoa_r+0x6b4>
 80079fa:	f1b8 0f00 	cmp.w	r8, #0
 80079fe:	d005      	beq.n	8007a0c <_dtoa_r+0x96c>
 8007a00:	45b0      	cmp	r8, r6
 8007a02:	d003      	beq.n	8007a0c <_dtoa_r+0x96c>
 8007a04:	4641      	mov	r1, r8
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 fa6a 	bl	8007ee0 <_Bfree>
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f000 fa66 	bl	8007ee0 <_Bfree>
 8007a14:	e69e      	b.n	8007754 <_dtoa_r+0x6b4>
 8007a16:	2400      	movs	r4, #0
 8007a18:	4626      	mov	r6, r4
 8007a1a:	e7e1      	b.n	80079e0 <_dtoa_r+0x940>
 8007a1c:	46c3      	mov	fp, r8
 8007a1e:	4626      	mov	r6, r4
 8007a20:	e59d      	b.n	800755e <_dtoa_r+0x4be>
 8007a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 80c8 	beq.w	8007bba <_dtoa_r+0xb1a>
 8007a2a:	9b08      	ldr	r3, [sp, #32]
 8007a2c:	9306      	str	r3, [sp, #24]
 8007a2e:	2f00      	cmp	r7, #0
 8007a30:	dd05      	ble.n	8007a3e <_dtoa_r+0x99e>
 8007a32:	4631      	mov	r1, r6
 8007a34:	463a      	mov	r2, r7
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 fc6a 	bl	8008310 <__lshift>
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	f1b8 0f00 	cmp.w	r8, #0
 8007a42:	d05b      	beq.n	8007afc <_dtoa_r+0xa5c>
 8007a44:	4628      	mov	r0, r5
 8007a46:	6871      	ldr	r1, [r6, #4]
 8007a48:	f000 fa0a 	bl	8007e60 <_Balloc>
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	b928      	cbnz	r0, 8007a5c <_dtoa_r+0x9bc>
 8007a50:	4602      	mov	r2, r0
 8007a52:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007a56:	4b81      	ldr	r3, [pc, #516]	; (8007c5c <_dtoa_r+0xbbc>)
 8007a58:	f7ff bb36 	b.w	80070c8 <_dtoa_r+0x28>
 8007a5c:	6932      	ldr	r2, [r6, #16]
 8007a5e:	f106 010c 	add.w	r1, r6, #12
 8007a62:	3202      	adds	r2, #2
 8007a64:	0092      	lsls	r2, r2, #2
 8007a66:	300c      	adds	r0, #12
 8007a68:	f002 fb14 	bl	800a094 <memcpy>
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	4639      	mov	r1, r7
 8007a70:	4628      	mov	r0, r5
 8007a72:	f000 fc4d 	bl	8008310 <__lshift>
 8007a76:	46b0      	mov	r8, r6
 8007a78:	4606      	mov	r6, r0
 8007a7a:	9b03      	ldr	r3, [sp, #12]
 8007a7c:	9a03      	ldr	r2, [sp, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	9308      	str	r3, [sp, #32]
 8007a82:	9b06      	ldr	r3, [sp, #24]
 8007a84:	4413      	add	r3, r2
 8007a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a88:	9b04      	ldr	r3, [sp, #16]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a90:	9b08      	ldr	r3, [sp, #32]
 8007a92:	4621      	mov	r1, r4
 8007a94:	3b01      	subs	r3, #1
 8007a96:	4650      	mov	r0, sl
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	f7ff fa77 	bl	8006f8c <quorem>
 8007a9e:	4641      	mov	r1, r8
 8007aa0:	9006      	str	r0, [sp, #24]
 8007aa2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007aa6:	4650      	mov	r0, sl
 8007aa8:	f000 fc9e 	bl	80083e8 <__mcmp>
 8007aac:	4632      	mov	r2, r6
 8007aae:	9009      	str	r0, [sp, #36]	; 0x24
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f000 fcb4 	bl	8008420 <__mdiff>
 8007ab8:	68c2      	ldr	r2, [r0, #12]
 8007aba:	4607      	mov	r7, r0
 8007abc:	bb02      	cbnz	r2, 8007b00 <_dtoa_r+0xa60>
 8007abe:	4601      	mov	r1, r0
 8007ac0:	4650      	mov	r0, sl
 8007ac2:	f000 fc91 	bl	80083e8 <__mcmp>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	4639      	mov	r1, r7
 8007aca:	4628      	mov	r0, r5
 8007acc:	920c      	str	r2, [sp, #48]	; 0x30
 8007ace:	f000 fa07 	bl	8007ee0 <_Bfree>
 8007ad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad6:	9f08      	ldr	r7, [sp, #32]
 8007ad8:	ea43 0102 	orr.w	r1, r3, r2
 8007adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ade:	4319      	orrs	r1, r3
 8007ae0:	d110      	bne.n	8007b04 <_dtoa_r+0xa64>
 8007ae2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ae6:	d029      	beq.n	8007b3c <_dtoa_r+0xa9c>
 8007ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	dd02      	ble.n	8007af4 <_dtoa_r+0xa54>
 8007aee:	9b06      	ldr	r3, [sp, #24]
 8007af0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	f883 9000 	strb.w	r9, [r3]
 8007afa:	e777      	b.n	80079ec <_dtoa_r+0x94c>
 8007afc:	4630      	mov	r0, r6
 8007afe:	e7ba      	b.n	8007a76 <_dtoa_r+0x9d6>
 8007b00:	2201      	movs	r2, #1
 8007b02:	e7e1      	b.n	8007ac8 <_dtoa_r+0xa28>
 8007b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	db04      	blt.n	8007b14 <_dtoa_r+0xa74>
 8007b0a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b10:	430b      	orrs	r3, r1
 8007b12:	d120      	bne.n	8007b56 <_dtoa_r+0xab6>
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	dded      	ble.n	8007af4 <_dtoa_r+0xa54>
 8007b18:	4651      	mov	r1, sl
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f000 fbf7 	bl	8008310 <__lshift>
 8007b22:	4621      	mov	r1, r4
 8007b24:	4682      	mov	sl, r0
 8007b26:	f000 fc5f 	bl	80083e8 <__mcmp>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	dc03      	bgt.n	8007b36 <_dtoa_r+0xa96>
 8007b2e:	d1e1      	bne.n	8007af4 <_dtoa_r+0xa54>
 8007b30:	f019 0f01 	tst.w	r9, #1
 8007b34:	d0de      	beq.n	8007af4 <_dtoa_r+0xa54>
 8007b36:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b3a:	d1d8      	bne.n	8007aee <_dtoa_r+0xa4e>
 8007b3c:	2339      	movs	r3, #57	; 0x39
 8007b3e:	9a04      	ldr	r2, [sp, #16]
 8007b40:	7013      	strb	r3, [r2, #0]
 8007b42:	463b      	mov	r3, r7
 8007b44:	461f      	mov	r7, r3
 8007b46:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	2a39      	cmp	r2, #57	; 0x39
 8007b4e:	d06b      	beq.n	8007c28 <_dtoa_r+0xb88>
 8007b50:	3201      	adds	r2, #1
 8007b52:	701a      	strb	r2, [r3, #0]
 8007b54:	e74a      	b.n	80079ec <_dtoa_r+0x94c>
 8007b56:	2a00      	cmp	r2, #0
 8007b58:	dd07      	ble.n	8007b6a <_dtoa_r+0xaca>
 8007b5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b5e:	d0ed      	beq.n	8007b3c <_dtoa_r+0xa9c>
 8007b60:	9a04      	ldr	r2, [sp, #16]
 8007b62:	f109 0301 	add.w	r3, r9, #1
 8007b66:	7013      	strb	r3, [r2, #0]
 8007b68:	e740      	b.n	80079ec <_dtoa_r+0x94c>
 8007b6a:	9b08      	ldr	r3, [sp, #32]
 8007b6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b6e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d042      	beq.n	8007bfc <_dtoa_r+0xb5c>
 8007b76:	4651      	mov	r1, sl
 8007b78:	2300      	movs	r3, #0
 8007b7a:	220a      	movs	r2, #10
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f000 f9d1 	bl	8007f24 <__multadd>
 8007b82:	45b0      	cmp	r8, r6
 8007b84:	4682      	mov	sl, r0
 8007b86:	f04f 0300 	mov.w	r3, #0
 8007b8a:	f04f 020a 	mov.w	r2, #10
 8007b8e:	4641      	mov	r1, r8
 8007b90:	4628      	mov	r0, r5
 8007b92:	d107      	bne.n	8007ba4 <_dtoa_r+0xb04>
 8007b94:	f000 f9c6 	bl	8007f24 <__multadd>
 8007b98:	4680      	mov	r8, r0
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	9b08      	ldr	r3, [sp, #32]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	9308      	str	r3, [sp, #32]
 8007ba2:	e775      	b.n	8007a90 <_dtoa_r+0x9f0>
 8007ba4:	f000 f9be 	bl	8007f24 <__multadd>
 8007ba8:	4631      	mov	r1, r6
 8007baa:	4680      	mov	r8, r0
 8007bac:	2300      	movs	r3, #0
 8007bae:	220a      	movs	r2, #10
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f000 f9b7 	bl	8007f24 <__multadd>
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	e7f0      	b.n	8007b9c <_dtoa_r+0xafc>
 8007bba:	9b08      	ldr	r3, [sp, #32]
 8007bbc:	9306      	str	r3, [sp, #24]
 8007bbe:	9f03      	ldr	r7, [sp, #12]
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4650      	mov	r0, sl
 8007bc4:	f7ff f9e2 	bl	8006f8c <quorem>
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007bce:	f807 9b01 	strb.w	r9, [r7], #1
 8007bd2:	1afa      	subs	r2, r7, r3
 8007bd4:	9b06      	ldr	r3, [sp, #24]
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	dd07      	ble.n	8007bea <_dtoa_r+0xb4a>
 8007bda:	4651      	mov	r1, sl
 8007bdc:	2300      	movs	r3, #0
 8007bde:	220a      	movs	r2, #10
 8007be0:	4628      	mov	r0, r5
 8007be2:	f000 f99f 	bl	8007f24 <__multadd>
 8007be6:	4682      	mov	sl, r0
 8007be8:	e7ea      	b.n	8007bc0 <_dtoa_r+0xb20>
 8007bea:	9b06      	ldr	r3, [sp, #24]
 8007bec:	f04f 0800 	mov.w	r8, #0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bfcc      	ite	gt
 8007bf4:	461f      	movgt	r7, r3
 8007bf6:	2701      	movle	r7, #1
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	441f      	add	r7, r3
 8007bfc:	4651      	mov	r1, sl
 8007bfe:	2201      	movs	r2, #1
 8007c00:	4628      	mov	r0, r5
 8007c02:	f000 fb85 	bl	8008310 <__lshift>
 8007c06:	4621      	mov	r1, r4
 8007c08:	4682      	mov	sl, r0
 8007c0a:	f000 fbed 	bl	80083e8 <__mcmp>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	dc97      	bgt.n	8007b42 <_dtoa_r+0xaa2>
 8007c12:	d102      	bne.n	8007c1a <_dtoa_r+0xb7a>
 8007c14:	f019 0f01 	tst.w	r9, #1
 8007c18:	d193      	bne.n	8007b42 <_dtoa_r+0xaa2>
 8007c1a:	463b      	mov	r3, r7
 8007c1c:	461f      	mov	r7, r3
 8007c1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c22:	2a30      	cmp	r2, #48	; 0x30
 8007c24:	d0fa      	beq.n	8007c1c <_dtoa_r+0xb7c>
 8007c26:	e6e1      	b.n	80079ec <_dtoa_r+0x94c>
 8007c28:	9a03      	ldr	r2, [sp, #12]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d18a      	bne.n	8007b44 <_dtoa_r+0xaa4>
 8007c2e:	2331      	movs	r3, #49	; 0x31
 8007c30:	f10b 0b01 	add.w	fp, fp, #1
 8007c34:	e797      	b.n	8007b66 <_dtoa_r+0xac6>
 8007c36:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <_dtoa_r+0xbc0>)
 8007c38:	f7ff ba9f 	b.w	800717a <_dtoa_r+0xda>
 8007c3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f47f aa77 	bne.w	8007132 <_dtoa_r+0x92>
 8007c44:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <_dtoa_r+0xbc4>)
 8007c46:	f7ff ba98 	b.w	800717a <_dtoa_r+0xda>
 8007c4a:	9b06      	ldr	r3, [sp, #24]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dcb6      	bgt.n	8007bbe <_dtoa_r+0xb1e>
 8007c50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	f73f aeb5 	bgt.w	80079c2 <_dtoa_r+0x922>
 8007c58:	e7b1      	b.n	8007bbe <_dtoa_r+0xb1e>
 8007c5a:	bf00      	nop
 8007c5c:	0800b1af 	.word	0x0800b1af
 8007c60:	0800b498 	.word	0x0800b498
 8007c64:	0800b14a 	.word	0x0800b14a

08007c68 <_free_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	d040      	beq.n	8007cf2 <_free_r+0x8a>
 8007c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c74:	1f0c      	subs	r4, r1, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bfb8      	it	lt
 8007c7a:	18e4      	addlt	r4, r4, r3
 8007c7c:	f000 f8e4 	bl	8007e48 <__malloc_lock>
 8007c80:	4a1c      	ldr	r2, [pc, #112]	; (8007cf4 <_free_r+0x8c>)
 8007c82:	6813      	ldr	r3, [r2, #0]
 8007c84:	b933      	cbnz	r3, 8007c94 <_free_r+0x2c>
 8007c86:	6063      	str	r3, [r4, #4]
 8007c88:	6014      	str	r4, [r2, #0]
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c90:	f000 b8e0 	b.w	8007e54 <__malloc_unlock>
 8007c94:	42a3      	cmp	r3, r4
 8007c96:	d908      	bls.n	8007caa <_free_r+0x42>
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	1821      	adds	r1, r4, r0
 8007c9c:	428b      	cmp	r3, r1
 8007c9e:	bf01      	itttt	eq
 8007ca0:	6819      	ldreq	r1, [r3, #0]
 8007ca2:	685b      	ldreq	r3, [r3, #4]
 8007ca4:	1809      	addeq	r1, r1, r0
 8007ca6:	6021      	streq	r1, [r4, #0]
 8007ca8:	e7ed      	b.n	8007c86 <_free_r+0x1e>
 8007caa:	461a      	mov	r2, r3
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	b10b      	cbz	r3, 8007cb4 <_free_r+0x4c>
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	d9fa      	bls.n	8007caa <_free_r+0x42>
 8007cb4:	6811      	ldr	r1, [r2, #0]
 8007cb6:	1850      	adds	r0, r2, r1
 8007cb8:	42a0      	cmp	r0, r4
 8007cba:	d10b      	bne.n	8007cd4 <_free_r+0x6c>
 8007cbc:	6820      	ldr	r0, [r4, #0]
 8007cbe:	4401      	add	r1, r0
 8007cc0:	1850      	adds	r0, r2, r1
 8007cc2:	4283      	cmp	r3, r0
 8007cc4:	6011      	str	r1, [r2, #0]
 8007cc6:	d1e0      	bne.n	8007c8a <_free_r+0x22>
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	4408      	add	r0, r1
 8007cce:	6010      	str	r0, [r2, #0]
 8007cd0:	6053      	str	r3, [r2, #4]
 8007cd2:	e7da      	b.n	8007c8a <_free_r+0x22>
 8007cd4:	d902      	bls.n	8007cdc <_free_r+0x74>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	602b      	str	r3, [r5, #0]
 8007cda:	e7d6      	b.n	8007c8a <_free_r+0x22>
 8007cdc:	6820      	ldr	r0, [r4, #0]
 8007cde:	1821      	adds	r1, r4, r0
 8007ce0:	428b      	cmp	r3, r1
 8007ce2:	bf01      	itttt	eq
 8007ce4:	6819      	ldreq	r1, [r3, #0]
 8007ce6:	685b      	ldreq	r3, [r3, #4]
 8007ce8:	1809      	addeq	r1, r1, r0
 8007cea:	6021      	streq	r1, [r4, #0]
 8007cec:	6063      	str	r3, [r4, #4]
 8007cee:	6054      	str	r4, [r2, #4]
 8007cf0:	e7cb      	b.n	8007c8a <_free_r+0x22>
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	200005c4 	.word	0x200005c4

08007cf8 <malloc>:
 8007cf8:	4b02      	ldr	r3, [pc, #8]	; (8007d04 <malloc+0xc>)
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	f000 b823 	b.w	8007d48 <_malloc_r>
 8007d02:	bf00      	nop
 8007d04:	2000008c 	.word	0x2000008c

08007d08 <sbrk_aligned>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	4e0e      	ldr	r6, [pc, #56]	; (8007d44 <sbrk_aligned+0x3c>)
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	6831      	ldr	r1, [r6, #0]
 8007d10:	4605      	mov	r5, r0
 8007d12:	b911      	cbnz	r1, 8007d1a <sbrk_aligned+0x12>
 8007d14:	f002 f9ae 	bl	800a074 <_sbrk_r>
 8007d18:	6030      	str	r0, [r6, #0]
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f002 f9a9 	bl	800a074 <_sbrk_r>
 8007d22:	1c43      	adds	r3, r0, #1
 8007d24:	d00a      	beq.n	8007d3c <sbrk_aligned+0x34>
 8007d26:	1cc4      	adds	r4, r0, #3
 8007d28:	f024 0403 	bic.w	r4, r4, #3
 8007d2c:	42a0      	cmp	r0, r4
 8007d2e:	d007      	beq.n	8007d40 <sbrk_aligned+0x38>
 8007d30:	1a21      	subs	r1, r4, r0
 8007d32:	4628      	mov	r0, r5
 8007d34:	f002 f99e 	bl	800a074 <_sbrk_r>
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d101      	bne.n	8007d40 <sbrk_aligned+0x38>
 8007d3c:	f04f 34ff 	mov.w	r4, #4294967295
 8007d40:	4620      	mov	r0, r4
 8007d42:	bd70      	pop	{r4, r5, r6, pc}
 8007d44:	200005c8 	.word	0x200005c8

08007d48 <_malloc_r>:
 8007d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d4c:	1ccd      	adds	r5, r1, #3
 8007d4e:	f025 0503 	bic.w	r5, r5, #3
 8007d52:	3508      	adds	r5, #8
 8007d54:	2d0c      	cmp	r5, #12
 8007d56:	bf38      	it	cc
 8007d58:	250c      	movcc	r5, #12
 8007d5a:	2d00      	cmp	r5, #0
 8007d5c:	4607      	mov	r7, r0
 8007d5e:	db01      	blt.n	8007d64 <_malloc_r+0x1c>
 8007d60:	42a9      	cmp	r1, r5
 8007d62:	d905      	bls.n	8007d70 <_malloc_r+0x28>
 8007d64:	230c      	movs	r3, #12
 8007d66:	2600      	movs	r6, #0
 8007d68:	603b      	str	r3, [r7, #0]
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e44 <_malloc_r+0xfc>
 8007d74:	f000 f868 	bl	8007e48 <__malloc_lock>
 8007d78:	f8d8 3000 	ldr.w	r3, [r8]
 8007d7c:	461c      	mov	r4, r3
 8007d7e:	bb5c      	cbnz	r4, 8007dd8 <_malloc_r+0x90>
 8007d80:	4629      	mov	r1, r5
 8007d82:	4638      	mov	r0, r7
 8007d84:	f7ff ffc0 	bl	8007d08 <sbrk_aligned>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	d155      	bne.n	8007e3a <_malloc_r+0xf2>
 8007d8e:	f8d8 4000 	ldr.w	r4, [r8]
 8007d92:	4626      	mov	r6, r4
 8007d94:	2e00      	cmp	r6, #0
 8007d96:	d145      	bne.n	8007e24 <_malloc_r+0xdc>
 8007d98:	2c00      	cmp	r4, #0
 8007d9a:	d048      	beq.n	8007e2e <_malloc_r+0xe6>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4638      	mov	r0, r7
 8007da2:	eb04 0903 	add.w	r9, r4, r3
 8007da6:	f002 f965 	bl	800a074 <_sbrk_r>
 8007daa:	4581      	cmp	r9, r0
 8007dac:	d13f      	bne.n	8007e2e <_malloc_r+0xe6>
 8007dae:	6821      	ldr	r1, [r4, #0]
 8007db0:	4638      	mov	r0, r7
 8007db2:	1a6d      	subs	r5, r5, r1
 8007db4:	4629      	mov	r1, r5
 8007db6:	f7ff ffa7 	bl	8007d08 <sbrk_aligned>
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d037      	beq.n	8007e2e <_malloc_r+0xe6>
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	442b      	add	r3, r5
 8007dc2:	6023      	str	r3, [r4, #0]
 8007dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d038      	beq.n	8007e3e <_malloc_r+0xf6>
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	42a2      	cmp	r2, r4
 8007dd0:	d12b      	bne.n	8007e2a <_malloc_r+0xe2>
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	605a      	str	r2, [r3, #4]
 8007dd6:	e00f      	b.n	8007df8 <_malloc_r+0xb0>
 8007dd8:	6822      	ldr	r2, [r4, #0]
 8007dda:	1b52      	subs	r2, r2, r5
 8007ddc:	d41f      	bmi.n	8007e1e <_malloc_r+0xd6>
 8007dde:	2a0b      	cmp	r2, #11
 8007de0:	d917      	bls.n	8007e12 <_malloc_r+0xca>
 8007de2:	1961      	adds	r1, r4, r5
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	6025      	str	r5, [r4, #0]
 8007de8:	bf18      	it	ne
 8007dea:	6059      	strne	r1, [r3, #4]
 8007dec:	6863      	ldr	r3, [r4, #4]
 8007dee:	bf08      	it	eq
 8007df0:	f8c8 1000 	streq.w	r1, [r8]
 8007df4:	5162      	str	r2, [r4, r5]
 8007df6:	604b      	str	r3, [r1, #4]
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f104 060b 	add.w	r6, r4, #11
 8007dfe:	f000 f829 	bl	8007e54 <__malloc_unlock>
 8007e02:	f026 0607 	bic.w	r6, r6, #7
 8007e06:	1d23      	adds	r3, r4, #4
 8007e08:	1af2      	subs	r2, r6, r3
 8007e0a:	d0ae      	beq.n	8007d6a <_malloc_r+0x22>
 8007e0c:	1b9b      	subs	r3, r3, r6
 8007e0e:	50a3      	str	r3, [r4, r2]
 8007e10:	e7ab      	b.n	8007d6a <_malloc_r+0x22>
 8007e12:	42a3      	cmp	r3, r4
 8007e14:	6862      	ldr	r2, [r4, #4]
 8007e16:	d1dd      	bne.n	8007dd4 <_malloc_r+0x8c>
 8007e18:	f8c8 2000 	str.w	r2, [r8]
 8007e1c:	e7ec      	b.n	8007df8 <_malloc_r+0xb0>
 8007e1e:	4623      	mov	r3, r4
 8007e20:	6864      	ldr	r4, [r4, #4]
 8007e22:	e7ac      	b.n	8007d7e <_malloc_r+0x36>
 8007e24:	4634      	mov	r4, r6
 8007e26:	6876      	ldr	r6, [r6, #4]
 8007e28:	e7b4      	b.n	8007d94 <_malloc_r+0x4c>
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	e7cc      	b.n	8007dc8 <_malloc_r+0x80>
 8007e2e:	230c      	movs	r3, #12
 8007e30:	4638      	mov	r0, r7
 8007e32:	603b      	str	r3, [r7, #0]
 8007e34:	f000 f80e 	bl	8007e54 <__malloc_unlock>
 8007e38:	e797      	b.n	8007d6a <_malloc_r+0x22>
 8007e3a:	6025      	str	r5, [r4, #0]
 8007e3c:	e7dc      	b.n	8007df8 <_malloc_r+0xb0>
 8007e3e:	605b      	str	r3, [r3, #4]
 8007e40:	deff      	udf	#255	; 0xff
 8007e42:	bf00      	nop
 8007e44:	200005c4 	.word	0x200005c4

08007e48 <__malloc_lock>:
 8007e48:	4801      	ldr	r0, [pc, #4]	; (8007e50 <__malloc_lock+0x8>)
 8007e4a:	f7ff b86d 	b.w	8006f28 <__retarget_lock_acquire_recursive>
 8007e4e:	bf00      	nop
 8007e50:	200005c0 	.word	0x200005c0

08007e54 <__malloc_unlock>:
 8007e54:	4801      	ldr	r0, [pc, #4]	; (8007e5c <__malloc_unlock+0x8>)
 8007e56:	f7ff b868 	b.w	8006f2a <__retarget_lock_release_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	200005c0 	.word	0x200005c0

08007e60 <_Balloc>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	69c6      	ldr	r6, [r0, #28]
 8007e64:	4604      	mov	r4, r0
 8007e66:	460d      	mov	r5, r1
 8007e68:	b976      	cbnz	r6, 8007e88 <_Balloc+0x28>
 8007e6a:	2010      	movs	r0, #16
 8007e6c:	f7ff ff44 	bl	8007cf8 <malloc>
 8007e70:	4602      	mov	r2, r0
 8007e72:	61e0      	str	r0, [r4, #28]
 8007e74:	b920      	cbnz	r0, 8007e80 <_Balloc+0x20>
 8007e76:	216b      	movs	r1, #107	; 0x6b
 8007e78:	4b17      	ldr	r3, [pc, #92]	; (8007ed8 <_Balloc+0x78>)
 8007e7a:	4818      	ldr	r0, [pc, #96]	; (8007edc <_Balloc+0x7c>)
 8007e7c:	f7ff f868 	bl	8006f50 <__assert_func>
 8007e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e84:	6006      	str	r6, [r0, #0]
 8007e86:	60c6      	str	r6, [r0, #12]
 8007e88:	69e6      	ldr	r6, [r4, #28]
 8007e8a:	68f3      	ldr	r3, [r6, #12]
 8007e8c:	b183      	cbz	r3, 8007eb0 <_Balloc+0x50>
 8007e8e:	69e3      	ldr	r3, [r4, #28]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e96:	b9b8      	cbnz	r0, 8007ec8 <_Balloc+0x68>
 8007e98:	2101      	movs	r1, #1
 8007e9a:	fa01 f605 	lsl.w	r6, r1, r5
 8007e9e:	1d72      	adds	r2, r6, #5
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	0092      	lsls	r2, r2, #2
 8007ea4:	f002 f911 	bl	800a0ca <_calloc_r>
 8007ea8:	b160      	cbz	r0, 8007ec4 <_Balloc+0x64>
 8007eaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007eae:	e00e      	b.n	8007ece <_Balloc+0x6e>
 8007eb0:	2221      	movs	r2, #33	; 0x21
 8007eb2:	2104      	movs	r1, #4
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f002 f908 	bl	800a0ca <_calloc_r>
 8007eba:	69e3      	ldr	r3, [r4, #28]
 8007ebc:	60f0      	str	r0, [r6, #12]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e4      	bne.n	8007e8e <_Balloc+0x2e>
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}
 8007ec8:	6802      	ldr	r2, [r0, #0]
 8007eca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ed4:	e7f7      	b.n	8007ec6 <_Balloc+0x66>
 8007ed6:	bf00      	nop
 8007ed8:	0800b09d 	.word	0x0800b09d
 8007edc:	0800b1c0 	.word	0x0800b1c0

08007ee0 <_Bfree>:
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	69c6      	ldr	r6, [r0, #28]
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	b976      	cbnz	r6, 8007f08 <_Bfree+0x28>
 8007eea:	2010      	movs	r0, #16
 8007eec:	f7ff ff04 	bl	8007cf8 <malloc>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	61e8      	str	r0, [r5, #28]
 8007ef4:	b920      	cbnz	r0, 8007f00 <_Bfree+0x20>
 8007ef6:	218f      	movs	r1, #143	; 0x8f
 8007ef8:	4b08      	ldr	r3, [pc, #32]	; (8007f1c <_Bfree+0x3c>)
 8007efa:	4809      	ldr	r0, [pc, #36]	; (8007f20 <_Bfree+0x40>)
 8007efc:	f7ff f828 	bl	8006f50 <__assert_func>
 8007f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f04:	6006      	str	r6, [r0, #0]
 8007f06:	60c6      	str	r6, [r0, #12]
 8007f08:	b13c      	cbz	r4, 8007f1a <_Bfree+0x3a>
 8007f0a:	69eb      	ldr	r3, [r5, #28]
 8007f0c:	6862      	ldr	r2, [r4, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f14:	6021      	str	r1, [r4, #0]
 8007f16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	0800b09d 	.word	0x0800b09d
 8007f20:	0800b1c0 	.word	0x0800b1c0

08007f24 <__multadd>:
 8007f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f28:	4607      	mov	r7, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	461e      	mov	r6, r3
 8007f2e:	2000      	movs	r0, #0
 8007f30:	690d      	ldr	r5, [r1, #16]
 8007f32:	f101 0c14 	add.w	ip, r1, #20
 8007f36:	f8dc 3000 	ldr.w	r3, [ip]
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	b299      	uxth	r1, r3
 8007f3e:	fb02 6101 	mla	r1, r2, r1, r6
 8007f42:	0c1e      	lsrs	r6, r3, #16
 8007f44:	0c0b      	lsrs	r3, r1, #16
 8007f46:	fb02 3306 	mla	r3, r2, r6, r3
 8007f4a:	b289      	uxth	r1, r1
 8007f4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f50:	4285      	cmp	r5, r0
 8007f52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f56:	f84c 1b04 	str.w	r1, [ip], #4
 8007f5a:	dcec      	bgt.n	8007f36 <__multadd+0x12>
 8007f5c:	b30e      	cbz	r6, 8007fa2 <__multadd+0x7e>
 8007f5e:	68a3      	ldr	r3, [r4, #8]
 8007f60:	42ab      	cmp	r3, r5
 8007f62:	dc19      	bgt.n	8007f98 <__multadd+0x74>
 8007f64:	6861      	ldr	r1, [r4, #4]
 8007f66:	4638      	mov	r0, r7
 8007f68:	3101      	adds	r1, #1
 8007f6a:	f7ff ff79 	bl	8007e60 <_Balloc>
 8007f6e:	4680      	mov	r8, r0
 8007f70:	b928      	cbnz	r0, 8007f7e <__multadd+0x5a>
 8007f72:	4602      	mov	r2, r0
 8007f74:	21ba      	movs	r1, #186	; 0xba
 8007f76:	4b0c      	ldr	r3, [pc, #48]	; (8007fa8 <__multadd+0x84>)
 8007f78:	480c      	ldr	r0, [pc, #48]	; (8007fac <__multadd+0x88>)
 8007f7a:	f7fe ffe9 	bl	8006f50 <__assert_func>
 8007f7e:	6922      	ldr	r2, [r4, #16]
 8007f80:	f104 010c 	add.w	r1, r4, #12
 8007f84:	3202      	adds	r2, #2
 8007f86:	0092      	lsls	r2, r2, #2
 8007f88:	300c      	adds	r0, #12
 8007f8a:	f002 f883 	bl	800a094 <memcpy>
 8007f8e:	4621      	mov	r1, r4
 8007f90:	4638      	mov	r0, r7
 8007f92:	f7ff ffa5 	bl	8007ee0 <_Bfree>
 8007f96:	4644      	mov	r4, r8
 8007f98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f9c:	3501      	adds	r5, #1
 8007f9e:	615e      	str	r6, [r3, #20]
 8007fa0:	6125      	str	r5, [r4, #16]
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa8:	0800b1af 	.word	0x0800b1af
 8007fac:	0800b1c0 	.word	0x0800b1c0

08007fb0 <__s2b>:
 8007fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb4:	4615      	mov	r5, r2
 8007fb6:	2209      	movs	r2, #9
 8007fb8:	461f      	mov	r7, r3
 8007fba:	3308      	adds	r3, #8
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	db09      	blt.n	8007fe0 <__s2b+0x30>
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f7ff ff47 	bl	8007e60 <_Balloc>
 8007fd2:	b940      	cbnz	r0, 8007fe6 <__s2b+0x36>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	21d3      	movs	r1, #211	; 0xd3
 8007fd8:	4b18      	ldr	r3, [pc, #96]	; (800803c <__s2b+0x8c>)
 8007fda:	4819      	ldr	r0, [pc, #100]	; (8008040 <__s2b+0x90>)
 8007fdc:	f7fe ffb8 	bl	8006f50 <__assert_func>
 8007fe0:	0052      	lsls	r2, r2, #1
 8007fe2:	3101      	adds	r1, #1
 8007fe4:	e7f0      	b.n	8007fc8 <__s2b+0x18>
 8007fe6:	9b08      	ldr	r3, [sp, #32]
 8007fe8:	2d09      	cmp	r5, #9
 8007fea:	6143      	str	r3, [r0, #20]
 8007fec:	f04f 0301 	mov.w	r3, #1
 8007ff0:	6103      	str	r3, [r0, #16]
 8007ff2:	dd16      	ble.n	8008022 <__s2b+0x72>
 8007ff4:	f104 0909 	add.w	r9, r4, #9
 8007ff8:	46c8      	mov	r8, r9
 8007ffa:	442c      	add	r4, r5
 8007ffc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008000:	4601      	mov	r1, r0
 8008002:	220a      	movs	r2, #10
 8008004:	4630      	mov	r0, r6
 8008006:	3b30      	subs	r3, #48	; 0x30
 8008008:	f7ff ff8c 	bl	8007f24 <__multadd>
 800800c:	45a0      	cmp	r8, r4
 800800e:	d1f5      	bne.n	8007ffc <__s2b+0x4c>
 8008010:	f1a5 0408 	sub.w	r4, r5, #8
 8008014:	444c      	add	r4, r9
 8008016:	1b2d      	subs	r5, r5, r4
 8008018:	1963      	adds	r3, r4, r5
 800801a:	42bb      	cmp	r3, r7
 800801c:	db04      	blt.n	8008028 <__s2b+0x78>
 800801e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008022:	2509      	movs	r5, #9
 8008024:	340a      	adds	r4, #10
 8008026:	e7f6      	b.n	8008016 <__s2b+0x66>
 8008028:	f814 3b01 	ldrb.w	r3, [r4], #1
 800802c:	4601      	mov	r1, r0
 800802e:	220a      	movs	r2, #10
 8008030:	4630      	mov	r0, r6
 8008032:	3b30      	subs	r3, #48	; 0x30
 8008034:	f7ff ff76 	bl	8007f24 <__multadd>
 8008038:	e7ee      	b.n	8008018 <__s2b+0x68>
 800803a:	bf00      	nop
 800803c:	0800b1af 	.word	0x0800b1af
 8008040:	0800b1c0 	.word	0x0800b1c0

08008044 <__hi0bits>:
 8008044:	0c02      	lsrs	r2, r0, #16
 8008046:	0412      	lsls	r2, r2, #16
 8008048:	4603      	mov	r3, r0
 800804a:	b9ca      	cbnz	r2, 8008080 <__hi0bits+0x3c>
 800804c:	0403      	lsls	r3, r0, #16
 800804e:	2010      	movs	r0, #16
 8008050:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008054:	bf04      	itt	eq
 8008056:	021b      	lsleq	r3, r3, #8
 8008058:	3008      	addeq	r0, #8
 800805a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800805e:	bf04      	itt	eq
 8008060:	011b      	lsleq	r3, r3, #4
 8008062:	3004      	addeq	r0, #4
 8008064:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008068:	bf04      	itt	eq
 800806a:	009b      	lsleq	r3, r3, #2
 800806c:	3002      	addeq	r0, #2
 800806e:	2b00      	cmp	r3, #0
 8008070:	db05      	blt.n	800807e <__hi0bits+0x3a>
 8008072:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008076:	f100 0001 	add.w	r0, r0, #1
 800807a:	bf08      	it	eq
 800807c:	2020      	moveq	r0, #32
 800807e:	4770      	bx	lr
 8008080:	2000      	movs	r0, #0
 8008082:	e7e5      	b.n	8008050 <__hi0bits+0xc>

08008084 <__lo0bits>:
 8008084:	6803      	ldr	r3, [r0, #0]
 8008086:	4602      	mov	r2, r0
 8008088:	f013 0007 	ands.w	r0, r3, #7
 800808c:	d00b      	beq.n	80080a6 <__lo0bits+0x22>
 800808e:	07d9      	lsls	r1, r3, #31
 8008090:	d421      	bmi.n	80080d6 <__lo0bits+0x52>
 8008092:	0798      	lsls	r0, r3, #30
 8008094:	bf49      	itett	mi
 8008096:	085b      	lsrmi	r3, r3, #1
 8008098:	089b      	lsrpl	r3, r3, #2
 800809a:	2001      	movmi	r0, #1
 800809c:	6013      	strmi	r3, [r2, #0]
 800809e:	bf5c      	itt	pl
 80080a0:	2002      	movpl	r0, #2
 80080a2:	6013      	strpl	r3, [r2, #0]
 80080a4:	4770      	bx	lr
 80080a6:	b299      	uxth	r1, r3
 80080a8:	b909      	cbnz	r1, 80080ae <__lo0bits+0x2a>
 80080aa:	2010      	movs	r0, #16
 80080ac:	0c1b      	lsrs	r3, r3, #16
 80080ae:	b2d9      	uxtb	r1, r3
 80080b0:	b909      	cbnz	r1, 80080b6 <__lo0bits+0x32>
 80080b2:	3008      	adds	r0, #8
 80080b4:	0a1b      	lsrs	r3, r3, #8
 80080b6:	0719      	lsls	r1, r3, #28
 80080b8:	bf04      	itt	eq
 80080ba:	091b      	lsreq	r3, r3, #4
 80080bc:	3004      	addeq	r0, #4
 80080be:	0799      	lsls	r1, r3, #30
 80080c0:	bf04      	itt	eq
 80080c2:	089b      	lsreq	r3, r3, #2
 80080c4:	3002      	addeq	r0, #2
 80080c6:	07d9      	lsls	r1, r3, #31
 80080c8:	d403      	bmi.n	80080d2 <__lo0bits+0x4e>
 80080ca:	085b      	lsrs	r3, r3, #1
 80080cc:	f100 0001 	add.w	r0, r0, #1
 80080d0:	d003      	beq.n	80080da <__lo0bits+0x56>
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	4770      	bx	lr
 80080d6:	2000      	movs	r0, #0
 80080d8:	4770      	bx	lr
 80080da:	2020      	movs	r0, #32
 80080dc:	4770      	bx	lr
	...

080080e0 <__i2b>:
 80080e0:	b510      	push	{r4, lr}
 80080e2:	460c      	mov	r4, r1
 80080e4:	2101      	movs	r1, #1
 80080e6:	f7ff febb 	bl	8007e60 <_Balloc>
 80080ea:	4602      	mov	r2, r0
 80080ec:	b928      	cbnz	r0, 80080fa <__i2b+0x1a>
 80080ee:	f240 1145 	movw	r1, #325	; 0x145
 80080f2:	4b04      	ldr	r3, [pc, #16]	; (8008104 <__i2b+0x24>)
 80080f4:	4804      	ldr	r0, [pc, #16]	; (8008108 <__i2b+0x28>)
 80080f6:	f7fe ff2b 	bl	8006f50 <__assert_func>
 80080fa:	2301      	movs	r3, #1
 80080fc:	6144      	str	r4, [r0, #20]
 80080fe:	6103      	str	r3, [r0, #16]
 8008100:	bd10      	pop	{r4, pc}
 8008102:	bf00      	nop
 8008104:	0800b1af 	.word	0x0800b1af
 8008108:	0800b1c0 	.word	0x0800b1c0

0800810c <__multiply>:
 800810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008110:	4691      	mov	r9, r2
 8008112:	690a      	ldr	r2, [r1, #16]
 8008114:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008118:	460c      	mov	r4, r1
 800811a:	429a      	cmp	r2, r3
 800811c:	bfbe      	ittt	lt
 800811e:	460b      	movlt	r3, r1
 8008120:	464c      	movlt	r4, r9
 8008122:	4699      	movlt	r9, r3
 8008124:	6927      	ldr	r7, [r4, #16]
 8008126:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800812a:	68a3      	ldr	r3, [r4, #8]
 800812c:	6861      	ldr	r1, [r4, #4]
 800812e:	eb07 060a 	add.w	r6, r7, sl
 8008132:	42b3      	cmp	r3, r6
 8008134:	b085      	sub	sp, #20
 8008136:	bfb8      	it	lt
 8008138:	3101      	addlt	r1, #1
 800813a:	f7ff fe91 	bl	8007e60 <_Balloc>
 800813e:	b930      	cbnz	r0, 800814e <__multiply+0x42>
 8008140:	4602      	mov	r2, r0
 8008142:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008146:	4b43      	ldr	r3, [pc, #268]	; (8008254 <__multiply+0x148>)
 8008148:	4843      	ldr	r0, [pc, #268]	; (8008258 <__multiply+0x14c>)
 800814a:	f7fe ff01 	bl	8006f50 <__assert_func>
 800814e:	f100 0514 	add.w	r5, r0, #20
 8008152:	462b      	mov	r3, r5
 8008154:	2200      	movs	r2, #0
 8008156:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800815a:	4543      	cmp	r3, r8
 800815c:	d321      	bcc.n	80081a2 <__multiply+0x96>
 800815e:	f104 0314 	add.w	r3, r4, #20
 8008162:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008166:	f109 0314 	add.w	r3, r9, #20
 800816a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800816e:	9202      	str	r2, [sp, #8]
 8008170:	1b3a      	subs	r2, r7, r4
 8008172:	3a15      	subs	r2, #21
 8008174:	f022 0203 	bic.w	r2, r2, #3
 8008178:	3204      	adds	r2, #4
 800817a:	f104 0115 	add.w	r1, r4, #21
 800817e:	428f      	cmp	r7, r1
 8008180:	bf38      	it	cc
 8008182:	2204      	movcc	r2, #4
 8008184:	9201      	str	r2, [sp, #4]
 8008186:	9a02      	ldr	r2, [sp, #8]
 8008188:	9303      	str	r3, [sp, #12]
 800818a:	429a      	cmp	r2, r3
 800818c:	d80c      	bhi.n	80081a8 <__multiply+0x9c>
 800818e:	2e00      	cmp	r6, #0
 8008190:	dd03      	ble.n	800819a <__multiply+0x8e>
 8008192:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008196:	2b00      	cmp	r3, #0
 8008198:	d05a      	beq.n	8008250 <__multiply+0x144>
 800819a:	6106      	str	r6, [r0, #16]
 800819c:	b005      	add	sp, #20
 800819e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a2:	f843 2b04 	str.w	r2, [r3], #4
 80081a6:	e7d8      	b.n	800815a <__multiply+0x4e>
 80081a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80081ac:	f1ba 0f00 	cmp.w	sl, #0
 80081b0:	d023      	beq.n	80081fa <__multiply+0xee>
 80081b2:	46a9      	mov	r9, r5
 80081b4:	f04f 0c00 	mov.w	ip, #0
 80081b8:	f104 0e14 	add.w	lr, r4, #20
 80081bc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081c0:	f8d9 1000 	ldr.w	r1, [r9]
 80081c4:	fa1f fb82 	uxth.w	fp, r2
 80081c8:	b289      	uxth	r1, r1
 80081ca:	fb0a 110b 	mla	r1, sl, fp, r1
 80081ce:	4461      	add	r1, ip
 80081d0:	f8d9 c000 	ldr.w	ip, [r9]
 80081d4:	0c12      	lsrs	r2, r2, #16
 80081d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80081da:	fb0a c202 	mla	r2, sl, r2, ip
 80081de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081e2:	b289      	uxth	r1, r1
 80081e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081e8:	4577      	cmp	r7, lr
 80081ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081ee:	f849 1b04 	str.w	r1, [r9], #4
 80081f2:	d8e3      	bhi.n	80081bc <__multiply+0xb0>
 80081f4:	9a01      	ldr	r2, [sp, #4]
 80081f6:	f845 c002 	str.w	ip, [r5, r2]
 80081fa:	9a03      	ldr	r2, [sp, #12]
 80081fc:	3304      	adds	r3, #4
 80081fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008202:	f1b9 0f00 	cmp.w	r9, #0
 8008206:	d021      	beq.n	800824c <__multiply+0x140>
 8008208:	46ae      	mov	lr, r5
 800820a:	f04f 0a00 	mov.w	sl, #0
 800820e:	6829      	ldr	r1, [r5, #0]
 8008210:	f104 0c14 	add.w	ip, r4, #20
 8008214:	f8bc b000 	ldrh.w	fp, [ip]
 8008218:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800821c:	b289      	uxth	r1, r1
 800821e:	fb09 220b 	mla	r2, r9, fp, r2
 8008222:	4452      	add	r2, sl
 8008224:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008228:	f84e 1b04 	str.w	r1, [lr], #4
 800822c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008230:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008234:	f8be 1000 	ldrh.w	r1, [lr]
 8008238:	4567      	cmp	r7, ip
 800823a:	fb09 110a 	mla	r1, r9, sl, r1
 800823e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008242:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008246:	d8e5      	bhi.n	8008214 <__multiply+0x108>
 8008248:	9a01      	ldr	r2, [sp, #4]
 800824a:	50a9      	str	r1, [r5, r2]
 800824c:	3504      	adds	r5, #4
 800824e:	e79a      	b.n	8008186 <__multiply+0x7a>
 8008250:	3e01      	subs	r6, #1
 8008252:	e79c      	b.n	800818e <__multiply+0x82>
 8008254:	0800b1af 	.word	0x0800b1af
 8008258:	0800b1c0 	.word	0x0800b1c0

0800825c <__pow5mult>:
 800825c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008260:	4615      	mov	r5, r2
 8008262:	f012 0203 	ands.w	r2, r2, #3
 8008266:	4606      	mov	r6, r0
 8008268:	460f      	mov	r7, r1
 800826a:	d007      	beq.n	800827c <__pow5mult+0x20>
 800826c:	4c25      	ldr	r4, [pc, #148]	; (8008304 <__pow5mult+0xa8>)
 800826e:	3a01      	subs	r2, #1
 8008270:	2300      	movs	r3, #0
 8008272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008276:	f7ff fe55 	bl	8007f24 <__multadd>
 800827a:	4607      	mov	r7, r0
 800827c:	10ad      	asrs	r5, r5, #2
 800827e:	d03d      	beq.n	80082fc <__pow5mult+0xa0>
 8008280:	69f4      	ldr	r4, [r6, #28]
 8008282:	b97c      	cbnz	r4, 80082a4 <__pow5mult+0x48>
 8008284:	2010      	movs	r0, #16
 8008286:	f7ff fd37 	bl	8007cf8 <malloc>
 800828a:	4602      	mov	r2, r0
 800828c:	61f0      	str	r0, [r6, #28]
 800828e:	b928      	cbnz	r0, 800829c <__pow5mult+0x40>
 8008290:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008294:	4b1c      	ldr	r3, [pc, #112]	; (8008308 <__pow5mult+0xac>)
 8008296:	481d      	ldr	r0, [pc, #116]	; (800830c <__pow5mult+0xb0>)
 8008298:	f7fe fe5a 	bl	8006f50 <__assert_func>
 800829c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082a0:	6004      	str	r4, [r0, #0]
 80082a2:	60c4      	str	r4, [r0, #12]
 80082a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80082a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082ac:	b94c      	cbnz	r4, 80082c2 <__pow5mult+0x66>
 80082ae:	f240 2171 	movw	r1, #625	; 0x271
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff ff14 	bl	80080e0 <__i2b>
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80082c0:	6003      	str	r3, [r0, #0]
 80082c2:	f04f 0900 	mov.w	r9, #0
 80082c6:	07eb      	lsls	r3, r5, #31
 80082c8:	d50a      	bpl.n	80082e0 <__pow5mult+0x84>
 80082ca:	4639      	mov	r1, r7
 80082cc:	4622      	mov	r2, r4
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7ff ff1c 	bl	800810c <__multiply>
 80082d4:	4680      	mov	r8, r0
 80082d6:	4639      	mov	r1, r7
 80082d8:	4630      	mov	r0, r6
 80082da:	f7ff fe01 	bl	8007ee0 <_Bfree>
 80082de:	4647      	mov	r7, r8
 80082e0:	106d      	asrs	r5, r5, #1
 80082e2:	d00b      	beq.n	80082fc <__pow5mult+0xa0>
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	b938      	cbnz	r0, 80082f8 <__pow5mult+0x9c>
 80082e8:	4622      	mov	r2, r4
 80082ea:	4621      	mov	r1, r4
 80082ec:	4630      	mov	r0, r6
 80082ee:	f7ff ff0d 	bl	800810c <__multiply>
 80082f2:	6020      	str	r0, [r4, #0]
 80082f4:	f8c0 9000 	str.w	r9, [r0]
 80082f8:	4604      	mov	r4, r0
 80082fa:	e7e4      	b.n	80082c6 <__pow5mult+0x6a>
 80082fc:	4638      	mov	r0, r7
 80082fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008302:	bf00      	nop
 8008304:	0800b310 	.word	0x0800b310
 8008308:	0800b09d 	.word	0x0800b09d
 800830c:	0800b1c0 	.word	0x0800b1c0

08008310 <__lshift>:
 8008310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008314:	460c      	mov	r4, r1
 8008316:	4607      	mov	r7, r0
 8008318:	4691      	mov	r9, r2
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	6849      	ldr	r1, [r1, #4]
 800831e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008322:	68a3      	ldr	r3, [r4, #8]
 8008324:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008328:	f108 0601 	add.w	r6, r8, #1
 800832c:	42b3      	cmp	r3, r6
 800832e:	db0b      	blt.n	8008348 <__lshift+0x38>
 8008330:	4638      	mov	r0, r7
 8008332:	f7ff fd95 	bl	8007e60 <_Balloc>
 8008336:	4605      	mov	r5, r0
 8008338:	b948      	cbnz	r0, 800834e <__lshift+0x3e>
 800833a:	4602      	mov	r2, r0
 800833c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008340:	4b27      	ldr	r3, [pc, #156]	; (80083e0 <__lshift+0xd0>)
 8008342:	4828      	ldr	r0, [pc, #160]	; (80083e4 <__lshift+0xd4>)
 8008344:	f7fe fe04 	bl	8006f50 <__assert_func>
 8008348:	3101      	adds	r1, #1
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	e7ee      	b.n	800832c <__lshift+0x1c>
 800834e:	2300      	movs	r3, #0
 8008350:	f100 0114 	add.w	r1, r0, #20
 8008354:	f100 0210 	add.w	r2, r0, #16
 8008358:	4618      	mov	r0, r3
 800835a:	4553      	cmp	r3, sl
 800835c:	db33      	blt.n	80083c6 <__lshift+0xb6>
 800835e:	6920      	ldr	r0, [r4, #16]
 8008360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008364:	f104 0314 	add.w	r3, r4, #20
 8008368:	f019 091f 	ands.w	r9, r9, #31
 800836c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008370:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008374:	d02b      	beq.n	80083ce <__lshift+0xbe>
 8008376:	468a      	mov	sl, r1
 8008378:	2200      	movs	r2, #0
 800837a:	f1c9 0e20 	rsb	lr, r9, #32
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	fa00 f009 	lsl.w	r0, r0, r9
 8008384:	4310      	orrs	r0, r2
 8008386:	f84a 0b04 	str.w	r0, [sl], #4
 800838a:	f853 2b04 	ldr.w	r2, [r3], #4
 800838e:	459c      	cmp	ip, r3
 8008390:	fa22 f20e 	lsr.w	r2, r2, lr
 8008394:	d8f3      	bhi.n	800837e <__lshift+0x6e>
 8008396:	ebac 0304 	sub.w	r3, ip, r4
 800839a:	3b15      	subs	r3, #21
 800839c:	f023 0303 	bic.w	r3, r3, #3
 80083a0:	3304      	adds	r3, #4
 80083a2:	f104 0015 	add.w	r0, r4, #21
 80083a6:	4584      	cmp	ip, r0
 80083a8:	bf38      	it	cc
 80083aa:	2304      	movcc	r3, #4
 80083ac:	50ca      	str	r2, [r1, r3]
 80083ae:	b10a      	cbz	r2, 80083b4 <__lshift+0xa4>
 80083b0:	f108 0602 	add.w	r6, r8, #2
 80083b4:	3e01      	subs	r6, #1
 80083b6:	4638      	mov	r0, r7
 80083b8:	4621      	mov	r1, r4
 80083ba:	612e      	str	r6, [r5, #16]
 80083bc:	f7ff fd90 	bl	8007ee0 <_Bfree>
 80083c0:	4628      	mov	r0, r5
 80083c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80083ca:	3301      	adds	r3, #1
 80083cc:	e7c5      	b.n	800835a <__lshift+0x4a>
 80083ce:	3904      	subs	r1, #4
 80083d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d4:	459c      	cmp	ip, r3
 80083d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80083da:	d8f9      	bhi.n	80083d0 <__lshift+0xc0>
 80083dc:	e7ea      	b.n	80083b4 <__lshift+0xa4>
 80083de:	bf00      	nop
 80083e0:	0800b1af 	.word	0x0800b1af
 80083e4:	0800b1c0 	.word	0x0800b1c0

080083e8 <__mcmp>:
 80083e8:	4603      	mov	r3, r0
 80083ea:	690a      	ldr	r2, [r1, #16]
 80083ec:	6900      	ldr	r0, [r0, #16]
 80083ee:	b530      	push	{r4, r5, lr}
 80083f0:	1a80      	subs	r0, r0, r2
 80083f2:	d10d      	bne.n	8008410 <__mcmp+0x28>
 80083f4:	3314      	adds	r3, #20
 80083f6:	3114      	adds	r1, #20
 80083f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008400:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008404:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008408:	4295      	cmp	r5, r2
 800840a:	d002      	beq.n	8008412 <__mcmp+0x2a>
 800840c:	d304      	bcc.n	8008418 <__mcmp+0x30>
 800840e:	2001      	movs	r0, #1
 8008410:	bd30      	pop	{r4, r5, pc}
 8008412:	42a3      	cmp	r3, r4
 8008414:	d3f4      	bcc.n	8008400 <__mcmp+0x18>
 8008416:	e7fb      	b.n	8008410 <__mcmp+0x28>
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	e7f8      	b.n	8008410 <__mcmp+0x28>
	...

08008420 <__mdiff>:
 8008420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	460d      	mov	r5, r1
 8008426:	4607      	mov	r7, r0
 8008428:	4611      	mov	r1, r2
 800842a:	4628      	mov	r0, r5
 800842c:	4614      	mov	r4, r2
 800842e:	f7ff ffdb 	bl	80083e8 <__mcmp>
 8008432:	1e06      	subs	r6, r0, #0
 8008434:	d111      	bne.n	800845a <__mdiff+0x3a>
 8008436:	4631      	mov	r1, r6
 8008438:	4638      	mov	r0, r7
 800843a:	f7ff fd11 	bl	8007e60 <_Balloc>
 800843e:	4602      	mov	r2, r0
 8008440:	b928      	cbnz	r0, 800844e <__mdiff+0x2e>
 8008442:	f240 2137 	movw	r1, #567	; 0x237
 8008446:	4b3a      	ldr	r3, [pc, #232]	; (8008530 <__mdiff+0x110>)
 8008448:	483a      	ldr	r0, [pc, #232]	; (8008534 <__mdiff+0x114>)
 800844a:	f7fe fd81 	bl	8006f50 <__assert_func>
 800844e:	2301      	movs	r3, #1
 8008450:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008454:	4610      	mov	r0, r2
 8008456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845a:	bfa4      	itt	ge
 800845c:	4623      	movge	r3, r4
 800845e:	462c      	movge	r4, r5
 8008460:	4638      	mov	r0, r7
 8008462:	6861      	ldr	r1, [r4, #4]
 8008464:	bfa6      	itte	ge
 8008466:	461d      	movge	r5, r3
 8008468:	2600      	movge	r6, #0
 800846a:	2601      	movlt	r6, #1
 800846c:	f7ff fcf8 	bl	8007e60 <_Balloc>
 8008470:	4602      	mov	r2, r0
 8008472:	b918      	cbnz	r0, 800847c <__mdiff+0x5c>
 8008474:	f240 2145 	movw	r1, #581	; 0x245
 8008478:	4b2d      	ldr	r3, [pc, #180]	; (8008530 <__mdiff+0x110>)
 800847a:	e7e5      	b.n	8008448 <__mdiff+0x28>
 800847c:	f102 0814 	add.w	r8, r2, #20
 8008480:	46c2      	mov	sl, r8
 8008482:	f04f 0c00 	mov.w	ip, #0
 8008486:	6927      	ldr	r7, [r4, #16]
 8008488:	60c6      	str	r6, [r0, #12]
 800848a:	692e      	ldr	r6, [r5, #16]
 800848c:	f104 0014 	add.w	r0, r4, #20
 8008490:	f105 0914 	add.w	r9, r5, #20
 8008494:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008498:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800849c:	3410      	adds	r4, #16
 800849e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80084a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80084a6:	fa1f f18b 	uxth.w	r1, fp
 80084aa:	4461      	add	r1, ip
 80084ac:	fa1f fc83 	uxth.w	ip, r3
 80084b0:	0c1b      	lsrs	r3, r3, #16
 80084b2:	eba1 010c 	sub.w	r1, r1, ip
 80084b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80084be:	b289      	uxth	r1, r1
 80084c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084c4:	454e      	cmp	r6, r9
 80084c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80084ca:	f84a 1b04 	str.w	r1, [sl], #4
 80084ce:	d8e6      	bhi.n	800849e <__mdiff+0x7e>
 80084d0:	1b73      	subs	r3, r6, r5
 80084d2:	3b15      	subs	r3, #21
 80084d4:	f023 0303 	bic.w	r3, r3, #3
 80084d8:	3515      	adds	r5, #21
 80084da:	3304      	adds	r3, #4
 80084dc:	42ae      	cmp	r6, r5
 80084de:	bf38      	it	cc
 80084e0:	2304      	movcc	r3, #4
 80084e2:	4418      	add	r0, r3
 80084e4:	4443      	add	r3, r8
 80084e6:	461e      	mov	r6, r3
 80084e8:	4605      	mov	r5, r0
 80084ea:	4575      	cmp	r5, lr
 80084ec:	d30e      	bcc.n	800850c <__mdiff+0xec>
 80084ee:	f10e 0103 	add.w	r1, lr, #3
 80084f2:	1a09      	subs	r1, r1, r0
 80084f4:	f021 0103 	bic.w	r1, r1, #3
 80084f8:	3803      	subs	r0, #3
 80084fa:	4586      	cmp	lr, r0
 80084fc:	bf38      	it	cc
 80084fe:	2100      	movcc	r1, #0
 8008500:	440b      	add	r3, r1
 8008502:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008506:	b189      	cbz	r1, 800852c <__mdiff+0x10c>
 8008508:	6117      	str	r7, [r2, #16]
 800850a:	e7a3      	b.n	8008454 <__mdiff+0x34>
 800850c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008510:	fa1f f188 	uxth.w	r1, r8
 8008514:	4461      	add	r1, ip
 8008516:	140c      	asrs	r4, r1, #16
 8008518:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800851c:	b289      	uxth	r1, r1
 800851e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008522:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008526:	f846 1b04 	str.w	r1, [r6], #4
 800852a:	e7de      	b.n	80084ea <__mdiff+0xca>
 800852c:	3f01      	subs	r7, #1
 800852e:	e7e8      	b.n	8008502 <__mdiff+0xe2>
 8008530:	0800b1af 	.word	0x0800b1af
 8008534:	0800b1c0 	.word	0x0800b1c0

08008538 <__ulp>:
 8008538:	4b0e      	ldr	r3, [pc, #56]	; (8008574 <__ulp+0x3c>)
 800853a:	400b      	ands	r3, r1
 800853c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008540:	2b00      	cmp	r3, #0
 8008542:	dc08      	bgt.n	8008556 <__ulp+0x1e>
 8008544:	425b      	negs	r3, r3
 8008546:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800854a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800854e:	da04      	bge.n	800855a <__ulp+0x22>
 8008550:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008554:	4113      	asrs	r3, r2
 8008556:	2200      	movs	r2, #0
 8008558:	e008      	b.n	800856c <__ulp+0x34>
 800855a:	f1a2 0314 	sub.w	r3, r2, #20
 800855e:	2b1e      	cmp	r3, #30
 8008560:	bfd6      	itet	le
 8008562:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008566:	2201      	movgt	r2, #1
 8008568:	40da      	lsrle	r2, r3
 800856a:	2300      	movs	r3, #0
 800856c:	4619      	mov	r1, r3
 800856e:	4610      	mov	r0, r2
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	7ff00000 	.word	0x7ff00000

08008578 <__b2d>:
 8008578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857a:	6905      	ldr	r5, [r0, #16]
 800857c:	f100 0714 	add.w	r7, r0, #20
 8008580:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008584:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008588:	1f2e      	subs	r6, r5, #4
 800858a:	4620      	mov	r0, r4
 800858c:	f7ff fd5a 	bl	8008044 <__hi0bits>
 8008590:	f1c0 0220 	rsb	r2, r0, #32
 8008594:	280a      	cmp	r0, #10
 8008596:	4603      	mov	r3, r0
 8008598:	f8df c068 	ldr.w	ip, [pc, #104]	; 8008604 <__b2d+0x8c>
 800859c:	600a      	str	r2, [r1, #0]
 800859e:	dc12      	bgt.n	80085c6 <__b2d+0x4e>
 80085a0:	f1c0 0e0b 	rsb	lr, r0, #11
 80085a4:	fa24 f20e 	lsr.w	r2, r4, lr
 80085a8:	42b7      	cmp	r7, r6
 80085aa:	ea42 010c 	orr.w	r1, r2, ip
 80085ae:	bf2c      	ite	cs
 80085b0:	2200      	movcs	r2, #0
 80085b2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80085b6:	3315      	adds	r3, #21
 80085b8:	fa04 f303 	lsl.w	r3, r4, r3
 80085bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80085c0:	431a      	orrs	r2, r3
 80085c2:	4610      	mov	r0, r2
 80085c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085c6:	42b7      	cmp	r7, r6
 80085c8:	bf2e      	itee	cs
 80085ca:	2200      	movcs	r2, #0
 80085cc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80085d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80085d4:	3b0b      	subs	r3, #11
 80085d6:	d012      	beq.n	80085fe <__b2d+0x86>
 80085d8:	f1c3 0520 	rsb	r5, r3, #32
 80085dc:	fa22 f105 	lsr.w	r1, r2, r5
 80085e0:	409c      	lsls	r4, r3
 80085e2:	430c      	orrs	r4, r1
 80085e4:	42be      	cmp	r6, r7
 80085e6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80085ea:	bf94      	ite	ls
 80085ec:	2400      	movls	r4, #0
 80085ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80085f2:	409a      	lsls	r2, r3
 80085f4:	40ec      	lsrs	r4, r5
 80085f6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80085fa:	4322      	orrs	r2, r4
 80085fc:	e7e1      	b.n	80085c2 <__b2d+0x4a>
 80085fe:	ea44 010c 	orr.w	r1, r4, ip
 8008602:	e7de      	b.n	80085c2 <__b2d+0x4a>
 8008604:	3ff00000 	.word	0x3ff00000

08008608 <__d2b>:
 8008608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800860a:	2101      	movs	r1, #1
 800860c:	4617      	mov	r7, r2
 800860e:	461c      	mov	r4, r3
 8008610:	9e08      	ldr	r6, [sp, #32]
 8008612:	f7ff fc25 	bl	8007e60 <_Balloc>
 8008616:	4605      	mov	r5, r0
 8008618:	b930      	cbnz	r0, 8008628 <__d2b+0x20>
 800861a:	4602      	mov	r2, r0
 800861c:	f240 310f 	movw	r1, #783	; 0x30f
 8008620:	4b22      	ldr	r3, [pc, #136]	; (80086ac <__d2b+0xa4>)
 8008622:	4823      	ldr	r0, [pc, #140]	; (80086b0 <__d2b+0xa8>)
 8008624:	f7fe fc94 	bl	8006f50 <__assert_func>
 8008628:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800862c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008630:	bb24      	cbnz	r4, 800867c <__d2b+0x74>
 8008632:	2f00      	cmp	r7, #0
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	d026      	beq.n	8008686 <__d2b+0x7e>
 8008638:	4668      	mov	r0, sp
 800863a:	9700      	str	r7, [sp, #0]
 800863c:	f7ff fd22 	bl	8008084 <__lo0bits>
 8008640:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008644:	b1e8      	cbz	r0, 8008682 <__d2b+0x7a>
 8008646:	f1c0 0320 	rsb	r3, r0, #32
 800864a:	fa02 f303 	lsl.w	r3, r2, r3
 800864e:	430b      	orrs	r3, r1
 8008650:	40c2      	lsrs	r2, r0
 8008652:	616b      	str	r3, [r5, #20]
 8008654:	9201      	str	r2, [sp, #4]
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	bf14      	ite	ne
 800865c:	2102      	movne	r1, #2
 800865e:	2101      	moveq	r1, #1
 8008660:	61ab      	str	r3, [r5, #24]
 8008662:	6129      	str	r1, [r5, #16]
 8008664:	b1bc      	cbz	r4, 8008696 <__d2b+0x8e>
 8008666:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800866a:	4404      	add	r4, r0
 800866c:	6034      	str	r4, [r6, #0]
 800866e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008674:	6018      	str	r0, [r3, #0]
 8008676:	4628      	mov	r0, r5
 8008678:	b003      	add	sp, #12
 800867a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800867c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008680:	e7d7      	b.n	8008632 <__d2b+0x2a>
 8008682:	6169      	str	r1, [r5, #20]
 8008684:	e7e7      	b.n	8008656 <__d2b+0x4e>
 8008686:	a801      	add	r0, sp, #4
 8008688:	f7ff fcfc 	bl	8008084 <__lo0bits>
 800868c:	9b01      	ldr	r3, [sp, #4]
 800868e:	2101      	movs	r1, #1
 8008690:	616b      	str	r3, [r5, #20]
 8008692:	3020      	adds	r0, #32
 8008694:	e7e5      	b.n	8008662 <__d2b+0x5a>
 8008696:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800869a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800869e:	6030      	str	r0, [r6, #0]
 80086a0:	6918      	ldr	r0, [r3, #16]
 80086a2:	f7ff fccf 	bl	8008044 <__hi0bits>
 80086a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80086aa:	e7e2      	b.n	8008672 <__d2b+0x6a>
 80086ac:	0800b1af 	.word	0x0800b1af
 80086b0:	0800b1c0 	.word	0x0800b1c0

080086b4 <__ratio>:
 80086b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b8:	4688      	mov	r8, r1
 80086ba:	4669      	mov	r1, sp
 80086bc:	4681      	mov	r9, r0
 80086be:	f7ff ff5b 	bl	8008578 <__b2d>
 80086c2:	460f      	mov	r7, r1
 80086c4:	4604      	mov	r4, r0
 80086c6:	460d      	mov	r5, r1
 80086c8:	4640      	mov	r0, r8
 80086ca:	a901      	add	r1, sp, #4
 80086cc:	f7ff ff54 	bl	8008578 <__b2d>
 80086d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80086d8:	468b      	mov	fp, r1
 80086da:	eba3 0c02 	sub.w	ip, r3, r2
 80086de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	bfd5      	itete	le
 80086ec:	460a      	movle	r2, r1
 80086ee:	462a      	movgt	r2, r5
 80086f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80086f4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80086f8:	bfd8      	it	le
 80086fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80086fe:	465b      	mov	r3, fp
 8008700:	4602      	mov	r2, r0
 8008702:	4639      	mov	r1, r7
 8008704:	4620      	mov	r0, r4
 8008706:	f7f8 f81b 	bl	8000740 <__aeabi_ddiv>
 800870a:	b003      	add	sp, #12
 800870c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008710 <__copybits>:
 8008710:	3901      	subs	r1, #1
 8008712:	b570      	push	{r4, r5, r6, lr}
 8008714:	1149      	asrs	r1, r1, #5
 8008716:	6914      	ldr	r4, [r2, #16]
 8008718:	3101      	adds	r1, #1
 800871a:	f102 0314 	add.w	r3, r2, #20
 800871e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008722:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008726:	1f05      	subs	r5, r0, #4
 8008728:	42a3      	cmp	r3, r4
 800872a:	d30c      	bcc.n	8008746 <__copybits+0x36>
 800872c:	1aa3      	subs	r3, r4, r2
 800872e:	3b11      	subs	r3, #17
 8008730:	f023 0303 	bic.w	r3, r3, #3
 8008734:	3211      	adds	r2, #17
 8008736:	42a2      	cmp	r2, r4
 8008738:	bf88      	it	hi
 800873a:	2300      	movhi	r3, #0
 800873c:	4418      	add	r0, r3
 800873e:	2300      	movs	r3, #0
 8008740:	4288      	cmp	r0, r1
 8008742:	d305      	bcc.n	8008750 <__copybits+0x40>
 8008744:	bd70      	pop	{r4, r5, r6, pc}
 8008746:	f853 6b04 	ldr.w	r6, [r3], #4
 800874a:	f845 6f04 	str.w	r6, [r5, #4]!
 800874e:	e7eb      	b.n	8008728 <__copybits+0x18>
 8008750:	f840 3b04 	str.w	r3, [r0], #4
 8008754:	e7f4      	b.n	8008740 <__copybits+0x30>

08008756 <__any_on>:
 8008756:	f100 0214 	add.w	r2, r0, #20
 800875a:	6900      	ldr	r0, [r0, #16]
 800875c:	114b      	asrs	r3, r1, #5
 800875e:	4298      	cmp	r0, r3
 8008760:	b510      	push	{r4, lr}
 8008762:	db11      	blt.n	8008788 <__any_on+0x32>
 8008764:	dd0a      	ble.n	800877c <__any_on+0x26>
 8008766:	f011 011f 	ands.w	r1, r1, #31
 800876a:	d007      	beq.n	800877c <__any_on+0x26>
 800876c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008770:	fa24 f001 	lsr.w	r0, r4, r1
 8008774:	fa00 f101 	lsl.w	r1, r0, r1
 8008778:	428c      	cmp	r4, r1
 800877a:	d10b      	bne.n	8008794 <__any_on+0x3e>
 800877c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008780:	4293      	cmp	r3, r2
 8008782:	d803      	bhi.n	800878c <__any_on+0x36>
 8008784:	2000      	movs	r0, #0
 8008786:	bd10      	pop	{r4, pc}
 8008788:	4603      	mov	r3, r0
 800878a:	e7f7      	b.n	800877c <__any_on+0x26>
 800878c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008790:	2900      	cmp	r1, #0
 8008792:	d0f5      	beq.n	8008780 <__any_on+0x2a>
 8008794:	2001      	movs	r0, #1
 8008796:	e7f6      	b.n	8008786 <__any_on+0x30>

08008798 <sulp>:
 8008798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879c:	460f      	mov	r7, r1
 800879e:	4690      	mov	r8, r2
 80087a0:	f7ff feca 	bl	8008538 <__ulp>
 80087a4:	4604      	mov	r4, r0
 80087a6:	460d      	mov	r5, r1
 80087a8:	f1b8 0f00 	cmp.w	r8, #0
 80087ac:	d011      	beq.n	80087d2 <sulp+0x3a>
 80087ae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80087b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	dd0b      	ble.n	80087d2 <sulp+0x3a>
 80087ba:	2400      	movs	r4, #0
 80087bc:	051b      	lsls	r3, r3, #20
 80087be:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80087c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80087c6:	4622      	mov	r2, r4
 80087c8:	462b      	mov	r3, r5
 80087ca:	f7f7 fe8f 	bl	80004ec <__aeabi_dmul>
 80087ce:	4604      	mov	r4, r0
 80087d0:	460d      	mov	r5, r1
 80087d2:	4620      	mov	r0, r4
 80087d4:	4629      	mov	r1, r5
 80087d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087da:	0000      	movs	r0, r0
 80087dc:	0000      	movs	r0, r0
	...

080087e0 <_strtod_l>:
 80087e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e4:	b09f      	sub	sp, #124	; 0x7c
 80087e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80087e8:	2200      	movs	r2, #0
 80087ea:	4604      	mov	r4, r0
 80087ec:	921a      	str	r2, [sp, #104]	; 0x68
 80087ee:	460d      	mov	r5, r1
 80087f0:	f04f 0800 	mov.w	r8, #0
 80087f4:	f04f 0900 	mov.w	r9, #0
 80087f8:	460a      	mov	r2, r1
 80087fa:	9219      	str	r2, [sp, #100]	; 0x64
 80087fc:	7811      	ldrb	r1, [r2, #0]
 80087fe:	292b      	cmp	r1, #43	; 0x2b
 8008800:	d04a      	beq.n	8008898 <_strtod_l+0xb8>
 8008802:	d838      	bhi.n	8008876 <_strtod_l+0x96>
 8008804:	290d      	cmp	r1, #13
 8008806:	d832      	bhi.n	800886e <_strtod_l+0x8e>
 8008808:	2908      	cmp	r1, #8
 800880a:	d832      	bhi.n	8008872 <_strtod_l+0x92>
 800880c:	2900      	cmp	r1, #0
 800880e:	d03b      	beq.n	8008888 <_strtod_l+0xa8>
 8008810:	2200      	movs	r2, #0
 8008812:	920e      	str	r2, [sp, #56]	; 0x38
 8008814:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008816:	7832      	ldrb	r2, [r6, #0]
 8008818:	2a30      	cmp	r2, #48	; 0x30
 800881a:	f040 80b2 	bne.w	8008982 <_strtod_l+0x1a2>
 800881e:	7872      	ldrb	r2, [r6, #1]
 8008820:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008824:	2a58      	cmp	r2, #88	; 0x58
 8008826:	d16e      	bne.n	8008906 <_strtod_l+0x126>
 8008828:	9302      	str	r3, [sp, #8]
 800882a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800882c:	4620      	mov	r0, r4
 800882e:	9301      	str	r3, [sp, #4]
 8008830:	ab1a      	add	r3, sp, #104	; 0x68
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	4a8c      	ldr	r2, [pc, #560]	; (8008a68 <_strtod_l+0x288>)
 8008836:	ab1b      	add	r3, sp, #108	; 0x6c
 8008838:	a919      	add	r1, sp, #100	; 0x64
 800883a:	f001 fcc3 	bl	800a1c4 <__gethex>
 800883e:	f010 070f 	ands.w	r7, r0, #15
 8008842:	4605      	mov	r5, r0
 8008844:	d005      	beq.n	8008852 <_strtod_l+0x72>
 8008846:	2f06      	cmp	r7, #6
 8008848:	d128      	bne.n	800889c <_strtod_l+0xbc>
 800884a:	2300      	movs	r3, #0
 800884c:	3601      	adds	r6, #1
 800884e:	9619      	str	r6, [sp, #100]	; 0x64
 8008850:	930e      	str	r3, [sp, #56]	; 0x38
 8008852:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008854:	2b00      	cmp	r3, #0
 8008856:	f040 85a0 	bne.w	800939a <_strtod_l+0xbba>
 800885a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800885c:	b1cb      	cbz	r3, 8008892 <_strtod_l+0xb2>
 800885e:	4642      	mov	r2, r8
 8008860:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008864:	4610      	mov	r0, r2
 8008866:	4619      	mov	r1, r3
 8008868:	b01f      	add	sp, #124	; 0x7c
 800886a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886e:	2920      	cmp	r1, #32
 8008870:	d1ce      	bne.n	8008810 <_strtod_l+0x30>
 8008872:	3201      	adds	r2, #1
 8008874:	e7c1      	b.n	80087fa <_strtod_l+0x1a>
 8008876:	292d      	cmp	r1, #45	; 0x2d
 8008878:	d1ca      	bne.n	8008810 <_strtod_l+0x30>
 800887a:	2101      	movs	r1, #1
 800887c:	910e      	str	r1, [sp, #56]	; 0x38
 800887e:	1c51      	adds	r1, r2, #1
 8008880:	9119      	str	r1, [sp, #100]	; 0x64
 8008882:	7852      	ldrb	r2, [r2, #1]
 8008884:	2a00      	cmp	r2, #0
 8008886:	d1c5      	bne.n	8008814 <_strtod_l+0x34>
 8008888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800888a:	9519      	str	r5, [sp, #100]	; 0x64
 800888c:	2b00      	cmp	r3, #0
 800888e:	f040 8582 	bne.w	8009396 <_strtod_l+0xbb6>
 8008892:	4642      	mov	r2, r8
 8008894:	464b      	mov	r3, r9
 8008896:	e7e5      	b.n	8008864 <_strtod_l+0x84>
 8008898:	2100      	movs	r1, #0
 800889a:	e7ef      	b.n	800887c <_strtod_l+0x9c>
 800889c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800889e:	b13a      	cbz	r2, 80088b0 <_strtod_l+0xd0>
 80088a0:	2135      	movs	r1, #53	; 0x35
 80088a2:	a81c      	add	r0, sp, #112	; 0x70
 80088a4:	f7ff ff34 	bl	8008710 <__copybits>
 80088a8:	4620      	mov	r0, r4
 80088aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80088ac:	f7ff fb18 	bl	8007ee0 <_Bfree>
 80088b0:	3f01      	subs	r7, #1
 80088b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80088b4:	2f04      	cmp	r7, #4
 80088b6:	d806      	bhi.n	80088c6 <_strtod_l+0xe6>
 80088b8:	e8df f007 	tbb	[pc, r7]
 80088bc:	201d0314 	.word	0x201d0314
 80088c0:	14          	.byte	0x14
 80088c1:	00          	.byte	0x00
 80088c2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80088c6:	05e9      	lsls	r1, r5, #23
 80088c8:	bf48      	it	mi
 80088ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80088ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088d2:	0d1b      	lsrs	r3, r3, #20
 80088d4:	051b      	lsls	r3, r3, #20
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1bb      	bne.n	8008852 <_strtod_l+0x72>
 80088da:	f7fe fafb 	bl	8006ed4 <__errno>
 80088de:	2322      	movs	r3, #34	; 0x22
 80088e0:	6003      	str	r3, [r0, #0]
 80088e2:	e7b6      	b.n	8008852 <_strtod_l+0x72>
 80088e4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80088e8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80088ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80088f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80088f4:	e7e7      	b.n	80088c6 <_strtod_l+0xe6>
 80088f6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008a6c <_strtod_l+0x28c>
 80088fa:	e7e4      	b.n	80088c6 <_strtod_l+0xe6>
 80088fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008900:	f04f 38ff 	mov.w	r8, #4294967295
 8008904:	e7df      	b.n	80088c6 <_strtod_l+0xe6>
 8008906:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008908:	1c5a      	adds	r2, r3, #1
 800890a:	9219      	str	r2, [sp, #100]	; 0x64
 800890c:	785b      	ldrb	r3, [r3, #1]
 800890e:	2b30      	cmp	r3, #48	; 0x30
 8008910:	d0f9      	beq.n	8008906 <_strtod_l+0x126>
 8008912:	2b00      	cmp	r3, #0
 8008914:	d09d      	beq.n	8008852 <_strtod_l+0x72>
 8008916:	2301      	movs	r3, #1
 8008918:	f04f 0a00 	mov.w	sl, #0
 800891c:	220a      	movs	r2, #10
 800891e:	46d3      	mov	fp, sl
 8008920:	9305      	str	r3, [sp, #20]
 8008922:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008924:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008928:	930b      	str	r3, [sp, #44]	; 0x2c
 800892a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800892c:	7806      	ldrb	r6, [r0, #0]
 800892e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008932:	b2d9      	uxtb	r1, r3
 8008934:	2909      	cmp	r1, #9
 8008936:	d926      	bls.n	8008986 <_strtod_l+0x1a6>
 8008938:	2201      	movs	r2, #1
 800893a:	494d      	ldr	r1, [pc, #308]	; (8008a70 <_strtod_l+0x290>)
 800893c:	f001 fb87 	bl	800a04e <strncmp>
 8008940:	2800      	cmp	r0, #0
 8008942:	d030      	beq.n	80089a6 <_strtod_l+0x1c6>
 8008944:	2000      	movs	r0, #0
 8008946:	4632      	mov	r2, r6
 8008948:	4603      	mov	r3, r0
 800894a:	465e      	mov	r6, fp
 800894c:	9008      	str	r0, [sp, #32]
 800894e:	2a65      	cmp	r2, #101	; 0x65
 8008950:	d001      	beq.n	8008956 <_strtod_l+0x176>
 8008952:	2a45      	cmp	r2, #69	; 0x45
 8008954:	d113      	bne.n	800897e <_strtod_l+0x19e>
 8008956:	b91e      	cbnz	r6, 8008960 <_strtod_l+0x180>
 8008958:	9a05      	ldr	r2, [sp, #20]
 800895a:	4302      	orrs	r2, r0
 800895c:	d094      	beq.n	8008888 <_strtod_l+0xa8>
 800895e:	2600      	movs	r6, #0
 8008960:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008962:	1c6a      	adds	r2, r5, #1
 8008964:	9219      	str	r2, [sp, #100]	; 0x64
 8008966:	786a      	ldrb	r2, [r5, #1]
 8008968:	2a2b      	cmp	r2, #43	; 0x2b
 800896a:	d074      	beq.n	8008a56 <_strtod_l+0x276>
 800896c:	2a2d      	cmp	r2, #45	; 0x2d
 800896e:	d078      	beq.n	8008a62 <_strtod_l+0x282>
 8008970:	f04f 0c00 	mov.w	ip, #0
 8008974:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008978:	2909      	cmp	r1, #9
 800897a:	d97f      	bls.n	8008a7c <_strtod_l+0x29c>
 800897c:	9519      	str	r5, [sp, #100]	; 0x64
 800897e:	2700      	movs	r7, #0
 8008980:	e09e      	b.n	8008ac0 <_strtod_l+0x2e0>
 8008982:	2300      	movs	r3, #0
 8008984:	e7c8      	b.n	8008918 <_strtod_l+0x138>
 8008986:	f1bb 0f08 	cmp.w	fp, #8
 800898a:	bfd8      	it	le
 800898c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800898e:	f100 0001 	add.w	r0, r0, #1
 8008992:	bfd6      	itet	le
 8008994:	fb02 3301 	mlale	r3, r2, r1, r3
 8008998:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800899c:	930a      	strle	r3, [sp, #40]	; 0x28
 800899e:	f10b 0b01 	add.w	fp, fp, #1
 80089a2:	9019      	str	r0, [sp, #100]	; 0x64
 80089a4:	e7c1      	b.n	800892a <_strtod_l+0x14a>
 80089a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	9219      	str	r2, [sp, #100]	; 0x64
 80089ac:	785a      	ldrb	r2, [r3, #1]
 80089ae:	f1bb 0f00 	cmp.w	fp, #0
 80089b2:	d037      	beq.n	8008a24 <_strtod_l+0x244>
 80089b4:	465e      	mov	r6, fp
 80089b6:	9008      	str	r0, [sp, #32]
 80089b8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80089bc:	2b09      	cmp	r3, #9
 80089be:	d912      	bls.n	80089e6 <_strtod_l+0x206>
 80089c0:	2301      	movs	r3, #1
 80089c2:	e7c4      	b.n	800894e <_strtod_l+0x16e>
 80089c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089c6:	3001      	adds	r0, #1
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	9219      	str	r2, [sp, #100]	; 0x64
 80089cc:	785a      	ldrb	r2, [r3, #1]
 80089ce:	2a30      	cmp	r2, #48	; 0x30
 80089d0:	d0f8      	beq.n	80089c4 <_strtod_l+0x1e4>
 80089d2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80089d6:	2b08      	cmp	r3, #8
 80089d8:	f200 84e4 	bhi.w	80093a4 <_strtod_l+0xbc4>
 80089dc:	9008      	str	r0, [sp, #32]
 80089de:	2000      	movs	r0, #0
 80089e0:	4606      	mov	r6, r0
 80089e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80089e6:	3a30      	subs	r2, #48	; 0x30
 80089e8:	f100 0301 	add.w	r3, r0, #1
 80089ec:	d014      	beq.n	8008a18 <_strtod_l+0x238>
 80089ee:	9908      	ldr	r1, [sp, #32]
 80089f0:	eb00 0c06 	add.w	ip, r0, r6
 80089f4:	4419      	add	r1, r3
 80089f6:	9108      	str	r1, [sp, #32]
 80089f8:	4633      	mov	r3, r6
 80089fa:	210a      	movs	r1, #10
 80089fc:	4563      	cmp	r3, ip
 80089fe:	d113      	bne.n	8008a28 <_strtod_l+0x248>
 8008a00:	1833      	adds	r3, r6, r0
 8008a02:	2b08      	cmp	r3, #8
 8008a04:	f106 0601 	add.w	r6, r6, #1
 8008a08:	4406      	add	r6, r0
 8008a0a:	dc1a      	bgt.n	8008a42 <_strtod_l+0x262>
 8008a0c:	230a      	movs	r3, #10
 8008a0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a10:	fb03 2301 	mla	r3, r3, r1, r2
 8008a14:	930a      	str	r3, [sp, #40]	; 0x28
 8008a16:	2300      	movs	r3, #0
 8008a18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	1c51      	adds	r1, r2, #1
 8008a1e:	9119      	str	r1, [sp, #100]	; 0x64
 8008a20:	7852      	ldrb	r2, [r2, #1]
 8008a22:	e7c9      	b.n	80089b8 <_strtod_l+0x1d8>
 8008a24:	4658      	mov	r0, fp
 8008a26:	e7d2      	b.n	80089ce <_strtod_l+0x1ee>
 8008a28:	2b08      	cmp	r3, #8
 8008a2a:	f103 0301 	add.w	r3, r3, #1
 8008a2e:	dc03      	bgt.n	8008a38 <_strtod_l+0x258>
 8008a30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008a32:	434f      	muls	r7, r1
 8008a34:	970a      	str	r7, [sp, #40]	; 0x28
 8008a36:	e7e1      	b.n	80089fc <_strtod_l+0x21c>
 8008a38:	2b10      	cmp	r3, #16
 8008a3a:	bfd8      	it	le
 8008a3c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008a40:	e7dc      	b.n	80089fc <_strtod_l+0x21c>
 8008a42:	2e10      	cmp	r6, #16
 8008a44:	bfdc      	itt	le
 8008a46:	230a      	movle	r3, #10
 8008a48:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008a4c:	e7e3      	b.n	8008a16 <_strtod_l+0x236>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	9308      	str	r3, [sp, #32]
 8008a52:	2301      	movs	r3, #1
 8008a54:	e780      	b.n	8008958 <_strtod_l+0x178>
 8008a56:	f04f 0c00 	mov.w	ip, #0
 8008a5a:	1caa      	adds	r2, r5, #2
 8008a5c:	9219      	str	r2, [sp, #100]	; 0x64
 8008a5e:	78aa      	ldrb	r2, [r5, #2]
 8008a60:	e788      	b.n	8008974 <_strtod_l+0x194>
 8008a62:	f04f 0c01 	mov.w	ip, #1
 8008a66:	e7f8      	b.n	8008a5a <_strtod_l+0x27a>
 8008a68:	0800b320 	.word	0x0800b320
 8008a6c:	7ff00000 	.word	0x7ff00000
 8008a70:	0800b31c 	.word	0x0800b31c
 8008a74:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a76:	1c51      	adds	r1, r2, #1
 8008a78:	9119      	str	r1, [sp, #100]	; 0x64
 8008a7a:	7852      	ldrb	r2, [r2, #1]
 8008a7c:	2a30      	cmp	r2, #48	; 0x30
 8008a7e:	d0f9      	beq.n	8008a74 <_strtod_l+0x294>
 8008a80:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008a84:	2908      	cmp	r1, #8
 8008a86:	f63f af7a 	bhi.w	800897e <_strtod_l+0x19e>
 8008a8a:	3a30      	subs	r2, #48	; 0x30
 8008a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a90:	920c      	str	r2, [sp, #48]	; 0x30
 8008a92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a94:	1c57      	adds	r7, r2, #1
 8008a96:	9719      	str	r7, [sp, #100]	; 0x64
 8008a98:	7852      	ldrb	r2, [r2, #1]
 8008a9a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008a9e:	f1be 0f09 	cmp.w	lr, #9
 8008aa2:	d938      	bls.n	8008b16 <_strtod_l+0x336>
 8008aa4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008aa6:	1a7f      	subs	r7, r7, r1
 8008aa8:	2f08      	cmp	r7, #8
 8008aaa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008aae:	dc03      	bgt.n	8008ab8 <_strtod_l+0x2d8>
 8008ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ab2:	428f      	cmp	r7, r1
 8008ab4:	bfa8      	it	ge
 8008ab6:	460f      	movge	r7, r1
 8008ab8:	f1bc 0f00 	cmp.w	ip, #0
 8008abc:	d000      	beq.n	8008ac0 <_strtod_l+0x2e0>
 8008abe:	427f      	negs	r7, r7
 8008ac0:	2e00      	cmp	r6, #0
 8008ac2:	d14f      	bne.n	8008b64 <_strtod_l+0x384>
 8008ac4:	9905      	ldr	r1, [sp, #20]
 8008ac6:	4301      	orrs	r1, r0
 8008ac8:	f47f aec3 	bne.w	8008852 <_strtod_l+0x72>
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f47f aedb 	bne.w	8008888 <_strtod_l+0xa8>
 8008ad2:	2a69      	cmp	r2, #105	; 0x69
 8008ad4:	d029      	beq.n	8008b2a <_strtod_l+0x34a>
 8008ad6:	dc26      	bgt.n	8008b26 <_strtod_l+0x346>
 8008ad8:	2a49      	cmp	r2, #73	; 0x49
 8008ada:	d026      	beq.n	8008b2a <_strtod_l+0x34a>
 8008adc:	2a4e      	cmp	r2, #78	; 0x4e
 8008ade:	f47f aed3 	bne.w	8008888 <_strtod_l+0xa8>
 8008ae2:	499a      	ldr	r1, [pc, #616]	; (8008d4c <_strtod_l+0x56c>)
 8008ae4:	a819      	add	r0, sp, #100	; 0x64
 8008ae6:	f001 fdaf 	bl	800a648 <__match>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	f43f aecc 	beq.w	8008888 <_strtod_l+0xa8>
 8008af0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b28      	cmp	r3, #40	; 0x28
 8008af6:	d12f      	bne.n	8008b58 <_strtod_l+0x378>
 8008af8:	4995      	ldr	r1, [pc, #596]	; (8008d50 <_strtod_l+0x570>)
 8008afa:	aa1c      	add	r2, sp, #112	; 0x70
 8008afc:	a819      	add	r0, sp, #100	; 0x64
 8008afe:	f001 fdb7 	bl	800a670 <__hexnan>
 8008b02:	2805      	cmp	r0, #5
 8008b04:	d128      	bne.n	8008b58 <_strtod_l+0x378>
 8008b06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b08:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008b0c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008b10:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008b14:	e69d      	b.n	8008852 <_strtod_l+0x72>
 8008b16:	210a      	movs	r1, #10
 8008b18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b1a:	fb01 2107 	mla	r1, r1, r7, r2
 8008b1e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008b22:	9209      	str	r2, [sp, #36]	; 0x24
 8008b24:	e7b5      	b.n	8008a92 <_strtod_l+0x2b2>
 8008b26:	2a6e      	cmp	r2, #110	; 0x6e
 8008b28:	e7d9      	b.n	8008ade <_strtod_l+0x2fe>
 8008b2a:	498a      	ldr	r1, [pc, #552]	; (8008d54 <_strtod_l+0x574>)
 8008b2c:	a819      	add	r0, sp, #100	; 0x64
 8008b2e:	f001 fd8b 	bl	800a648 <__match>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	f43f aea8 	beq.w	8008888 <_strtod_l+0xa8>
 8008b38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b3a:	4987      	ldr	r1, [pc, #540]	; (8008d58 <_strtod_l+0x578>)
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	a819      	add	r0, sp, #100	; 0x64
 8008b40:	9319      	str	r3, [sp, #100]	; 0x64
 8008b42:	f001 fd81 	bl	800a648 <__match>
 8008b46:	b910      	cbnz	r0, 8008b4e <_strtod_l+0x36e>
 8008b48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	9319      	str	r3, [sp, #100]	; 0x64
 8008b4e:	f04f 0800 	mov.w	r8, #0
 8008b52:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008d5c <_strtod_l+0x57c>
 8008b56:	e67c      	b.n	8008852 <_strtod_l+0x72>
 8008b58:	4881      	ldr	r0, [pc, #516]	; (8008d60 <_strtod_l+0x580>)
 8008b5a:	f001 faa9 	bl	800a0b0 <nan>
 8008b5e:	4680      	mov	r8, r0
 8008b60:	4689      	mov	r9, r1
 8008b62:	e676      	b.n	8008852 <_strtod_l+0x72>
 8008b64:	9b08      	ldr	r3, [sp, #32]
 8008b66:	f1bb 0f00 	cmp.w	fp, #0
 8008b6a:	bf08      	it	eq
 8008b6c:	46b3      	moveq	fp, r6
 8008b6e:	1afb      	subs	r3, r7, r3
 8008b70:	2e10      	cmp	r6, #16
 8008b72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b74:	4635      	mov	r5, r6
 8008b76:	9309      	str	r3, [sp, #36]	; 0x24
 8008b78:	bfa8      	it	ge
 8008b7a:	2510      	movge	r5, #16
 8008b7c:	f7f7 fc3c 	bl	80003f8 <__aeabi_ui2d>
 8008b80:	2e09      	cmp	r6, #9
 8008b82:	4680      	mov	r8, r0
 8008b84:	4689      	mov	r9, r1
 8008b86:	dd13      	ble.n	8008bb0 <_strtod_l+0x3d0>
 8008b88:	4b76      	ldr	r3, [pc, #472]	; (8008d64 <_strtod_l+0x584>)
 8008b8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008b8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008b92:	f7f7 fcab 	bl	80004ec <__aeabi_dmul>
 8008b96:	4680      	mov	r8, r0
 8008b98:	4650      	mov	r0, sl
 8008b9a:	4689      	mov	r9, r1
 8008b9c:	f7f7 fc2c 	bl	80003f8 <__aeabi_ui2d>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	f7f7 faea 	bl	8000180 <__adddf3>
 8008bac:	4680      	mov	r8, r0
 8008bae:	4689      	mov	r9, r1
 8008bb0:	2e0f      	cmp	r6, #15
 8008bb2:	dc36      	bgt.n	8008c22 <_strtod_l+0x442>
 8008bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f43f ae4b 	beq.w	8008852 <_strtod_l+0x72>
 8008bbc:	dd22      	ble.n	8008c04 <_strtod_l+0x424>
 8008bbe:	2b16      	cmp	r3, #22
 8008bc0:	dc09      	bgt.n	8008bd6 <_strtod_l+0x3f6>
 8008bc2:	4968      	ldr	r1, [pc, #416]	; (8008d64 <_strtod_l+0x584>)
 8008bc4:	4642      	mov	r2, r8
 8008bc6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bca:	464b      	mov	r3, r9
 8008bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bd0:	f7f7 fc8c 	bl	80004ec <__aeabi_dmul>
 8008bd4:	e7c3      	b.n	8008b5e <_strtod_l+0x37e>
 8008bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bd8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	db20      	blt.n	8008c22 <_strtod_l+0x442>
 8008be0:	4c60      	ldr	r4, [pc, #384]	; (8008d64 <_strtod_l+0x584>)
 8008be2:	f1c6 060f 	rsb	r6, r6, #15
 8008be6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008bea:	4642      	mov	r2, r8
 8008bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bf0:	464b      	mov	r3, r9
 8008bf2:	f7f7 fc7b 	bl	80004ec <__aeabi_dmul>
 8008bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf8:	1b9e      	subs	r6, r3, r6
 8008bfa:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008bfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008c02:	e7e5      	b.n	8008bd0 <_strtod_l+0x3f0>
 8008c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c06:	3316      	adds	r3, #22
 8008c08:	db0b      	blt.n	8008c22 <_strtod_l+0x442>
 8008c0a:	9b08      	ldr	r3, [sp, #32]
 8008c0c:	4640      	mov	r0, r8
 8008c0e:	1bdf      	subs	r7, r3, r7
 8008c10:	4b54      	ldr	r3, [pc, #336]	; (8008d64 <_strtod_l+0x584>)
 8008c12:	4649      	mov	r1, r9
 8008c14:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c1c:	f7f7 fd90 	bl	8000740 <__aeabi_ddiv>
 8008c20:	e79d      	b.n	8008b5e <_strtod_l+0x37e>
 8008c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c24:	1b75      	subs	r5, r6, r5
 8008c26:	441d      	add	r5, r3
 8008c28:	2d00      	cmp	r5, #0
 8008c2a:	dd70      	ble.n	8008d0e <_strtod_l+0x52e>
 8008c2c:	f015 030f 	ands.w	r3, r5, #15
 8008c30:	d00a      	beq.n	8008c48 <_strtod_l+0x468>
 8008c32:	494c      	ldr	r1, [pc, #304]	; (8008d64 <_strtod_l+0x584>)
 8008c34:	4642      	mov	r2, r8
 8008c36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c3e:	464b      	mov	r3, r9
 8008c40:	f7f7 fc54 	bl	80004ec <__aeabi_dmul>
 8008c44:	4680      	mov	r8, r0
 8008c46:	4689      	mov	r9, r1
 8008c48:	f035 050f 	bics.w	r5, r5, #15
 8008c4c:	d04d      	beq.n	8008cea <_strtod_l+0x50a>
 8008c4e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008c52:	dd22      	ble.n	8008c9a <_strtod_l+0x4ba>
 8008c54:	2600      	movs	r6, #0
 8008c56:	46b3      	mov	fp, r6
 8008c58:	960b      	str	r6, [sp, #44]	; 0x2c
 8008c5a:	9608      	str	r6, [sp, #32]
 8008c5c:	2322      	movs	r3, #34	; 0x22
 8008c5e:	f04f 0800 	mov.w	r8, #0
 8008c62:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008d5c <_strtod_l+0x57c>
 8008c66:	6023      	str	r3, [r4, #0]
 8008c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f43f adf1 	beq.w	8008852 <_strtod_l+0x72>
 8008c70:	4620      	mov	r0, r4
 8008c72:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008c74:	f7ff f934 	bl	8007ee0 <_Bfree>
 8008c78:	4620      	mov	r0, r4
 8008c7a:	9908      	ldr	r1, [sp, #32]
 8008c7c:	f7ff f930 	bl	8007ee0 <_Bfree>
 8008c80:	4659      	mov	r1, fp
 8008c82:	4620      	mov	r0, r4
 8008c84:	f7ff f92c 	bl	8007ee0 <_Bfree>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c8c:	f7ff f928 	bl	8007ee0 <_Bfree>
 8008c90:	4631      	mov	r1, r6
 8008c92:	4620      	mov	r0, r4
 8008c94:	f7ff f924 	bl	8007ee0 <_Bfree>
 8008c98:	e5db      	b.n	8008852 <_strtod_l+0x72>
 8008c9a:	4b33      	ldr	r3, [pc, #204]	; (8008d68 <_strtod_l+0x588>)
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	9305      	str	r3, [sp, #20]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	469a      	mov	sl, r3
 8008ca6:	112d      	asrs	r5, r5, #4
 8008ca8:	2d01      	cmp	r5, #1
 8008caa:	dc21      	bgt.n	8008cf0 <_strtod_l+0x510>
 8008cac:	b10b      	cbz	r3, 8008cb2 <_strtod_l+0x4d2>
 8008cae:	4680      	mov	r8, r0
 8008cb0:	4689      	mov	r9, r1
 8008cb2:	492d      	ldr	r1, [pc, #180]	; (8008d68 <_strtod_l+0x588>)
 8008cb4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008cb8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008cbc:	4642      	mov	r2, r8
 8008cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	f7f7 fc12 	bl	80004ec <__aeabi_dmul>
 8008cc8:	4b24      	ldr	r3, [pc, #144]	; (8008d5c <_strtod_l+0x57c>)
 8008cca:	460a      	mov	r2, r1
 8008ccc:	400b      	ands	r3, r1
 8008cce:	4927      	ldr	r1, [pc, #156]	; (8008d6c <_strtod_l+0x58c>)
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	428b      	cmp	r3, r1
 8008cd4:	d8be      	bhi.n	8008c54 <_strtod_l+0x474>
 8008cd6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008cda:	428b      	cmp	r3, r1
 8008cdc:	bf86      	itte	hi
 8008cde:	f04f 38ff 	movhi.w	r8, #4294967295
 8008ce2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008d70 <_strtod_l+0x590>
 8008ce6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008cea:	2300      	movs	r3, #0
 8008cec:	9305      	str	r3, [sp, #20]
 8008cee:	e07b      	b.n	8008de8 <_strtod_l+0x608>
 8008cf0:	07ea      	lsls	r2, r5, #31
 8008cf2:	d505      	bpl.n	8008d00 <_strtod_l+0x520>
 8008cf4:	9b05      	ldr	r3, [sp, #20]
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	f7f7 fbf7 	bl	80004ec <__aeabi_dmul>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	9a05      	ldr	r2, [sp, #20]
 8008d02:	f10a 0a01 	add.w	sl, sl, #1
 8008d06:	3208      	adds	r2, #8
 8008d08:	106d      	asrs	r5, r5, #1
 8008d0a:	9205      	str	r2, [sp, #20]
 8008d0c:	e7cc      	b.n	8008ca8 <_strtod_l+0x4c8>
 8008d0e:	d0ec      	beq.n	8008cea <_strtod_l+0x50a>
 8008d10:	426d      	negs	r5, r5
 8008d12:	f015 020f 	ands.w	r2, r5, #15
 8008d16:	d00a      	beq.n	8008d2e <_strtod_l+0x54e>
 8008d18:	4b12      	ldr	r3, [pc, #72]	; (8008d64 <_strtod_l+0x584>)
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d20:	4649      	mov	r1, r9
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f7f7 fd0b 	bl	8000740 <__aeabi_ddiv>
 8008d2a:	4680      	mov	r8, r0
 8008d2c:	4689      	mov	r9, r1
 8008d2e:	112d      	asrs	r5, r5, #4
 8008d30:	d0db      	beq.n	8008cea <_strtod_l+0x50a>
 8008d32:	2d1f      	cmp	r5, #31
 8008d34:	dd1e      	ble.n	8008d74 <_strtod_l+0x594>
 8008d36:	2600      	movs	r6, #0
 8008d38:	46b3      	mov	fp, r6
 8008d3a:	960b      	str	r6, [sp, #44]	; 0x2c
 8008d3c:	9608      	str	r6, [sp, #32]
 8008d3e:	2322      	movs	r3, #34	; 0x22
 8008d40:	f04f 0800 	mov.w	r8, #0
 8008d44:	f04f 0900 	mov.w	r9, #0
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	e78d      	b.n	8008c68 <_strtod_l+0x488>
 8008d4c:	0800b073 	.word	0x0800b073
 8008d50:	0800b334 	.word	0x0800b334
 8008d54:	0800b06b 	.word	0x0800b06b
 8008d58:	0800b14d 	.word	0x0800b14d
 8008d5c:	7ff00000 	.word	0x7ff00000
 8008d60:	0800b149 	.word	0x0800b149
 8008d64:	0800b248 	.word	0x0800b248
 8008d68:	0800b220 	.word	0x0800b220
 8008d6c:	7ca00000 	.word	0x7ca00000
 8008d70:	7fefffff 	.word	0x7fefffff
 8008d74:	f015 0310 	ands.w	r3, r5, #16
 8008d78:	bf18      	it	ne
 8008d7a:	236a      	movne	r3, #106	; 0x6a
 8008d7c:	4640      	mov	r0, r8
 8008d7e:	9305      	str	r3, [sp, #20]
 8008d80:	4649      	mov	r1, r9
 8008d82:	2300      	movs	r3, #0
 8008d84:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009050 <_strtod_l+0x870>
 8008d88:	07ea      	lsls	r2, r5, #31
 8008d8a:	d504      	bpl.n	8008d96 <_strtod_l+0x5b6>
 8008d8c:	e9da 2300 	ldrd	r2, r3, [sl]
 8008d90:	f7f7 fbac 	bl	80004ec <__aeabi_dmul>
 8008d94:	2301      	movs	r3, #1
 8008d96:	106d      	asrs	r5, r5, #1
 8008d98:	f10a 0a08 	add.w	sl, sl, #8
 8008d9c:	d1f4      	bne.n	8008d88 <_strtod_l+0x5a8>
 8008d9e:	b10b      	cbz	r3, 8008da4 <_strtod_l+0x5c4>
 8008da0:	4680      	mov	r8, r0
 8008da2:	4689      	mov	r9, r1
 8008da4:	9b05      	ldr	r3, [sp, #20]
 8008da6:	b1bb      	cbz	r3, 8008dd8 <_strtod_l+0x5f8>
 8008da8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008dac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	4649      	mov	r1, r9
 8008db4:	dd10      	ble.n	8008dd8 <_strtod_l+0x5f8>
 8008db6:	2b1f      	cmp	r3, #31
 8008db8:	f340 8128 	ble.w	800900c <_strtod_l+0x82c>
 8008dbc:	2b34      	cmp	r3, #52	; 0x34
 8008dbe:	bfd8      	it	le
 8008dc0:	f04f 33ff 	movle.w	r3, #4294967295
 8008dc4:	f04f 0800 	mov.w	r8, #0
 8008dc8:	bfcf      	iteee	gt
 8008dca:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008dce:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008dd2:	4093      	lslle	r3, r2
 8008dd4:	ea03 0901 	andle.w	r9, r3, r1
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2300      	movs	r3, #0
 8008ddc:	4640      	mov	r0, r8
 8008dde:	4649      	mov	r1, r9
 8008de0:	f7f7 fdec 	bl	80009bc <__aeabi_dcmpeq>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d1a6      	bne.n	8008d36 <_strtod_l+0x556>
 8008de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dea:	465a      	mov	r2, fp
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	4620      	mov	r0, r4
 8008df0:	4633      	mov	r3, r6
 8008df2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008df4:	f7ff f8dc 	bl	8007fb0 <__s2b>
 8008df8:	900b      	str	r0, [sp, #44]	; 0x2c
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	f43f af2a 	beq.w	8008c54 <_strtod_l+0x474>
 8008e00:	2600      	movs	r6, #0
 8008e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e04:	9b08      	ldr	r3, [sp, #32]
 8008e06:	2a00      	cmp	r2, #0
 8008e08:	eba3 0307 	sub.w	r3, r3, r7
 8008e0c:	bfa8      	it	ge
 8008e0e:	2300      	movge	r3, #0
 8008e10:	46b3      	mov	fp, r6
 8008e12:	9312      	str	r3, [sp, #72]	; 0x48
 8008e14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008e18:	9316      	str	r3, [sp, #88]	; 0x58
 8008e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	6859      	ldr	r1, [r3, #4]
 8008e20:	f7ff f81e 	bl	8007e60 <_Balloc>
 8008e24:	9008      	str	r0, [sp, #32]
 8008e26:	2800      	cmp	r0, #0
 8008e28:	f43f af18 	beq.w	8008c5c <_strtod_l+0x47c>
 8008e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e2e:	300c      	adds	r0, #12
 8008e30:	691a      	ldr	r2, [r3, #16]
 8008e32:	f103 010c 	add.w	r1, r3, #12
 8008e36:	3202      	adds	r2, #2
 8008e38:	0092      	lsls	r2, r2, #2
 8008e3a:	f001 f92b 	bl	800a094 <memcpy>
 8008e3e:	ab1c      	add	r3, sp, #112	; 0x70
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	ab1b      	add	r3, sp, #108	; 0x6c
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	4642      	mov	r2, r8
 8008e48:	464b      	mov	r3, r9
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008e50:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008e54:	f7ff fbd8 	bl	8008608 <__d2b>
 8008e58:	901a      	str	r0, [sp, #104]	; 0x68
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	f43f aefe 	beq.w	8008c5c <_strtod_l+0x47c>
 8008e60:	2101      	movs	r1, #1
 8008e62:	4620      	mov	r0, r4
 8008e64:	f7ff f93c 	bl	80080e0 <__i2b>
 8008e68:	4683      	mov	fp, r0
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	f43f aef6 	beq.w	8008c5c <_strtod_l+0x47c>
 8008e70:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008e72:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008e74:	2f00      	cmp	r7, #0
 8008e76:	bfab      	itete	ge
 8008e78:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8008e7a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008e7c:	eb07 0a03 	addge.w	sl, r7, r3
 8008e80:	1bdd      	sublt	r5, r3, r7
 8008e82:	9b05      	ldr	r3, [sp, #20]
 8008e84:	bfa8      	it	ge
 8008e86:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008e88:	eba7 0703 	sub.w	r7, r7, r3
 8008e8c:	4417      	add	r7, r2
 8008e8e:	4b71      	ldr	r3, [pc, #452]	; (8009054 <_strtod_l+0x874>)
 8008e90:	f107 37ff 	add.w	r7, r7, #4294967295
 8008e94:	bfb8      	it	lt
 8008e96:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008e9a:	429f      	cmp	r7, r3
 8008e9c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008ea0:	f280 80c7 	bge.w	8009032 <_strtod_l+0x852>
 8008ea4:	1bdb      	subs	r3, r3, r7
 8008ea6:	2b1f      	cmp	r3, #31
 8008ea8:	f04f 0101 	mov.w	r1, #1
 8008eac:	eba2 0203 	sub.w	r2, r2, r3
 8008eb0:	f300 80b3 	bgt.w	800901a <_strtod_l+0x83a>
 8008eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8008eba:	2300      	movs	r3, #0
 8008ebc:	9310      	str	r3, [sp, #64]	; 0x40
 8008ebe:	eb0a 0702 	add.w	r7, sl, r2
 8008ec2:	9b05      	ldr	r3, [sp, #20]
 8008ec4:	45ba      	cmp	sl, r7
 8008ec6:	4415      	add	r5, r2
 8008ec8:	441d      	add	r5, r3
 8008eca:	4653      	mov	r3, sl
 8008ecc:	bfa8      	it	ge
 8008ece:	463b      	movge	r3, r7
 8008ed0:	42ab      	cmp	r3, r5
 8008ed2:	bfa8      	it	ge
 8008ed4:	462b      	movge	r3, r5
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	bfc2      	ittt	gt
 8008eda:	1aff      	subgt	r7, r7, r3
 8008edc:	1aed      	subgt	r5, r5, r3
 8008ede:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008ee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	dd17      	ble.n	8008f18 <_strtod_l+0x738>
 8008ee8:	4659      	mov	r1, fp
 8008eea:	461a      	mov	r2, r3
 8008eec:	4620      	mov	r0, r4
 8008eee:	f7ff f9b5 	bl	800825c <__pow5mult>
 8008ef2:	4683      	mov	fp, r0
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	f43f aeb1 	beq.w	8008c5c <_strtod_l+0x47c>
 8008efa:	4601      	mov	r1, r0
 8008efc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008efe:	4620      	mov	r0, r4
 8008f00:	f7ff f904 	bl	800810c <__multiply>
 8008f04:	900a      	str	r0, [sp, #40]	; 0x28
 8008f06:	2800      	cmp	r0, #0
 8008f08:	f43f aea8 	beq.w	8008c5c <_strtod_l+0x47c>
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008f10:	f7fe ffe6 	bl	8007ee0 <_Bfree>
 8008f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f16:	931a      	str	r3, [sp, #104]	; 0x68
 8008f18:	2f00      	cmp	r7, #0
 8008f1a:	f300 808f 	bgt.w	800903c <_strtod_l+0x85c>
 8008f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	dd08      	ble.n	8008f36 <_strtod_l+0x756>
 8008f24:	4620      	mov	r0, r4
 8008f26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008f28:	9908      	ldr	r1, [sp, #32]
 8008f2a:	f7ff f997 	bl	800825c <__pow5mult>
 8008f2e:	9008      	str	r0, [sp, #32]
 8008f30:	2800      	cmp	r0, #0
 8008f32:	f43f ae93 	beq.w	8008c5c <_strtod_l+0x47c>
 8008f36:	2d00      	cmp	r5, #0
 8008f38:	dd08      	ble.n	8008f4c <_strtod_l+0x76c>
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	9908      	ldr	r1, [sp, #32]
 8008f40:	f7ff f9e6 	bl	8008310 <__lshift>
 8008f44:	9008      	str	r0, [sp, #32]
 8008f46:	2800      	cmp	r0, #0
 8008f48:	f43f ae88 	beq.w	8008c5c <_strtod_l+0x47c>
 8008f4c:	f1ba 0f00 	cmp.w	sl, #0
 8008f50:	dd08      	ble.n	8008f64 <_strtod_l+0x784>
 8008f52:	4659      	mov	r1, fp
 8008f54:	4652      	mov	r2, sl
 8008f56:	4620      	mov	r0, r4
 8008f58:	f7ff f9da 	bl	8008310 <__lshift>
 8008f5c:	4683      	mov	fp, r0
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	f43f ae7c 	beq.w	8008c5c <_strtod_l+0x47c>
 8008f64:	4620      	mov	r0, r4
 8008f66:	9a08      	ldr	r2, [sp, #32]
 8008f68:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008f6a:	f7ff fa59 	bl	8008420 <__mdiff>
 8008f6e:	4606      	mov	r6, r0
 8008f70:	2800      	cmp	r0, #0
 8008f72:	f43f ae73 	beq.w	8008c5c <_strtod_l+0x47c>
 8008f76:	2500      	movs	r5, #0
 8008f78:	68c3      	ldr	r3, [r0, #12]
 8008f7a:	4659      	mov	r1, fp
 8008f7c:	60c5      	str	r5, [r0, #12]
 8008f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f80:	f7ff fa32 	bl	80083e8 <__mcmp>
 8008f84:	42a8      	cmp	r0, r5
 8008f86:	da6b      	bge.n	8009060 <_strtod_l+0x880>
 8008f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f8a:	ea53 0308 	orrs.w	r3, r3, r8
 8008f8e:	f040 808f 	bne.w	80090b0 <_strtod_l+0x8d0>
 8008f92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f040 808a 	bne.w	80090b0 <_strtod_l+0x8d0>
 8008f9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008fa0:	0d1b      	lsrs	r3, r3, #20
 8008fa2:	051b      	lsls	r3, r3, #20
 8008fa4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008fa8:	f240 8082 	bls.w	80090b0 <_strtod_l+0x8d0>
 8008fac:	6973      	ldr	r3, [r6, #20]
 8008fae:	b913      	cbnz	r3, 8008fb6 <_strtod_l+0x7d6>
 8008fb0:	6933      	ldr	r3, [r6, #16]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	dd7c      	ble.n	80090b0 <_strtod_l+0x8d0>
 8008fb6:	4631      	mov	r1, r6
 8008fb8:	2201      	movs	r2, #1
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f7ff f9a8 	bl	8008310 <__lshift>
 8008fc0:	4659      	mov	r1, fp
 8008fc2:	4606      	mov	r6, r0
 8008fc4:	f7ff fa10 	bl	80083e8 <__mcmp>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	dd71      	ble.n	80090b0 <_strtod_l+0x8d0>
 8008fcc:	9905      	ldr	r1, [sp, #20]
 8008fce:	464b      	mov	r3, r9
 8008fd0:	4a21      	ldr	r2, [pc, #132]	; (8009058 <_strtod_l+0x878>)
 8008fd2:	2900      	cmp	r1, #0
 8008fd4:	f000 808d 	beq.w	80090f2 <_strtod_l+0x912>
 8008fd8:	ea02 0109 	and.w	r1, r2, r9
 8008fdc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008fe0:	f300 8087 	bgt.w	80090f2 <_strtod_l+0x912>
 8008fe4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008fe8:	f77f aea9 	ble.w	8008d3e <_strtod_l+0x55e>
 8008fec:	4640      	mov	r0, r8
 8008fee:	4649      	mov	r1, r9
 8008ff0:	4b1a      	ldr	r3, [pc, #104]	; (800905c <_strtod_l+0x87c>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f7f7 fa7a 	bl	80004ec <__aeabi_dmul>
 8008ff8:	4b17      	ldr	r3, [pc, #92]	; (8009058 <_strtod_l+0x878>)
 8008ffa:	4680      	mov	r8, r0
 8008ffc:	400b      	ands	r3, r1
 8008ffe:	4689      	mov	r9, r1
 8009000:	2b00      	cmp	r3, #0
 8009002:	f47f ae35 	bne.w	8008c70 <_strtod_l+0x490>
 8009006:	2322      	movs	r3, #34	; 0x22
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	e631      	b.n	8008c70 <_strtod_l+0x490>
 800900c:	f04f 32ff 	mov.w	r2, #4294967295
 8009010:	fa02 f303 	lsl.w	r3, r2, r3
 8009014:	ea03 0808 	and.w	r8, r3, r8
 8009018:	e6de      	b.n	8008dd8 <_strtod_l+0x5f8>
 800901a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800901e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8009022:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8009026:	37e2      	adds	r7, #226	; 0xe2
 8009028:	fa01 f307 	lsl.w	r3, r1, r7
 800902c:	9310      	str	r3, [sp, #64]	; 0x40
 800902e:	9113      	str	r1, [sp, #76]	; 0x4c
 8009030:	e745      	b.n	8008ebe <_strtod_l+0x6de>
 8009032:	2300      	movs	r3, #0
 8009034:	9310      	str	r3, [sp, #64]	; 0x40
 8009036:	2301      	movs	r3, #1
 8009038:	9313      	str	r3, [sp, #76]	; 0x4c
 800903a:	e740      	b.n	8008ebe <_strtod_l+0x6de>
 800903c:	463a      	mov	r2, r7
 800903e:	4620      	mov	r0, r4
 8009040:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009042:	f7ff f965 	bl	8008310 <__lshift>
 8009046:	901a      	str	r0, [sp, #104]	; 0x68
 8009048:	2800      	cmp	r0, #0
 800904a:	f47f af68 	bne.w	8008f1e <_strtod_l+0x73e>
 800904e:	e605      	b.n	8008c5c <_strtod_l+0x47c>
 8009050:	0800b348 	.word	0x0800b348
 8009054:	fffffc02 	.word	0xfffffc02
 8009058:	7ff00000 	.word	0x7ff00000
 800905c:	39500000 	.word	0x39500000
 8009060:	46ca      	mov	sl, r9
 8009062:	d165      	bne.n	8009130 <_strtod_l+0x950>
 8009064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009066:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800906a:	b352      	cbz	r2, 80090c2 <_strtod_l+0x8e2>
 800906c:	4a9e      	ldr	r2, [pc, #632]	; (80092e8 <_strtod_l+0xb08>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d12a      	bne.n	80090c8 <_strtod_l+0x8e8>
 8009072:	9b05      	ldr	r3, [sp, #20]
 8009074:	4641      	mov	r1, r8
 8009076:	b1fb      	cbz	r3, 80090b8 <_strtod_l+0x8d8>
 8009078:	4b9c      	ldr	r3, [pc, #624]	; (80092ec <_strtod_l+0xb0c>)
 800907a:	f04f 32ff 	mov.w	r2, #4294967295
 800907e:	ea09 0303 	and.w	r3, r9, r3
 8009082:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009086:	d81a      	bhi.n	80090be <_strtod_l+0x8de>
 8009088:	0d1b      	lsrs	r3, r3, #20
 800908a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800908e:	fa02 f303 	lsl.w	r3, r2, r3
 8009092:	4299      	cmp	r1, r3
 8009094:	d118      	bne.n	80090c8 <_strtod_l+0x8e8>
 8009096:	4b96      	ldr	r3, [pc, #600]	; (80092f0 <_strtod_l+0xb10>)
 8009098:	459a      	cmp	sl, r3
 800909a:	d102      	bne.n	80090a2 <_strtod_l+0x8c2>
 800909c:	3101      	adds	r1, #1
 800909e:	f43f addd 	beq.w	8008c5c <_strtod_l+0x47c>
 80090a2:	f04f 0800 	mov.w	r8, #0
 80090a6:	4b91      	ldr	r3, [pc, #580]	; (80092ec <_strtod_l+0xb0c>)
 80090a8:	ea0a 0303 	and.w	r3, sl, r3
 80090ac:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80090b0:	9b05      	ldr	r3, [sp, #20]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d19a      	bne.n	8008fec <_strtod_l+0x80c>
 80090b6:	e5db      	b.n	8008c70 <_strtod_l+0x490>
 80090b8:	f04f 33ff 	mov.w	r3, #4294967295
 80090bc:	e7e9      	b.n	8009092 <_strtod_l+0x8b2>
 80090be:	4613      	mov	r3, r2
 80090c0:	e7e7      	b.n	8009092 <_strtod_l+0x8b2>
 80090c2:	ea53 0308 	orrs.w	r3, r3, r8
 80090c6:	d081      	beq.n	8008fcc <_strtod_l+0x7ec>
 80090c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090ca:	b1e3      	cbz	r3, 8009106 <_strtod_l+0x926>
 80090cc:	ea13 0f0a 	tst.w	r3, sl
 80090d0:	d0ee      	beq.n	80090b0 <_strtod_l+0x8d0>
 80090d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d4:	4640      	mov	r0, r8
 80090d6:	4649      	mov	r1, r9
 80090d8:	9a05      	ldr	r2, [sp, #20]
 80090da:	b1c3      	cbz	r3, 800910e <_strtod_l+0x92e>
 80090dc:	f7ff fb5c 	bl	8008798 <sulp>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80090e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80090e8:	f7f7 f84a 	bl	8000180 <__adddf3>
 80090ec:	4680      	mov	r8, r0
 80090ee:	4689      	mov	r9, r1
 80090f0:	e7de      	b.n	80090b0 <_strtod_l+0x8d0>
 80090f2:	4013      	ands	r3, r2
 80090f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80090f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80090fc:	f04f 38ff 	mov.w	r8, #4294967295
 8009100:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009104:	e7d4      	b.n	80090b0 <_strtod_l+0x8d0>
 8009106:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009108:	ea13 0f08 	tst.w	r3, r8
 800910c:	e7e0      	b.n	80090d0 <_strtod_l+0x8f0>
 800910e:	f7ff fb43 	bl	8008798 <sulp>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009118:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800911a:	f7f7 f82f 	bl	800017c <__aeabi_dsub>
 800911e:	2200      	movs	r2, #0
 8009120:	2300      	movs	r3, #0
 8009122:	4680      	mov	r8, r0
 8009124:	4689      	mov	r9, r1
 8009126:	f7f7 fc49 	bl	80009bc <__aeabi_dcmpeq>
 800912a:	2800      	cmp	r0, #0
 800912c:	d0c0      	beq.n	80090b0 <_strtod_l+0x8d0>
 800912e:	e606      	b.n	8008d3e <_strtod_l+0x55e>
 8009130:	4659      	mov	r1, fp
 8009132:	4630      	mov	r0, r6
 8009134:	f7ff fabe 	bl	80086b4 <__ratio>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009140:	2200      	movs	r2, #0
 8009142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009146:	f7f7 fc4d 	bl	80009e4 <__aeabi_dcmple>
 800914a:	2800      	cmp	r0, #0
 800914c:	d06f      	beq.n	800922e <_strtod_l+0xa4e>
 800914e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009150:	2b00      	cmp	r3, #0
 8009152:	d17c      	bne.n	800924e <_strtod_l+0xa6e>
 8009154:	f1b8 0f00 	cmp.w	r8, #0
 8009158:	d159      	bne.n	800920e <_strtod_l+0xa2e>
 800915a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800915e:	2b00      	cmp	r3, #0
 8009160:	d17b      	bne.n	800925a <_strtod_l+0xa7a>
 8009162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009166:	2200      	movs	r2, #0
 8009168:	4b62      	ldr	r3, [pc, #392]	; (80092f4 <_strtod_l+0xb14>)
 800916a:	f7f7 fc31 	bl	80009d0 <__aeabi_dcmplt>
 800916e:	2800      	cmp	r0, #0
 8009170:	d15a      	bne.n	8009228 <_strtod_l+0xa48>
 8009172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009176:	2200      	movs	r2, #0
 8009178:	4b5f      	ldr	r3, [pc, #380]	; (80092f8 <_strtod_l+0xb18>)
 800917a:	f7f7 f9b7 	bl	80004ec <__aeabi_dmul>
 800917e:	4605      	mov	r5, r0
 8009180:	460f      	mov	r7, r1
 8009182:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009186:	9506      	str	r5, [sp, #24]
 8009188:	9307      	str	r3, [sp, #28]
 800918a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800918e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009192:	4b56      	ldr	r3, [pc, #344]	; (80092ec <_strtod_l+0xb0c>)
 8009194:	4a55      	ldr	r2, [pc, #340]	; (80092ec <_strtod_l+0xb0c>)
 8009196:	ea0a 0303 	and.w	r3, sl, r3
 800919a:	9313      	str	r3, [sp, #76]	; 0x4c
 800919c:	4b57      	ldr	r3, [pc, #348]	; (80092fc <_strtod_l+0xb1c>)
 800919e:	ea0a 0202 	and.w	r2, sl, r2
 80091a2:	429a      	cmp	r2, r3
 80091a4:	f040 80b0 	bne.w	8009308 <_strtod_l+0xb28>
 80091a8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80091ac:	4640      	mov	r0, r8
 80091ae:	4649      	mov	r1, r9
 80091b0:	f7ff f9c2 	bl	8008538 <__ulp>
 80091b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091b8:	f7f7 f998 	bl	80004ec <__aeabi_dmul>
 80091bc:	4642      	mov	r2, r8
 80091be:	464b      	mov	r3, r9
 80091c0:	f7f6 ffde 	bl	8000180 <__adddf3>
 80091c4:	f8df a124 	ldr.w	sl, [pc, #292]	; 80092ec <_strtod_l+0xb0c>
 80091c8:	4a4d      	ldr	r2, [pc, #308]	; (8009300 <_strtod_l+0xb20>)
 80091ca:	ea01 0a0a 	and.w	sl, r1, sl
 80091ce:	4592      	cmp	sl, r2
 80091d0:	4680      	mov	r8, r0
 80091d2:	d948      	bls.n	8009266 <_strtod_l+0xa86>
 80091d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091d6:	4b46      	ldr	r3, [pc, #280]	; (80092f0 <_strtod_l+0xb10>)
 80091d8:	429a      	cmp	r2, r3
 80091da:	d103      	bne.n	80091e4 <_strtod_l+0xa04>
 80091dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091de:	3301      	adds	r3, #1
 80091e0:	f43f ad3c 	beq.w	8008c5c <_strtod_l+0x47c>
 80091e4:	f04f 38ff 	mov.w	r8, #4294967295
 80091e8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80092f0 <_strtod_l+0xb10>
 80091ec:	4620      	mov	r0, r4
 80091ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 80091f0:	f7fe fe76 	bl	8007ee0 <_Bfree>
 80091f4:	4620      	mov	r0, r4
 80091f6:	9908      	ldr	r1, [sp, #32]
 80091f8:	f7fe fe72 	bl	8007ee0 <_Bfree>
 80091fc:	4659      	mov	r1, fp
 80091fe:	4620      	mov	r0, r4
 8009200:	f7fe fe6e 	bl	8007ee0 <_Bfree>
 8009204:	4631      	mov	r1, r6
 8009206:	4620      	mov	r0, r4
 8009208:	f7fe fe6a 	bl	8007ee0 <_Bfree>
 800920c:	e605      	b.n	8008e1a <_strtod_l+0x63a>
 800920e:	f1b8 0f01 	cmp.w	r8, #1
 8009212:	d103      	bne.n	800921c <_strtod_l+0xa3c>
 8009214:	f1b9 0f00 	cmp.w	r9, #0
 8009218:	f43f ad91 	beq.w	8008d3e <_strtod_l+0x55e>
 800921c:	2200      	movs	r2, #0
 800921e:	4b39      	ldr	r3, [pc, #228]	; (8009304 <_strtod_l+0xb24>)
 8009220:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009222:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009226:	e016      	b.n	8009256 <_strtod_l+0xa76>
 8009228:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800922a:	4f33      	ldr	r7, [pc, #204]	; (80092f8 <_strtod_l+0xb18>)
 800922c:	e7a9      	b.n	8009182 <_strtod_l+0x9a2>
 800922e:	4b32      	ldr	r3, [pc, #200]	; (80092f8 <_strtod_l+0xb18>)
 8009230:	2200      	movs	r2, #0
 8009232:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009236:	f7f7 f959 	bl	80004ec <__aeabi_dmul>
 800923a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800923c:	4605      	mov	r5, r0
 800923e:	460f      	mov	r7, r1
 8009240:	2b00      	cmp	r3, #0
 8009242:	d09e      	beq.n	8009182 <_strtod_l+0x9a2>
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800924c:	e79d      	b.n	800918a <_strtod_l+0x9aa>
 800924e:	2200      	movs	r2, #0
 8009250:	4b28      	ldr	r3, [pc, #160]	; (80092f4 <_strtod_l+0xb14>)
 8009252:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009256:	4f27      	ldr	r7, [pc, #156]	; (80092f4 <_strtod_l+0xb14>)
 8009258:	e797      	b.n	800918a <_strtod_l+0x9aa>
 800925a:	2200      	movs	r2, #0
 800925c:	4b29      	ldr	r3, [pc, #164]	; (8009304 <_strtod_l+0xb24>)
 800925e:	4645      	mov	r5, r8
 8009260:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009264:	e7f7      	b.n	8009256 <_strtod_l+0xa76>
 8009266:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800926a:	9b05      	ldr	r3, [sp, #20]
 800926c:	46ca      	mov	sl, r9
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1bc      	bne.n	80091ec <_strtod_l+0xa0c>
 8009272:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009276:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009278:	0d1b      	lsrs	r3, r3, #20
 800927a:	051b      	lsls	r3, r3, #20
 800927c:	429a      	cmp	r2, r3
 800927e:	d1b5      	bne.n	80091ec <_strtod_l+0xa0c>
 8009280:	4628      	mov	r0, r5
 8009282:	4639      	mov	r1, r7
 8009284:	f7f7 fc7a 	bl	8000b7c <__aeabi_d2lz>
 8009288:	f7f7 f902 	bl	8000490 <__aeabi_l2d>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4628      	mov	r0, r5
 8009292:	4639      	mov	r1, r7
 8009294:	f7f6 ff72 	bl	800017c <__aeabi_dsub>
 8009298:	460b      	mov	r3, r1
 800929a:	4602      	mov	r2, r0
 800929c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80092a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80092a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a6:	ea4a 0a08 	orr.w	sl, sl, r8
 80092aa:	ea5a 0a03 	orrs.w	sl, sl, r3
 80092ae:	d06c      	beq.n	800938a <_strtod_l+0xbaa>
 80092b0:	a309      	add	r3, pc, #36	; (adr r3, 80092d8 <_strtod_l+0xaf8>)
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	f7f7 fb8b 	bl	80009d0 <__aeabi_dcmplt>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	f47f acd8 	bne.w	8008c70 <_strtod_l+0x490>
 80092c0:	a307      	add	r3, pc, #28	; (adr r3, 80092e0 <_strtod_l+0xb00>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092ca:	f7f7 fb9f 	bl	8000a0c <__aeabi_dcmpgt>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d08c      	beq.n	80091ec <_strtod_l+0xa0c>
 80092d2:	e4cd      	b.n	8008c70 <_strtod_l+0x490>
 80092d4:	f3af 8000 	nop.w
 80092d8:	94a03595 	.word	0x94a03595
 80092dc:	3fdfffff 	.word	0x3fdfffff
 80092e0:	35afe535 	.word	0x35afe535
 80092e4:	3fe00000 	.word	0x3fe00000
 80092e8:	000fffff 	.word	0x000fffff
 80092ec:	7ff00000 	.word	0x7ff00000
 80092f0:	7fefffff 	.word	0x7fefffff
 80092f4:	3ff00000 	.word	0x3ff00000
 80092f8:	3fe00000 	.word	0x3fe00000
 80092fc:	7fe00000 	.word	0x7fe00000
 8009300:	7c9fffff 	.word	0x7c9fffff
 8009304:	bff00000 	.word	0xbff00000
 8009308:	9b05      	ldr	r3, [sp, #20]
 800930a:	b333      	cbz	r3, 800935a <_strtod_l+0xb7a>
 800930c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800930e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009312:	d822      	bhi.n	800935a <_strtod_l+0xb7a>
 8009314:	a328      	add	r3, pc, #160	; (adr r3, 80093b8 <_strtod_l+0xbd8>)
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	4628      	mov	r0, r5
 800931c:	4639      	mov	r1, r7
 800931e:	f7f7 fb61 	bl	80009e4 <__aeabi_dcmple>
 8009322:	b1a0      	cbz	r0, 800934e <_strtod_l+0xb6e>
 8009324:	4639      	mov	r1, r7
 8009326:	4628      	mov	r0, r5
 8009328:	f7f7 fbb8 	bl	8000a9c <__aeabi_d2uiz>
 800932c:	2801      	cmp	r0, #1
 800932e:	bf38      	it	cc
 8009330:	2001      	movcc	r0, #1
 8009332:	f7f7 f861 	bl	80003f8 <__aeabi_ui2d>
 8009336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009338:	4605      	mov	r5, r0
 800933a:	460f      	mov	r7, r1
 800933c:	bb03      	cbnz	r3, 8009380 <_strtod_l+0xba0>
 800933e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009342:	9014      	str	r0, [sp, #80]	; 0x50
 8009344:	9315      	str	r3, [sp, #84]	; 0x54
 8009346:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800934a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800934e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009350:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009352:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	9311      	str	r3, [sp, #68]	; 0x44
 800935a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800935c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800935e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009362:	f7ff f8e9 	bl	8008538 <__ulp>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	4640      	mov	r0, r8
 800936c:	4649      	mov	r1, r9
 800936e:	f7f7 f8bd 	bl	80004ec <__aeabi_dmul>
 8009372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009376:	f7f6 ff03 	bl	8000180 <__adddf3>
 800937a:	4680      	mov	r8, r0
 800937c:	4689      	mov	r9, r1
 800937e:	e774      	b.n	800926a <_strtod_l+0xa8a>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009388:	e7dd      	b.n	8009346 <_strtod_l+0xb66>
 800938a:	a30d      	add	r3, pc, #52	; (adr r3, 80093c0 <_strtod_l+0xbe0>)
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f7f7 fb1e 	bl	80009d0 <__aeabi_dcmplt>
 8009394:	e79b      	b.n	80092ce <_strtod_l+0xaee>
 8009396:	2300      	movs	r3, #0
 8009398:	930e      	str	r3, [sp, #56]	; 0x38
 800939a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800939c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800939e:	6013      	str	r3, [r2, #0]
 80093a0:	f7ff ba5b 	b.w	800885a <_strtod_l+0x7a>
 80093a4:	2a65      	cmp	r2, #101	; 0x65
 80093a6:	f43f ab52 	beq.w	8008a4e <_strtod_l+0x26e>
 80093aa:	2a45      	cmp	r2, #69	; 0x45
 80093ac:	f43f ab4f 	beq.w	8008a4e <_strtod_l+0x26e>
 80093b0:	2301      	movs	r3, #1
 80093b2:	f7ff bb87 	b.w	8008ac4 <_strtod_l+0x2e4>
 80093b6:	bf00      	nop
 80093b8:	ffc00000 	.word	0xffc00000
 80093bc:	41dfffff 	.word	0x41dfffff
 80093c0:	94a03595 	.word	0x94a03595
 80093c4:	3fcfffff 	.word	0x3fcfffff

080093c8 <_strtod_r>:
 80093c8:	4b01      	ldr	r3, [pc, #4]	; (80093d0 <_strtod_r+0x8>)
 80093ca:	f7ff ba09 	b.w	80087e0 <_strtod_l>
 80093ce:	bf00      	nop
 80093d0:	20000090 	.word	0x20000090

080093d4 <_strtol_l.constprop.0>:
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093da:	4686      	mov	lr, r0
 80093dc:	4690      	mov	r8, r2
 80093de:	d001      	beq.n	80093e4 <_strtol_l.constprop.0+0x10>
 80093e0:	2b24      	cmp	r3, #36	; 0x24
 80093e2:	d906      	bls.n	80093f2 <_strtol_l.constprop.0+0x1e>
 80093e4:	f7fd fd76 	bl	8006ed4 <__errno>
 80093e8:	2316      	movs	r3, #22
 80093ea:	6003      	str	r3, [r0, #0]
 80093ec:	2000      	movs	r0, #0
 80093ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f2:	460d      	mov	r5, r1
 80093f4:	4835      	ldr	r0, [pc, #212]	; (80094cc <_strtol_l.constprop.0+0xf8>)
 80093f6:	462a      	mov	r2, r5
 80093f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093fc:	5d06      	ldrb	r6, [r0, r4]
 80093fe:	f016 0608 	ands.w	r6, r6, #8
 8009402:	d1f8      	bne.n	80093f6 <_strtol_l.constprop.0+0x22>
 8009404:	2c2d      	cmp	r4, #45	; 0x2d
 8009406:	d12e      	bne.n	8009466 <_strtol_l.constprop.0+0x92>
 8009408:	2601      	movs	r6, #1
 800940a:	782c      	ldrb	r4, [r5, #0]
 800940c:	1c95      	adds	r5, r2, #2
 800940e:	2b00      	cmp	r3, #0
 8009410:	d057      	beq.n	80094c2 <_strtol_l.constprop.0+0xee>
 8009412:	2b10      	cmp	r3, #16
 8009414:	d109      	bne.n	800942a <_strtol_l.constprop.0+0x56>
 8009416:	2c30      	cmp	r4, #48	; 0x30
 8009418:	d107      	bne.n	800942a <_strtol_l.constprop.0+0x56>
 800941a:	782a      	ldrb	r2, [r5, #0]
 800941c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009420:	2a58      	cmp	r2, #88	; 0x58
 8009422:	d149      	bne.n	80094b8 <_strtol_l.constprop.0+0xe4>
 8009424:	2310      	movs	r3, #16
 8009426:	786c      	ldrb	r4, [r5, #1]
 8009428:	3502      	adds	r5, #2
 800942a:	2200      	movs	r2, #0
 800942c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009430:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009434:	fbbc f9f3 	udiv	r9, ip, r3
 8009438:	4610      	mov	r0, r2
 800943a:	fb03 ca19 	mls	sl, r3, r9, ip
 800943e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009442:	2f09      	cmp	r7, #9
 8009444:	d814      	bhi.n	8009470 <_strtol_l.constprop.0+0x9c>
 8009446:	463c      	mov	r4, r7
 8009448:	42a3      	cmp	r3, r4
 800944a:	dd20      	ble.n	800948e <_strtol_l.constprop.0+0xba>
 800944c:	1c57      	adds	r7, r2, #1
 800944e:	d007      	beq.n	8009460 <_strtol_l.constprop.0+0x8c>
 8009450:	4581      	cmp	r9, r0
 8009452:	d319      	bcc.n	8009488 <_strtol_l.constprop.0+0xb4>
 8009454:	d101      	bne.n	800945a <_strtol_l.constprop.0+0x86>
 8009456:	45a2      	cmp	sl, r4
 8009458:	db16      	blt.n	8009488 <_strtol_l.constprop.0+0xb4>
 800945a:	2201      	movs	r2, #1
 800945c:	fb00 4003 	mla	r0, r0, r3, r4
 8009460:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009464:	e7eb      	b.n	800943e <_strtol_l.constprop.0+0x6a>
 8009466:	2c2b      	cmp	r4, #43	; 0x2b
 8009468:	bf04      	itt	eq
 800946a:	782c      	ldrbeq	r4, [r5, #0]
 800946c:	1c95      	addeq	r5, r2, #2
 800946e:	e7ce      	b.n	800940e <_strtol_l.constprop.0+0x3a>
 8009470:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009474:	2f19      	cmp	r7, #25
 8009476:	d801      	bhi.n	800947c <_strtol_l.constprop.0+0xa8>
 8009478:	3c37      	subs	r4, #55	; 0x37
 800947a:	e7e5      	b.n	8009448 <_strtol_l.constprop.0+0x74>
 800947c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009480:	2f19      	cmp	r7, #25
 8009482:	d804      	bhi.n	800948e <_strtol_l.constprop.0+0xba>
 8009484:	3c57      	subs	r4, #87	; 0x57
 8009486:	e7df      	b.n	8009448 <_strtol_l.constprop.0+0x74>
 8009488:	f04f 32ff 	mov.w	r2, #4294967295
 800948c:	e7e8      	b.n	8009460 <_strtol_l.constprop.0+0x8c>
 800948e:	1c53      	adds	r3, r2, #1
 8009490:	d108      	bne.n	80094a4 <_strtol_l.constprop.0+0xd0>
 8009492:	2322      	movs	r3, #34	; 0x22
 8009494:	4660      	mov	r0, ip
 8009496:	f8ce 3000 	str.w	r3, [lr]
 800949a:	f1b8 0f00 	cmp.w	r8, #0
 800949e:	d0a6      	beq.n	80093ee <_strtol_l.constprop.0+0x1a>
 80094a0:	1e69      	subs	r1, r5, #1
 80094a2:	e006      	b.n	80094b2 <_strtol_l.constprop.0+0xde>
 80094a4:	b106      	cbz	r6, 80094a8 <_strtol_l.constprop.0+0xd4>
 80094a6:	4240      	negs	r0, r0
 80094a8:	f1b8 0f00 	cmp.w	r8, #0
 80094ac:	d09f      	beq.n	80093ee <_strtol_l.constprop.0+0x1a>
 80094ae:	2a00      	cmp	r2, #0
 80094b0:	d1f6      	bne.n	80094a0 <_strtol_l.constprop.0+0xcc>
 80094b2:	f8c8 1000 	str.w	r1, [r8]
 80094b6:	e79a      	b.n	80093ee <_strtol_l.constprop.0+0x1a>
 80094b8:	2430      	movs	r4, #48	; 0x30
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1b5      	bne.n	800942a <_strtol_l.constprop.0+0x56>
 80094be:	2308      	movs	r3, #8
 80094c0:	e7b3      	b.n	800942a <_strtol_l.constprop.0+0x56>
 80094c2:	2c30      	cmp	r4, #48	; 0x30
 80094c4:	d0a9      	beq.n	800941a <_strtol_l.constprop.0+0x46>
 80094c6:	230a      	movs	r3, #10
 80094c8:	e7af      	b.n	800942a <_strtol_l.constprop.0+0x56>
 80094ca:	bf00      	nop
 80094cc:	0800b371 	.word	0x0800b371

080094d0 <_strtol_r>:
 80094d0:	f7ff bf80 	b.w	80093d4 <_strtol_l.constprop.0>

080094d4 <__ssputs_r>:
 80094d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d8:	461f      	mov	r7, r3
 80094da:	688e      	ldr	r6, [r1, #8]
 80094dc:	4682      	mov	sl, r0
 80094de:	42be      	cmp	r6, r7
 80094e0:	460c      	mov	r4, r1
 80094e2:	4690      	mov	r8, r2
 80094e4:	680b      	ldr	r3, [r1, #0]
 80094e6:	d82c      	bhi.n	8009542 <__ssputs_r+0x6e>
 80094e8:	898a      	ldrh	r2, [r1, #12]
 80094ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094ee:	d026      	beq.n	800953e <__ssputs_r+0x6a>
 80094f0:	6965      	ldr	r5, [r4, #20]
 80094f2:	6909      	ldr	r1, [r1, #16]
 80094f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094f8:	eba3 0901 	sub.w	r9, r3, r1
 80094fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009500:	1c7b      	adds	r3, r7, #1
 8009502:	444b      	add	r3, r9
 8009504:	106d      	asrs	r5, r5, #1
 8009506:	429d      	cmp	r5, r3
 8009508:	bf38      	it	cc
 800950a:	461d      	movcc	r5, r3
 800950c:	0553      	lsls	r3, r2, #21
 800950e:	d527      	bpl.n	8009560 <__ssputs_r+0x8c>
 8009510:	4629      	mov	r1, r5
 8009512:	f7fe fc19 	bl	8007d48 <_malloc_r>
 8009516:	4606      	mov	r6, r0
 8009518:	b360      	cbz	r0, 8009574 <__ssputs_r+0xa0>
 800951a:	464a      	mov	r2, r9
 800951c:	6921      	ldr	r1, [r4, #16]
 800951e:	f000 fdb9 	bl	800a094 <memcpy>
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800952c:	81a3      	strh	r3, [r4, #12]
 800952e:	6126      	str	r6, [r4, #16]
 8009530:	444e      	add	r6, r9
 8009532:	6026      	str	r6, [r4, #0]
 8009534:	463e      	mov	r6, r7
 8009536:	6165      	str	r5, [r4, #20]
 8009538:	eba5 0509 	sub.w	r5, r5, r9
 800953c:	60a5      	str	r5, [r4, #8]
 800953e:	42be      	cmp	r6, r7
 8009540:	d900      	bls.n	8009544 <__ssputs_r+0x70>
 8009542:	463e      	mov	r6, r7
 8009544:	4632      	mov	r2, r6
 8009546:	4641      	mov	r1, r8
 8009548:	6820      	ldr	r0, [r4, #0]
 800954a:	f000 fd66 	bl	800a01a <memmove>
 800954e:	2000      	movs	r0, #0
 8009550:	68a3      	ldr	r3, [r4, #8]
 8009552:	1b9b      	subs	r3, r3, r6
 8009554:	60a3      	str	r3, [r4, #8]
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	4433      	add	r3, r6
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009560:	462a      	mov	r2, r5
 8009562:	f001 f932 	bl	800a7ca <_realloc_r>
 8009566:	4606      	mov	r6, r0
 8009568:	2800      	cmp	r0, #0
 800956a:	d1e0      	bne.n	800952e <__ssputs_r+0x5a>
 800956c:	4650      	mov	r0, sl
 800956e:	6921      	ldr	r1, [r4, #16]
 8009570:	f7fe fb7a 	bl	8007c68 <_free_r>
 8009574:	230c      	movs	r3, #12
 8009576:	f8ca 3000 	str.w	r3, [sl]
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	f04f 30ff 	mov.w	r0, #4294967295
 8009580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009584:	81a3      	strh	r3, [r4, #12]
 8009586:	e7e9      	b.n	800955c <__ssputs_r+0x88>

08009588 <_svfiprintf_r>:
 8009588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	4698      	mov	r8, r3
 800958e:	898b      	ldrh	r3, [r1, #12]
 8009590:	4607      	mov	r7, r0
 8009592:	061b      	lsls	r3, r3, #24
 8009594:	460d      	mov	r5, r1
 8009596:	4614      	mov	r4, r2
 8009598:	b09d      	sub	sp, #116	; 0x74
 800959a:	d50e      	bpl.n	80095ba <_svfiprintf_r+0x32>
 800959c:	690b      	ldr	r3, [r1, #16]
 800959e:	b963      	cbnz	r3, 80095ba <_svfiprintf_r+0x32>
 80095a0:	2140      	movs	r1, #64	; 0x40
 80095a2:	f7fe fbd1 	bl	8007d48 <_malloc_r>
 80095a6:	6028      	str	r0, [r5, #0]
 80095a8:	6128      	str	r0, [r5, #16]
 80095aa:	b920      	cbnz	r0, 80095b6 <_svfiprintf_r+0x2e>
 80095ac:	230c      	movs	r3, #12
 80095ae:	603b      	str	r3, [r7, #0]
 80095b0:	f04f 30ff 	mov.w	r0, #4294967295
 80095b4:	e0d0      	b.n	8009758 <_svfiprintf_r+0x1d0>
 80095b6:	2340      	movs	r3, #64	; 0x40
 80095b8:	616b      	str	r3, [r5, #20]
 80095ba:	2300      	movs	r3, #0
 80095bc:	9309      	str	r3, [sp, #36]	; 0x24
 80095be:	2320      	movs	r3, #32
 80095c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095c4:	2330      	movs	r3, #48	; 0x30
 80095c6:	f04f 0901 	mov.w	r9, #1
 80095ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ce:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009770 <_svfiprintf_r+0x1e8>
 80095d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095d6:	4623      	mov	r3, r4
 80095d8:	469a      	mov	sl, r3
 80095da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095de:	b10a      	cbz	r2, 80095e4 <_svfiprintf_r+0x5c>
 80095e0:	2a25      	cmp	r2, #37	; 0x25
 80095e2:	d1f9      	bne.n	80095d8 <_svfiprintf_r+0x50>
 80095e4:	ebba 0b04 	subs.w	fp, sl, r4
 80095e8:	d00b      	beq.n	8009602 <_svfiprintf_r+0x7a>
 80095ea:	465b      	mov	r3, fp
 80095ec:	4622      	mov	r2, r4
 80095ee:	4629      	mov	r1, r5
 80095f0:	4638      	mov	r0, r7
 80095f2:	f7ff ff6f 	bl	80094d4 <__ssputs_r>
 80095f6:	3001      	adds	r0, #1
 80095f8:	f000 80a9 	beq.w	800974e <_svfiprintf_r+0x1c6>
 80095fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095fe:	445a      	add	r2, fp
 8009600:	9209      	str	r2, [sp, #36]	; 0x24
 8009602:	f89a 3000 	ldrb.w	r3, [sl]
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 80a1 	beq.w	800974e <_svfiprintf_r+0x1c6>
 800960c:	2300      	movs	r3, #0
 800960e:	f04f 32ff 	mov.w	r2, #4294967295
 8009612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009616:	f10a 0a01 	add.w	sl, sl, #1
 800961a:	9304      	str	r3, [sp, #16]
 800961c:	9307      	str	r3, [sp, #28]
 800961e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009622:	931a      	str	r3, [sp, #104]	; 0x68
 8009624:	4654      	mov	r4, sl
 8009626:	2205      	movs	r2, #5
 8009628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962c:	4850      	ldr	r0, [pc, #320]	; (8009770 <_svfiprintf_r+0x1e8>)
 800962e:	f7fd fc7d 	bl	8006f2c <memchr>
 8009632:	9a04      	ldr	r2, [sp, #16]
 8009634:	b9d8      	cbnz	r0, 800966e <_svfiprintf_r+0xe6>
 8009636:	06d0      	lsls	r0, r2, #27
 8009638:	bf44      	itt	mi
 800963a:	2320      	movmi	r3, #32
 800963c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009640:	0711      	lsls	r1, r2, #28
 8009642:	bf44      	itt	mi
 8009644:	232b      	movmi	r3, #43	; 0x2b
 8009646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800964a:	f89a 3000 	ldrb.w	r3, [sl]
 800964e:	2b2a      	cmp	r3, #42	; 0x2a
 8009650:	d015      	beq.n	800967e <_svfiprintf_r+0xf6>
 8009652:	4654      	mov	r4, sl
 8009654:	2000      	movs	r0, #0
 8009656:	f04f 0c0a 	mov.w	ip, #10
 800965a:	9a07      	ldr	r2, [sp, #28]
 800965c:	4621      	mov	r1, r4
 800965e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009662:	3b30      	subs	r3, #48	; 0x30
 8009664:	2b09      	cmp	r3, #9
 8009666:	d94d      	bls.n	8009704 <_svfiprintf_r+0x17c>
 8009668:	b1b0      	cbz	r0, 8009698 <_svfiprintf_r+0x110>
 800966a:	9207      	str	r2, [sp, #28]
 800966c:	e014      	b.n	8009698 <_svfiprintf_r+0x110>
 800966e:	eba0 0308 	sub.w	r3, r0, r8
 8009672:	fa09 f303 	lsl.w	r3, r9, r3
 8009676:	4313      	orrs	r3, r2
 8009678:	46a2      	mov	sl, r4
 800967a:	9304      	str	r3, [sp, #16]
 800967c:	e7d2      	b.n	8009624 <_svfiprintf_r+0x9c>
 800967e:	9b03      	ldr	r3, [sp, #12]
 8009680:	1d19      	adds	r1, r3, #4
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	9103      	str	r1, [sp, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	bfbb      	ittet	lt
 800968a:	425b      	neglt	r3, r3
 800968c:	f042 0202 	orrlt.w	r2, r2, #2
 8009690:	9307      	strge	r3, [sp, #28]
 8009692:	9307      	strlt	r3, [sp, #28]
 8009694:	bfb8      	it	lt
 8009696:	9204      	strlt	r2, [sp, #16]
 8009698:	7823      	ldrb	r3, [r4, #0]
 800969a:	2b2e      	cmp	r3, #46	; 0x2e
 800969c:	d10c      	bne.n	80096b8 <_svfiprintf_r+0x130>
 800969e:	7863      	ldrb	r3, [r4, #1]
 80096a0:	2b2a      	cmp	r3, #42	; 0x2a
 80096a2:	d134      	bne.n	800970e <_svfiprintf_r+0x186>
 80096a4:	9b03      	ldr	r3, [sp, #12]
 80096a6:	3402      	adds	r4, #2
 80096a8:	1d1a      	adds	r2, r3, #4
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	9203      	str	r2, [sp, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bfb8      	it	lt
 80096b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80096b6:	9305      	str	r3, [sp, #20]
 80096b8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009774 <_svfiprintf_r+0x1ec>
 80096bc:	2203      	movs	r2, #3
 80096be:	4650      	mov	r0, sl
 80096c0:	7821      	ldrb	r1, [r4, #0]
 80096c2:	f7fd fc33 	bl	8006f2c <memchr>
 80096c6:	b138      	cbz	r0, 80096d8 <_svfiprintf_r+0x150>
 80096c8:	2240      	movs	r2, #64	; 0x40
 80096ca:	9b04      	ldr	r3, [sp, #16]
 80096cc:	eba0 000a 	sub.w	r0, r0, sl
 80096d0:	4082      	lsls	r2, r0
 80096d2:	4313      	orrs	r3, r2
 80096d4:	3401      	adds	r4, #1
 80096d6:	9304      	str	r3, [sp, #16]
 80096d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096dc:	2206      	movs	r2, #6
 80096de:	4826      	ldr	r0, [pc, #152]	; (8009778 <_svfiprintf_r+0x1f0>)
 80096e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096e4:	f7fd fc22 	bl	8006f2c <memchr>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d038      	beq.n	800975e <_svfiprintf_r+0x1d6>
 80096ec:	4b23      	ldr	r3, [pc, #140]	; (800977c <_svfiprintf_r+0x1f4>)
 80096ee:	bb1b      	cbnz	r3, 8009738 <_svfiprintf_r+0x1b0>
 80096f0:	9b03      	ldr	r3, [sp, #12]
 80096f2:	3307      	adds	r3, #7
 80096f4:	f023 0307 	bic.w	r3, r3, #7
 80096f8:	3308      	adds	r3, #8
 80096fa:	9303      	str	r3, [sp, #12]
 80096fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096fe:	4433      	add	r3, r6
 8009700:	9309      	str	r3, [sp, #36]	; 0x24
 8009702:	e768      	b.n	80095d6 <_svfiprintf_r+0x4e>
 8009704:	460c      	mov	r4, r1
 8009706:	2001      	movs	r0, #1
 8009708:	fb0c 3202 	mla	r2, ip, r2, r3
 800970c:	e7a6      	b.n	800965c <_svfiprintf_r+0xd4>
 800970e:	2300      	movs	r3, #0
 8009710:	f04f 0c0a 	mov.w	ip, #10
 8009714:	4619      	mov	r1, r3
 8009716:	3401      	adds	r4, #1
 8009718:	9305      	str	r3, [sp, #20]
 800971a:	4620      	mov	r0, r4
 800971c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009720:	3a30      	subs	r2, #48	; 0x30
 8009722:	2a09      	cmp	r2, #9
 8009724:	d903      	bls.n	800972e <_svfiprintf_r+0x1a6>
 8009726:	2b00      	cmp	r3, #0
 8009728:	d0c6      	beq.n	80096b8 <_svfiprintf_r+0x130>
 800972a:	9105      	str	r1, [sp, #20]
 800972c:	e7c4      	b.n	80096b8 <_svfiprintf_r+0x130>
 800972e:	4604      	mov	r4, r0
 8009730:	2301      	movs	r3, #1
 8009732:	fb0c 2101 	mla	r1, ip, r1, r2
 8009736:	e7f0      	b.n	800971a <_svfiprintf_r+0x192>
 8009738:	ab03      	add	r3, sp, #12
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	462a      	mov	r2, r5
 800973e:	4638      	mov	r0, r7
 8009740:	4b0f      	ldr	r3, [pc, #60]	; (8009780 <_svfiprintf_r+0x1f8>)
 8009742:	a904      	add	r1, sp, #16
 8009744:	f7fc fc08 	bl	8005f58 <_printf_float>
 8009748:	1c42      	adds	r2, r0, #1
 800974a:	4606      	mov	r6, r0
 800974c:	d1d6      	bne.n	80096fc <_svfiprintf_r+0x174>
 800974e:	89ab      	ldrh	r3, [r5, #12]
 8009750:	065b      	lsls	r3, r3, #25
 8009752:	f53f af2d 	bmi.w	80095b0 <_svfiprintf_r+0x28>
 8009756:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009758:	b01d      	add	sp, #116	; 0x74
 800975a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975e:	ab03      	add	r3, sp, #12
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	462a      	mov	r2, r5
 8009764:	4638      	mov	r0, r7
 8009766:	4b06      	ldr	r3, [pc, #24]	; (8009780 <_svfiprintf_r+0x1f8>)
 8009768:	a904      	add	r1, sp, #16
 800976a:	f7fc fe95 	bl	8006498 <_printf_i>
 800976e:	e7eb      	b.n	8009748 <_svfiprintf_r+0x1c0>
 8009770:	0800b471 	.word	0x0800b471
 8009774:	0800b477 	.word	0x0800b477
 8009778:	0800b47b 	.word	0x0800b47b
 800977c:	08005f59 	.word	0x08005f59
 8009780:	080094d5 	.word	0x080094d5

08009784 <_sungetc_r>:
 8009784:	b538      	push	{r3, r4, r5, lr}
 8009786:	1c4b      	adds	r3, r1, #1
 8009788:	4614      	mov	r4, r2
 800978a:	d103      	bne.n	8009794 <_sungetc_r+0x10>
 800978c:	f04f 35ff 	mov.w	r5, #4294967295
 8009790:	4628      	mov	r0, r5
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	8993      	ldrh	r3, [r2, #12]
 8009796:	b2cd      	uxtb	r5, r1
 8009798:	f023 0320 	bic.w	r3, r3, #32
 800979c:	8193      	strh	r3, [r2, #12]
 800979e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097a0:	6852      	ldr	r2, [r2, #4]
 80097a2:	b18b      	cbz	r3, 80097c8 <_sungetc_r+0x44>
 80097a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80097a6:	4293      	cmp	r3, r2
 80097a8:	dd08      	ble.n	80097bc <_sungetc_r+0x38>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	1e5a      	subs	r2, r3, #1
 80097ae:	6022      	str	r2, [r4, #0]
 80097b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80097b4:	6863      	ldr	r3, [r4, #4]
 80097b6:	3301      	adds	r3, #1
 80097b8:	6063      	str	r3, [r4, #4]
 80097ba:	e7e9      	b.n	8009790 <_sungetc_r+0xc>
 80097bc:	4621      	mov	r1, r4
 80097be:	f000 fbf4 	bl	8009faa <__submore>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d0f1      	beq.n	80097aa <_sungetc_r+0x26>
 80097c6:	e7e1      	b.n	800978c <_sungetc_r+0x8>
 80097c8:	6921      	ldr	r1, [r4, #16]
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	b151      	cbz	r1, 80097e4 <_sungetc_r+0x60>
 80097ce:	4299      	cmp	r1, r3
 80097d0:	d208      	bcs.n	80097e4 <_sungetc_r+0x60>
 80097d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80097d6:	42a9      	cmp	r1, r5
 80097d8:	d104      	bne.n	80097e4 <_sungetc_r+0x60>
 80097da:	3b01      	subs	r3, #1
 80097dc:	3201      	adds	r2, #1
 80097de:	6023      	str	r3, [r4, #0]
 80097e0:	6062      	str	r2, [r4, #4]
 80097e2:	e7d5      	b.n	8009790 <_sungetc_r+0xc>
 80097e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80097e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097ec:	6363      	str	r3, [r4, #52]	; 0x34
 80097ee:	2303      	movs	r3, #3
 80097f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80097f2:	4623      	mov	r3, r4
 80097f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	2301      	movs	r3, #1
 80097fc:	e7dc      	b.n	80097b8 <_sungetc_r+0x34>

080097fe <__ssrefill_r>:
 80097fe:	b510      	push	{r4, lr}
 8009800:	460c      	mov	r4, r1
 8009802:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009804:	b169      	cbz	r1, 8009822 <__ssrefill_r+0x24>
 8009806:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800980a:	4299      	cmp	r1, r3
 800980c:	d001      	beq.n	8009812 <__ssrefill_r+0x14>
 800980e:	f7fe fa2b 	bl	8007c68 <_free_r>
 8009812:	2000      	movs	r0, #0
 8009814:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009816:	6360      	str	r0, [r4, #52]	; 0x34
 8009818:	6063      	str	r3, [r4, #4]
 800981a:	b113      	cbz	r3, 8009822 <__ssrefill_r+0x24>
 800981c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800981e:	6023      	str	r3, [r4, #0]
 8009820:	bd10      	pop	{r4, pc}
 8009822:	6923      	ldr	r3, [r4, #16]
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	2300      	movs	r3, #0
 800982c:	6063      	str	r3, [r4, #4]
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	f043 0320 	orr.w	r3, r3, #32
 8009834:	81a3      	strh	r3, [r4, #12]
 8009836:	e7f3      	b.n	8009820 <__ssrefill_r+0x22>

08009838 <__ssvfiscanf_r>:
 8009838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800983c:	460c      	mov	r4, r1
 800983e:	2100      	movs	r1, #0
 8009840:	4606      	mov	r6, r0
 8009842:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009846:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800984a:	49a6      	ldr	r1, [pc, #664]	; (8009ae4 <__ssvfiscanf_r+0x2ac>)
 800984c:	f10d 0804 	add.w	r8, sp, #4
 8009850:	91a0      	str	r1, [sp, #640]	; 0x280
 8009852:	49a5      	ldr	r1, [pc, #660]	; (8009ae8 <__ssvfiscanf_r+0x2b0>)
 8009854:	4fa5      	ldr	r7, [pc, #660]	; (8009aec <__ssvfiscanf_r+0x2b4>)
 8009856:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009af0 <__ssvfiscanf_r+0x2b8>
 800985a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800985e:	91a1      	str	r1, [sp, #644]	; 0x284
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	7813      	ldrb	r3, [r2, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 815a 	beq.w	8009b1e <__ssvfiscanf_r+0x2e6>
 800986a:	5cf9      	ldrb	r1, [r7, r3]
 800986c:	1c55      	adds	r5, r2, #1
 800986e:	f011 0108 	ands.w	r1, r1, #8
 8009872:	d019      	beq.n	80098a8 <__ssvfiscanf_r+0x70>
 8009874:	6863      	ldr	r3, [r4, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	dd0f      	ble.n	800989a <__ssvfiscanf_r+0x62>
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	781a      	ldrb	r2, [r3, #0]
 800987e:	5cba      	ldrb	r2, [r7, r2]
 8009880:	0712      	lsls	r2, r2, #28
 8009882:	d401      	bmi.n	8009888 <__ssvfiscanf_r+0x50>
 8009884:	462a      	mov	r2, r5
 8009886:	e7ec      	b.n	8009862 <__ssvfiscanf_r+0x2a>
 8009888:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800988a:	3301      	adds	r3, #1
 800988c:	3201      	adds	r2, #1
 800988e:	9245      	str	r2, [sp, #276]	; 0x114
 8009890:	6862      	ldr	r2, [r4, #4]
 8009892:	6023      	str	r3, [r4, #0]
 8009894:	3a01      	subs	r2, #1
 8009896:	6062      	str	r2, [r4, #4]
 8009898:	e7ec      	b.n	8009874 <__ssvfiscanf_r+0x3c>
 800989a:	4621      	mov	r1, r4
 800989c:	4630      	mov	r0, r6
 800989e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80098a0:	4798      	blx	r3
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d0e9      	beq.n	800987a <__ssvfiscanf_r+0x42>
 80098a6:	e7ed      	b.n	8009884 <__ssvfiscanf_r+0x4c>
 80098a8:	2b25      	cmp	r3, #37	; 0x25
 80098aa:	d012      	beq.n	80098d2 <__ssvfiscanf_r+0x9a>
 80098ac:	469a      	mov	sl, r3
 80098ae:	6863      	ldr	r3, [r4, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f340 8092 	ble.w	80099da <__ssvfiscanf_r+0x1a2>
 80098b6:	6822      	ldr	r2, [r4, #0]
 80098b8:	7813      	ldrb	r3, [r2, #0]
 80098ba:	4553      	cmp	r3, sl
 80098bc:	f040 812f 	bne.w	8009b1e <__ssvfiscanf_r+0x2e6>
 80098c0:	6863      	ldr	r3, [r4, #4]
 80098c2:	3201      	adds	r2, #1
 80098c4:	3b01      	subs	r3, #1
 80098c6:	6063      	str	r3, [r4, #4]
 80098c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80098ca:	6022      	str	r2, [r4, #0]
 80098cc:	3301      	adds	r3, #1
 80098ce:	9345      	str	r3, [sp, #276]	; 0x114
 80098d0:	e7d8      	b.n	8009884 <__ssvfiscanf_r+0x4c>
 80098d2:	9141      	str	r1, [sp, #260]	; 0x104
 80098d4:	9143      	str	r1, [sp, #268]	; 0x10c
 80098d6:	7853      	ldrb	r3, [r2, #1]
 80098d8:	2b2a      	cmp	r3, #42	; 0x2a
 80098da:	bf04      	itt	eq
 80098dc:	2310      	moveq	r3, #16
 80098de:	1c95      	addeq	r5, r2, #2
 80098e0:	f04f 020a 	mov.w	r2, #10
 80098e4:	bf08      	it	eq
 80098e6:	9341      	streq	r3, [sp, #260]	; 0x104
 80098e8:	46aa      	mov	sl, r5
 80098ea:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80098ee:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80098f2:	2b09      	cmp	r3, #9
 80098f4:	d91c      	bls.n	8009930 <__ssvfiscanf_r+0xf8>
 80098f6:	2203      	movs	r2, #3
 80098f8:	487d      	ldr	r0, [pc, #500]	; (8009af0 <__ssvfiscanf_r+0x2b8>)
 80098fa:	f7fd fb17 	bl	8006f2c <memchr>
 80098fe:	b138      	cbz	r0, 8009910 <__ssvfiscanf_r+0xd8>
 8009900:	2301      	movs	r3, #1
 8009902:	4655      	mov	r5, sl
 8009904:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009906:	eba0 0009 	sub.w	r0, r0, r9
 800990a:	4083      	lsls	r3, r0
 800990c:	4313      	orrs	r3, r2
 800990e:	9341      	str	r3, [sp, #260]	; 0x104
 8009910:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009914:	2b78      	cmp	r3, #120	; 0x78
 8009916:	d806      	bhi.n	8009926 <__ssvfiscanf_r+0xee>
 8009918:	2b57      	cmp	r3, #87	; 0x57
 800991a:	d810      	bhi.n	800993e <__ssvfiscanf_r+0x106>
 800991c:	2b25      	cmp	r3, #37	; 0x25
 800991e:	d0c5      	beq.n	80098ac <__ssvfiscanf_r+0x74>
 8009920:	d856      	bhi.n	80099d0 <__ssvfiscanf_r+0x198>
 8009922:	2b00      	cmp	r3, #0
 8009924:	d064      	beq.n	80099f0 <__ssvfiscanf_r+0x1b8>
 8009926:	2303      	movs	r3, #3
 8009928:	9347      	str	r3, [sp, #284]	; 0x11c
 800992a:	230a      	movs	r3, #10
 800992c:	9342      	str	r3, [sp, #264]	; 0x108
 800992e:	e075      	b.n	8009a1c <__ssvfiscanf_r+0x1e4>
 8009930:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009932:	4655      	mov	r5, sl
 8009934:	fb02 1103 	mla	r1, r2, r3, r1
 8009938:	3930      	subs	r1, #48	; 0x30
 800993a:	9143      	str	r1, [sp, #268]	; 0x10c
 800993c:	e7d4      	b.n	80098e8 <__ssvfiscanf_r+0xb0>
 800993e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009942:	2a20      	cmp	r2, #32
 8009944:	d8ef      	bhi.n	8009926 <__ssvfiscanf_r+0xee>
 8009946:	a101      	add	r1, pc, #4	; (adr r1, 800994c <__ssvfiscanf_r+0x114>)
 8009948:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800994c:	080099ff 	.word	0x080099ff
 8009950:	08009927 	.word	0x08009927
 8009954:	08009927 	.word	0x08009927
 8009958:	08009a5d 	.word	0x08009a5d
 800995c:	08009927 	.word	0x08009927
 8009960:	08009927 	.word	0x08009927
 8009964:	08009927 	.word	0x08009927
 8009968:	08009927 	.word	0x08009927
 800996c:	08009927 	.word	0x08009927
 8009970:	08009927 	.word	0x08009927
 8009974:	08009927 	.word	0x08009927
 8009978:	08009a73 	.word	0x08009a73
 800997c:	08009a59 	.word	0x08009a59
 8009980:	080099d7 	.word	0x080099d7
 8009984:	080099d7 	.word	0x080099d7
 8009988:	080099d7 	.word	0x080099d7
 800998c:	08009927 	.word	0x08009927
 8009990:	08009a15 	.word	0x08009a15
 8009994:	08009927 	.word	0x08009927
 8009998:	08009927 	.word	0x08009927
 800999c:	08009927 	.word	0x08009927
 80099a0:	08009927 	.word	0x08009927
 80099a4:	08009a83 	.word	0x08009a83
 80099a8:	08009a51 	.word	0x08009a51
 80099ac:	080099f7 	.word	0x080099f7
 80099b0:	08009927 	.word	0x08009927
 80099b4:	08009927 	.word	0x08009927
 80099b8:	08009a7f 	.word	0x08009a7f
 80099bc:	08009927 	.word	0x08009927
 80099c0:	08009a59 	.word	0x08009a59
 80099c4:	08009927 	.word	0x08009927
 80099c8:	08009927 	.word	0x08009927
 80099cc:	080099ff 	.word	0x080099ff
 80099d0:	3b45      	subs	r3, #69	; 0x45
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d8a7      	bhi.n	8009926 <__ssvfiscanf_r+0xee>
 80099d6:	2305      	movs	r3, #5
 80099d8:	e01f      	b.n	8009a1a <__ssvfiscanf_r+0x1e2>
 80099da:	4621      	mov	r1, r4
 80099dc:	4630      	mov	r0, r6
 80099de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80099e0:	4798      	blx	r3
 80099e2:	2800      	cmp	r0, #0
 80099e4:	f43f af67 	beq.w	80098b6 <__ssvfiscanf_r+0x7e>
 80099e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80099ea:	2800      	cmp	r0, #0
 80099ec:	f040 808d 	bne.w	8009b0a <__ssvfiscanf_r+0x2d2>
 80099f0:	f04f 30ff 	mov.w	r0, #4294967295
 80099f4:	e08f      	b.n	8009b16 <__ssvfiscanf_r+0x2de>
 80099f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80099f8:	f042 0220 	orr.w	r2, r2, #32
 80099fc:	9241      	str	r2, [sp, #260]	; 0x104
 80099fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a04:	9241      	str	r2, [sp, #260]	; 0x104
 8009a06:	2210      	movs	r2, #16
 8009a08:	2b6f      	cmp	r3, #111	; 0x6f
 8009a0a:	bf34      	ite	cc
 8009a0c:	2303      	movcc	r3, #3
 8009a0e:	2304      	movcs	r3, #4
 8009a10:	9242      	str	r2, [sp, #264]	; 0x108
 8009a12:	e002      	b.n	8009a1a <__ssvfiscanf_r+0x1e2>
 8009a14:	2300      	movs	r3, #0
 8009a16:	9342      	str	r3, [sp, #264]	; 0x108
 8009a18:	2303      	movs	r3, #3
 8009a1a:	9347      	str	r3, [sp, #284]	; 0x11c
 8009a1c:	6863      	ldr	r3, [r4, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	dd3d      	ble.n	8009a9e <__ssvfiscanf_r+0x266>
 8009a22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a24:	0659      	lsls	r1, r3, #25
 8009a26:	d404      	bmi.n	8009a32 <__ssvfiscanf_r+0x1fa>
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	781a      	ldrb	r2, [r3, #0]
 8009a2c:	5cba      	ldrb	r2, [r7, r2]
 8009a2e:	0712      	lsls	r2, r2, #28
 8009a30:	d43c      	bmi.n	8009aac <__ssvfiscanf_r+0x274>
 8009a32:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	dc4b      	bgt.n	8009ad0 <__ssvfiscanf_r+0x298>
 8009a38:	466b      	mov	r3, sp
 8009a3a:	4622      	mov	r2, r4
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	a941      	add	r1, sp, #260	; 0x104
 8009a40:	f000 f872 	bl	8009b28 <_scanf_chars>
 8009a44:	2801      	cmp	r0, #1
 8009a46:	d06a      	beq.n	8009b1e <__ssvfiscanf_r+0x2e6>
 8009a48:	2802      	cmp	r0, #2
 8009a4a:	f47f af1b 	bne.w	8009884 <__ssvfiscanf_r+0x4c>
 8009a4e:	e7cb      	b.n	80099e8 <__ssvfiscanf_r+0x1b0>
 8009a50:	2308      	movs	r3, #8
 8009a52:	9342      	str	r3, [sp, #264]	; 0x108
 8009a54:	2304      	movs	r3, #4
 8009a56:	e7e0      	b.n	8009a1a <__ssvfiscanf_r+0x1e2>
 8009a58:	220a      	movs	r2, #10
 8009a5a:	e7d5      	b.n	8009a08 <__ssvfiscanf_r+0x1d0>
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4640      	mov	r0, r8
 8009a60:	f000 fa6a 	bl	8009f38 <__sccl>
 8009a64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a66:	4605      	mov	r5, r0
 8009a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a6c:	9341      	str	r3, [sp, #260]	; 0x104
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e7d3      	b.n	8009a1a <__ssvfiscanf_r+0x1e2>
 8009a72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a78:	9341      	str	r3, [sp, #260]	; 0x104
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	e7cd      	b.n	8009a1a <__ssvfiscanf_r+0x1e2>
 8009a7e:	2302      	movs	r3, #2
 8009a80:	e7cb      	b.n	8009a1a <__ssvfiscanf_r+0x1e2>
 8009a82:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009a84:	06c3      	lsls	r3, r0, #27
 8009a86:	f53f aefd 	bmi.w	8009884 <__ssvfiscanf_r+0x4c>
 8009a8a:	9b00      	ldr	r3, [sp, #0]
 8009a8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009a8e:	1d19      	adds	r1, r3, #4
 8009a90:	9100      	str	r1, [sp, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	07c0      	lsls	r0, r0, #31
 8009a96:	bf4c      	ite	mi
 8009a98:	801a      	strhmi	r2, [r3, #0]
 8009a9a:	601a      	strpl	r2, [r3, #0]
 8009a9c:	e6f2      	b.n	8009884 <__ssvfiscanf_r+0x4c>
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009aa4:	4798      	blx	r3
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	d0bb      	beq.n	8009a22 <__ssvfiscanf_r+0x1ea>
 8009aaa:	e79d      	b.n	80099e8 <__ssvfiscanf_r+0x1b0>
 8009aac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009aae:	3201      	adds	r2, #1
 8009ab0:	9245      	str	r2, [sp, #276]	; 0x114
 8009ab2:	6862      	ldr	r2, [r4, #4]
 8009ab4:	3a01      	subs	r2, #1
 8009ab6:	2a00      	cmp	r2, #0
 8009ab8:	6062      	str	r2, [r4, #4]
 8009aba:	dd02      	ble.n	8009ac2 <__ssvfiscanf_r+0x28a>
 8009abc:	3301      	adds	r3, #1
 8009abe:	6023      	str	r3, [r4, #0]
 8009ac0:	e7b2      	b.n	8009a28 <__ssvfiscanf_r+0x1f0>
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ac8:	4798      	blx	r3
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d0ac      	beq.n	8009a28 <__ssvfiscanf_r+0x1f0>
 8009ace:	e78b      	b.n	80099e8 <__ssvfiscanf_r+0x1b0>
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	dc0f      	bgt.n	8009af4 <__ssvfiscanf_r+0x2bc>
 8009ad4:	466b      	mov	r3, sp
 8009ad6:	4622      	mov	r2, r4
 8009ad8:	4630      	mov	r0, r6
 8009ada:	a941      	add	r1, sp, #260	; 0x104
 8009adc:	f000 f87e 	bl	8009bdc <_scanf_i>
 8009ae0:	e7b0      	b.n	8009a44 <__ssvfiscanf_r+0x20c>
 8009ae2:	bf00      	nop
 8009ae4:	08009785 	.word	0x08009785
 8009ae8:	080097ff 	.word	0x080097ff
 8009aec:	0800b371 	.word	0x0800b371
 8009af0:	0800b477 	.word	0x0800b477
 8009af4:	4b0b      	ldr	r3, [pc, #44]	; (8009b24 <__ssvfiscanf_r+0x2ec>)
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f43f aec4 	beq.w	8009884 <__ssvfiscanf_r+0x4c>
 8009afc:	466b      	mov	r3, sp
 8009afe:	4622      	mov	r2, r4
 8009b00:	4630      	mov	r0, r6
 8009b02:	a941      	add	r1, sp, #260	; 0x104
 8009b04:	f7fc fdea 	bl	80066dc <_scanf_float>
 8009b08:	e79c      	b.n	8009a44 <__ssvfiscanf_r+0x20c>
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009b10:	bf18      	it	ne
 8009b12:	f04f 30ff 	movne.w	r0, #4294967295
 8009b16:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b1e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009b20:	e7f9      	b.n	8009b16 <__ssvfiscanf_r+0x2de>
 8009b22:	bf00      	nop
 8009b24:	080066dd 	.word	0x080066dd

08009b28 <_scanf_chars>:
 8009b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b2c:	4615      	mov	r5, r2
 8009b2e:	688a      	ldr	r2, [r1, #8]
 8009b30:	4680      	mov	r8, r0
 8009b32:	460c      	mov	r4, r1
 8009b34:	b932      	cbnz	r2, 8009b44 <_scanf_chars+0x1c>
 8009b36:	698a      	ldr	r2, [r1, #24]
 8009b38:	2a00      	cmp	r2, #0
 8009b3a:	bf0c      	ite	eq
 8009b3c:	2201      	moveq	r2, #1
 8009b3e:	f04f 32ff 	movne.w	r2, #4294967295
 8009b42:	608a      	str	r2, [r1, #8]
 8009b44:	2700      	movs	r7, #0
 8009b46:	6822      	ldr	r2, [r4, #0]
 8009b48:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009bd8 <_scanf_chars+0xb0>
 8009b4c:	06d1      	lsls	r1, r2, #27
 8009b4e:	bf5f      	itttt	pl
 8009b50:	681a      	ldrpl	r2, [r3, #0]
 8009b52:	1d11      	addpl	r1, r2, #4
 8009b54:	6019      	strpl	r1, [r3, #0]
 8009b56:	6816      	ldrpl	r6, [r2, #0]
 8009b58:	69a0      	ldr	r0, [r4, #24]
 8009b5a:	b188      	cbz	r0, 8009b80 <_scanf_chars+0x58>
 8009b5c:	2801      	cmp	r0, #1
 8009b5e:	d107      	bne.n	8009b70 <_scanf_chars+0x48>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	781a      	ldrb	r2, [r3, #0]
 8009b64:	6963      	ldr	r3, [r4, #20]
 8009b66:	5c9b      	ldrb	r3, [r3, r2]
 8009b68:	b953      	cbnz	r3, 8009b80 <_scanf_chars+0x58>
 8009b6a:	2f00      	cmp	r7, #0
 8009b6c:	d031      	beq.n	8009bd2 <_scanf_chars+0xaa>
 8009b6e:	e022      	b.n	8009bb6 <_scanf_chars+0x8e>
 8009b70:	2802      	cmp	r0, #2
 8009b72:	d120      	bne.n	8009bb6 <_scanf_chars+0x8e>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009b7c:	071b      	lsls	r3, r3, #28
 8009b7e:	d41a      	bmi.n	8009bb6 <_scanf_chars+0x8e>
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	3701      	adds	r7, #1
 8009b84:	06da      	lsls	r2, r3, #27
 8009b86:	bf5e      	ittt	pl
 8009b88:	682b      	ldrpl	r3, [r5, #0]
 8009b8a:	781b      	ldrbpl	r3, [r3, #0]
 8009b8c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009b90:	682a      	ldr	r2, [r5, #0]
 8009b92:	686b      	ldr	r3, [r5, #4]
 8009b94:	3201      	adds	r2, #1
 8009b96:	602a      	str	r2, [r5, #0]
 8009b98:	68a2      	ldr	r2, [r4, #8]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	3a01      	subs	r2, #1
 8009b9e:	606b      	str	r3, [r5, #4]
 8009ba0:	60a2      	str	r2, [r4, #8]
 8009ba2:	b142      	cbz	r2, 8009bb6 <_scanf_chars+0x8e>
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	dcd7      	bgt.n	8009b58 <_scanf_chars+0x30>
 8009ba8:	4629      	mov	r1, r5
 8009baa:	4640      	mov	r0, r8
 8009bac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009bb0:	4798      	blx	r3
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d0d0      	beq.n	8009b58 <_scanf_chars+0x30>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	f013 0310 	ands.w	r3, r3, #16
 8009bbc:	d105      	bne.n	8009bca <_scanf_chars+0xa2>
 8009bbe:	68e2      	ldr	r2, [r4, #12]
 8009bc0:	3201      	adds	r2, #1
 8009bc2:	60e2      	str	r2, [r4, #12]
 8009bc4:	69a2      	ldr	r2, [r4, #24]
 8009bc6:	b102      	cbz	r2, 8009bca <_scanf_chars+0xa2>
 8009bc8:	7033      	strb	r3, [r6, #0]
 8009bca:	2000      	movs	r0, #0
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	443b      	add	r3, r7
 8009bd0:	6123      	str	r3, [r4, #16]
 8009bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bd6:	bf00      	nop
 8009bd8:	0800b371 	.word	0x0800b371

08009bdc <_scanf_i>:
 8009bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	460c      	mov	r4, r1
 8009be2:	4698      	mov	r8, r3
 8009be4:	4b72      	ldr	r3, [pc, #456]	; (8009db0 <_scanf_i+0x1d4>)
 8009be6:	b087      	sub	sp, #28
 8009be8:	4682      	mov	sl, r0
 8009bea:	4616      	mov	r6, r2
 8009bec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009bf0:	ab03      	add	r3, sp, #12
 8009bf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009bf6:	4b6f      	ldr	r3, [pc, #444]	; (8009db4 <_scanf_i+0x1d8>)
 8009bf8:	69a1      	ldr	r1, [r4, #24]
 8009bfa:	4a6f      	ldr	r2, [pc, #444]	; (8009db8 <_scanf_i+0x1dc>)
 8009bfc:	4627      	mov	r7, r4
 8009bfe:	2903      	cmp	r1, #3
 8009c00:	bf18      	it	ne
 8009c02:	461a      	movne	r2, r3
 8009c04:	68a3      	ldr	r3, [r4, #8]
 8009c06:	9201      	str	r2, [sp, #4]
 8009c08:	1e5a      	subs	r2, r3, #1
 8009c0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009c0e:	bf81      	itttt	hi
 8009c10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009c14:	eb03 0905 	addhi.w	r9, r3, r5
 8009c18:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009c1c:	60a3      	strhi	r3, [r4, #8]
 8009c1e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009c22:	bf98      	it	ls
 8009c24:	f04f 0900 	movls.w	r9, #0
 8009c28:	463d      	mov	r5, r7
 8009c2a:	f04f 0b00 	mov.w	fp, #0
 8009c2e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009c32:	6023      	str	r3, [r4, #0]
 8009c34:	6831      	ldr	r1, [r6, #0]
 8009c36:	ab03      	add	r3, sp, #12
 8009c38:	2202      	movs	r2, #2
 8009c3a:	7809      	ldrb	r1, [r1, #0]
 8009c3c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009c40:	f7fd f974 	bl	8006f2c <memchr>
 8009c44:	b328      	cbz	r0, 8009c92 <_scanf_i+0xb6>
 8009c46:	f1bb 0f01 	cmp.w	fp, #1
 8009c4a:	d159      	bne.n	8009d00 <_scanf_i+0x124>
 8009c4c:	6862      	ldr	r2, [r4, #4]
 8009c4e:	b92a      	cbnz	r2, 8009c5c <_scanf_i+0x80>
 8009c50:	2308      	movs	r3, #8
 8009c52:	6822      	ldr	r2, [r4, #0]
 8009c54:	6063      	str	r3, [r4, #4]
 8009c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c5a:	6022      	str	r2, [r4, #0]
 8009c5c:	6822      	ldr	r2, [r4, #0]
 8009c5e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009c62:	6022      	str	r2, [r4, #0]
 8009c64:	68a2      	ldr	r2, [r4, #8]
 8009c66:	1e51      	subs	r1, r2, #1
 8009c68:	60a1      	str	r1, [r4, #8]
 8009c6a:	b192      	cbz	r2, 8009c92 <_scanf_i+0xb6>
 8009c6c:	6832      	ldr	r2, [r6, #0]
 8009c6e:	1c51      	adds	r1, r2, #1
 8009c70:	6031      	str	r1, [r6, #0]
 8009c72:	7812      	ldrb	r2, [r2, #0]
 8009c74:	f805 2b01 	strb.w	r2, [r5], #1
 8009c78:	6872      	ldr	r2, [r6, #4]
 8009c7a:	3a01      	subs	r2, #1
 8009c7c:	2a00      	cmp	r2, #0
 8009c7e:	6072      	str	r2, [r6, #4]
 8009c80:	dc07      	bgt.n	8009c92 <_scanf_i+0xb6>
 8009c82:	4631      	mov	r1, r6
 8009c84:	4650      	mov	r0, sl
 8009c86:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009c8a:	4790      	blx	r2
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	f040 8085 	bne.w	8009d9c <_scanf_i+0x1c0>
 8009c92:	f10b 0b01 	add.w	fp, fp, #1
 8009c96:	f1bb 0f03 	cmp.w	fp, #3
 8009c9a:	d1cb      	bne.n	8009c34 <_scanf_i+0x58>
 8009c9c:	6863      	ldr	r3, [r4, #4]
 8009c9e:	b90b      	cbnz	r3, 8009ca4 <_scanf_i+0xc8>
 8009ca0:	230a      	movs	r3, #10
 8009ca2:	6063      	str	r3, [r4, #4]
 8009ca4:	6863      	ldr	r3, [r4, #4]
 8009ca6:	4945      	ldr	r1, [pc, #276]	; (8009dbc <_scanf_i+0x1e0>)
 8009ca8:	6960      	ldr	r0, [r4, #20]
 8009caa:	1ac9      	subs	r1, r1, r3
 8009cac:	f000 f944 	bl	8009f38 <__sccl>
 8009cb0:	f04f 0b00 	mov.w	fp, #0
 8009cb4:	68a3      	ldr	r3, [r4, #8]
 8009cb6:	6822      	ldr	r2, [r4, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d03d      	beq.n	8009d38 <_scanf_i+0x15c>
 8009cbc:	6831      	ldr	r1, [r6, #0]
 8009cbe:	6960      	ldr	r0, [r4, #20]
 8009cc0:	f891 c000 	ldrb.w	ip, [r1]
 8009cc4:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d035      	beq.n	8009d38 <_scanf_i+0x15c>
 8009ccc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009cd0:	d124      	bne.n	8009d1c <_scanf_i+0x140>
 8009cd2:	0510      	lsls	r0, r2, #20
 8009cd4:	d522      	bpl.n	8009d1c <_scanf_i+0x140>
 8009cd6:	f10b 0b01 	add.w	fp, fp, #1
 8009cda:	f1b9 0f00 	cmp.w	r9, #0
 8009cde:	d003      	beq.n	8009ce8 <_scanf_i+0x10c>
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	f109 39ff 	add.w	r9, r9, #4294967295
 8009ce6:	60a3      	str	r3, [r4, #8]
 8009ce8:	6873      	ldr	r3, [r6, #4]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	6073      	str	r3, [r6, #4]
 8009cf0:	dd1b      	ble.n	8009d2a <_scanf_i+0x14e>
 8009cf2:	6833      	ldr	r3, [r6, #0]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	6033      	str	r3, [r6, #0]
 8009cf8:	68a3      	ldr	r3, [r4, #8]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	60a3      	str	r3, [r4, #8]
 8009cfe:	e7d9      	b.n	8009cb4 <_scanf_i+0xd8>
 8009d00:	f1bb 0f02 	cmp.w	fp, #2
 8009d04:	d1ae      	bne.n	8009c64 <_scanf_i+0x88>
 8009d06:	6822      	ldr	r2, [r4, #0]
 8009d08:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009d0c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009d10:	d1bf      	bne.n	8009c92 <_scanf_i+0xb6>
 8009d12:	2310      	movs	r3, #16
 8009d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d18:	6063      	str	r3, [r4, #4]
 8009d1a:	e7a2      	b.n	8009c62 <_scanf_i+0x86>
 8009d1c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009d20:	6022      	str	r2, [r4, #0]
 8009d22:	780b      	ldrb	r3, [r1, #0]
 8009d24:	f805 3b01 	strb.w	r3, [r5], #1
 8009d28:	e7de      	b.n	8009ce8 <_scanf_i+0x10c>
 8009d2a:	4631      	mov	r1, r6
 8009d2c:	4650      	mov	r0, sl
 8009d2e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d32:	4798      	blx	r3
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d0df      	beq.n	8009cf8 <_scanf_i+0x11c>
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	05d9      	lsls	r1, r3, #23
 8009d3c:	d50d      	bpl.n	8009d5a <_scanf_i+0x17e>
 8009d3e:	42bd      	cmp	r5, r7
 8009d40:	d909      	bls.n	8009d56 <_scanf_i+0x17a>
 8009d42:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009d46:	4632      	mov	r2, r6
 8009d48:	4650      	mov	r0, sl
 8009d4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d4e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009d52:	4798      	blx	r3
 8009d54:	464d      	mov	r5, r9
 8009d56:	42bd      	cmp	r5, r7
 8009d58:	d028      	beq.n	8009dac <_scanf_i+0x1d0>
 8009d5a:	6822      	ldr	r2, [r4, #0]
 8009d5c:	f012 0210 	ands.w	r2, r2, #16
 8009d60:	d113      	bne.n	8009d8a <_scanf_i+0x1ae>
 8009d62:	702a      	strb	r2, [r5, #0]
 8009d64:	4639      	mov	r1, r7
 8009d66:	6863      	ldr	r3, [r4, #4]
 8009d68:	4650      	mov	r0, sl
 8009d6a:	9e01      	ldr	r6, [sp, #4]
 8009d6c:	47b0      	blx	r6
 8009d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d72:	6821      	ldr	r1, [r4, #0]
 8009d74:	1d1a      	adds	r2, r3, #4
 8009d76:	f8c8 2000 	str.w	r2, [r8]
 8009d7a:	f011 0f20 	tst.w	r1, #32
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	d00f      	beq.n	8009da2 <_scanf_i+0x1c6>
 8009d82:	6018      	str	r0, [r3, #0]
 8009d84:	68e3      	ldr	r3, [r4, #12]
 8009d86:	3301      	adds	r3, #1
 8009d88:	60e3      	str	r3, [r4, #12]
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	6923      	ldr	r3, [r4, #16]
 8009d8e:	1bed      	subs	r5, r5, r7
 8009d90:	445d      	add	r5, fp
 8009d92:	442b      	add	r3, r5
 8009d94:	6123      	str	r3, [r4, #16]
 8009d96:	b007      	add	sp, #28
 8009d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9c:	f04f 0b00 	mov.w	fp, #0
 8009da0:	e7ca      	b.n	8009d38 <_scanf_i+0x15c>
 8009da2:	07ca      	lsls	r2, r1, #31
 8009da4:	bf4c      	ite	mi
 8009da6:	8018      	strhmi	r0, [r3, #0]
 8009da8:	6018      	strpl	r0, [r3, #0]
 8009daa:	e7eb      	b.n	8009d84 <_scanf_i+0x1a8>
 8009dac:	2001      	movs	r0, #1
 8009dae:	e7f2      	b.n	8009d96 <_scanf_i+0x1ba>
 8009db0:	0800b030 	.word	0x0800b030
 8009db4:	0800a90d 	.word	0x0800a90d
 8009db8:	080094d1 	.word	0x080094d1
 8009dbc:	0800b492 	.word	0x0800b492

08009dc0 <__sflush_r>:
 8009dc0:	898a      	ldrh	r2, [r1, #12]
 8009dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	0710      	lsls	r0, r2, #28
 8009dc8:	460c      	mov	r4, r1
 8009dca:	d457      	bmi.n	8009e7c <__sflush_r+0xbc>
 8009dcc:	684b      	ldr	r3, [r1, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	dc04      	bgt.n	8009ddc <__sflush_r+0x1c>
 8009dd2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	dc01      	bgt.n	8009ddc <__sflush_r+0x1c>
 8009dd8:	2000      	movs	r0, #0
 8009dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dde:	2e00      	cmp	r6, #0
 8009de0:	d0fa      	beq.n	8009dd8 <__sflush_r+0x18>
 8009de2:	2300      	movs	r3, #0
 8009de4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009de8:	682f      	ldr	r7, [r5, #0]
 8009dea:	6a21      	ldr	r1, [r4, #32]
 8009dec:	602b      	str	r3, [r5, #0]
 8009dee:	d032      	beq.n	8009e56 <__sflush_r+0x96>
 8009df0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	075a      	lsls	r2, r3, #29
 8009df6:	d505      	bpl.n	8009e04 <__sflush_r+0x44>
 8009df8:	6863      	ldr	r3, [r4, #4]
 8009dfa:	1ac0      	subs	r0, r0, r3
 8009dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dfe:	b10b      	cbz	r3, 8009e04 <__sflush_r+0x44>
 8009e00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e02:	1ac0      	subs	r0, r0, r3
 8009e04:	2300      	movs	r3, #0
 8009e06:	4602      	mov	r2, r0
 8009e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	6a21      	ldr	r1, [r4, #32]
 8009e0e:	47b0      	blx	r6
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	89a3      	ldrh	r3, [r4, #12]
 8009e14:	d106      	bne.n	8009e24 <__sflush_r+0x64>
 8009e16:	6829      	ldr	r1, [r5, #0]
 8009e18:	291d      	cmp	r1, #29
 8009e1a:	d82b      	bhi.n	8009e74 <__sflush_r+0xb4>
 8009e1c:	4a28      	ldr	r2, [pc, #160]	; (8009ec0 <__sflush_r+0x100>)
 8009e1e:	410a      	asrs	r2, r1
 8009e20:	07d6      	lsls	r6, r2, #31
 8009e22:	d427      	bmi.n	8009e74 <__sflush_r+0xb4>
 8009e24:	2200      	movs	r2, #0
 8009e26:	6062      	str	r2, [r4, #4]
 8009e28:	6922      	ldr	r2, [r4, #16]
 8009e2a:	04d9      	lsls	r1, r3, #19
 8009e2c:	6022      	str	r2, [r4, #0]
 8009e2e:	d504      	bpl.n	8009e3a <__sflush_r+0x7a>
 8009e30:	1c42      	adds	r2, r0, #1
 8009e32:	d101      	bne.n	8009e38 <__sflush_r+0x78>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b903      	cbnz	r3, 8009e3a <__sflush_r+0x7a>
 8009e38:	6560      	str	r0, [r4, #84]	; 0x54
 8009e3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e3c:	602f      	str	r7, [r5, #0]
 8009e3e:	2900      	cmp	r1, #0
 8009e40:	d0ca      	beq.n	8009dd8 <__sflush_r+0x18>
 8009e42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e46:	4299      	cmp	r1, r3
 8009e48:	d002      	beq.n	8009e50 <__sflush_r+0x90>
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	f7fd ff0c 	bl	8007c68 <_free_r>
 8009e50:	2000      	movs	r0, #0
 8009e52:	6360      	str	r0, [r4, #52]	; 0x34
 8009e54:	e7c1      	b.n	8009dda <__sflush_r+0x1a>
 8009e56:	2301      	movs	r3, #1
 8009e58:	4628      	mov	r0, r5
 8009e5a:	47b0      	blx	r6
 8009e5c:	1c41      	adds	r1, r0, #1
 8009e5e:	d1c8      	bne.n	8009df2 <__sflush_r+0x32>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d0c5      	beq.n	8009df2 <__sflush_r+0x32>
 8009e66:	2b1d      	cmp	r3, #29
 8009e68:	d001      	beq.n	8009e6e <__sflush_r+0xae>
 8009e6a:	2b16      	cmp	r3, #22
 8009e6c:	d101      	bne.n	8009e72 <__sflush_r+0xb2>
 8009e6e:	602f      	str	r7, [r5, #0]
 8009e70:	e7b2      	b.n	8009dd8 <__sflush_r+0x18>
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e78:	81a3      	strh	r3, [r4, #12]
 8009e7a:	e7ae      	b.n	8009dda <__sflush_r+0x1a>
 8009e7c:	690f      	ldr	r7, [r1, #16]
 8009e7e:	2f00      	cmp	r7, #0
 8009e80:	d0aa      	beq.n	8009dd8 <__sflush_r+0x18>
 8009e82:	0793      	lsls	r3, r2, #30
 8009e84:	bf18      	it	ne
 8009e86:	2300      	movne	r3, #0
 8009e88:	680e      	ldr	r6, [r1, #0]
 8009e8a:	bf08      	it	eq
 8009e8c:	694b      	ldreq	r3, [r1, #20]
 8009e8e:	1bf6      	subs	r6, r6, r7
 8009e90:	600f      	str	r7, [r1, #0]
 8009e92:	608b      	str	r3, [r1, #8]
 8009e94:	2e00      	cmp	r6, #0
 8009e96:	dd9f      	ble.n	8009dd8 <__sflush_r+0x18>
 8009e98:	4633      	mov	r3, r6
 8009e9a:	463a      	mov	r2, r7
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	6a21      	ldr	r1, [r4, #32]
 8009ea0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009ea4:	47e0      	blx	ip
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	dc06      	bgt.n	8009eb8 <__sflush_r+0xf8>
 8009eaa:	89a3      	ldrh	r3, [r4, #12]
 8009eac:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb4:	81a3      	strh	r3, [r4, #12]
 8009eb6:	e790      	b.n	8009dda <__sflush_r+0x1a>
 8009eb8:	4407      	add	r7, r0
 8009eba:	1a36      	subs	r6, r6, r0
 8009ebc:	e7ea      	b.n	8009e94 <__sflush_r+0xd4>
 8009ebe:	bf00      	nop
 8009ec0:	dfbffffe 	.word	0xdfbffffe

08009ec4 <_fflush_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	690b      	ldr	r3, [r1, #16]
 8009ec8:	4605      	mov	r5, r0
 8009eca:	460c      	mov	r4, r1
 8009ecc:	b913      	cbnz	r3, 8009ed4 <_fflush_r+0x10>
 8009ece:	2500      	movs	r5, #0
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	b118      	cbz	r0, 8009ede <_fflush_r+0x1a>
 8009ed6:	6a03      	ldr	r3, [r0, #32]
 8009ed8:	b90b      	cbnz	r3, 8009ede <_fflush_r+0x1a>
 8009eda:	f7fc fe87 	bl	8006bec <__sinit>
 8009ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0f3      	beq.n	8009ece <_fflush_r+0xa>
 8009ee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ee8:	07d0      	lsls	r0, r2, #31
 8009eea:	d404      	bmi.n	8009ef6 <_fflush_r+0x32>
 8009eec:	0599      	lsls	r1, r3, #22
 8009eee:	d402      	bmi.n	8009ef6 <_fflush_r+0x32>
 8009ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ef2:	f7fd f819 	bl	8006f28 <__retarget_lock_acquire_recursive>
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	4621      	mov	r1, r4
 8009efa:	f7ff ff61 	bl	8009dc0 <__sflush_r>
 8009efe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f00:	4605      	mov	r5, r0
 8009f02:	07da      	lsls	r2, r3, #31
 8009f04:	d4e4      	bmi.n	8009ed0 <_fflush_r+0xc>
 8009f06:	89a3      	ldrh	r3, [r4, #12]
 8009f08:	059b      	lsls	r3, r3, #22
 8009f0a:	d4e1      	bmi.n	8009ed0 <_fflush_r+0xc>
 8009f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f0e:	f7fd f80c 	bl	8006f2a <__retarget_lock_release_recursive>
 8009f12:	e7dd      	b.n	8009ed0 <_fflush_r+0xc>

08009f14 <fiprintf>:
 8009f14:	b40e      	push	{r1, r2, r3}
 8009f16:	b503      	push	{r0, r1, lr}
 8009f18:	4601      	mov	r1, r0
 8009f1a:	ab03      	add	r3, sp, #12
 8009f1c:	4805      	ldr	r0, [pc, #20]	; (8009f34 <fiprintf+0x20>)
 8009f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f22:	6800      	ldr	r0, [r0, #0]
 8009f24:	9301      	str	r3, [sp, #4]
 8009f26:	f000 fd27 	bl	800a978 <_vfiprintf_r>
 8009f2a:	b002      	add	sp, #8
 8009f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f30:	b003      	add	sp, #12
 8009f32:	4770      	bx	lr
 8009f34:	2000008c 	.word	0x2000008c

08009f38 <__sccl>:
 8009f38:	b570      	push	{r4, r5, r6, lr}
 8009f3a:	780b      	ldrb	r3, [r1, #0]
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	2b5e      	cmp	r3, #94	; 0x5e
 8009f40:	bf0b      	itete	eq
 8009f42:	784b      	ldrbeq	r3, [r1, #1]
 8009f44:	1c4a      	addne	r2, r1, #1
 8009f46:	1c8a      	addeq	r2, r1, #2
 8009f48:	2100      	movne	r1, #0
 8009f4a:	bf08      	it	eq
 8009f4c:	2101      	moveq	r1, #1
 8009f4e:	3801      	subs	r0, #1
 8009f50:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009f54:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009f58:	42a8      	cmp	r0, r5
 8009f5a:	d1fb      	bne.n	8009f54 <__sccl+0x1c>
 8009f5c:	b90b      	cbnz	r3, 8009f62 <__sccl+0x2a>
 8009f5e:	1e50      	subs	r0, r2, #1
 8009f60:	bd70      	pop	{r4, r5, r6, pc}
 8009f62:	f081 0101 	eor.w	r1, r1, #1
 8009f66:	4610      	mov	r0, r2
 8009f68:	54e1      	strb	r1, [r4, r3]
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009f70:	2d2d      	cmp	r5, #45	; 0x2d
 8009f72:	d005      	beq.n	8009f80 <__sccl+0x48>
 8009f74:	2d5d      	cmp	r5, #93	; 0x5d
 8009f76:	d016      	beq.n	8009fa6 <__sccl+0x6e>
 8009f78:	2d00      	cmp	r5, #0
 8009f7a:	d0f1      	beq.n	8009f60 <__sccl+0x28>
 8009f7c:	462b      	mov	r3, r5
 8009f7e:	e7f2      	b.n	8009f66 <__sccl+0x2e>
 8009f80:	7846      	ldrb	r6, [r0, #1]
 8009f82:	2e5d      	cmp	r6, #93	; 0x5d
 8009f84:	d0fa      	beq.n	8009f7c <__sccl+0x44>
 8009f86:	42b3      	cmp	r3, r6
 8009f88:	dcf8      	bgt.n	8009f7c <__sccl+0x44>
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	3002      	adds	r0, #2
 8009f8e:	3201      	adds	r2, #1
 8009f90:	4296      	cmp	r6, r2
 8009f92:	54a1      	strb	r1, [r4, r2]
 8009f94:	dcfb      	bgt.n	8009f8e <__sccl+0x56>
 8009f96:	1af2      	subs	r2, r6, r3
 8009f98:	3a01      	subs	r2, #1
 8009f9a:	42b3      	cmp	r3, r6
 8009f9c:	bfa8      	it	ge
 8009f9e:	2200      	movge	r2, #0
 8009fa0:	1c5d      	adds	r5, r3, #1
 8009fa2:	18ab      	adds	r3, r5, r2
 8009fa4:	e7e1      	b.n	8009f6a <__sccl+0x32>
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	e7da      	b.n	8009f60 <__sccl+0x28>

08009faa <__submore>:
 8009faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fae:	460c      	mov	r4, r1
 8009fb0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fb6:	4299      	cmp	r1, r3
 8009fb8:	d11b      	bne.n	8009ff2 <__submore+0x48>
 8009fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009fbe:	f7fd fec3 	bl	8007d48 <_malloc_r>
 8009fc2:	b918      	cbnz	r0, 8009fcc <__submore+0x22>
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd0:	63a3      	str	r3, [r4, #56]	; 0x38
 8009fd2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009fd6:	6360      	str	r0, [r4, #52]	; 0x34
 8009fd8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009fdc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009fe0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009fe4:	7043      	strb	r3, [r0, #1]
 8009fe6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009fea:	7003      	strb	r3, [r0, #0]
 8009fec:	6020      	str	r0, [r4, #0]
 8009fee:	2000      	movs	r0, #0
 8009ff0:	e7ea      	b.n	8009fc8 <__submore+0x1e>
 8009ff2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009ff4:	0077      	lsls	r7, r6, #1
 8009ff6:	463a      	mov	r2, r7
 8009ff8:	f000 fbe7 	bl	800a7ca <_realloc_r>
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d0e0      	beq.n	8009fc4 <__submore+0x1a>
 800a002:	eb00 0806 	add.w	r8, r0, r6
 800a006:	4601      	mov	r1, r0
 800a008:	4632      	mov	r2, r6
 800a00a:	4640      	mov	r0, r8
 800a00c:	f000 f842 	bl	800a094 <memcpy>
 800a010:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a014:	f8c4 8000 	str.w	r8, [r4]
 800a018:	e7e9      	b.n	8009fee <__submore+0x44>

0800a01a <memmove>:
 800a01a:	4288      	cmp	r0, r1
 800a01c:	b510      	push	{r4, lr}
 800a01e:	eb01 0402 	add.w	r4, r1, r2
 800a022:	d902      	bls.n	800a02a <memmove+0x10>
 800a024:	4284      	cmp	r4, r0
 800a026:	4623      	mov	r3, r4
 800a028:	d807      	bhi.n	800a03a <memmove+0x20>
 800a02a:	1e43      	subs	r3, r0, #1
 800a02c:	42a1      	cmp	r1, r4
 800a02e:	d008      	beq.n	800a042 <memmove+0x28>
 800a030:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a034:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a038:	e7f8      	b.n	800a02c <memmove+0x12>
 800a03a:	4601      	mov	r1, r0
 800a03c:	4402      	add	r2, r0
 800a03e:	428a      	cmp	r2, r1
 800a040:	d100      	bne.n	800a044 <memmove+0x2a>
 800a042:	bd10      	pop	{r4, pc}
 800a044:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a048:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a04c:	e7f7      	b.n	800a03e <memmove+0x24>

0800a04e <strncmp>:
 800a04e:	b510      	push	{r4, lr}
 800a050:	b16a      	cbz	r2, 800a06e <strncmp+0x20>
 800a052:	3901      	subs	r1, #1
 800a054:	1884      	adds	r4, r0, r2
 800a056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a05a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a05e:	429a      	cmp	r2, r3
 800a060:	d103      	bne.n	800a06a <strncmp+0x1c>
 800a062:	42a0      	cmp	r0, r4
 800a064:	d001      	beq.n	800a06a <strncmp+0x1c>
 800a066:	2a00      	cmp	r2, #0
 800a068:	d1f5      	bne.n	800a056 <strncmp+0x8>
 800a06a:	1ad0      	subs	r0, r2, r3
 800a06c:	bd10      	pop	{r4, pc}
 800a06e:	4610      	mov	r0, r2
 800a070:	e7fc      	b.n	800a06c <strncmp+0x1e>
	...

0800a074 <_sbrk_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	2300      	movs	r3, #0
 800a078:	4d05      	ldr	r5, [pc, #20]	; (800a090 <_sbrk_r+0x1c>)
 800a07a:	4604      	mov	r4, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	602b      	str	r3, [r5, #0]
 800a080:	f7f9 f844 	bl	800310c <_sbrk>
 800a084:	1c43      	adds	r3, r0, #1
 800a086:	d102      	bne.n	800a08e <_sbrk_r+0x1a>
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	b103      	cbz	r3, 800a08e <_sbrk_r+0x1a>
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	bd38      	pop	{r3, r4, r5, pc}
 800a090:	200005bc 	.word	0x200005bc

0800a094 <memcpy>:
 800a094:	440a      	add	r2, r1
 800a096:	4291      	cmp	r1, r2
 800a098:	f100 33ff 	add.w	r3, r0, #4294967295
 800a09c:	d100      	bne.n	800a0a0 <memcpy+0xc>
 800a09e:	4770      	bx	lr
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0a6:	4291      	cmp	r1, r2
 800a0a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0ac:	d1f9      	bne.n	800a0a2 <memcpy+0xe>
 800a0ae:	bd10      	pop	{r4, pc}

0800a0b0 <nan>:
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	4901      	ldr	r1, [pc, #4]	; (800a0b8 <nan+0x8>)
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	7ff80000 	.word	0x7ff80000

0800a0bc <abort>:
 800a0bc:	2006      	movs	r0, #6
 800a0be:	b508      	push	{r3, lr}
 800a0c0:	f000 fe32 	bl	800ad28 <raise>
 800a0c4:	2001      	movs	r0, #1
 800a0c6:	f7f8 ffae 	bl	8003026 <_exit>

0800a0ca <_calloc_r>:
 800a0ca:	b570      	push	{r4, r5, r6, lr}
 800a0cc:	fba1 5402 	umull	r5, r4, r1, r2
 800a0d0:	b934      	cbnz	r4, 800a0e0 <_calloc_r+0x16>
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	f7fd fe38 	bl	8007d48 <_malloc_r>
 800a0d8:	4606      	mov	r6, r0
 800a0da:	b928      	cbnz	r0, 800a0e8 <_calloc_r+0x1e>
 800a0dc:	4630      	mov	r0, r6
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	220c      	movs	r2, #12
 800a0e2:	2600      	movs	r6, #0
 800a0e4:	6002      	str	r2, [r0, #0]
 800a0e6:	e7f9      	b.n	800a0dc <_calloc_r+0x12>
 800a0e8:	462a      	mov	r2, r5
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	f7fc fe43 	bl	8006d76 <memset>
 800a0f0:	e7f4      	b.n	800a0dc <_calloc_r+0x12>

0800a0f2 <rshift>:
 800a0f2:	6903      	ldr	r3, [r0, #16]
 800a0f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0f8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a0fc:	f100 0414 	add.w	r4, r0, #20
 800a100:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a104:	dd46      	ble.n	800a194 <rshift+0xa2>
 800a106:	f011 011f 	ands.w	r1, r1, #31
 800a10a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a10e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a112:	d10c      	bne.n	800a12e <rshift+0x3c>
 800a114:	4629      	mov	r1, r5
 800a116:	f100 0710 	add.w	r7, r0, #16
 800a11a:	42b1      	cmp	r1, r6
 800a11c:	d335      	bcc.n	800a18a <rshift+0x98>
 800a11e:	1a9b      	subs	r3, r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	1eea      	subs	r2, r5, #3
 800a124:	4296      	cmp	r6, r2
 800a126:	bf38      	it	cc
 800a128:	2300      	movcc	r3, #0
 800a12a:	4423      	add	r3, r4
 800a12c:	e015      	b.n	800a15a <rshift+0x68>
 800a12e:	46a1      	mov	r9, r4
 800a130:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a134:	f1c1 0820 	rsb	r8, r1, #32
 800a138:	40cf      	lsrs	r7, r1
 800a13a:	f105 0e04 	add.w	lr, r5, #4
 800a13e:	4576      	cmp	r6, lr
 800a140:	46f4      	mov	ip, lr
 800a142:	d816      	bhi.n	800a172 <rshift+0x80>
 800a144:	1a9a      	subs	r2, r3, r2
 800a146:	0092      	lsls	r2, r2, #2
 800a148:	3a04      	subs	r2, #4
 800a14a:	3501      	adds	r5, #1
 800a14c:	42ae      	cmp	r6, r5
 800a14e:	bf38      	it	cc
 800a150:	2200      	movcc	r2, #0
 800a152:	18a3      	adds	r3, r4, r2
 800a154:	50a7      	str	r7, [r4, r2]
 800a156:	b107      	cbz	r7, 800a15a <rshift+0x68>
 800a158:	3304      	adds	r3, #4
 800a15a:	42a3      	cmp	r3, r4
 800a15c:	eba3 0204 	sub.w	r2, r3, r4
 800a160:	bf08      	it	eq
 800a162:	2300      	moveq	r3, #0
 800a164:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a168:	6102      	str	r2, [r0, #16]
 800a16a:	bf08      	it	eq
 800a16c:	6143      	streq	r3, [r0, #20]
 800a16e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a172:	f8dc c000 	ldr.w	ip, [ip]
 800a176:	fa0c fc08 	lsl.w	ip, ip, r8
 800a17a:	ea4c 0707 	orr.w	r7, ip, r7
 800a17e:	f849 7b04 	str.w	r7, [r9], #4
 800a182:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a186:	40cf      	lsrs	r7, r1
 800a188:	e7d9      	b.n	800a13e <rshift+0x4c>
 800a18a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a18e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a192:	e7c2      	b.n	800a11a <rshift+0x28>
 800a194:	4623      	mov	r3, r4
 800a196:	e7e0      	b.n	800a15a <rshift+0x68>

0800a198 <__hexdig_fun>:
 800a198:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a19c:	2b09      	cmp	r3, #9
 800a19e:	d802      	bhi.n	800a1a6 <__hexdig_fun+0xe>
 800a1a0:	3820      	subs	r0, #32
 800a1a2:	b2c0      	uxtb	r0, r0
 800a1a4:	4770      	bx	lr
 800a1a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a1aa:	2b05      	cmp	r3, #5
 800a1ac:	d801      	bhi.n	800a1b2 <__hexdig_fun+0x1a>
 800a1ae:	3847      	subs	r0, #71	; 0x47
 800a1b0:	e7f7      	b.n	800a1a2 <__hexdig_fun+0xa>
 800a1b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a1b6:	2b05      	cmp	r3, #5
 800a1b8:	d801      	bhi.n	800a1be <__hexdig_fun+0x26>
 800a1ba:	3827      	subs	r0, #39	; 0x27
 800a1bc:	e7f1      	b.n	800a1a2 <__hexdig_fun+0xa>
 800a1be:	2000      	movs	r0, #0
 800a1c0:	4770      	bx	lr
	...

0800a1c4 <__gethex>:
 800a1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c8:	4681      	mov	r9, r0
 800a1ca:	468a      	mov	sl, r1
 800a1cc:	4617      	mov	r7, r2
 800a1ce:	680a      	ldr	r2, [r1, #0]
 800a1d0:	b085      	sub	sp, #20
 800a1d2:	f102 0b02 	add.w	fp, r2, #2
 800a1d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a1da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a1de:	9302      	str	r3, [sp, #8]
 800a1e0:	32fe      	adds	r2, #254	; 0xfe
 800a1e2:	eb02 030b 	add.w	r3, r2, fp
 800a1e6:	46d8      	mov	r8, fp
 800a1e8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	2830      	cmp	r0, #48	; 0x30
 800a1f0:	d0f7      	beq.n	800a1e2 <__gethex+0x1e>
 800a1f2:	f7ff ffd1 	bl	800a198 <__hexdig_fun>
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	d138      	bne.n	800a26e <__gethex+0xaa>
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	4640      	mov	r0, r8
 800a200:	49a7      	ldr	r1, [pc, #668]	; (800a4a0 <__gethex+0x2dc>)
 800a202:	f7ff ff24 	bl	800a04e <strncmp>
 800a206:	4606      	mov	r6, r0
 800a208:	2800      	cmp	r0, #0
 800a20a:	d169      	bne.n	800a2e0 <__gethex+0x11c>
 800a20c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a210:	465d      	mov	r5, fp
 800a212:	f7ff ffc1 	bl	800a198 <__hexdig_fun>
 800a216:	2800      	cmp	r0, #0
 800a218:	d064      	beq.n	800a2e4 <__gethex+0x120>
 800a21a:	465a      	mov	r2, fp
 800a21c:	7810      	ldrb	r0, [r2, #0]
 800a21e:	4690      	mov	r8, r2
 800a220:	2830      	cmp	r0, #48	; 0x30
 800a222:	f102 0201 	add.w	r2, r2, #1
 800a226:	d0f9      	beq.n	800a21c <__gethex+0x58>
 800a228:	f7ff ffb6 	bl	800a198 <__hexdig_fun>
 800a22c:	2301      	movs	r3, #1
 800a22e:	fab0 f480 	clz	r4, r0
 800a232:	465e      	mov	r6, fp
 800a234:	0964      	lsrs	r4, r4, #5
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	4642      	mov	r2, r8
 800a23a:	4615      	mov	r5, r2
 800a23c:	7828      	ldrb	r0, [r5, #0]
 800a23e:	3201      	adds	r2, #1
 800a240:	f7ff ffaa 	bl	800a198 <__hexdig_fun>
 800a244:	2800      	cmp	r0, #0
 800a246:	d1f8      	bne.n	800a23a <__gethex+0x76>
 800a248:	2201      	movs	r2, #1
 800a24a:	4628      	mov	r0, r5
 800a24c:	4994      	ldr	r1, [pc, #592]	; (800a4a0 <__gethex+0x2dc>)
 800a24e:	f7ff fefe 	bl	800a04e <strncmp>
 800a252:	b978      	cbnz	r0, 800a274 <__gethex+0xb0>
 800a254:	b946      	cbnz	r6, 800a268 <__gethex+0xa4>
 800a256:	1c6e      	adds	r6, r5, #1
 800a258:	4632      	mov	r2, r6
 800a25a:	4615      	mov	r5, r2
 800a25c:	7828      	ldrb	r0, [r5, #0]
 800a25e:	3201      	adds	r2, #1
 800a260:	f7ff ff9a 	bl	800a198 <__hexdig_fun>
 800a264:	2800      	cmp	r0, #0
 800a266:	d1f8      	bne.n	800a25a <__gethex+0x96>
 800a268:	1b73      	subs	r3, r6, r5
 800a26a:	009e      	lsls	r6, r3, #2
 800a26c:	e004      	b.n	800a278 <__gethex+0xb4>
 800a26e:	2400      	movs	r4, #0
 800a270:	4626      	mov	r6, r4
 800a272:	e7e1      	b.n	800a238 <__gethex+0x74>
 800a274:	2e00      	cmp	r6, #0
 800a276:	d1f7      	bne.n	800a268 <__gethex+0xa4>
 800a278:	782b      	ldrb	r3, [r5, #0]
 800a27a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a27e:	2b50      	cmp	r3, #80	; 0x50
 800a280:	d13d      	bne.n	800a2fe <__gethex+0x13a>
 800a282:	786b      	ldrb	r3, [r5, #1]
 800a284:	2b2b      	cmp	r3, #43	; 0x2b
 800a286:	d02f      	beq.n	800a2e8 <__gethex+0x124>
 800a288:	2b2d      	cmp	r3, #45	; 0x2d
 800a28a:	d031      	beq.n	800a2f0 <__gethex+0x12c>
 800a28c:	f04f 0b00 	mov.w	fp, #0
 800a290:	1c69      	adds	r1, r5, #1
 800a292:	7808      	ldrb	r0, [r1, #0]
 800a294:	f7ff ff80 	bl	800a198 <__hexdig_fun>
 800a298:	1e42      	subs	r2, r0, #1
 800a29a:	b2d2      	uxtb	r2, r2
 800a29c:	2a18      	cmp	r2, #24
 800a29e:	d82e      	bhi.n	800a2fe <__gethex+0x13a>
 800a2a0:	f1a0 0210 	sub.w	r2, r0, #16
 800a2a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a2a8:	f7ff ff76 	bl	800a198 <__hexdig_fun>
 800a2ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800a2b0:	fa5f fc8c 	uxtb.w	ip, ip
 800a2b4:	f1bc 0f18 	cmp.w	ip, #24
 800a2b8:	d91d      	bls.n	800a2f6 <__gethex+0x132>
 800a2ba:	f1bb 0f00 	cmp.w	fp, #0
 800a2be:	d000      	beq.n	800a2c2 <__gethex+0xfe>
 800a2c0:	4252      	negs	r2, r2
 800a2c2:	4416      	add	r6, r2
 800a2c4:	f8ca 1000 	str.w	r1, [sl]
 800a2c8:	b1dc      	cbz	r4, 800a302 <__gethex+0x13e>
 800a2ca:	9b01      	ldr	r3, [sp, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bf14      	ite	ne
 800a2d0:	f04f 0800 	movne.w	r8, #0
 800a2d4:	f04f 0806 	moveq.w	r8, #6
 800a2d8:	4640      	mov	r0, r8
 800a2da:	b005      	add	sp, #20
 800a2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e0:	4645      	mov	r5, r8
 800a2e2:	4626      	mov	r6, r4
 800a2e4:	2401      	movs	r4, #1
 800a2e6:	e7c7      	b.n	800a278 <__gethex+0xb4>
 800a2e8:	f04f 0b00 	mov.w	fp, #0
 800a2ec:	1ca9      	adds	r1, r5, #2
 800a2ee:	e7d0      	b.n	800a292 <__gethex+0xce>
 800a2f0:	f04f 0b01 	mov.w	fp, #1
 800a2f4:	e7fa      	b.n	800a2ec <__gethex+0x128>
 800a2f6:	230a      	movs	r3, #10
 800a2f8:	fb03 0002 	mla	r0, r3, r2, r0
 800a2fc:	e7d0      	b.n	800a2a0 <__gethex+0xdc>
 800a2fe:	4629      	mov	r1, r5
 800a300:	e7e0      	b.n	800a2c4 <__gethex+0x100>
 800a302:	4621      	mov	r1, r4
 800a304:	eba5 0308 	sub.w	r3, r5, r8
 800a308:	3b01      	subs	r3, #1
 800a30a:	2b07      	cmp	r3, #7
 800a30c:	dc0a      	bgt.n	800a324 <__gethex+0x160>
 800a30e:	4648      	mov	r0, r9
 800a310:	f7fd fda6 	bl	8007e60 <_Balloc>
 800a314:	4604      	mov	r4, r0
 800a316:	b940      	cbnz	r0, 800a32a <__gethex+0x166>
 800a318:	4602      	mov	r2, r0
 800a31a:	21e4      	movs	r1, #228	; 0xe4
 800a31c:	4b61      	ldr	r3, [pc, #388]	; (800a4a4 <__gethex+0x2e0>)
 800a31e:	4862      	ldr	r0, [pc, #392]	; (800a4a8 <__gethex+0x2e4>)
 800a320:	f7fc fe16 	bl	8006f50 <__assert_func>
 800a324:	3101      	adds	r1, #1
 800a326:	105b      	asrs	r3, r3, #1
 800a328:	e7ef      	b.n	800a30a <__gethex+0x146>
 800a32a:	2300      	movs	r3, #0
 800a32c:	469b      	mov	fp, r3
 800a32e:	f100 0a14 	add.w	sl, r0, #20
 800a332:	f8cd a004 	str.w	sl, [sp, #4]
 800a336:	45a8      	cmp	r8, r5
 800a338:	d344      	bcc.n	800a3c4 <__gethex+0x200>
 800a33a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a33e:	4658      	mov	r0, fp
 800a340:	f848 bb04 	str.w	fp, [r8], #4
 800a344:	eba8 080a 	sub.w	r8, r8, sl
 800a348:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a34c:	6122      	str	r2, [r4, #16]
 800a34e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a352:	f7fd fe77 	bl	8008044 <__hi0bits>
 800a356:	683d      	ldr	r5, [r7, #0]
 800a358:	eba8 0800 	sub.w	r8, r8, r0
 800a35c:	45a8      	cmp	r8, r5
 800a35e:	dd59      	ble.n	800a414 <__gethex+0x250>
 800a360:	eba8 0805 	sub.w	r8, r8, r5
 800a364:	4641      	mov	r1, r8
 800a366:	4620      	mov	r0, r4
 800a368:	f7fe f9f5 	bl	8008756 <__any_on>
 800a36c:	4683      	mov	fp, r0
 800a36e:	b1b8      	cbz	r0, 800a3a0 <__gethex+0x1dc>
 800a370:	f04f 0b01 	mov.w	fp, #1
 800a374:	f108 33ff 	add.w	r3, r8, #4294967295
 800a378:	1159      	asrs	r1, r3, #5
 800a37a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a37e:	f003 021f 	and.w	r2, r3, #31
 800a382:	fa0b f202 	lsl.w	r2, fp, r2
 800a386:	420a      	tst	r2, r1
 800a388:	d00a      	beq.n	800a3a0 <__gethex+0x1dc>
 800a38a:	455b      	cmp	r3, fp
 800a38c:	dd06      	ble.n	800a39c <__gethex+0x1d8>
 800a38e:	4620      	mov	r0, r4
 800a390:	f1a8 0102 	sub.w	r1, r8, #2
 800a394:	f7fe f9df 	bl	8008756 <__any_on>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d138      	bne.n	800a40e <__gethex+0x24a>
 800a39c:	f04f 0b02 	mov.w	fp, #2
 800a3a0:	4641      	mov	r1, r8
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f7ff fea5 	bl	800a0f2 <rshift>
 800a3a8:	4446      	add	r6, r8
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	42b3      	cmp	r3, r6
 800a3ae:	da41      	bge.n	800a434 <__gethex+0x270>
 800a3b0:	4621      	mov	r1, r4
 800a3b2:	4648      	mov	r0, r9
 800a3b4:	f7fd fd94 	bl	8007ee0 <_Bfree>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3bc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a3c0:	6013      	str	r3, [r2, #0]
 800a3c2:	e789      	b.n	800a2d8 <__gethex+0x114>
 800a3c4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a3c8:	2a2e      	cmp	r2, #46	; 0x2e
 800a3ca:	d014      	beq.n	800a3f6 <__gethex+0x232>
 800a3cc:	2b20      	cmp	r3, #32
 800a3ce:	d106      	bne.n	800a3de <__gethex+0x21a>
 800a3d0:	9b01      	ldr	r3, [sp, #4]
 800a3d2:	f843 bb04 	str.w	fp, [r3], #4
 800a3d6:	f04f 0b00 	mov.w	fp, #0
 800a3da:	9301      	str	r3, [sp, #4]
 800a3dc:	465b      	mov	r3, fp
 800a3de:	7828      	ldrb	r0, [r5, #0]
 800a3e0:	9303      	str	r3, [sp, #12]
 800a3e2:	f7ff fed9 	bl	800a198 <__hexdig_fun>
 800a3e6:	9b03      	ldr	r3, [sp, #12]
 800a3e8:	f000 000f 	and.w	r0, r0, #15
 800a3ec:	4098      	lsls	r0, r3
 800a3ee:	ea4b 0b00 	orr.w	fp, fp, r0
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	e79f      	b.n	800a336 <__gethex+0x172>
 800a3f6:	45a8      	cmp	r8, r5
 800a3f8:	d8e8      	bhi.n	800a3cc <__gethex+0x208>
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	4928      	ldr	r1, [pc, #160]	; (800a4a0 <__gethex+0x2dc>)
 800a400:	9303      	str	r3, [sp, #12]
 800a402:	f7ff fe24 	bl	800a04e <strncmp>
 800a406:	9b03      	ldr	r3, [sp, #12]
 800a408:	2800      	cmp	r0, #0
 800a40a:	d1df      	bne.n	800a3cc <__gethex+0x208>
 800a40c:	e793      	b.n	800a336 <__gethex+0x172>
 800a40e:	f04f 0b03 	mov.w	fp, #3
 800a412:	e7c5      	b.n	800a3a0 <__gethex+0x1dc>
 800a414:	da0b      	bge.n	800a42e <__gethex+0x26a>
 800a416:	eba5 0808 	sub.w	r8, r5, r8
 800a41a:	4621      	mov	r1, r4
 800a41c:	4642      	mov	r2, r8
 800a41e:	4648      	mov	r0, r9
 800a420:	f7fd ff76 	bl	8008310 <__lshift>
 800a424:	4604      	mov	r4, r0
 800a426:	eba6 0608 	sub.w	r6, r6, r8
 800a42a:	f100 0a14 	add.w	sl, r0, #20
 800a42e:	f04f 0b00 	mov.w	fp, #0
 800a432:	e7ba      	b.n	800a3aa <__gethex+0x1e6>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	42b3      	cmp	r3, r6
 800a438:	dd74      	ble.n	800a524 <__gethex+0x360>
 800a43a:	1b9e      	subs	r6, r3, r6
 800a43c:	42b5      	cmp	r5, r6
 800a43e:	dc35      	bgt.n	800a4ac <__gethex+0x2e8>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d023      	beq.n	800a48e <__gethex+0x2ca>
 800a446:	2b03      	cmp	r3, #3
 800a448:	d025      	beq.n	800a496 <__gethex+0x2d2>
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d115      	bne.n	800a47a <__gethex+0x2b6>
 800a44e:	42b5      	cmp	r5, r6
 800a450:	d113      	bne.n	800a47a <__gethex+0x2b6>
 800a452:	2d01      	cmp	r5, #1
 800a454:	d10b      	bne.n	800a46e <__gethex+0x2aa>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	9a02      	ldr	r2, [sp, #8]
 800a45a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	2301      	movs	r3, #1
 800a462:	6123      	str	r3, [r4, #16]
 800a464:	f8ca 3000 	str.w	r3, [sl]
 800a468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a46a:	601c      	str	r4, [r3, #0]
 800a46c:	e734      	b.n	800a2d8 <__gethex+0x114>
 800a46e:	4620      	mov	r0, r4
 800a470:	1e69      	subs	r1, r5, #1
 800a472:	f7fe f970 	bl	8008756 <__any_on>
 800a476:	2800      	cmp	r0, #0
 800a478:	d1ed      	bne.n	800a456 <__gethex+0x292>
 800a47a:	4621      	mov	r1, r4
 800a47c:	4648      	mov	r0, r9
 800a47e:	f7fd fd2f 	bl	8007ee0 <_Bfree>
 800a482:	2300      	movs	r3, #0
 800a484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a486:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a48a:	6013      	str	r3, [r2, #0]
 800a48c:	e724      	b.n	800a2d8 <__gethex+0x114>
 800a48e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1f2      	bne.n	800a47a <__gethex+0x2b6>
 800a494:	e7df      	b.n	800a456 <__gethex+0x292>
 800a496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1dc      	bne.n	800a456 <__gethex+0x292>
 800a49c:	e7ed      	b.n	800a47a <__gethex+0x2b6>
 800a49e:	bf00      	nop
 800a4a0:	0800b31c 	.word	0x0800b31c
 800a4a4:	0800b1af 	.word	0x0800b1af
 800a4a8:	0800b4a5 	.word	0x0800b4a5
 800a4ac:	f106 38ff 	add.w	r8, r6, #4294967295
 800a4b0:	f1bb 0f00 	cmp.w	fp, #0
 800a4b4:	d133      	bne.n	800a51e <__gethex+0x35a>
 800a4b6:	f1b8 0f00 	cmp.w	r8, #0
 800a4ba:	d004      	beq.n	800a4c6 <__gethex+0x302>
 800a4bc:	4641      	mov	r1, r8
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f7fe f949 	bl	8008756 <__any_on>
 800a4c4:	4683      	mov	fp, r0
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a4cc:	f008 081f 	and.w	r8, r8, #31
 800a4d0:	fa03 f308 	lsl.w	r3, r3, r8
 800a4d4:	f04f 0802 	mov.w	r8, #2
 800a4d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4213      	tst	r3, r2
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	bf18      	it	ne
 800a4e4:	f04b 0b02 	orrne.w	fp, fp, #2
 800a4e8:	1bad      	subs	r5, r5, r6
 800a4ea:	f7ff fe02 	bl	800a0f2 <rshift>
 800a4ee:	687e      	ldr	r6, [r7, #4]
 800a4f0:	f1bb 0f00 	cmp.w	fp, #0
 800a4f4:	d04a      	beq.n	800a58c <__gethex+0x3c8>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d016      	beq.n	800a52a <__gethex+0x366>
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d018      	beq.n	800a532 <__gethex+0x36e>
 800a500:	2b01      	cmp	r3, #1
 800a502:	d109      	bne.n	800a518 <__gethex+0x354>
 800a504:	f01b 0f02 	tst.w	fp, #2
 800a508:	d006      	beq.n	800a518 <__gethex+0x354>
 800a50a:	f8da 3000 	ldr.w	r3, [sl]
 800a50e:	ea4b 0b03 	orr.w	fp, fp, r3
 800a512:	f01b 0f01 	tst.w	fp, #1
 800a516:	d10f      	bne.n	800a538 <__gethex+0x374>
 800a518:	f048 0810 	orr.w	r8, r8, #16
 800a51c:	e036      	b.n	800a58c <__gethex+0x3c8>
 800a51e:	f04f 0b01 	mov.w	fp, #1
 800a522:	e7d0      	b.n	800a4c6 <__gethex+0x302>
 800a524:	f04f 0801 	mov.w	r8, #1
 800a528:	e7e2      	b.n	800a4f0 <__gethex+0x32c>
 800a52a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a52c:	f1c3 0301 	rsb	r3, r3, #1
 800a530:	930f      	str	r3, [sp, #60]	; 0x3c
 800a532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a534:	2b00      	cmp	r3, #0
 800a536:	d0ef      	beq.n	800a518 <__gethex+0x354>
 800a538:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a53c:	f104 0214 	add.w	r2, r4, #20
 800a540:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a544:	9301      	str	r3, [sp, #4]
 800a546:	2300      	movs	r3, #0
 800a548:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a54c:	4694      	mov	ip, r2
 800a54e:	f852 1b04 	ldr.w	r1, [r2], #4
 800a552:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a556:	d01e      	beq.n	800a596 <__gethex+0x3d2>
 800a558:	3101      	adds	r1, #1
 800a55a:	f8cc 1000 	str.w	r1, [ip]
 800a55e:	f1b8 0f02 	cmp.w	r8, #2
 800a562:	f104 0214 	add.w	r2, r4, #20
 800a566:	d13d      	bne.n	800a5e4 <__gethex+0x420>
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	3b01      	subs	r3, #1
 800a56c:	42ab      	cmp	r3, r5
 800a56e:	d10b      	bne.n	800a588 <__gethex+0x3c4>
 800a570:	2301      	movs	r3, #1
 800a572:	1169      	asrs	r1, r5, #5
 800a574:	f005 051f 	and.w	r5, r5, #31
 800a578:	fa03 f505 	lsl.w	r5, r3, r5
 800a57c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a580:	421d      	tst	r5, r3
 800a582:	bf18      	it	ne
 800a584:	f04f 0801 	movne.w	r8, #1
 800a588:	f048 0820 	orr.w	r8, r8, #32
 800a58c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a58e:	601c      	str	r4, [r3, #0]
 800a590:	9b02      	ldr	r3, [sp, #8]
 800a592:	601e      	str	r6, [r3, #0]
 800a594:	e6a0      	b.n	800a2d8 <__gethex+0x114>
 800a596:	4290      	cmp	r0, r2
 800a598:	f842 3c04 	str.w	r3, [r2, #-4]
 800a59c:	d8d6      	bhi.n	800a54c <__gethex+0x388>
 800a59e:	68a2      	ldr	r2, [r4, #8]
 800a5a0:	4593      	cmp	fp, r2
 800a5a2:	db17      	blt.n	800a5d4 <__gethex+0x410>
 800a5a4:	6861      	ldr	r1, [r4, #4]
 800a5a6:	4648      	mov	r0, r9
 800a5a8:	3101      	adds	r1, #1
 800a5aa:	f7fd fc59 	bl	8007e60 <_Balloc>
 800a5ae:	4682      	mov	sl, r0
 800a5b0:	b918      	cbnz	r0, 800a5ba <__gethex+0x3f6>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	2184      	movs	r1, #132	; 0x84
 800a5b6:	4b1a      	ldr	r3, [pc, #104]	; (800a620 <__gethex+0x45c>)
 800a5b8:	e6b1      	b.n	800a31e <__gethex+0x15a>
 800a5ba:	6922      	ldr	r2, [r4, #16]
 800a5bc:	f104 010c 	add.w	r1, r4, #12
 800a5c0:	3202      	adds	r2, #2
 800a5c2:	0092      	lsls	r2, r2, #2
 800a5c4:	300c      	adds	r0, #12
 800a5c6:	f7ff fd65 	bl	800a094 <memcpy>
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	4648      	mov	r0, r9
 800a5ce:	f7fd fc87 	bl	8007ee0 <_Bfree>
 800a5d2:	4654      	mov	r4, sl
 800a5d4:	6922      	ldr	r2, [r4, #16]
 800a5d6:	1c51      	adds	r1, r2, #1
 800a5d8:	6121      	str	r1, [r4, #16]
 800a5da:	2101      	movs	r1, #1
 800a5dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a5e0:	6151      	str	r1, [r2, #20]
 800a5e2:	e7bc      	b.n	800a55e <__gethex+0x39a>
 800a5e4:	6921      	ldr	r1, [r4, #16]
 800a5e6:	4559      	cmp	r1, fp
 800a5e8:	dd0b      	ble.n	800a602 <__gethex+0x43e>
 800a5ea:	2101      	movs	r1, #1
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f7ff fd80 	bl	800a0f2 <rshift>
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	3601      	adds	r6, #1
 800a5f6:	42b3      	cmp	r3, r6
 800a5f8:	f6ff aeda 	blt.w	800a3b0 <__gethex+0x1ec>
 800a5fc:	f04f 0801 	mov.w	r8, #1
 800a600:	e7c2      	b.n	800a588 <__gethex+0x3c4>
 800a602:	f015 051f 	ands.w	r5, r5, #31
 800a606:	d0f9      	beq.n	800a5fc <__gethex+0x438>
 800a608:	9b01      	ldr	r3, [sp, #4]
 800a60a:	f1c5 0520 	rsb	r5, r5, #32
 800a60e:	441a      	add	r2, r3
 800a610:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a614:	f7fd fd16 	bl	8008044 <__hi0bits>
 800a618:	42a8      	cmp	r0, r5
 800a61a:	dbe6      	blt.n	800a5ea <__gethex+0x426>
 800a61c:	e7ee      	b.n	800a5fc <__gethex+0x438>
 800a61e:	bf00      	nop
 800a620:	0800b1af 	.word	0x0800b1af

0800a624 <L_shift>:
 800a624:	f1c2 0208 	rsb	r2, r2, #8
 800a628:	0092      	lsls	r2, r2, #2
 800a62a:	b570      	push	{r4, r5, r6, lr}
 800a62c:	f1c2 0620 	rsb	r6, r2, #32
 800a630:	6843      	ldr	r3, [r0, #4]
 800a632:	6804      	ldr	r4, [r0, #0]
 800a634:	fa03 f506 	lsl.w	r5, r3, r6
 800a638:	432c      	orrs	r4, r5
 800a63a:	40d3      	lsrs	r3, r2
 800a63c:	6004      	str	r4, [r0, #0]
 800a63e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a642:	4288      	cmp	r0, r1
 800a644:	d3f4      	bcc.n	800a630 <L_shift+0xc>
 800a646:	bd70      	pop	{r4, r5, r6, pc}

0800a648 <__match>:
 800a648:	b530      	push	{r4, r5, lr}
 800a64a:	6803      	ldr	r3, [r0, #0]
 800a64c:	3301      	adds	r3, #1
 800a64e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a652:	b914      	cbnz	r4, 800a65a <__match+0x12>
 800a654:	6003      	str	r3, [r0, #0]
 800a656:	2001      	movs	r0, #1
 800a658:	bd30      	pop	{r4, r5, pc}
 800a65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a65e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a662:	2d19      	cmp	r5, #25
 800a664:	bf98      	it	ls
 800a666:	3220      	addls	r2, #32
 800a668:	42a2      	cmp	r2, r4
 800a66a:	d0f0      	beq.n	800a64e <__match+0x6>
 800a66c:	2000      	movs	r0, #0
 800a66e:	e7f3      	b.n	800a658 <__match+0x10>

0800a670 <__hexnan>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	2500      	movs	r5, #0
 800a676:	680b      	ldr	r3, [r1, #0]
 800a678:	4682      	mov	sl, r0
 800a67a:	115e      	asrs	r6, r3, #5
 800a67c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a680:	f013 031f 	ands.w	r3, r3, #31
 800a684:	bf18      	it	ne
 800a686:	3604      	addne	r6, #4
 800a688:	1f37      	subs	r7, r6, #4
 800a68a:	4690      	mov	r8, r2
 800a68c:	46b9      	mov	r9, r7
 800a68e:	463c      	mov	r4, r7
 800a690:	46ab      	mov	fp, r5
 800a692:	b087      	sub	sp, #28
 800a694:	6801      	ldr	r1, [r0, #0]
 800a696:	9301      	str	r3, [sp, #4]
 800a698:	f846 5c04 	str.w	r5, [r6, #-4]
 800a69c:	9502      	str	r5, [sp, #8]
 800a69e:	784a      	ldrb	r2, [r1, #1]
 800a6a0:	1c4b      	adds	r3, r1, #1
 800a6a2:	9303      	str	r3, [sp, #12]
 800a6a4:	b342      	cbz	r2, 800a6f8 <__hexnan+0x88>
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	9105      	str	r1, [sp, #20]
 800a6aa:	9204      	str	r2, [sp, #16]
 800a6ac:	f7ff fd74 	bl	800a198 <__hexdig_fun>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d14f      	bne.n	800a754 <__hexnan+0xe4>
 800a6b4:	9a04      	ldr	r2, [sp, #16]
 800a6b6:	9905      	ldr	r1, [sp, #20]
 800a6b8:	2a20      	cmp	r2, #32
 800a6ba:	d818      	bhi.n	800a6ee <__hexnan+0x7e>
 800a6bc:	9b02      	ldr	r3, [sp, #8]
 800a6be:	459b      	cmp	fp, r3
 800a6c0:	dd13      	ble.n	800a6ea <__hexnan+0x7a>
 800a6c2:	454c      	cmp	r4, r9
 800a6c4:	d206      	bcs.n	800a6d4 <__hexnan+0x64>
 800a6c6:	2d07      	cmp	r5, #7
 800a6c8:	dc04      	bgt.n	800a6d4 <__hexnan+0x64>
 800a6ca:	462a      	mov	r2, r5
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f7ff ffa8 	bl	800a624 <L_shift>
 800a6d4:	4544      	cmp	r4, r8
 800a6d6:	d950      	bls.n	800a77a <__hexnan+0x10a>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f1a4 0904 	sub.w	r9, r4, #4
 800a6de:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6e2:	461d      	mov	r5, r3
 800a6e4:	464c      	mov	r4, r9
 800a6e6:	f8cd b008 	str.w	fp, [sp, #8]
 800a6ea:	9903      	ldr	r1, [sp, #12]
 800a6ec:	e7d7      	b.n	800a69e <__hexnan+0x2e>
 800a6ee:	2a29      	cmp	r2, #41	; 0x29
 800a6f0:	d155      	bne.n	800a79e <__hexnan+0x12e>
 800a6f2:	3102      	adds	r1, #2
 800a6f4:	f8ca 1000 	str.w	r1, [sl]
 800a6f8:	f1bb 0f00 	cmp.w	fp, #0
 800a6fc:	d04f      	beq.n	800a79e <__hexnan+0x12e>
 800a6fe:	454c      	cmp	r4, r9
 800a700:	d206      	bcs.n	800a710 <__hexnan+0xa0>
 800a702:	2d07      	cmp	r5, #7
 800a704:	dc04      	bgt.n	800a710 <__hexnan+0xa0>
 800a706:	462a      	mov	r2, r5
 800a708:	4649      	mov	r1, r9
 800a70a:	4620      	mov	r0, r4
 800a70c:	f7ff ff8a 	bl	800a624 <L_shift>
 800a710:	4544      	cmp	r4, r8
 800a712:	d934      	bls.n	800a77e <__hexnan+0x10e>
 800a714:	4623      	mov	r3, r4
 800a716:	f1a8 0204 	sub.w	r2, r8, #4
 800a71a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a71e:	429f      	cmp	r7, r3
 800a720:	f842 1f04 	str.w	r1, [r2, #4]!
 800a724:	d2f9      	bcs.n	800a71a <__hexnan+0xaa>
 800a726:	1b3b      	subs	r3, r7, r4
 800a728:	f023 0303 	bic.w	r3, r3, #3
 800a72c:	3304      	adds	r3, #4
 800a72e:	3e03      	subs	r6, #3
 800a730:	3401      	adds	r4, #1
 800a732:	42a6      	cmp	r6, r4
 800a734:	bf38      	it	cc
 800a736:	2304      	movcc	r3, #4
 800a738:	2200      	movs	r2, #0
 800a73a:	4443      	add	r3, r8
 800a73c:	f843 2b04 	str.w	r2, [r3], #4
 800a740:	429f      	cmp	r7, r3
 800a742:	d2fb      	bcs.n	800a73c <__hexnan+0xcc>
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	b91b      	cbnz	r3, 800a750 <__hexnan+0xe0>
 800a748:	4547      	cmp	r7, r8
 800a74a:	d126      	bne.n	800a79a <__hexnan+0x12a>
 800a74c:	2301      	movs	r3, #1
 800a74e:	603b      	str	r3, [r7, #0]
 800a750:	2005      	movs	r0, #5
 800a752:	e025      	b.n	800a7a0 <__hexnan+0x130>
 800a754:	3501      	adds	r5, #1
 800a756:	2d08      	cmp	r5, #8
 800a758:	f10b 0b01 	add.w	fp, fp, #1
 800a75c:	dd06      	ble.n	800a76c <__hexnan+0xfc>
 800a75e:	4544      	cmp	r4, r8
 800a760:	d9c3      	bls.n	800a6ea <__hexnan+0x7a>
 800a762:	2300      	movs	r3, #0
 800a764:	2501      	movs	r5, #1
 800a766:	f844 3c04 	str.w	r3, [r4, #-4]
 800a76a:	3c04      	subs	r4, #4
 800a76c:	6822      	ldr	r2, [r4, #0]
 800a76e:	f000 000f 	and.w	r0, r0, #15
 800a772:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a776:	6020      	str	r0, [r4, #0]
 800a778:	e7b7      	b.n	800a6ea <__hexnan+0x7a>
 800a77a:	2508      	movs	r5, #8
 800a77c:	e7b5      	b.n	800a6ea <__hexnan+0x7a>
 800a77e:	9b01      	ldr	r3, [sp, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d0df      	beq.n	800a744 <__hexnan+0xd4>
 800a784:	f04f 32ff 	mov.w	r2, #4294967295
 800a788:	f1c3 0320 	rsb	r3, r3, #32
 800a78c:	40da      	lsrs	r2, r3
 800a78e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a792:	4013      	ands	r3, r2
 800a794:	f846 3c04 	str.w	r3, [r6, #-4]
 800a798:	e7d4      	b.n	800a744 <__hexnan+0xd4>
 800a79a:	3f04      	subs	r7, #4
 800a79c:	e7d2      	b.n	800a744 <__hexnan+0xd4>
 800a79e:	2004      	movs	r0, #4
 800a7a0:	b007      	add	sp, #28
 800a7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a7a6 <__ascii_mbtowc>:
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	b901      	cbnz	r1, 800a7ac <__ascii_mbtowc+0x6>
 800a7aa:	a901      	add	r1, sp, #4
 800a7ac:	b142      	cbz	r2, 800a7c0 <__ascii_mbtowc+0x1a>
 800a7ae:	b14b      	cbz	r3, 800a7c4 <__ascii_mbtowc+0x1e>
 800a7b0:	7813      	ldrb	r3, [r2, #0]
 800a7b2:	600b      	str	r3, [r1, #0]
 800a7b4:	7812      	ldrb	r2, [r2, #0]
 800a7b6:	1e10      	subs	r0, r2, #0
 800a7b8:	bf18      	it	ne
 800a7ba:	2001      	movne	r0, #1
 800a7bc:	b002      	add	sp, #8
 800a7be:	4770      	bx	lr
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	e7fb      	b.n	800a7bc <__ascii_mbtowc+0x16>
 800a7c4:	f06f 0001 	mvn.w	r0, #1
 800a7c8:	e7f8      	b.n	800a7bc <__ascii_mbtowc+0x16>

0800a7ca <_realloc_r>:
 800a7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ce:	4680      	mov	r8, r0
 800a7d0:	4614      	mov	r4, r2
 800a7d2:	460e      	mov	r6, r1
 800a7d4:	b921      	cbnz	r1, 800a7e0 <_realloc_r+0x16>
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7dc:	f7fd bab4 	b.w	8007d48 <_malloc_r>
 800a7e0:	b92a      	cbnz	r2, 800a7ee <_realloc_r+0x24>
 800a7e2:	f7fd fa41 	bl	8007c68 <_free_r>
 800a7e6:	4625      	mov	r5, r4
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ee:	f000 fab7 	bl	800ad60 <_malloc_usable_size_r>
 800a7f2:	4284      	cmp	r4, r0
 800a7f4:	4607      	mov	r7, r0
 800a7f6:	d802      	bhi.n	800a7fe <_realloc_r+0x34>
 800a7f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7fc:	d812      	bhi.n	800a824 <_realloc_r+0x5a>
 800a7fe:	4621      	mov	r1, r4
 800a800:	4640      	mov	r0, r8
 800a802:	f7fd faa1 	bl	8007d48 <_malloc_r>
 800a806:	4605      	mov	r5, r0
 800a808:	2800      	cmp	r0, #0
 800a80a:	d0ed      	beq.n	800a7e8 <_realloc_r+0x1e>
 800a80c:	42bc      	cmp	r4, r7
 800a80e:	4622      	mov	r2, r4
 800a810:	4631      	mov	r1, r6
 800a812:	bf28      	it	cs
 800a814:	463a      	movcs	r2, r7
 800a816:	f7ff fc3d 	bl	800a094 <memcpy>
 800a81a:	4631      	mov	r1, r6
 800a81c:	4640      	mov	r0, r8
 800a81e:	f7fd fa23 	bl	8007c68 <_free_r>
 800a822:	e7e1      	b.n	800a7e8 <_realloc_r+0x1e>
 800a824:	4635      	mov	r5, r6
 800a826:	e7df      	b.n	800a7e8 <_realloc_r+0x1e>

0800a828 <_strtoul_l.constprop.0>:
 800a828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a82c:	4686      	mov	lr, r0
 800a82e:	460d      	mov	r5, r1
 800a830:	4f35      	ldr	r7, [pc, #212]	; (800a908 <_strtoul_l.constprop.0+0xe0>)
 800a832:	4628      	mov	r0, r5
 800a834:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a838:	5d3e      	ldrb	r6, [r7, r4]
 800a83a:	f016 0608 	ands.w	r6, r6, #8
 800a83e:	d1f8      	bne.n	800a832 <_strtoul_l.constprop.0+0xa>
 800a840:	2c2d      	cmp	r4, #45	; 0x2d
 800a842:	d130      	bne.n	800a8a6 <_strtoul_l.constprop.0+0x7e>
 800a844:	2601      	movs	r6, #1
 800a846:	782c      	ldrb	r4, [r5, #0]
 800a848:	1c85      	adds	r5, r0, #2
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d057      	beq.n	800a8fe <_strtoul_l.constprop.0+0xd6>
 800a84e:	2b10      	cmp	r3, #16
 800a850:	d109      	bne.n	800a866 <_strtoul_l.constprop.0+0x3e>
 800a852:	2c30      	cmp	r4, #48	; 0x30
 800a854:	d107      	bne.n	800a866 <_strtoul_l.constprop.0+0x3e>
 800a856:	7828      	ldrb	r0, [r5, #0]
 800a858:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a85c:	2858      	cmp	r0, #88	; 0x58
 800a85e:	d149      	bne.n	800a8f4 <_strtoul_l.constprop.0+0xcc>
 800a860:	2310      	movs	r3, #16
 800a862:	786c      	ldrb	r4, [r5, #1]
 800a864:	3502      	adds	r5, #2
 800a866:	f04f 38ff 	mov.w	r8, #4294967295
 800a86a:	fbb8 f8f3 	udiv	r8, r8, r3
 800a86e:	2700      	movs	r7, #0
 800a870:	fb03 f908 	mul.w	r9, r3, r8
 800a874:	4638      	mov	r0, r7
 800a876:	ea6f 0909 	mvn.w	r9, r9
 800a87a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a87e:	f1bc 0f09 	cmp.w	ip, #9
 800a882:	d815      	bhi.n	800a8b0 <_strtoul_l.constprop.0+0x88>
 800a884:	4664      	mov	r4, ip
 800a886:	42a3      	cmp	r3, r4
 800a888:	dd23      	ble.n	800a8d2 <_strtoul_l.constprop.0+0xaa>
 800a88a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a88e:	d007      	beq.n	800a8a0 <_strtoul_l.constprop.0+0x78>
 800a890:	4580      	cmp	r8, r0
 800a892:	d31b      	bcc.n	800a8cc <_strtoul_l.constprop.0+0xa4>
 800a894:	d101      	bne.n	800a89a <_strtoul_l.constprop.0+0x72>
 800a896:	45a1      	cmp	r9, r4
 800a898:	db18      	blt.n	800a8cc <_strtoul_l.constprop.0+0xa4>
 800a89a:	2701      	movs	r7, #1
 800a89c:	fb00 4003 	mla	r0, r0, r3, r4
 800a8a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8a4:	e7e9      	b.n	800a87a <_strtoul_l.constprop.0+0x52>
 800a8a6:	2c2b      	cmp	r4, #43	; 0x2b
 800a8a8:	bf04      	itt	eq
 800a8aa:	782c      	ldrbeq	r4, [r5, #0]
 800a8ac:	1c85      	addeq	r5, r0, #2
 800a8ae:	e7cc      	b.n	800a84a <_strtoul_l.constprop.0+0x22>
 800a8b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a8b4:	f1bc 0f19 	cmp.w	ip, #25
 800a8b8:	d801      	bhi.n	800a8be <_strtoul_l.constprop.0+0x96>
 800a8ba:	3c37      	subs	r4, #55	; 0x37
 800a8bc:	e7e3      	b.n	800a886 <_strtoul_l.constprop.0+0x5e>
 800a8be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a8c2:	f1bc 0f19 	cmp.w	ip, #25
 800a8c6:	d804      	bhi.n	800a8d2 <_strtoul_l.constprop.0+0xaa>
 800a8c8:	3c57      	subs	r4, #87	; 0x57
 800a8ca:	e7dc      	b.n	800a886 <_strtoul_l.constprop.0+0x5e>
 800a8cc:	f04f 37ff 	mov.w	r7, #4294967295
 800a8d0:	e7e6      	b.n	800a8a0 <_strtoul_l.constprop.0+0x78>
 800a8d2:	1c7b      	adds	r3, r7, #1
 800a8d4:	d106      	bne.n	800a8e4 <_strtoul_l.constprop.0+0xbc>
 800a8d6:	2322      	movs	r3, #34	; 0x22
 800a8d8:	4638      	mov	r0, r7
 800a8da:	f8ce 3000 	str.w	r3, [lr]
 800a8de:	b932      	cbnz	r2, 800a8ee <_strtoul_l.constprop.0+0xc6>
 800a8e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8e4:	b106      	cbz	r6, 800a8e8 <_strtoul_l.constprop.0+0xc0>
 800a8e6:	4240      	negs	r0, r0
 800a8e8:	2a00      	cmp	r2, #0
 800a8ea:	d0f9      	beq.n	800a8e0 <_strtoul_l.constprop.0+0xb8>
 800a8ec:	b107      	cbz	r7, 800a8f0 <_strtoul_l.constprop.0+0xc8>
 800a8ee:	1e69      	subs	r1, r5, #1
 800a8f0:	6011      	str	r1, [r2, #0]
 800a8f2:	e7f5      	b.n	800a8e0 <_strtoul_l.constprop.0+0xb8>
 800a8f4:	2430      	movs	r4, #48	; 0x30
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1b5      	bne.n	800a866 <_strtoul_l.constprop.0+0x3e>
 800a8fa:	2308      	movs	r3, #8
 800a8fc:	e7b3      	b.n	800a866 <_strtoul_l.constprop.0+0x3e>
 800a8fe:	2c30      	cmp	r4, #48	; 0x30
 800a900:	d0a9      	beq.n	800a856 <_strtoul_l.constprop.0+0x2e>
 800a902:	230a      	movs	r3, #10
 800a904:	e7af      	b.n	800a866 <_strtoul_l.constprop.0+0x3e>
 800a906:	bf00      	nop
 800a908:	0800b371 	.word	0x0800b371

0800a90c <_strtoul_r>:
 800a90c:	f7ff bf8c 	b.w	800a828 <_strtoul_l.constprop.0>

0800a910 <__ascii_wctomb>:
 800a910:	4603      	mov	r3, r0
 800a912:	4608      	mov	r0, r1
 800a914:	b141      	cbz	r1, 800a928 <__ascii_wctomb+0x18>
 800a916:	2aff      	cmp	r2, #255	; 0xff
 800a918:	d904      	bls.n	800a924 <__ascii_wctomb+0x14>
 800a91a:	228a      	movs	r2, #138	; 0x8a
 800a91c:	f04f 30ff 	mov.w	r0, #4294967295
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	4770      	bx	lr
 800a924:	2001      	movs	r0, #1
 800a926:	700a      	strb	r2, [r1, #0]
 800a928:	4770      	bx	lr

0800a92a <__sfputc_r>:
 800a92a:	6893      	ldr	r3, [r2, #8]
 800a92c:	b410      	push	{r4}
 800a92e:	3b01      	subs	r3, #1
 800a930:	2b00      	cmp	r3, #0
 800a932:	6093      	str	r3, [r2, #8]
 800a934:	da07      	bge.n	800a946 <__sfputc_r+0x1c>
 800a936:	6994      	ldr	r4, [r2, #24]
 800a938:	42a3      	cmp	r3, r4
 800a93a:	db01      	blt.n	800a940 <__sfputc_r+0x16>
 800a93c:	290a      	cmp	r1, #10
 800a93e:	d102      	bne.n	800a946 <__sfputc_r+0x1c>
 800a940:	bc10      	pop	{r4}
 800a942:	f000 b933 	b.w	800abac <__swbuf_r>
 800a946:	6813      	ldr	r3, [r2, #0]
 800a948:	1c58      	adds	r0, r3, #1
 800a94a:	6010      	str	r0, [r2, #0]
 800a94c:	7019      	strb	r1, [r3, #0]
 800a94e:	4608      	mov	r0, r1
 800a950:	bc10      	pop	{r4}
 800a952:	4770      	bx	lr

0800a954 <__sfputs_r>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	4606      	mov	r6, r0
 800a958:	460f      	mov	r7, r1
 800a95a:	4614      	mov	r4, r2
 800a95c:	18d5      	adds	r5, r2, r3
 800a95e:	42ac      	cmp	r4, r5
 800a960:	d101      	bne.n	800a966 <__sfputs_r+0x12>
 800a962:	2000      	movs	r0, #0
 800a964:	e007      	b.n	800a976 <__sfputs_r+0x22>
 800a966:	463a      	mov	r2, r7
 800a968:	4630      	mov	r0, r6
 800a96a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a96e:	f7ff ffdc 	bl	800a92a <__sfputc_r>
 800a972:	1c43      	adds	r3, r0, #1
 800a974:	d1f3      	bne.n	800a95e <__sfputs_r+0xa>
 800a976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a978 <_vfiprintf_r>:
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	460d      	mov	r5, r1
 800a97e:	4614      	mov	r4, r2
 800a980:	4698      	mov	r8, r3
 800a982:	4606      	mov	r6, r0
 800a984:	b09d      	sub	sp, #116	; 0x74
 800a986:	b118      	cbz	r0, 800a990 <_vfiprintf_r+0x18>
 800a988:	6a03      	ldr	r3, [r0, #32]
 800a98a:	b90b      	cbnz	r3, 800a990 <_vfiprintf_r+0x18>
 800a98c:	f7fc f92e 	bl	8006bec <__sinit>
 800a990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a992:	07d9      	lsls	r1, r3, #31
 800a994:	d405      	bmi.n	800a9a2 <_vfiprintf_r+0x2a>
 800a996:	89ab      	ldrh	r3, [r5, #12]
 800a998:	059a      	lsls	r2, r3, #22
 800a99a:	d402      	bmi.n	800a9a2 <_vfiprintf_r+0x2a>
 800a99c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a99e:	f7fc fac3 	bl	8006f28 <__retarget_lock_acquire_recursive>
 800a9a2:	89ab      	ldrh	r3, [r5, #12]
 800a9a4:	071b      	lsls	r3, r3, #28
 800a9a6:	d501      	bpl.n	800a9ac <_vfiprintf_r+0x34>
 800a9a8:	692b      	ldr	r3, [r5, #16]
 800a9aa:	b99b      	cbnz	r3, 800a9d4 <_vfiprintf_r+0x5c>
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f000 f93a 	bl	800ac28 <__swsetup_r>
 800a9b4:	b170      	cbz	r0, 800a9d4 <_vfiprintf_r+0x5c>
 800a9b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9b8:	07dc      	lsls	r4, r3, #31
 800a9ba:	d504      	bpl.n	800a9c6 <_vfiprintf_r+0x4e>
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c0:	b01d      	add	sp, #116	; 0x74
 800a9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c6:	89ab      	ldrh	r3, [r5, #12]
 800a9c8:	0598      	lsls	r0, r3, #22
 800a9ca:	d4f7      	bmi.n	800a9bc <_vfiprintf_r+0x44>
 800a9cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ce:	f7fc faac 	bl	8006f2a <__retarget_lock_release_recursive>
 800a9d2:	e7f3      	b.n	800a9bc <_vfiprintf_r+0x44>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d8:	2320      	movs	r3, #32
 800a9da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9de:	2330      	movs	r3, #48	; 0x30
 800a9e0:	f04f 0901 	mov.w	r9, #1
 800a9e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800ab98 <_vfiprintf_r+0x220>
 800a9ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9f0:	4623      	mov	r3, r4
 800a9f2:	469a      	mov	sl, r3
 800a9f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9f8:	b10a      	cbz	r2, 800a9fe <_vfiprintf_r+0x86>
 800a9fa:	2a25      	cmp	r2, #37	; 0x25
 800a9fc:	d1f9      	bne.n	800a9f2 <_vfiprintf_r+0x7a>
 800a9fe:	ebba 0b04 	subs.w	fp, sl, r4
 800aa02:	d00b      	beq.n	800aa1c <_vfiprintf_r+0xa4>
 800aa04:	465b      	mov	r3, fp
 800aa06:	4622      	mov	r2, r4
 800aa08:	4629      	mov	r1, r5
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f7ff ffa2 	bl	800a954 <__sfputs_r>
 800aa10:	3001      	adds	r0, #1
 800aa12:	f000 80a9 	beq.w	800ab68 <_vfiprintf_r+0x1f0>
 800aa16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa18:	445a      	add	r2, fp
 800aa1a:	9209      	str	r2, [sp, #36]	; 0x24
 800aa1c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f000 80a1 	beq.w	800ab68 <_vfiprintf_r+0x1f0>
 800aa26:	2300      	movs	r3, #0
 800aa28:	f04f 32ff 	mov.w	r2, #4294967295
 800aa2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa30:	f10a 0a01 	add.w	sl, sl, #1
 800aa34:	9304      	str	r3, [sp, #16]
 800aa36:	9307      	str	r3, [sp, #28]
 800aa38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa3c:	931a      	str	r3, [sp, #104]	; 0x68
 800aa3e:	4654      	mov	r4, sl
 800aa40:	2205      	movs	r2, #5
 800aa42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa46:	4854      	ldr	r0, [pc, #336]	; (800ab98 <_vfiprintf_r+0x220>)
 800aa48:	f7fc fa70 	bl	8006f2c <memchr>
 800aa4c:	9a04      	ldr	r2, [sp, #16]
 800aa4e:	b9d8      	cbnz	r0, 800aa88 <_vfiprintf_r+0x110>
 800aa50:	06d1      	lsls	r1, r2, #27
 800aa52:	bf44      	itt	mi
 800aa54:	2320      	movmi	r3, #32
 800aa56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa5a:	0713      	lsls	r3, r2, #28
 800aa5c:	bf44      	itt	mi
 800aa5e:	232b      	movmi	r3, #43	; 0x2b
 800aa60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa64:	f89a 3000 	ldrb.w	r3, [sl]
 800aa68:	2b2a      	cmp	r3, #42	; 0x2a
 800aa6a:	d015      	beq.n	800aa98 <_vfiprintf_r+0x120>
 800aa6c:	4654      	mov	r4, sl
 800aa6e:	2000      	movs	r0, #0
 800aa70:	f04f 0c0a 	mov.w	ip, #10
 800aa74:	9a07      	ldr	r2, [sp, #28]
 800aa76:	4621      	mov	r1, r4
 800aa78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa7c:	3b30      	subs	r3, #48	; 0x30
 800aa7e:	2b09      	cmp	r3, #9
 800aa80:	d94d      	bls.n	800ab1e <_vfiprintf_r+0x1a6>
 800aa82:	b1b0      	cbz	r0, 800aab2 <_vfiprintf_r+0x13a>
 800aa84:	9207      	str	r2, [sp, #28]
 800aa86:	e014      	b.n	800aab2 <_vfiprintf_r+0x13a>
 800aa88:	eba0 0308 	sub.w	r3, r0, r8
 800aa8c:	fa09 f303 	lsl.w	r3, r9, r3
 800aa90:	4313      	orrs	r3, r2
 800aa92:	46a2      	mov	sl, r4
 800aa94:	9304      	str	r3, [sp, #16]
 800aa96:	e7d2      	b.n	800aa3e <_vfiprintf_r+0xc6>
 800aa98:	9b03      	ldr	r3, [sp, #12]
 800aa9a:	1d19      	adds	r1, r3, #4
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	9103      	str	r1, [sp, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	bfbb      	ittet	lt
 800aaa4:	425b      	neglt	r3, r3
 800aaa6:	f042 0202 	orrlt.w	r2, r2, #2
 800aaaa:	9307      	strge	r3, [sp, #28]
 800aaac:	9307      	strlt	r3, [sp, #28]
 800aaae:	bfb8      	it	lt
 800aab0:	9204      	strlt	r2, [sp, #16]
 800aab2:	7823      	ldrb	r3, [r4, #0]
 800aab4:	2b2e      	cmp	r3, #46	; 0x2e
 800aab6:	d10c      	bne.n	800aad2 <_vfiprintf_r+0x15a>
 800aab8:	7863      	ldrb	r3, [r4, #1]
 800aaba:	2b2a      	cmp	r3, #42	; 0x2a
 800aabc:	d134      	bne.n	800ab28 <_vfiprintf_r+0x1b0>
 800aabe:	9b03      	ldr	r3, [sp, #12]
 800aac0:	3402      	adds	r4, #2
 800aac2:	1d1a      	adds	r2, r3, #4
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	9203      	str	r2, [sp, #12]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	bfb8      	it	lt
 800aacc:	f04f 33ff 	movlt.w	r3, #4294967295
 800aad0:	9305      	str	r3, [sp, #20]
 800aad2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab9c <_vfiprintf_r+0x224>
 800aad6:	2203      	movs	r2, #3
 800aad8:	4650      	mov	r0, sl
 800aada:	7821      	ldrb	r1, [r4, #0]
 800aadc:	f7fc fa26 	bl	8006f2c <memchr>
 800aae0:	b138      	cbz	r0, 800aaf2 <_vfiprintf_r+0x17a>
 800aae2:	2240      	movs	r2, #64	; 0x40
 800aae4:	9b04      	ldr	r3, [sp, #16]
 800aae6:	eba0 000a 	sub.w	r0, r0, sl
 800aaea:	4082      	lsls	r2, r0
 800aaec:	4313      	orrs	r3, r2
 800aaee:	3401      	adds	r4, #1
 800aaf0:	9304      	str	r3, [sp, #16]
 800aaf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf6:	2206      	movs	r2, #6
 800aaf8:	4829      	ldr	r0, [pc, #164]	; (800aba0 <_vfiprintf_r+0x228>)
 800aafa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aafe:	f7fc fa15 	bl	8006f2c <memchr>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d03f      	beq.n	800ab86 <_vfiprintf_r+0x20e>
 800ab06:	4b27      	ldr	r3, [pc, #156]	; (800aba4 <_vfiprintf_r+0x22c>)
 800ab08:	bb1b      	cbnz	r3, 800ab52 <_vfiprintf_r+0x1da>
 800ab0a:	9b03      	ldr	r3, [sp, #12]
 800ab0c:	3307      	adds	r3, #7
 800ab0e:	f023 0307 	bic.w	r3, r3, #7
 800ab12:	3308      	adds	r3, #8
 800ab14:	9303      	str	r3, [sp, #12]
 800ab16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab18:	443b      	add	r3, r7
 800ab1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab1c:	e768      	b.n	800a9f0 <_vfiprintf_r+0x78>
 800ab1e:	460c      	mov	r4, r1
 800ab20:	2001      	movs	r0, #1
 800ab22:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab26:	e7a6      	b.n	800aa76 <_vfiprintf_r+0xfe>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f04f 0c0a 	mov.w	ip, #10
 800ab2e:	4619      	mov	r1, r3
 800ab30:	3401      	adds	r4, #1
 800ab32:	9305      	str	r3, [sp, #20]
 800ab34:	4620      	mov	r0, r4
 800ab36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab3a:	3a30      	subs	r2, #48	; 0x30
 800ab3c:	2a09      	cmp	r2, #9
 800ab3e:	d903      	bls.n	800ab48 <_vfiprintf_r+0x1d0>
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d0c6      	beq.n	800aad2 <_vfiprintf_r+0x15a>
 800ab44:	9105      	str	r1, [sp, #20]
 800ab46:	e7c4      	b.n	800aad2 <_vfiprintf_r+0x15a>
 800ab48:	4604      	mov	r4, r0
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab50:	e7f0      	b.n	800ab34 <_vfiprintf_r+0x1bc>
 800ab52:	ab03      	add	r3, sp, #12
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	462a      	mov	r2, r5
 800ab58:	4630      	mov	r0, r6
 800ab5a:	4b13      	ldr	r3, [pc, #76]	; (800aba8 <_vfiprintf_r+0x230>)
 800ab5c:	a904      	add	r1, sp, #16
 800ab5e:	f7fb f9fb 	bl	8005f58 <_printf_float>
 800ab62:	4607      	mov	r7, r0
 800ab64:	1c78      	adds	r0, r7, #1
 800ab66:	d1d6      	bne.n	800ab16 <_vfiprintf_r+0x19e>
 800ab68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab6a:	07d9      	lsls	r1, r3, #31
 800ab6c:	d405      	bmi.n	800ab7a <_vfiprintf_r+0x202>
 800ab6e:	89ab      	ldrh	r3, [r5, #12]
 800ab70:	059a      	lsls	r2, r3, #22
 800ab72:	d402      	bmi.n	800ab7a <_vfiprintf_r+0x202>
 800ab74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab76:	f7fc f9d8 	bl	8006f2a <__retarget_lock_release_recursive>
 800ab7a:	89ab      	ldrh	r3, [r5, #12]
 800ab7c:	065b      	lsls	r3, r3, #25
 800ab7e:	f53f af1d 	bmi.w	800a9bc <_vfiprintf_r+0x44>
 800ab82:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab84:	e71c      	b.n	800a9c0 <_vfiprintf_r+0x48>
 800ab86:	ab03      	add	r3, sp, #12
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	462a      	mov	r2, r5
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	4b06      	ldr	r3, [pc, #24]	; (800aba8 <_vfiprintf_r+0x230>)
 800ab90:	a904      	add	r1, sp, #16
 800ab92:	f7fb fc81 	bl	8006498 <_printf_i>
 800ab96:	e7e4      	b.n	800ab62 <_vfiprintf_r+0x1ea>
 800ab98:	0800b471 	.word	0x0800b471
 800ab9c:	0800b477 	.word	0x0800b477
 800aba0:	0800b47b 	.word	0x0800b47b
 800aba4:	08005f59 	.word	0x08005f59
 800aba8:	0800a955 	.word	0x0800a955

0800abac <__swbuf_r>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	460e      	mov	r6, r1
 800abb0:	4614      	mov	r4, r2
 800abb2:	4605      	mov	r5, r0
 800abb4:	b118      	cbz	r0, 800abbe <__swbuf_r+0x12>
 800abb6:	6a03      	ldr	r3, [r0, #32]
 800abb8:	b90b      	cbnz	r3, 800abbe <__swbuf_r+0x12>
 800abba:	f7fc f817 	bl	8006bec <__sinit>
 800abbe:	69a3      	ldr	r3, [r4, #24]
 800abc0:	60a3      	str	r3, [r4, #8]
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	071a      	lsls	r2, r3, #28
 800abc6:	d525      	bpl.n	800ac14 <__swbuf_r+0x68>
 800abc8:	6923      	ldr	r3, [r4, #16]
 800abca:	b31b      	cbz	r3, 800ac14 <__swbuf_r+0x68>
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	6922      	ldr	r2, [r4, #16]
 800abd0:	b2f6      	uxtb	r6, r6
 800abd2:	1a98      	subs	r0, r3, r2
 800abd4:	6963      	ldr	r3, [r4, #20]
 800abd6:	4637      	mov	r7, r6
 800abd8:	4283      	cmp	r3, r0
 800abda:	dc04      	bgt.n	800abe6 <__swbuf_r+0x3a>
 800abdc:	4621      	mov	r1, r4
 800abde:	4628      	mov	r0, r5
 800abe0:	f7ff f970 	bl	8009ec4 <_fflush_r>
 800abe4:	b9e0      	cbnz	r0, 800ac20 <__swbuf_r+0x74>
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	3b01      	subs	r3, #1
 800abea:	60a3      	str	r3, [r4, #8]
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	6022      	str	r2, [r4, #0]
 800abf2:	701e      	strb	r6, [r3, #0]
 800abf4:	6962      	ldr	r2, [r4, #20]
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d004      	beq.n	800ac06 <__swbuf_r+0x5a>
 800abfc:	89a3      	ldrh	r3, [r4, #12]
 800abfe:	07db      	lsls	r3, r3, #31
 800ac00:	d506      	bpl.n	800ac10 <__swbuf_r+0x64>
 800ac02:	2e0a      	cmp	r6, #10
 800ac04:	d104      	bne.n	800ac10 <__swbuf_r+0x64>
 800ac06:	4621      	mov	r1, r4
 800ac08:	4628      	mov	r0, r5
 800ac0a:	f7ff f95b 	bl	8009ec4 <_fflush_r>
 800ac0e:	b938      	cbnz	r0, 800ac20 <__swbuf_r+0x74>
 800ac10:	4638      	mov	r0, r7
 800ac12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac14:	4621      	mov	r1, r4
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 f806 	bl	800ac28 <__swsetup_r>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d0d5      	beq.n	800abcc <__swbuf_r+0x20>
 800ac20:	f04f 37ff 	mov.w	r7, #4294967295
 800ac24:	e7f4      	b.n	800ac10 <__swbuf_r+0x64>
	...

0800ac28 <__swsetup_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4b2a      	ldr	r3, [pc, #168]	; (800acd4 <__swsetup_r+0xac>)
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	6818      	ldr	r0, [r3, #0]
 800ac30:	460c      	mov	r4, r1
 800ac32:	b118      	cbz	r0, 800ac3c <__swsetup_r+0x14>
 800ac34:	6a03      	ldr	r3, [r0, #32]
 800ac36:	b90b      	cbnz	r3, 800ac3c <__swsetup_r+0x14>
 800ac38:	f7fb ffd8 	bl	8006bec <__sinit>
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac42:	0718      	lsls	r0, r3, #28
 800ac44:	d422      	bmi.n	800ac8c <__swsetup_r+0x64>
 800ac46:	06d9      	lsls	r1, r3, #27
 800ac48:	d407      	bmi.n	800ac5a <__swsetup_r+0x32>
 800ac4a:	2309      	movs	r3, #9
 800ac4c:	602b      	str	r3, [r5, #0]
 800ac4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac52:	f04f 30ff 	mov.w	r0, #4294967295
 800ac56:	81a3      	strh	r3, [r4, #12]
 800ac58:	e034      	b.n	800acc4 <__swsetup_r+0x9c>
 800ac5a:	0758      	lsls	r0, r3, #29
 800ac5c:	d512      	bpl.n	800ac84 <__swsetup_r+0x5c>
 800ac5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac60:	b141      	cbz	r1, 800ac74 <__swsetup_r+0x4c>
 800ac62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac66:	4299      	cmp	r1, r3
 800ac68:	d002      	beq.n	800ac70 <__swsetup_r+0x48>
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	f7fc fffc 	bl	8007c68 <_free_r>
 800ac70:	2300      	movs	r3, #0
 800ac72:	6363      	str	r3, [r4, #52]	; 0x34
 800ac74:	89a3      	ldrh	r3, [r4, #12]
 800ac76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac7a:	81a3      	strh	r3, [r4, #12]
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	6063      	str	r3, [r4, #4]
 800ac80:	6923      	ldr	r3, [r4, #16]
 800ac82:	6023      	str	r3, [r4, #0]
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	f043 0308 	orr.w	r3, r3, #8
 800ac8a:	81a3      	strh	r3, [r4, #12]
 800ac8c:	6923      	ldr	r3, [r4, #16]
 800ac8e:	b94b      	cbnz	r3, 800aca4 <__swsetup_r+0x7c>
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac9a:	d003      	beq.n	800aca4 <__swsetup_r+0x7c>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f000 f88b 	bl	800adba <__smakebuf_r>
 800aca4:	89a0      	ldrh	r0, [r4, #12]
 800aca6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acaa:	f010 0301 	ands.w	r3, r0, #1
 800acae:	d00a      	beq.n	800acc6 <__swsetup_r+0x9e>
 800acb0:	2300      	movs	r3, #0
 800acb2:	60a3      	str	r3, [r4, #8]
 800acb4:	6963      	ldr	r3, [r4, #20]
 800acb6:	425b      	negs	r3, r3
 800acb8:	61a3      	str	r3, [r4, #24]
 800acba:	6923      	ldr	r3, [r4, #16]
 800acbc:	b943      	cbnz	r3, 800acd0 <__swsetup_r+0xa8>
 800acbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acc2:	d1c4      	bne.n	800ac4e <__swsetup_r+0x26>
 800acc4:	bd38      	pop	{r3, r4, r5, pc}
 800acc6:	0781      	lsls	r1, r0, #30
 800acc8:	bf58      	it	pl
 800acca:	6963      	ldrpl	r3, [r4, #20]
 800accc:	60a3      	str	r3, [r4, #8]
 800acce:	e7f4      	b.n	800acba <__swsetup_r+0x92>
 800acd0:	2000      	movs	r0, #0
 800acd2:	e7f7      	b.n	800acc4 <__swsetup_r+0x9c>
 800acd4:	2000008c 	.word	0x2000008c

0800acd8 <_raise_r>:
 800acd8:	291f      	cmp	r1, #31
 800acda:	b538      	push	{r3, r4, r5, lr}
 800acdc:	4604      	mov	r4, r0
 800acde:	460d      	mov	r5, r1
 800ace0:	d904      	bls.n	800acec <_raise_r+0x14>
 800ace2:	2316      	movs	r3, #22
 800ace4:	6003      	str	r3, [r0, #0]
 800ace6:	f04f 30ff 	mov.w	r0, #4294967295
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800acee:	b112      	cbz	r2, 800acf6 <_raise_r+0x1e>
 800acf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acf4:	b94b      	cbnz	r3, 800ad0a <_raise_r+0x32>
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 f830 	bl	800ad5c <_getpid_r>
 800acfc:	462a      	mov	r2, r5
 800acfe:	4601      	mov	r1, r0
 800ad00:	4620      	mov	r0, r4
 800ad02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad06:	f000 b817 	b.w	800ad38 <_kill_r>
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d00a      	beq.n	800ad24 <_raise_r+0x4c>
 800ad0e:	1c59      	adds	r1, r3, #1
 800ad10:	d103      	bne.n	800ad1a <_raise_r+0x42>
 800ad12:	2316      	movs	r3, #22
 800ad14:	6003      	str	r3, [r0, #0]
 800ad16:	2001      	movs	r0, #1
 800ad18:	e7e7      	b.n	800acea <_raise_r+0x12>
 800ad1a:	2400      	movs	r4, #0
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad22:	4798      	blx	r3
 800ad24:	2000      	movs	r0, #0
 800ad26:	e7e0      	b.n	800acea <_raise_r+0x12>

0800ad28 <raise>:
 800ad28:	4b02      	ldr	r3, [pc, #8]	; (800ad34 <raise+0xc>)
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	6818      	ldr	r0, [r3, #0]
 800ad2e:	f7ff bfd3 	b.w	800acd8 <_raise_r>
 800ad32:	bf00      	nop
 800ad34:	2000008c 	.word	0x2000008c

0800ad38 <_kill_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	4d06      	ldr	r5, [pc, #24]	; (800ad58 <_kill_r+0x20>)
 800ad3e:	4604      	mov	r4, r0
 800ad40:	4608      	mov	r0, r1
 800ad42:	4611      	mov	r1, r2
 800ad44:	602b      	str	r3, [r5, #0]
 800ad46:	f7f8 f95e 	bl	8003006 <_kill>
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	d102      	bne.n	800ad54 <_kill_r+0x1c>
 800ad4e:	682b      	ldr	r3, [r5, #0]
 800ad50:	b103      	cbz	r3, 800ad54 <_kill_r+0x1c>
 800ad52:	6023      	str	r3, [r4, #0]
 800ad54:	bd38      	pop	{r3, r4, r5, pc}
 800ad56:	bf00      	nop
 800ad58:	200005bc 	.word	0x200005bc

0800ad5c <_getpid_r>:
 800ad5c:	f7f8 b94c 	b.w	8002ff8 <_getpid>

0800ad60 <_malloc_usable_size_r>:
 800ad60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad64:	1f18      	subs	r0, r3, #4
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	bfbc      	itt	lt
 800ad6a:	580b      	ldrlt	r3, [r1, r0]
 800ad6c:	18c0      	addlt	r0, r0, r3
 800ad6e:	4770      	bx	lr

0800ad70 <__swhatbuf_r>:
 800ad70:	b570      	push	{r4, r5, r6, lr}
 800ad72:	460c      	mov	r4, r1
 800ad74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad78:	4615      	mov	r5, r2
 800ad7a:	2900      	cmp	r1, #0
 800ad7c:	461e      	mov	r6, r3
 800ad7e:	b096      	sub	sp, #88	; 0x58
 800ad80:	da0c      	bge.n	800ad9c <__swhatbuf_r+0x2c>
 800ad82:	89a3      	ldrh	r3, [r4, #12]
 800ad84:	2100      	movs	r1, #0
 800ad86:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ad8a:	bf0c      	ite	eq
 800ad8c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ad90:	2340      	movne	r3, #64	; 0x40
 800ad92:	2000      	movs	r0, #0
 800ad94:	6031      	str	r1, [r6, #0]
 800ad96:	602b      	str	r3, [r5, #0]
 800ad98:	b016      	add	sp, #88	; 0x58
 800ad9a:	bd70      	pop	{r4, r5, r6, pc}
 800ad9c:	466a      	mov	r2, sp
 800ad9e:	f000 f849 	bl	800ae34 <_fstat_r>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	dbed      	blt.n	800ad82 <__swhatbuf_r+0x12>
 800ada6:	9901      	ldr	r1, [sp, #4]
 800ada8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800adac:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800adb0:	4259      	negs	r1, r3
 800adb2:	4159      	adcs	r1, r3
 800adb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adb8:	e7eb      	b.n	800ad92 <__swhatbuf_r+0x22>

0800adba <__smakebuf_r>:
 800adba:	898b      	ldrh	r3, [r1, #12]
 800adbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adbe:	079d      	lsls	r5, r3, #30
 800adc0:	4606      	mov	r6, r0
 800adc2:	460c      	mov	r4, r1
 800adc4:	d507      	bpl.n	800add6 <__smakebuf_r+0x1c>
 800adc6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adca:	6023      	str	r3, [r4, #0]
 800adcc:	6123      	str	r3, [r4, #16]
 800adce:	2301      	movs	r3, #1
 800add0:	6163      	str	r3, [r4, #20]
 800add2:	b002      	add	sp, #8
 800add4:	bd70      	pop	{r4, r5, r6, pc}
 800add6:	466a      	mov	r2, sp
 800add8:	ab01      	add	r3, sp, #4
 800adda:	f7ff ffc9 	bl	800ad70 <__swhatbuf_r>
 800adde:	9900      	ldr	r1, [sp, #0]
 800ade0:	4605      	mov	r5, r0
 800ade2:	4630      	mov	r0, r6
 800ade4:	f7fc ffb0 	bl	8007d48 <_malloc_r>
 800ade8:	b948      	cbnz	r0, 800adfe <__smakebuf_r+0x44>
 800adea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adee:	059a      	lsls	r2, r3, #22
 800adf0:	d4ef      	bmi.n	800add2 <__smakebuf_r+0x18>
 800adf2:	f023 0303 	bic.w	r3, r3, #3
 800adf6:	f043 0302 	orr.w	r3, r3, #2
 800adfa:	81a3      	strh	r3, [r4, #12]
 800adfc:	e7e3      	b.n	800adc6 <__smakebuf_r+0xc>
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	6020      	str	r0, [r4, #0]
 800ae02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae06:	81a3      	strh	r3, [r4, #12]
 800ae08:	9b00      	ldr	r3, [sp, #0]
 800ae0a:	6120      	str	r0, [r4, #16]
 800ae0c:	6163      	str	r3, [r4, #20]
 800ae0e:	9b01      	ldr	r3, [sp, #4]
 800ae10:	b15b      	cbz	r3, 800ae2a <__smakebuf_r+0x70>
 800ae12:	4630      	mov	r0, r6
 800ae14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae18:	f000 f81e 	bl	800ae58 <_isatty_r>
 800ae1c:	b128      	cbz	r0, 800ae2a <__smakebuf_r+0x70>
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	f023 0303 	bic.w	r3, r3, #3
 800ae24:	f043 0301 	orr.w	r3, r3, #1
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	431d      	orrs	r5, r3
 800ae2e:	81a5      	strh	r5, [r4, #12]
 800ae30:	e7cf      	b.n	800add2 <__smakebuf_r+0x18>
	...

0800ae34 <_fstat_r>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	2300      	movs	r3, #0
 800ae38:	4d06      	ldr	r5, [pc, #24]	; (800ae54 <_fstat_r+0x20>)
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	4608      	mov	r0, r1
 800ae3e:	4611      	mov	r1, r2
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	f7f8 f93e 	bl	80030c2 <_fstat>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	d102      	bne.n	800ae50 <_fstat_r+0x1c>
 800ae4a:	682b      	ldr	r3, [r5, #0]
 800ae4c:	b103      	cbz	r3, 800ae50 <_fstat_r+0x1c>
 800ae4e:	6023      	str	r3, [r4, #0]
 800ae50:	bd38      	pop	{r3, r4, r5, pc}
 800ae52:	bf00      	nop
 800ae54:	200005bc 	.word	0x200005bc

0800ae58 <_isatty_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	4d05      	ldr	r5, [pc, #20]	; (800ae74 <_isatty_r+0x1c>)
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4608      	mov	r0, r1
 800ae62:	602b      	str	r3, [r5, #0]
 800ae64:	f7f8 f93c 	bl	80030e0 <_isatty>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_isatty_r+0x1a>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_isatty_r+0x1a>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	200005bc 	.word	0x200005bc

0800ae78 <_init>:
 800ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7a:	bf00      	nop
 800ae7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7e:	bc08      	pop	{r3}
 800ae80:	469e      	mov	lr, r3
 800ae82:	4770      	bx	lr

0800ae84 <_fini>:
 800ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae86:	bf00      	nop
 800ae88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae8a:	bc08      	pop	{r3}
 800ae8c:	469e      	mov	lr, r3
 800ae8e:	4770      	bx	lr
